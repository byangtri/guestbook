{
	"info": {
		"_postman_id": "30124f18-b30f-4cf4-85e8-a82e7ca568f4",
		"name": "QTestManager Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "SmokeTest",
			"item": [
				{
					"name": "Logout",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code + \" -  Login\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "201 - Logout  - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Login",
					"item": [
						{
							"name": "200 - Login - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"if (pm.response.code === 200) {",
											"    //assert status",
											"    pm.test(\"Response status: \" + pm.response.code + \" -  Login\", function() {",
											"        pm.response.to.have.status(200);",
											"    });",
											"    //assert response body",
											"    var jsonData = pm.response.json();",
											"    pm.environment.set(\"accessToken\", jsonData.access_token);",
											"    pm.environment.set(\"tokenType\", jsonData.token_type);",
											"} else {",
											"    //other mark failed",
											"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
											"        pm.response.to.have.status(200);",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic dGFtdG1uZ3V5ZW46"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{qtestUrl}}/oauth/token",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"oauth",
										"token"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Submit a Defect",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"pm.test(\"Status code should be returned as 200-OK\", () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"    ",
													"    // Create login cookie of user",
													"    const rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    const base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", `UserContextToken=${base64}`);",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get site admin id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Response data contains site admin user property\", function() {",
													"        pm.expect(jsonData.items[0].username).to.eql(pm.environment.get(\"username\"));",
													"        pm.expect(pm.response.text()).to.include(\"email\");",
													"        pm.expect(jsonData.items[0].first_name).to.eql(pm.environment.get(\"firstName\"));",
													"        pm.expect(jsonData.items[0].last_name).to.eql(pm.environment.get(\"lastName\"));",
													"        pm.expect(pm.response.text()).to.include(\"status\");",
													"        pm.expect(pm.response.text()).to.include(\"timezone_offset\");",
													"        pm.expect(pm.response.text()).to.include(\"country_name\");",
													"    });",
													"    ",
													"    pm.environment.set(\"siteAdminId\", jsonData.items[0].id);",
													"",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"username\": \"{{username}}\",\r\n  \"first_name\": \"{{firstName}}\",\r\n  \"last_name\": \"{{lastName}}\",\r\n  \"email\": \"{{username}}\",\r\n  \"password\": \"{{password}}\"\r\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/users/search?username={{username}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"users",
												"search"
											],
											"query": [
												{
													"key": "username",
													"value": "{{username}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Get user id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Response data contains data of apiuser1@qas.com\", function() {",
													"        pm.expect(jsonData.items[0].username).to.eql(pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"        pm.expect(pm.response.text()).to.include(\"email\");",
													"        pm.expect(jsonData.items[0].first_name).to.eql(\"API\");",
													"        pm.expect(jsonData.items[0].last_name).to.eql(\"User 1\");",
													"        pm.expect(pm.response.text()).to.include(\"status\");",
													"        pm.expect(pm.response.text()).to.include(\"timezone_offset\");",
													"        pm.expect(pm.response.text()).to.include(\"country_name\");",
													"    });",
													"    ",
													"    pm.environment.set(\"userId\", jsonData.items[0].id);",
													"",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"assignedUser2\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"pm.environment.set(\"firstName2\", \"API\");",
													"pm.environment.set(\"lastName2\", \"User 1\");",
													"pm.environment.set(\"email2\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/users/search?username={{assignedUser2}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"users",
												"search"
											],
											"query": [
												{
													"key": "username",
													"value": "{{assignedUser2}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 201;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"pm.test(\"Status code should be returned as 201-Created\", () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"",
													"if (result) {",
													"   //get response body",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"projectId1\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate\", jsonData.start_date);",
													"    pm.environment.set(\"projectEndDate\", jsonData.end_date);",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"let startDate = new Date();",
													"let endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"// Function to add 0 before datetime value if it is less than 10",
													"Number.prototype.padLeft = function(base, chr) {",
													"    var len = (String(base || 10).length - String(this).length) + 1;",
													"    return len > 0 ? new Array(len).join(chr || '0') + this : this;",
													"};",
													"",
													"// Generate dynamic string for ProfileName",
													"let uniqueString = new Date(),",
													"    uniqueStringFormat = [(uniqueString.getMonth() + 1).padLeft(),",
													"        uniqueString.getDate().padLeft(),",
													"        uniqueString.getFullYear(),",
													"    ].join('') + '-' + [uniqueString.getHours().padLeft(),",
													"        uniqueString.getMinutes().padLeft(),",
													"        uniqueString.getSeconds().padLeft(),",
													"        uniqueString.getMilliseconds().padLeft()",
													"    ].join('');",
													"",
													"const projectName = \"qTest API - Postman\";",
													"pm.environment.set(\"projectName\", `${projectName}${uniqueStringFormat}`);",
													"",
													"pm.environment.set(\"startDate\", startDate.toISOString());",
													"pm.environment.set(\"endDate\", endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{projectName}}\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n     \"{{username}}\"\n  ],\n  \"automation\": true\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 201;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"pm.test(\"Status code should be returned as 201-Created\", () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"",
													"if (result) {",
													"   //get response body",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"projectId2\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate2\", jsonData.start_date);",
													"    pm.environment.set(\"projectEndDate2\", jsonData.end_date);",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"let startDate = new Date();",
													"let endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"// Function to add 0 before datetime value if it is less than 10",
													"Number.prototype.padLeft = function(base, chr) {",
													"    var len = (String(base || 10).length - String(this).length) + 1;",
													"    return len > 0 ? new Array(len).join(chr || '0') + this : this;",
													"};",
													"",
													"// Generate dynamic string for ProfileName",
													"let uniqueString = new Date(),",
													"    uniqueStringFormat = [(uniqueString.getMonth() + 1).padLeft(),",
													"        uniqueString.getDate().padLeft(),",
													"        uniqueString.getFullYear(),",
													"    ].join('') + '-' + [uniqueString.getHours().padLeft(),",
													"        uniqueString.getMinutes().padLeft(),",
													"        uniqueString.getSeconds().padLeft(),",
													"        uniqueString.getMilliseconds().padLeft()",
													"    ].join('');",
													"",
													"const projectName = \"qTest API - Postman\";",
													"pm.environment.set(\"projectName2\", `${projectName}${uniqueStringFormat}`);",
													"",
													"pm.environment.set(\"startDate2\", startDate.toISOString());",
													"pm.environment.set(\"endDate2\", endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{projectName2}}\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate2}}\",\n  \"end_date\": \"{{endDate2}}\",\n  \"admins\": [\n     \"{{username}}\",\"{{assignedUser2}}\"\n  ],\n  \"automation\": true\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Gets all fields of internal defect - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"const fieldData = {",
													"    \"field_id\": 0,",
													"    \"field_name\": \"name\"",
													"};",
													"let modifiedDefectFields = [];",
													"",
													"pm.test(\"Status code should be returned as 200-OK\", () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    const jsonData = pm.response.json();",
													"    // Get each field items data from the returned JSON response",
													"    jsonData.forEach(function(item) {",
													"        let fieldDataItem = JSON.parse(JSON.stringify(fieldData));",
													"        fieldDataItem.field_id = item.id;",
													"        fieldDataItem.field_name = item.label;",
													"        modifiedDefectFields.add(fieldDataItem);",
													"    });",
													"    ",
													"    // Set the returned data in to environment variable to reuse",
													"    pm.environment.set(\"defectFields\", JSON.stringify(jsonData));",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId1}}/settings/defects/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId1}}",
												"settings",
												"defects",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Gets all fields of internal defect 2 - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"const fieldData = {",
													"    \"field_id\": 0,",
													"    \"field_name\": \"name\"",
													"};",
													"let modifiedDefectFields = [];",
													"",
													"pm.test(\"Status code should be returned as 200-OK\", () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    const jsonData = pm.response.json();",
													"    // Get each field items data from the returned JSON response",
													"    jsonData.forEach(function(item) {",
													"        let fieldDataItem = JSON.parse(JSON.stringify(fieldData));",
													"        fieldDataItem.field_id = item.id;",
													"        fieldDataItem.field_name = item.label;",
													"        modifiedDefectFields.add(fieldDataItem);",
													"    });",
													"    ",
													"    // Set the returned data in to environment variable to reuse",
													"    pm.environment.set(\"defectFields2\", JSON.stringify(jsonData));",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId2}}/settings/defects/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId2}}",
												"settings",
												"defects",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Login - Success with normal user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"pm.test(\"Status code is returned as 200-OK\", () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken1\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType1\", jsonData.token_type);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{assignedUser2}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "201 - Submit a Defect - Success with Admin user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let defectProperties = [];",
													"",
													"const defectInfo = {",
													"    \"Summary\" : \"AT Defect\",",
													"    \"Description\" : \"This is defect 1 for api testing\"",
													"};",
													"",
													"const defectFields = JSON.parse(pm.environment.get(\"defectFields\"));",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value",
													"function searchJSONItemFromList(jsonList, expectedKey, expectedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            return jsonList[i];",
													"        }",
													"    }",
													"    return null;",
													"}",
													"",
													"// Looking for and get id of the expected field from the returned defectFields",
													"Object.keys(defectInfo).forEach(function (item){",
													"    expectedDefectField = searchJSONItemFromList(defectFields, \"label\", item);    ",
													"    let defectItemInfo = {",
													"        \"field_id\" : expectedDefectField.id,",
													"        \"field_value\" : defectInfo[item],",
													"    };",
													"    defectProperties.add(defectItemInfo);",
													"});",
													"",
													"pm.environment.set(\"defectProperties\", JSON.stringify(defectProperties));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Initialize test data for verification",
													"const RESPONSE_CODE = 201;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"const expectedRel = \"self\";",
													"const expectedPid = \"DF-1\";",
													"const submitterId = pm.environment.get(\"siteAdminId\");",
													"",
													"// Define list of fields which containning field_value_name property",
													"const selectedValues = {",
													"    \"Submitter\": `${pm.environment.get(\"firstName\")} ${pm.environment.get(\"lastName\")}`,",
													"    \"Severity\": \"Average\",",
													"    \"Priority\": \"Medium\",",
													"    \"Root Cause\": \"Other\",",
													"    \"Status\": \"New\",",
													"    \"Type\": \"Bug\",",
													"    \"Reason\": \"Additional Info Needed\",",
													"    \"Category\": \"Other \"",
													"};",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value",
													"function searchJSONItemFromList(jsonList, expectedKey, expectedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            return jsonList[i];",
													"        }",
													"    }",
													"    return null;",
													"}",
													"",
													"// Implementation function to verify data of Defect Property",
													"function verifyDefectFieldProperty(reponseDefectProperties, fieldName) {",
													"    // Get defect field properties data from the JSON response",
													"    const expectedDefectFieldProperties = searchJSONItemFromList(reponseDefectProperties, \"field_name\", fieldName);",
													"",
													"    // Get defect field properties from initialization data to be used as baseline when comparision",
													"    const defectFields = pm.environment.get(\"defectFields\");",
													"    const expectedDefectFieldId = searchJSONItemFromList(JSON.parse(defectFields), \"label\", fieldName).id;",
													"    const defectProperties = pm.environment.get(\"defectProperties\");",
													"    let expectedDefectField = searchJSONItemFromList(JSON.parse(defectProperties), \"field_id\", expectedDefectFieldId);",
													"",
													"    pm.test(`- Testing property '${fieldName}':`, () => {",
													"        // Verify field_id data",
													"        pm.test(\"'field_id' should be returned correctly\", () => {",
													"            pm.expect(expectedDefectFieldProperties.field_id).to.eql(expectedDefectFieldId);",
													"        });",
													"",
													"        const allowSelectedItemFields = Object.keys(selectedValues);",
													"",
													"        // Verify field_value_name data if the expected field is combobox",
													"        if (allowSelectedItemFields.indexOf(fieldName) > -1) {",
													"            // Get JSON of the expected allow selected item field of the defects",
													"            const allowSelectedItemField = searchJSONItemFromList(JSON.parse(defectFields), \"label\", fieldName);",
													"",
													"            // Get id of the selected value item from the initialized data",
													"            const allowedValues = allowSelectedItemField.allowed_values;",
													"            const selectedValue = searchJSONItemFromList(allowedValues, \"label\", selectedValues[fieldName]);",
													"",
													"            // Verify field_value data",
													"            pm.test(\"'field_value' should be returned correctly\", () => {",
													"                pm.expect(expectedDefectFieldProperties.field_value.toString()).to.eql(selectedValue.value.toString());",
													"            });",
													"",
													"            // Verify field_value_name data",
													"            pm.test(\"'field_value_name' should be returned correctly\", () => {",
													"                pm.expect(expectedDefectFieldProperties.field_value_name).to.eql(selectedValue.label);",
													"            });",
													"        } else {",
													"            // Verify field_value data",
													"            // Specified case when verify submitted date in field properties due to returned different timezone of API",
													"            if (fieldName === \"Submitted Date\") {",
													"                const formattedSubmittedDate = pm.environment.get(\"projectStartDate\").toString().substring(0, pm.environment.get(\"projectStartDate\").indexOf(\"T\"));",
													"                pm.test(\"'field_value' should be returned correctly\", () => {",
													"                    pm.expect(expectedDefectFieldProperties.field_value).to.include(formattedSubmittedDate);",
													"                });",
													"            } else {",
													"                pm.test(\"'field_value' should be returned correctly\", () => {",
													"                    let expectedDefectFieldValue = \"\";",
													"                    if (expectedDefectField) {",
													"                        expectedDefectFieldValue = expectedDefectField.field_value;",
													"                    }",
													"                    pm.expect(expectedDefectFieldProperties.field_value).to.eql(expectedDefectFieldValue);",
													"                });",
													"            }",
													"        }",
													"    });",
													"}",
													"",
													"// Verify that response status should be returned corretly",
													"pm.test(\"Status code should be returned as 201-Created\", () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    const jsonData = pm.response.json();",
													"    const jsonDataLinks = jsonData.links;",
													"    const expectedHref = `${pm.environment.get(\"qtestUrl\")}/api/v3/projects/${pm.environment.get(\"projectId1\")}/defects/${jsonData.id}`;",
													"    const expectedUrl = `${pm.environment.get(\"qtestUrl\")}/p/${pm.environment.get(\"projectId1\")}/portal/project#tab=defects&object=17&id=${jsonData.id}`;",
													"",
													"    // Verify the returned links data",
													"    // rel",
													"    pm.test(\"'links/rel' should be returned correctly\", () => {",
													"        pm.expect(jsonDataLinks[0].rel).to.eql(expectedRel);",
													"    });",
													"",
													"    // href",
													"    pm.test(\"'link/href' should be returned correctly\", () => {",
													"        pm.expect(jsonDataLinks[0].href).to.eql(expectedHref);",
													"    });",
													"",
													"    // Verify the General information",
													"    // pid",
													"    pm.test(\"'pid' should be returned correctly\", () => {",
													"        pm.expect(jsonData.pid).to.eql(expectedPid);",
													"    });",
													"",
													"    // url",
													"    pm.test(\"'url' should be returned correctly\", () => {",
													"        pm.expect(jsonData.url).to.eql(expectedUrl);",
													"    });",
													"",
													"    // submitted_date",
													"    // Get current date to verification",
													"    // const currentDateTime = new Date();",
													"    const currentDateTime = new Date();",
													"    console.log(`currentDateTime: ${currentDateTime}`);",
													"    // Get projectStartDate",
													"    const projectStartDate = new Date(pm.environment.get(\"projectStartDate\"));",
													"    // Get submittedDate of Defect",
													"    const submittedDate = new Date(jsonData.submitted_date);",
													"    // Compare that submittedTime of Defect should be less than current date time and greater than projectStartDateTime",
													"    const compare = currentDateTime.toISOString().split(\"T\")[0] >= submittedDate.toISOString().split(\"T\")[0] && submittedDate.toISOString().split(\"T\")[0] >= projectStartDate.toISOString().split(\"T\")[0];",
													"    pm.test(\"'submitted_time' should be less than current datetime and greater than projectStartDateTime\", () => {",
													"        pm.expect(compare).to.be.true;",
													"    });",
													"",
													"    // last_modified_date",
													"    pm.test(\"'last_modified_date' should be the same as submitted_date\", () => {",
													"        pm.expect(jsonData).to.have.property(\"last_modified_date\");",
													"    });",
													"",
													"    // submitter_id",
													"    pm.test(\"'submitter_id' should be returned correctly\", () => {",
													"        pm.expect(jsonData.submitter_id).to.eql(submitterId);",
													"    });",
													"",
													"    // last_modified_user_id",
													"    pm.test(\"'last_modified_user_id' should be returned correctly\", () => {",
													"        pm.expect(jsonData.last_modified_user_id).to.eql(submitterId);",
													"    });",
													"",
													"    // web_url",
													"    pm.test(\"'web_url' should be returned correctly\", () => {",
													"        pm.expect(jsonData.web_url).to.eql(expectedUrl);",
													"    });",
													"",
													"    // Verify properties of defect",
													"    // Summary",
													"    verifyDefectFieldProperty(jsonData.properties, \"Summary\");",
													"",
													"    // Description",
													"    verifyDefectFieldProperty(jsonData.properties, \"Description\");",
													"",
													"    // Affected Release/Build",
													"    verifyDefectFieldProperty(jsonData.properties, \"Affected Release/Build\");",
													"",
													"    // Fixed Release/Build",
													"    verifyDefectFieldProperty(jsonData.properties, \"Fixed Release/Build\");",
													"",
													"    // Submitted Date",
													"    verifyDefectFieldProperty(jsonData.properties, \"Submitted Date\");",
													"",
													"    // Module",
													"    verifyDefectFieldProperty(jsonData.properties, \"Module\");",
													"",
													"    // Assigned To",
													"    verifyDefectFieldProperty(jsonData.properties, \"Assigned To\");",
													"",
													"    // Target Release/Build",
													"    verifyDefectFieldProperty(jsonData.properties, \"Target Release/Build\");",
													"",
													"    // Target Date",
													"    verifyDefectFieldProperty(jsonData.properties, \"Target Date\");",
													"",
													"    // Closed Date",
													"    verifyDefectFieldProperty(jsonData.properties, \"Closed Date\");",
													"",
													"    // Environment",
													"    verifyDefectFieldProperty(jsonData.properties, \"Environment\");",
													"",
													"    // Submitter",
													"    verifyDefectFieldProperty(jsonData.properties, \"Submitter\");",
													"",
													"    // Severity",
													"    verifyDefectFieldProperty(jsonData.properties, \"Severity\");",
													"",
													"    // Priority",
													"    verifyDefectFieldProperty(jsonData.properties, \"Priority\");",
													"",
													"    // Root Cause",
													"    verifyDefectFieldProperty(jsonData.properties, \"Root Cause\");",
													"",
													"    // Status",
													"    verifyDefectFieldProperty(jsonData.properties, \"Status\");",
													"",
													"    // Type",
													"    verifyDefectFieldProperty(jsonData.properties, \"Type\");",
													"",
													"    // Reason",
													"    verifyDefectFieldProperty(jsonData.properties, \"Reason\");",
													"",
													"    // Category",
													"    verifyDefectFieldProperty(jsonData.properties, \"Category\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"properties\": {{defectProperties}},\r\n  \"attachments\": [ {\r\n      \"name\": \"sample_file_name.txt\",\r\n      \"content_type\": \"text/plain\",\r\n      \"data\": \"dGhpcyBpcyBzYW1wbGUgdGVzdA==\"\r\n    }]\r\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId1}}/defects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId1}}",
												"defects"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Submit a Defect - Success with Normal user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let defectProperties = [];",
													"",
													"const defectInfo = {",
													"    \"Summary\" : \"AT Defect 2\",",
													"    \"Description\" : \"This is defect 2 for api testing\"",
													"};",
													"",
													"const defectFields = JSON.parse(pm.environment.get(\"defectFields2\"));",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value",
													"function searchJSONItemFromList(jsonList, expectedKey, expectedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            return jsonList[i];",
													"        }",
													"    }",
													"    return null;",
													"}",
													"",
													"// Looking for and get id of the expected field from the returned defectFields",
													"Object.keys(defectInfo).forEach(function (item){",
													"    expectedDefectField = searchJSONItemFromList(defectFields, \"label\", item);    ",
													"    let defectItemInfo = {",
													"        \"field_id\" : expectedDefectField.id,",
													"        \"field_value\" : defectInfo[item],",
													"    };",
													"    defectProperties.add(defectItemInfo);",
													"});",
													"",
													"pm.environment.set(\"defectProperties2\", JSON.stringify(defectProperties));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Initialize test data for verification",
													"const RESPONSE_CODE = 201;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"const expectedRel = \"self\";",
													"const expectedPid = \"DF-1\";",
													"const submitterId = pm.environment.get(\"userId\");",
													"",
													"// Define list of fields which containning field_value_name property",
													"const selectedValues = {",
													"    \"Submitter\": `${pm.environment.get(\"firstName2\")} ${pm.environment.get(\"lastName2\")}`,",
													"    \"Severity\": \"Average\",",
													"    \"Priority\": \"Medium\",",
													"    \"Root Cause\": \"Other\",",
													"    \"Status\": \"New\",",
													"    \"Type\": \"Bug\",",
													"    \"Reason\": \"Additional Info Needed\",",
													"    \"Category\": \"Other \"",
													"};",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value",
													"function searchJSONItemFromList(jsonList, expectedKey, expectedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            return jsonList[i];",
													"        }",
													"    }",
													"    return null;",
													"}",
													"",
													"// Implementation function to verify data of Defect Property",
													"function verifyDefectFieldProperty(reponseDefectProperties, fieldName) {",
													"    // Get defect field properties data from the JSON response",
													"    const expectedDefectFieldProperties = searchJSONItemFromList(reponseDefectProperties, \"field_name\", fieldName);",
													"",
													"    // Get defect field properties from initialization data to be used as baseline when comparision",
													"    const defectFields = pm.environment.get(\"defectFields2\");",
													"    const expectedDefectFieldId = searchJSONItemFromList(JSON.parse(defectFields), \"label\", fieldName).id;",
													"    const defectProperties = pm.environment.get(\"defectProperties2\");",
													"    let expectedDefectField = searchJSONItemFromList(JSON.parse(defectProperties), \"field_id\", expectedDefectFieldId);",
													"",
													"    pm.test(`- Testing property '${fieldName}':`, () => {",
													"        // Verify field_id data",
													"        pm.test(\"'field_id' should be returned correctly\", () => {",
													"            pm.expect(expectedDefectFieldProperties.field_id).to.eql(expectedDefectFieldId);",
													"        });",
													"",
													"        const allowSelectedItemFields = Object.keys(selectedValues);",
													"",
													"        // Verify field_value_name data if the expected field is combobox",
													"        if (allowSelectedItemFields.indexOf(fieldName) > -1) {",
													"            // Get JSON of the expected allow selected item field of the defects",
													"            const allowSelectedItemField = searchJSONItemFromList(JSON.parse(defectFields), \"label\", fieldName);",
													"",
													"            // Get id of the selected value item from the initialized data",
													"            const allowedValues = allowSelectedItemField.allowed_values;",
													"            const selectedValue = searchJSONItemFromList(allowedValues, \"label\", selectedValues[fieldName]);",
													"",
													"            // Verify field_value data",
													"            pm.test(\"'field_value' should be returned correctly\", () => {",
													"                pm.expect(expectedDefectFieldProperties.field_value.toString()).to.eql(selectedValue.value.toString());",
													"            });",
													"",
													"            // Verify field_value_name data",
													"            pm.test(\"'field_value_name' should be returned correctly\", () => {",
													"                pm.expect(expectedDefectFieldProperties.field_value_name).to.eql(selectedValue.label);",
													"            });",
													"        } else {",
													"            // Verify field_value data",
													"            // Specified case when verify submitted date in field properties due to returned different timezone of API",
													"            if (fieldName === \"Submitted Date\") {",
													"                const formattedSubmittedDate = pm.environment.get(\"projectStartDate2\").toString().substring(0, pm.environment.get(\"projectStartDate2\").indexOf(\"T\"));",
													"                pm.test(\"'field_value' should be returned correctly\", () => {",
													"                    pm.expect(expectedDefectFieldProperties.field_value).to.include(formattedSubmittedDate);",
													"                });",
													"            } else {",
													"                pm.test(\"'field_value' should be returned correctly\", () => {",
													"                    let expectedDefectFieldValue = \"\";",
													"                    if (expectedDefectField) {",
													"                        expectedDefectFieldValue = expectedDefectField.field_value;",
													"                    }",
													"                    pm.expect(expectedDefectFieldProperties.field_value).to.eql(expectedDefectFieldValue);",
													"                });",
													"            }",
													"        }",
													"    });",
													"}",
													"",
													"// Verify that response status should be returned corretly",
													"pm.test(\"Status code should be returned as 201-Created\", () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    const jsonData = pm.response.json();",
													"    const jsonDataLinks = jsonData.links;",
													"    const expectedHref = `${pm.environment.get(\"qtestUrl\")}/api/v3/projects/${pm.environment.get(\"projectId2\")}/defects/${jsonData.id}`;",
													"    const expectedUrl = `${pm.environment.get(\"qtestUrl\")}/p/${pm.environment.get(\"projectId2\")}/portal/project#tab=defects&object=17&id=${jsonData.id}`;",
													"",
													"    // Verify the returned links data",
													"    // rel",
													"    pm.test(\"'links/rel' should be returned correctly\", () => {",
													"        pm.expect(jsonDataLinks[0].rel).to.eql(expectedRel);",
													"    });",
													"",
													"    // href",
													"    pm.test(\"'link/href' should be returned correctly\", () => {",
													"        pm.expect(jsonDataLinks[0].href).to.eql(expectedHref);",
													"    });",
													"",
													"    // Verify the General information",
													"    // pid",
													"    pm.test(\"'pid' should be returned correctly\", () => {",
													"        pm.expect(jsonData.pid).to.eql(expectedPid);",
													"    });",
													"",
													"    // url",
													"    pm.test(\"'url' should be returned correctly\", () => {",
													"        pm.expect(jsonData.url).to.eql(expectedUrl);",
													"    });",
													"",
													"    // submitted_date",
													"    // Get current date to verification",
													"    const currentDateTime = new Date();",
													"    // Get projectStartDate",
													"    const projectStartDate = new Date(pm.environment.get(\"projectStartDate\"));",
													"    // Get submittedDate of Defect",
													"    const submittedDate = new Date(jsonData.submitted_date);",
													"    // Compare that submittedTime of Defect should be less than current date time and greater than projectStartDateTime",
													"    ",
													"    const compare = currentDateTime.toISOString().split(\"T\")[0] >= submittedDate.toISOString().split(\"T\")[0] && submittedDate.toISOString().split(\"T\")[0] >= projectStartDate.toISOString().split(\"T\")[0];",
													"    pm.test(\"'submitted_time' should be less than current datetime and greater than projectStartDateTime\", () => {",
													"        pm.expect(compare).to.be.true;",
													"    });",
													"",
													"    // last_modified_date",
													"    const lastModifiedDate = new Date(jsonData.last_modified_date);",
													"    pm.test(\"'last_modified_date' should be the same as submitted_date\", () => {",
													"        pm.expect(lastModifiedDate).to.not.eql(null);",
													"    });",
													"",
													"    // submitter_id",
													"    pm.test(\"'submitter_id' should be returned correctly\", () => {",
													"        pm.expect(jsonData.submitter_id).to.eql(submitterId);",
													"    });",
													"",
													"    // last_modified_user_id",
													"    pm.test(\"'last_modified_user_id' should be returned correctly\", () => {",
													"        pm.expect(jsonData.last_modified_user_id).to.not.eql(null);",
													"    });",
													"",
													"    // web_url",
													"    pm.test(\"'web_url' should be returned correctly\", () => {",
													"        pm.expect(jsonData.web_url).to.eql(expectedUrl);",
													"    });",
													"",
													"    // Verify properties of defect",
													"    // Summary",
													"    verifyDefectFieldProperty(jsonData.properties, \"Summary\");",
													"",
													"    // Description",
													"    verifyDefectFieldProperty(jsonData.properties, \"Description\");",
													"",
													"    // Affected Release/Build",
													"    verifyDefectFieldProperty(jsonData.properties, \"Affected Release/Build\");",
													"",
													"    // Fixed Release/Build",
													"    verifyDefectFieldProperty(jsonData.properties, \"Fixed Release/Build\");",
													"",
													"    // Submitted Date",
													"    verifyDefectFieldProperty(jsonData.properties, \"Submitted Date\");",
													"",
													"    // Module",
													"    verifyDefectFieldProperty(jsonData.properties, \"Module\");",
													"",
													"    // Assigned To",
													"    verifyDefectFieldProperty(jsonData.properties, \"Assigned To\");",
													"",
													"    // Target Release/Build",
													"    verifyDefectFieldProperty(jsonData.properties, \"Target Release/Build\");",
													"",
													"    // Target Date",
													"    verifyDefectFieldProperty(jsonData.properties, \"Target Date\");",
													"",
													"    // Closed Date",
													"    verifyDefectFieldProperty(jsonData.properties, \"Closed Date\");",
													"",
													"    // Environment",
													"    verifyDefectFieldProperty(jsonData.properties, \"Environment\");",
													"",
													"    // Submitter",
													"    verifyDefectFieldProperty(jsonData.properties, \"Submitter\");",
													"",
													"    // Severity",
													"    verifyDefectFieldProperty(jsonData.properties, \"Severity\");",
													"",
													"    // Priority",
													"    verifyDefectFieldProperty(jsonData.properties, \"Priority\");",
													"",
													"    // Root Cause",
													"    verifyDefectFieldProperty(jsonData.properties, \"Root Cause\");",
													"",
													"    // Status",
													"    verifyDefectFieldProperty(jsonData.properties, \"Status\");",
													"",
													"    // Type",
													"    verifyDefectFieldProperty(jsonData.properties, \"Type\");",
													"",
													"    // Reason",
													"    verifyDefectFieldProperty(jsonData.properties, \"Reason\");",
													"",
													"    // Category",
													"    verifyDefectFieldProperty(jsonData.properties, \"Category\");",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType1}} {{accessToken1}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"properties\": {{defectProperties2}},\r\n  \"attachments\": [ {\r\n      \"name\": \"sample_file_name.txt\",\r\n      \"content_type\": \"text/plain\",\r\n      \"data\": \"dGhpcyBpcyBzYW1wbGUgdGVzdA==\"\r\n    }]\r\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId2}}/defects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId2}}",
												"defects"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"pm.test(\"Status code should be returned as 200-OK\", () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId1}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"pm.test(\"Status code should be returned as 200-OK\", () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId2}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout  - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"pm.test(\"Status code should be returned as 200-OK\", () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"// Clean up environment variables",
													"const clearVariable = [",
													"    \"accessToken\", \"tokenType\", \"qtestUserCookie\", \"csrfToken\", \"startDate\", \"endDate\", \"projectId1\", \"apiuser1\", \"projectName\", \"defectFields\", \"defectProperties\", \"defectId\", \"accessToken1\", \"tokenType1\", \"projectName2\", \"startDate2\", \"endDate2\", \"projectId2\", \"projectStartDate2\", \"projectEndDate2\", \"defectFields2\", \"defectProperties2\", \"assignedUser2\", \"siteAdminId\", \"email\", \"email2\", \"userId\", \"firstName2\", \"lastName2\", \"projectStartDate\", \"projectEndDate\"",
													"];",
													"",
													"pm.environment.unset(\"assignedUser2\");",
													"pm.environment.unset(\"firstName2\");",
													"pm.environment.unset(\"lastName2\");",
													"pm.environment.unset(\"email2\");",
													"",
													"clearVariable.forEach(function (item){",
													"    pm.environment.unset(item);    ",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Uploads an Attachment to an Object",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"    ",
													"    // Create login cookie of user",
													"    const rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    const base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", `UserContextToken=${base64}`);",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get site admin id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Response data contains site admin user property\", function() {",
													"        pm.expect(jsonData.items[0].username).to.eql(pm.environment.get(\"username\"));",
													"        pm.expect(pm.response.text()).to.include(\"email\");",
													"        pm.expect(jsonData.items[0].first_name).to.eql(pm.environment.get(\"firstName\"));",
													"        pm.expect(jsonData.items[0].last_name).to.eql(pm.environment.get(\"lastName\"));",
													"        pm.expect(pm.response.text()).to.include(\"status\");",
													"        pm.expect(pm.response.text()).to.include(\"timezone_offset\");",
													"        pm.expect(pm.response.text()).to.include(\"country_name\");",
													"    });",
													"    ",
													"    pm.environment.set(\"siteAdminId\", jsonData.items[0].id);",
													"",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"username\": \"{{username}}\",\r\n  \"first_name\": \"{{firstName}}\",\r\n  \"last_name\": \"{{lastName}}\",\r\n  \"email\": \"{{username}}\",\r\n  \"password\": \"{{password}}\"\r\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/users/search?username={{username}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"users",
												"search"
											],
											"query": [
												{
													"key": "username",
													"value": "{{username}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 201;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 201-Created",
													"pm.test(`Response status should be 201-Created ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"",
													"if (result) {",
													"   //get response body",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"projectId1\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate\", jsonData.start_date);",
													"    pm.environment.set(\"projectEndDate\", jsonData.end_date);",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"let startDate = new Date();",
													"let endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"// Function to add 0 before datetime value if it is less than 10",
													"Number.prototype.padLeft = function(base, chr) {",
													"    var len = (String(base || 10).length - String(this).length) + 1;",
													"    return len > 0 ? new Array(len).join(chr || '0') + this : this;",
													"};",
													"",
													"// Generate dynamic string for ProfileName",
													"let uniqueString = new Date(),",
													"    uniqueStringFormat = [(uniqueString.getMonth() + 1).padLeft(),",
													"        uniqueString.getDate().padLeft(),",
													"        uniqueString.getFullYear(),",
													"    ].join('') + '-' + [uniqueString.getHours().padLeft(),",
													"        uniqueString.getMinutes().padLeft(),",
													"        uniqueString.getSeconds().padLeft(),",
													"        uniqueString.getMilliseconds().padLeft()",
													"    ].join('');",
													"",
													"const projectName = \"qTest API - Postman\";",
													"pm.environment.set(\"projectName\", `${projectName}${uniqueStringFormat}`);",
													"",
													"pm.environment.set(\"startDate\", startDate.toISOString());",
													"pm.environment.set(\"endDate\", endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{projectName}}\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n     \"{{username}}\"\n  ],\n  \"automation\": true\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Queries Users by Project Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code = RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"",
													"if (result) {",
													"    //get response body",
													"    let jsonData = pm.response.json();",
													"",
													"    //assert status",
													"    pm.test(\"Response statusshould be 200-OK\", () => {",
													"        pm.response.to.have.status(RESPONSE_CODE);",
													"    });",
													"",
													"    pm.environment.set(\"userList\", jsonData.items);",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/search/user?projectName={{projectName}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"search",
												"user"
											],
											"query": [
												{
													"key": "projectName",
													"value": "{{projectName}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get release fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    const PREFIX = \"fieldIdRelease\";",
													"    let jsonData = pm.response.json();",
													"",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/\\s/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                const fieldValueId = PREFIX + field.label + item.label.replace(/\\s/g, \"\");",
													"                pm.environment.set(fieldValueId, item.value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId1}}/settings/releases/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId1}}",
												"settings",
												"releases",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create release",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"newReleaseId\", jsonData.id);",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"releaseName\", \"Release having full info\");",
													"pm.environment.set(\"releaseStartDate\", (new Date()).toISOString());",
													"pm.environment.set(\"releaseEndDate\", (new Date()).toISOString());",
													"pm.environment.set(\"releaseDescription\", \"Description of the release\");",
													"pm.environment.set(\"releaseNote\", \"Note of the release\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{releaseName}}\",\n    \"properties\": [\n      {\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"{{releaseDescription}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"{{releaseNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId1}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId1}}",
												"releases"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get build fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"",
													"    const PREFIX = \"fieldIdBuild\";",
													"    let jsonData = pm.response.json();",
													"",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/\\s/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                const fieldValueId = PREFIX + field.label + item.label.replace(/\\s/g, \"\");",
													"                pm.environment.set(fieldValueId, item.value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId1}}/settings/builds/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId1}}",
												"settings",
												"builds",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create build",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    let jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newBuildId1\", jsonData.id);",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"let builDate = pm.environment.get(\"releaseStartDate\");",
													"pm.environment.set(\"buildDate\", builDate);",
													"pm.environment.set(\"buildName\", \"Build 1\");",
													"pm.environment.set(\"buildNote\", \"Note of Build 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{buildName}}\",\n    \"properties\": [\n      {\n            \"field_id\": {{fieldIdBuildStatus}},\n            \"field_value\": \"{{fieldIdBuildStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ],\n    \"release\": {\n      \"id\": \"{{newReleaseId}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId1}}/builds",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId1}}",
												"builds"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create a Module",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 201;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 201-Created",
													"pm.test(`Response status should be 201-Created ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    ",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"newModuleId1\", jsonData.id);",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Module 1\",\r\n  \"description\": \"Description of Module 1\",\r\n  \"shared\": false\r\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId1}}/modules",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId1}}",
												"modules"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get requirement fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    const PREFIX = \"fieldIdReq\";",
													"    let jsonData = pm.response.json();",
													"    let userList = pm.environment.get(\"userList\");",
													"    pm.environment.set(\"requirementFields\", jsonData);",
													"",
													"    jsonData.forEach((field) => {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"",
													"        if (field.hasOwnProperty(\"allowed_values\")) {",
													"            let fieldValueId = \"\";",
													"",
													"            field.allowed_values.forEach((item, index) => {",
													"",
													"                switch (field.label) {",
													"                    case \"Assigned To\":",
													"",
													"                        userList.forEach((user, userIndex) => {",
													"                            // Just save variables of users who have admin permission",
													"                            if (item.label === `${user.first_name} ${user.last_name}`) {",
													"                                if (user.username === pm.environment.get(\"username\")) {",
													"                                    // UserTest: user who directly affects to the test case",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + `UserTest`;",
													"                                    pm.environment.set(\"userTestFullName\", item.label);",
													"                                } else {",
													"                                    // Other users who have admin permission",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                                }",
													"                                pm.environment.set(fieldValueId, item.value);",
													"                            }",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                        break;",
													"                }",
													"",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId1}}/settings/requirements/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId1}}",
												"settings",
												"requirements",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create requirement",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.environment.set(\"newReqId1\", jsonData.id);",
													"    pm.environment.set(\"reqInfo1\", jsonData);",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 1\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n  \"properties\": [\n    {\n        \"field_id\": \"{{fieldIdReqStatus}}\",\n        \"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdReqPriority}}\",\n        \"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdReqType}}\",\n        \"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdReqAssignedTo}}\",\n        \"field_value\": \"[{{fieldIdReqAssignedToUserTest}}]\"\n    },\n    {\n        \"field_id\": \"{{fieldIdReqDescription}}\",\n        \"field_value\": \"{{reqDescription}}\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId1}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId1}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get Test Case fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"",
													"    const PREFIX = \"fieldIdTestCase\";",
													"    var jsonData = pm.response.json();",
													"    var userList = pm.environment.get(\"userList\");",
													"    pm.environment.set(\"testCaseFields\", jsonData);",
													"",
													"    jsonData.forEach((field) => {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"",
													"        if (field.allowed_values) {",
													"            var fieldValueId = \"\";",
													"",
													"            field.allowed_values.forEach((item, index) => {",
													"",
													"                switch (field.label) {",
													"                    case \"Assigned To\":",
													"                        userList.forEach((user, userIndex) => {",
													"                            // Just save variables of users who have admin permission",
													"                            if (item.label === `${user.first_name} ${user.last_name}`) {",
													"                                if (user.username === pm.environment.get(\"username\")) {",
													"                                    // UserTest: user who directly affects to the test case",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + `UserTest`;",
													"                                    pm.environment.set(\"userTestFullName\", item.label);",
													"                                } else {",
													"                                    // Other users who have admin permission",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                                }",
													"                                pm.environment.set(fieldValueId, item.value);",
													"                            }",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                        break;",
													"                }",
													"",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId1}}/settings/test-cases/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId1}}",
												"settings",
												"test-cases",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create Manual Test Case",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"newTestCaseId1\", jsonData.id);",
													"    pm.environment.set(\"testCaseInfo1\", jsonData);",
													"    pm.environment.set(\"testCase1Steps\", jsonData.test_steps);",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"testCaseName1\", \"Test Case 1\");",
													"pm.environment.set(\"testCaseDescription1\", \"Description of Test Case 1\");",
													"pm.environment.set(\"testCasePrecondition1\", \"Precondition of Test Case 1\");",
													"",
													"pm.environment.set(\"testStepDescription1\", \"Description of test step 1\");",
													"pm.environment.set(\"testStepExpected1\", \"Expected of test step 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{testCaseName1}}\",\n    \"properties\": [\n        {\n            \"field_id\": \"{{fieldIdTestCaseAutomation}}\",\n            \"field_value\": \"{{fieldIdTestCaseAutomationNo}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseStatus}}\",\n            \"field_value\": \"{{fieldIdTestCaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseType}}\",\n            \"field_value\": \"{{fieldIdTestCaseTypePerformance}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseAssignedTo}}\",\n            \"field_value\": \"[{{fieldIdTestCaseAssignedToUserTest}}]\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseDescription}}\",\n            \"field_value\": \"{{testCaseDescription1}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCasePrecondition}}\",\n            \"field_value\": \"{{testCasePrecondition1}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCasePriority}}\",\n            \"field_value\": \"{{fieldIdTestCasePriorityHigh}}\"\n        }\n    ],\n    \"test_steps\": [\n        {\n            \"description\": \"{{testStepDescription1}}\",\n            \"expected\": \"{{testStepExpected1}}\",\n            \"attachments\": []\n        }\n    ],\n    \"parent_id\": \"{{newModuleId1}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId1}}/test-cases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId1}}",
												"test-cases"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Approve Manual Test Case",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"if(result) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"testCaseInfo1\", jsonData);",
													"",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId1}}/test-cases/{{newTestCaseId1}}/approve",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId1}}",
												"test-cases",
												"{{newTestCaseId1}}",
												"approve"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create Automation Test Case",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"",
													"    let jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newTestCaseId2\", jsonData.id);",
													"    pm.environment.set(\"testCaseInfo2\", jsonData);",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"testCaseName2\", \"Test Case Automation 2\");",
													"pm.environment.set(\"testCaseDescription2\", \"Description of Test Case Automation 2\");",
													"pm.environment.set(\"testCasePrecondition2\", \"Precondition of Test Case Automation 2\");",
													"",
													"pm.environment.set(\"testCaseAutomationContent\", \"Automation Content of Test Case Automation 2\");",
													"",
													"pm.environment.set(\"testStepDescription1\", \"Description of test step 1\");",
													"pm.environment.set(\"testStepExpected1\", \"Expected of test step 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{testCaseName2}}\",\n  \"properties\": [\n    {\n        \"field_id\": \"{{fieldIdTestCaseAutomation}}\",\n        \"field_value\": \"{{fieldIdTestCaseAutomationYes}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestCaseAutomationContent}}\",\n        \"field_value\": \"{{testCaseAutomationContent}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestCaseStatus}}\",\n        \"field_value\": \"{{fieldIdTestCaseStatusInProgress}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestCaseType}}\",\n        \"field_value\": \"{{fieldIdTestCaseTypePerformance}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestCaseAssignedTo}}\",\n        \"field_value\": \"[{{fieldIdTestCaseAssignedToUserTest}}]\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestCaseDescription}}\",\n        \"field_value\": \"{{testCaseDescription2}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestCasePrecondition}}\",\n        \"field_value\": \"{{testCasePrecondition2}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestCasePriority}}\",\n        \"field_value\": \"{{fieldIdTestCasePriorityHigh}}\"\n    }\n  ],\n  \"test_steps\": [\n    {\n      \"description\": \"{{testStepDescription1}}\",\n      \"expected\": \"{{testStepExpected1}}\",\n      \"attachments\": []\n    }\n  ],\n  \"parent_id\": \"{{newModuleId1}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId1}}/test-cases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId1}}",
												"test-cases"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get Defect fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"",
													"    const PREFIX = \"fieldIdDefect\";",
													"    var jsonData = pm.response.json();",
													"    var userList = pm.environment.get(\"userList\");",
													"",
													"    jsonData.forEach((field) => {",
													"        if (field.label === \"Summary\" || field.label === \"Description\") {",
													"            pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"        }",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId1}}/settings/defects/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId1}}",
												"settings",
												"defects",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Submit a defect",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 201;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 201-Created",
													"pm.test(`Response status should be 201-Created ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"",
													"    let jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newDefectId1\", jsonData.id);",
													"    pm.environment.set(\"defectInfo1\", jsonData);",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"defectSummary\", \"Summary of Defect 1\");",
													"pm.environment.set(\"defectDescription\", \"Description of Defect 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"properties\": [\n    {\n      \"field_id\": \"{{fieldIdDefectSummary}}\",\n      \"field_value\": \"{{defectSummary}}\"\n    },\n    {\n      \"field_id\": \"{{fieldIdDefectDescription}}\",\n      \"field_value\": \"{{defectDescription}}\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId1}}/defects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId1}}",
												"defects"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create a test run",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const RESPONSE_CODE = 201;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"if(result) {",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"testRunId1\", jsonData.id);",
													"    pm.environment.set(\"testRunPid1\", jsonData.pid);",
													"    pm.environment.set(\"testRunInfo1\", jsonData);",
													"",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"testRunName\", \"Test Run 1\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate1\", today.toISOString());",
													"today.setDate(today.getDate() + 10);",
													"pm.environment.set(\"endDate1\", today.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{testRunName}}\",\n  \"test_case\": {\n    \"id\": {{newTestCaseId1}}\n  }\n  \n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId1}}/test-runs",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId1}}",
												"test-runs"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get Test Run Statuses",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"if(result) {",
													"    let jsonData = pm.response.json();",
													"",
													"    jsonData.forEach((status, index) => {",
													"",
													"        switch (status.name) {",
													"            case \"Passed\":",
													"                pm.environment.set(\"statusPassedId\", status.id);",
													"                break;",
													"            case \"Failed\":",
													"                pm.environment.set(\"statusFailedId\", status.id);",
													"                break;",
													"            case \"Incomplete\":",
													"                pm.environment.set(\"statusIncompleteId\", status.id);",
													"                break;",
													"            case \"Blocked\":",
													"                pm.environment.set(\"statusBlockedId\", status.id);",
													"                break;",
													"            case \"Unexecuted\":",
													"                pm.environment.set(\"statusUnexecutedId\", status.id);",
													"                break;",
													"        }",
													"    });",
													"",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId1}}/test-runs/execution-statuses",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId1}}",
												"test-runs",
												"execution-statuses"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Submit a test log",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const RESPONSE_CODE = 201;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"if(result) {",
													"",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"testLogId1\", jsonData.id);",
													"    pm.environment.set(\"testLogInfo1\", jsonData);",
													"} "
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"let startDate = new Date();",
													"let endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 5);",
													"pm.environment.set(\"exeStartDate\", startDate.toISOString());",
													"pm.environment.set(\"exeEndDate\", endDate.toISOString());",
													"pm.environment.set(\"note\", \"Test log note\");",
													"pm.environment.set(\"testStepDescription1\", \"Description of test step 1\");",
													"pm.environment.set(\"testStepExpected1\", \"Expected Result of test step 1\");",
													"pm.environment.set(\"testStepActual1\", \"Actual Result of test step 1\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"exe_start_date\": \"{{exeStartDate}}\",\n    \"exe_end_date\": \"{{exeEndDate}}\",\n    \"note\": \"{{note}}\",\n    \"planned_exe_time\": 0,\n    \"actual_exe_time\": 0,\n    \"status\": {\n        \"id\": {{statusFailedId}}\n    }\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId1}}/test-runs/{{testRunId1}}/test-logs",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId1}}",
												"test-runs",
												"{{testRunId1}}",
												"test-logs"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get test step log",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const RESPONSE_CODE = 200;",
													"",
													"const result = pm.response.code === RESPONSE_CODE;",
													"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    const jsonData = pm.response.json();",
													"    pm.environment.set('testStepLogsId', jsonData.test_step_logs[0].test_step_log_id);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId1}}/test-runs/{{testRunId1}}/test-logs/{{testLogId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId1}}",
												"test-runs",
												"{{testRunId1}}",
												"test-logs",
												"{{testLogId1}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "201 - Upload an Attachment to an Object - Releases - Success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"objectType\", \"releases\");",
													"pm.environment.set(\"attachmentFileName\", \"sample_file_name.txt\");"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 201;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"const expectedContentType = \"application/json, text/plain\";",
													"const fileName = pm.environment.get(\"attachmentFileName\");",
													"const expectedLink = [];",
													"",
													"// Verify that the returned status should be 201-Created",
													"pm.test(`Response status should be 201-Created ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    let jsonData = pm.response.json();",
													"",
													"    // Verify that links should be returned correctly",
													"    pm.test(\"Links should be returned correctly\", () => {",
													"        pm.expect(jsonData.links).to.eql(expectedLink);",
													"    });",
													"",
													"    // Verify that attachment file name should be returned correctly",
													"    pm.test(\"Name should be returned correctly\", () => {",
													"        pm.expect(jsonData.name).to.eql(fileName);",
													"    });",
													"",
													"    // Verify that Content_Type should be returned correctly",
													"    pm.test(\"Content_Type should be returned correctly\", () => {",
													"        pm.expect(jsonData.content_type).to.eql(expectedContentType);",
													"    });",
													"",
													"    // Verify that new generated Id should be returned correctly",
													"    pm.test(\"Id should be returned correctly\", () => {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json, text/plain"
											},
											{
												"key": "File-Name",
												"value": "{{attachmentFileName}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\"This is testing attachment\""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId1}}/{{objectType}}/{{newReleaseId}}/blob-handles",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId1}}",
												"{{objectType}}",
												"{{newReleaseId}}",
												"blob-handles"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId1}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"",
													"// Clean up environment variables",
													"const clearVariable = [",
													"    \"accessToken\", \"tokenType\", \"qtestUserCookie\", \"csrfToken\", \"projectName\", \"startDate\", \"endDate\", \"projectId1\", \"siteAdminId\", \"projectEndDate\", \"projectStartDate\", \"email\", \"fieldIdReleaseStatus\", \"fieldIdReleaseStatusPlanned\", \"fieldIdReleaseStatusInProgress\", \"fieldIdReleaseStatusCompleted\", \"fieldIdReleaseStatusClosed\", \"fieldIdReleaseStartDate\", \"fieldIdReleaseEndDate\", \"fieldIdReleaseDescription\", \"fieldIdReleaseReleaseNote\", \"releaseName\", \"releaseDescription\", \"releaseNote\", \"newReleaseId\", \"objectType\", \"attachmentFileName\", \"releaseStartDate\", \"releaseEndDate\", \"fieldIdBuildStatus\", \"fieldIdBuildStatusPlanned\", \"fieldIdBuildStatusInProgress\", \"fieldIdBuildStatusCompleted\", \"fieldIdBuildStatusClosed\", \"fieldIdBuildBuildDate\", \"fieldIdBuildBuildNote\", \"buildName\", \"buildDate\", \"buildNote\", \"newBuildId1\", \"requirementFields\", \"fieldIdReqStatus\", \"fieldIdReqPriority\", \"fieldIdReqType\", \"fieldIdReqAssignedTo\", \"fieldIdReqDescription\", \"fieldIdReqStatusNew\", \"fieldIdReqStatusInProgress\", \"fieldIdReqStatusReadyForBaseline\", \"fieldIdReqStatusBaselined\", \"fieldIdReqPriorityMusthave\", \"fieldIdReqPriorityShouldhave\", \"fieldIdReqPriorityNicetoHave\", \"fieldIdReqTypeFunctional\", \"fieldIdReqTypeNonfunctional\", \"reqName\", \"reqDescription\", \"newModuleId1\", \"userList\", \"userTestFullName\", \"fieldIdReqAssignedToUserTest\", \"newReqId1\", \"newReqId1\", \"testCaseFields\", \"reqInfo1\", \"fieldIdTestCaseAutomation\", \"fieldIdTestCaseAutomationYes\", \"fieldIdTestCaseAutomationNo\", \"fieldIdTestCaseAutomationContent\", \"fieldIdTestCaseStatus\", \"fieldIdTestCaseStatusNew\", \"fieldIdTestCaseStatusInProgress\", \"fieldIdTestCaseStatusReadyForBaseline\", \"fieldIdTestCaseStatusBaselined\", \"fieldIdTestCaseType\", \"fieldIdTestCaseTypeManual\", \"fieldIdTestCaseTypeAutomation\", \"fieldIdTestCaseTypePerformance\", \"fieldIdTestCaseTypeScenario\", \"fieldIdTestCaseAssignedTo\", \"fieldIdTestCaseAssignedToUserTest\", \"fieldIdTestCaseDescription\", \"fieldIdTestCasePrecondition\", \"fieldIdTestCasePriority\", \"fieldIdTestCasePriorityUndecided\", \"fieldIdTestCasePriorityLow\", \"fieldIdTestCasePriorityMedium\", \"fieldIdTestCasePriorityHigh\", \"fieldIdTestCasePriorityUrgent\", \"testCaseName1\", \"testCaseDescription1\", \"testCasePrecondition1\", \"testStepDescription1\", \"testStepExpected1\", \"newTestCaseId1\", \"testCaseInfo1\", \"testCaseName2\", \"testCaseDescription2\", \"testCasePrecondition2\", \"testCaseAutomationContent\", \"newTestCaseId2\", \"testCaseInfo2\", \"testCase1Steps\", \"testCase1Step1Id\", \"fieldIdDefectSummary\", \"fieldIdDefectDescription\", \"defectSummary\", \"defectDescription\", \"newDefectId1\", \"defectInfo1\"",
													"];",
													"",
													"clearVariable.forEach(function(item) {",
													"    pm.environment.unset(item);",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Create module",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"    ",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic YXBpdHJ5b3V0Og=="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.test(\"Response data contains all properties of project data\", function(){",
													"        pm.expect(pm.response.text()).to.include(\"id\");",
													"        pm.expect(jsonData.name).to.eql(\"qTest API - Postman\");",
													"        pm.expect(jsonData.description).to.eql(\"Description of qTest API - Postman\");",
													"        pm.expect(pm.response.text()).to.include(\"status_id\");",
													"        pm.expect(pm.response.text()).to.include(\"start_date\");",
													"        pm.expect(pm.response.text()).to.include(\"end_date\");",
													"        pm.expect(pm.response.text()).to.include(\"sample\");",
													"        pm.expect(pm.response.text()).to.include(\"defect_tracking_systems\");",
													"        pm.expect(pm.response.text()).to.include(\"x_explorer_access_level\");",
													"        pm.expect(pm.response.text()).to.include(\"date_format\");",
													"        pm.expect(jsonData.automation.toString()).to.eql(\"true\");",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate\", pm.environment.get(\"startDate\"));",
													"    pm.environment.set(\"projectEndDate\", pm.environment.get(\"endDate\"));",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\"\n  ],\n  \"automation\": true\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "test case sharing = false",
									"item": [
										{
											"name": "201 - Create module - Success",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"if (pm.response.code === 201) {",
															"    pm.test(\"Response status \" + pm.response.code, function () {",
															"        pm.response.to.have.status(201); ",
															"    });",
															"    ",
															"    var jsonData = pm.response.json();",
															"    ",
															"    pm.test(\"Response data has links\", function () {",
															"        pm.expect(jsonData.links).to.not.eql(null);",
															"    });",
															"    ",
															"    pm.test(\"Response data has id\", function() {",
															"       pm.expect(jsonData.id).to.not.eql(null); ",
															"    });",
															"    ",
															"    pm.test(\"Response data contains name \" + jsonData.name, function() {",
															"        pm.expect(jsonData.name).to.eql(\"Module 1\");",
															"    });",
															"    ",
															"    pm.test(\"Response data has order property\", function() {",
															"        pm.expect(jsonData.order).to.not.eql(null);",
															"    });",
															"    ",
															"    pm.test(\"Response data has pid property\", function() {",
															"        pm.expect(jsonData.pid).to.not.eql(null);",
															"    });",
															"    ",
															"    pm.test(\"Response data has created_date property\", function() {",
															"        pm.expect(jsonData.created_date).to.not.eql(null);",
															"    });",
															"    ",
															"    pm.test(\"Response data has last_modify_date property\", function() {",
															"        pm.expect(jsonData.created_date).to.not.eql(null);",
															"    });",
															"    ",
															"    pm.test(\"Response data has parent_id property\", function() {",
															"        pm.expect(jsonData.parent_id).to.not.eql(null);",
															"    });",
															"    ",
															"    pm.test(\"Response data has description property\", function() {",
															"        pm.expect(jsonData.description).to.eql(\"Description of Module 1\");",
															"    });",
															"    ",
															"    pm.environment.set(\"parentId\", jsonData.id);",
															"    ",
															"} else {",
															"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
															"        pm.response.to.have.status(201);",
															"    });",
															"}"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"name\": \"Module 1\",\r\n  \"description\": \"Description of Module 1\",\r\n  \"shared\": false\r\n}"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"modules"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete module 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response object has message: \", function() {",
													"        pm.expect(jsonData.message).to.not.eql(null);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{moduleId}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{moduleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete parentId",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{parentId}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{parentId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"projectEndDate\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"parentId\");",
													"    pm.environment.unset(\"moduleId\");",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"tokenType\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"  ",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Create a release",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code + \" -  Login\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.test(\"Response data contains all properties of project data\", function(){",
													"        pm.expect(pm.response.text()).to.include(\"id\");",
													"        pm.expect(jsonData.name).to.eql(\"qTest API - Postman\");",
													"        pm.expect(jsonData.description).to.eql(\"Description of qTest API - Postman\");",
													"        pm.expect(pm.response.text()).to.include(\"status_id\");",
													"        pm.expect(pm.response.text()).to.include(\"start_date\");",
													"        pm.expect(pm.response.text()).to.include(\"end_date\");",
													"        pm.expect(pm.response.text()).to.include(\"sample\");",
													"        pm.expect(pm.response.text()).to.include(\"defect_tracking_systems\");",
													"        pm.expect(pm.response.text()).to.include(\"x_explorer_access_level\");",
													"        pm.expect(pm.response.text()).to.include(\"date_format\");",
													"        pm.expect(jsonData.automation.toString()).to.eql(\"true\");",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate\", pm.environment.get(\"startDate\"));",
													"    pm.environment.set(\"projectEndDate\", pm.environment.get(\"endDate\"));",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\"\n  ],\n  \"automation\": true\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get release fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdRelease\";",
													"    var jsonData = pm.response.json();",
													"",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/\\s/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                const fieldValueId = PREFIX + field.label + item.label.replace(/\\s/g, \"\");",
													"                pm.environment.set(fieldValueId, item.value);",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/releases/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"releases",
												"fields"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Create release - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newReleaseId1\", jsonData.id);",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct release info\", function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"releaseName\"));",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.description).to.eql(pm.environment.get(\"releaseDescription\"));",
													"        pm.expect(jsonData.note).to.eql(pm.environment.get(\"releaseNote\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has release status is 'In Progress'\", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReleaseStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data has release description '\" + field.field_value + \"'\", function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"releaseDescription\"));",
													"                });",
													"                break;",
													"",
													"            case \"Release Note\":",
													"                pm.test(\"Repsonse data has release note '\" + field.field_value + \"'\", function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"releaseNote\"));",
													"                });",
													"                break;",
													"",
													"            case \"Start Date\":",
													"                pm.test(\"Repsonse data has release start date\", function() {",
													"                    tmp = pm.environment.get(\"startDate\").split(\"T\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"End Date\":",
													"                pm.test(\"Repsonse data has release end date\", function() {",
													"                    tmp = pm.environment.get(\"endDate\").split(\"T\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"releaseName\", \"Release having full info\");",
													"pm.environment.set(\"startDate\", (new Date()).toISOString());",
													"pm.environment.set(\"endDate\", (new Date()).toISOString());",
													"pm.environment.set(\"releaseDescription\", \"Description of the release\");",
													"pm.environment.set(\"releaseNote\", \"Note of the release\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{releaseName}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"{{releaseDescription}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"{{releaseNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete release 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.environment.unset(\"newReleaseId1\");",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/{{newReleaseId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"{{newReleaseId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete release 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.environment.unset(\"newReleaseId2\");",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/{{newReleaseId2}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"{{newReleaseId2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete release 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.environment.unset(\"newReleaseId3\");",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/{{newReleaseId3}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"{{newReleaseId3}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"projectEndDate\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"releaseName\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"    pm.environment.unset(\"releaseDescription\");",
													"    pm.environment.unset(\"releaseNote\");",
													"    pm.environment.unset(\"fieldIdReleaseStatus\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusPlanned\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusCompleted\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusClosed\");",
													"    pm.environment.unset(\"fieldIdReleaseStartDate\");",
													"    pm.environment.unset(\"fieldIdReleaseEndDate\");",
													"    pm.environment.unset(\"fieldIdReleaseDescription\");",
													"    pm.environment.unset(\"fieldIdReleaseReleaseNote\");",
													"    pm.environment.unset(\"fieldIdReleaseDescription\");",
													"    pm.environment.unset(\"fieldIdReleaseReleaseNote\");",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"tokenType\");",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Create a build",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code + \" -  Login\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"    ",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.test(\"Response data contains all properties of project data\", function(){",
													"        pm.expect(pm.response.text()).to.include(\"id\");",
													"        pm.expect(jsonData.name).to.eql(\"qTest API - Postman\");",
													"        pm.expect(jsonData.description).to.eql(\"Description of qTest API - Postman\");",
													"        pm.expect(pm.response.text()).to.include(\"status_id\");",
													"        pm.expect(pm.response.text()).to.include(\"start_date\");",
													"        pm.expect(pm.response.text()).to.include(\"end_date\");",
													"        pm.expect(pm.response.text()).to.include(\"sample\");",
													"        pm.expect(pm.response.text()).to.include(\"defect_tracking_systems\");",
													"        pm.expect(pm.response.text()).to.include(\"x_explorer_access_level\");",
													"        pm.expect(pm.response.text()).to.include(\"date_format\");",
													"        pm.expect(jsonData.automation.toString()).to.eql(\"true\");",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate\", pm.environment.get(\"startDate\"));",
													"    pm.environment.set(\"projectEndDate\", pm.environment.get(\"endDate\"));",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\"\n  ],\n  \"automation\": true\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get release fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdRelease\";",
													"    var jsonData = pm.response.json();",
													"",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/\\s/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                const fieldValueId = PREFIX + field.label + item.label.replace(/\\s/g, \"\");",
													"                pm.environment.set(fieldValueId, item.value);",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/releases/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"releases",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get build fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdBuild\";",
													"    var jsonData = pm.response.json();",
													"",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/\\s/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                const fieldValueId = PREFIX + field.label + item.label.replace(/\\s/g, \"\");",
													"                pm.environment.set(fieldValueId, item.value);",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/builds/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"builds",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create Release",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newReleaseId1\", jsonData.id);",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct release info\", function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"releaseName\"));",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.description).to.not.eql(null);",
													"        pm.expect(jsonData.note).to.not.eql(null);",
													"    });",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"releaseName\", \"Release 1\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate\", today.toISOString());",
													"today.setDate(today.getDate() + 10);",
													"pm.environment.set(\"endDate\", today.toISOString());",
													"",
													"pm.environment.set(\"releaseDescription\", \"Description of Release 1\");",
													"pm.environment.set(\"releaseNote\", \"Note of Release 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{releaseName}}\",\n    \"properties\": [\n      {\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"{{releaseDescription}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"{{releaseNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Create build - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newBuildId1\", jsonData.id);",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Response data has links\", function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id\", function() {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name: \" + jsonData.name, function() {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"buildName\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has order\", function() {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid\", function() {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modify_date\", function() {",
													"        pm.expect(jsonData.last_modify_date).to.not.eql(null);",
													"    });",
													"",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has build status is 'In Progress'\", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdBuildStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Build Date\":",
													"                pm.test(\"Repsonse data has build date property\", function() {",
													"                    tmp = pm.environment.get(\"buildDate\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Build Note\":",
													"                pm.test(\"Repsonse data has build note '\" + field.field_value + \"'\", function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"buildNote\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"buildName\", \"Build 1\");",
													"",
													"var today = new Date();",
													"today.setDate(today.getDate() + 1);",
													"pm.environment.set(\"buildDate\", today.toISOString());",
													"pm.environment.set(\"buildNote\", \"Note of Build 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{buildName}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdBuildStatus}},\n            \"field_value\": \"{{fieldIdBuildStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ],\n    \"release\": {\n    \t\"id\": \"{{newReleaseId1}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create build - Not exist releaseId",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message 'Release does not exist'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Release does not exist\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Build name is updated\",\n    \"properties\": [\n      {\n            \"field_id\": \"{{fieldIdReleaseStatus}}\",\n            \"field_value\": \"{{fieldIdReleaseStatusCompleted}}\"\n        }\n    ],\n    \"release\": {\n    \t\"id\": \"0\"\n    }\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete release",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.environment.unset(\"newReleaseId1\");",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/{{newReleaseId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"{{newReleaseId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"projectEndDate\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"releaseName\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"    pm.environment.unset(\"releaseDescription\");",
													"    pm.environment.unset(\"releaseNote\");",
													"    pm.environment.unset(\"fieldIdReleaseStatus\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusPlanned\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusCompleted\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusClosed\");",
													"    pm.environment.unset(\"fieldIdReleaseStartDate\");",
													"    pm.environment.unset(\"fieldIdReleaseEndDate\");",
													"    pm.environment.unset(\"fieldIdReleaseDescription\");",
													"    pm.environment.unset(\"fieldIdReleaseReleaseNote\");",
													"    ",
													"    pm.environment.unset(\"fieldIdBuildStatus\");",
													"    pm.environment.unset(\"fieldIdBuildStatusPlanned\");",
													"    pm.environment.unset(\"fieldIdBuildStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdBuildStatusCompleted\");",
													"    pm.environment.unset(\"fieldIdBuildStatusClosed\");",
													"    pm.environment.unset(\"fieldIdBuildBuildDate\");",
													"    pm.environment.unset(\"fieldIdBuildBuildNote\");",
													"    pm.environment.unset(\"newReleaseId1\");",
													"    pm.environment.unset(\"newBuildId1\");",
													"    pm.environment.unset(\"buildDate\");",
													"    pm.environment.unset(\"buildNote\");",
													"    pm.environment.unset(\"buildName\");",
													"    pm.environment.unset(\"build1_name\");",
													"    ",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"tokenType\");",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Create a test case",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code + \" -  Login\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"    ",
													"    var CryptoJS = require(\"crypto-js\");",
													"    //Encrypt",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Get user id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Response data contains data of apiuser1@qas.com\", function() {",
													"        pm.expect(jsonData.items[0].username).to.eql(pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"        pm.expect(pm.response.text()).to.include(\"email\");",
													"        pm.expect(jsonData.items[0].first_name).to.eql(\"API\");",
													"        pm.expect(jsonData.items[0].last_name).to.eql(\"User 1\");",
													"        pm.expect(pm.response.text()).to.include(\"status\");",
													"        pm.expect(pm.response.text()).to.include(\"timezone_offset\");",
													"        pm.expect(pm.response.text()).to.include(\"country_name\");",
													"    });",
													"    ",
													"    pm.environment.set(\"userId\", jsonData.items[0].id);",
													"",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"username1\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"pm.environment.set(\"firstName1\", \"API\");",
													"pm.environment.set(\"lastName1\", \"User 1\");",
													"pm.environment.set(\"email1\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/users/search?username={{username1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"users",
												"search"
											],
											"query": [
												{
													"key": "username",
													"value": "{{username1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"    pm.environment.set(\"projectName\", jsonData.name);",
													"    pm.environment.set(\"projectStartDate\", jsonData.start_date);",
													"    pm.environment.set(\"projectEndDate\", jsonData.end_date);",
													"    ",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													"",
													"// random generator function",
													"function getRandomInt(min, max) {",
													"    min = Math.ceil(min);",
													"    max = Math.floor(max);",
													"    return Math.floor(Math.random() * (max - min)) + min;",
													"}",
													"// generate the random value",
													"var csrfToken = getRandomInt(10 , 99);",
													"pm.environment.set(\"projectName\", \"API Postman Project \" + csrfToken);"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{projectName}}\",\n  \"description\": \"Description of qTest API Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\", \"{{prefixApiUser}}apiuser1@qas.com\"\n  ],\n  \"automation\": true\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Queries Users by Project Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Response data contains page: \" + jsonData.page, function() {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"    pm.test(\"Response data contains page size: \" + jsonData.page_size, function() {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"    pm.test(\"Response data contains total: \" + jsonData.total, function() {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"    pm.test(\"Response data contains total project: \" + jsonData.total_project, function() {",
													"        pm.expect(jsonData.total_project).to.eql(1);",
													"    });",
													"    var assignedUser, message;",
													"    if (jsonData.items && jsonData.items.length > 0) {",
													"        jsonData.items.forEach(function(item, index) {",
													"            if(item.username === pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\"){",
													"                assignedUser = item.username;",
													"                message = \"API User 1\";",
													"            }",
													"            else if(item.username === pm.environment.get(\"username\")){",
													"                assignedUser = pm.environment.get(\"username\");",
													"                message = \"site admin user\";",
													"            }",
													"            pm.test(\"Response data contains data of \" + message + \" properties\", function() {",
													"                pm.expect(item.id).to.not.eql(null);",
													"                pm.expect(item.username).to.eql(assignedUser);",
													"                pm.expect(item.first_name).to.not.eql(null);",
													"                pm.expect(item.last_name).to.not.eql(null);",
													"                pm.expect(item.avatar).to.not.eql(null);",
													"                item.assigned_projects.forEach(function(projectId){",
													"                   if(projectId === pm.environment.get(\"projectId\")){",
													"                       return false;",
													"                   }",
													"                });",
													"            });",
													"        });",
													"    }",
													"    ",
													"    pm.environment.set(\"userList\", jsonData.items);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/search/user?projectName={{projectName}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"search",
												"user"
											],
											"query": [
												{
													"key": "projectName",
													"value": "{{projectName}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get test case fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdTestCase\";",
													"    var jsonData = pm.response.json();",
													"    var userList = pm.environment.get(\"userList\");",
													"",
													"    var fieldValueId;",
													"    var siteAdminFullName = pm.environment.get(\"firstName\") + \" \" + pm.environment.get(\"lastName\");",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                if (field.label === \"Assigned To\") {",
													"                    if(item.label === \"API User 1\"){",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"APIUser1\";",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                    }",
													"                    else if (item.label === siteAdminFullName) {",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"SiteAdminUser\";",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                    }",
													"                } else {",
													"                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                    pm.environment.set(fieldValueId, item.value);",
													"                }",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/test-cases/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"test-cases",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create Module 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, () => {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response data has correct module properties\", () => {",
													"        pm.expect(jsonData.links).not.to.eql(null);",
													"        pm.expect(jsonData.id).not.to.eql(null);",
													"        pm.expect(jsonData.name).to.eql(\"Module 1\");",
													"        pm.expect(jsonData.order).not.to.eql(null);",
													"        pm.expect(jsonData.pid).not.to.eql(null);",
													"        pm.expect(jsonData.created_date).not.to.eql(null);",
													"        pm.expect(jsonData.last_modified_date).not.to.eql(null);",
													"        pm.expect(jsonData.parent_id).not.to.eql(null);",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 1\");",
													"    });",
													"    ",
													"    pm.environment.set(\"moduleId1\", jsonData.id);",
													"    ",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Module 1\",\r\n  \"description\": \"Description of Module 1\",\r\n  \"shared\": false\r\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create Module 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, () => {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response data has correct module properties\", () => {",
													"        pm.expect(jsonData.links).not.to.eql(null);",
													"        pm.expect(jsonData.id).not.to.eql(null);",
													"        pm.expect(jsonData.name).to.eql(\"Module 2\");",
													"        pm.expect(jsonData.order).not.to.eql(null);",
													"        pm.expect(jsonData.pid).not.to.eql(null);",
													"        pm.expect(jsonData.created_date).not.to.eql(null);",
													"        pm.expect(jsonData.last_modified_date).not.to.eql(null);",
													"        pm.expect(jsonData.parent_id).not.to.eql(null);",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 2\");",
													"    });",
													"    ",
													"    pm.environment.set(\"moduleId2\", jsonData.id);",
													"    ",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Module 2\",\r\n  \"description\": \"Description of Module 2\",\r\n  \"shared\": false\r\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create test case A",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"linkTestCase1\", jsonData.id);",
													"    pm.environment.set(\"testCaseInfo1\", jsonData);",
													"    ",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(`Response data contains all properties of test case ${jsonData.name}`, () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"testCaseName\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.web_url).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"moduleId2\"));",
													"        pm.expect(jsonData.test_case_version_id).to.not.eql(null);",
													"        pm.expect(jsonData.version).to.not.eql(null);",
													"        pm.expect(jsonData.description).to.eql(pm.environment.get(\"testCaseDescription\"));",
													"        pm.expect(jsonData.precondition).to.eql(pm.environment.get(\"testCasePrecondition\"));",
													"        pm.expect(jsonData.creator_id).to.not.eql(null);",
													"        pm.expect(jsonData.agent_ids).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains test step object\", () =>{",
													"        pm.expect(jsonData.test_steps.length).to.not.eql(0);",
													"    });",
													"    ",
													"    jsonData.test_steps.forEach((step, index) => {",
													"        pm.test(`Response data has test_steps[${index}] has links property`, () => {",
													"            pm.expect(step.links).to.not.eql(null);",
													"        });",
													"        ",
													"        pm.test(`Response data has test_steps[${index}] has id property`, () => {",
													"            pm.expect(step.id).to.not.eql(null);",
													"        });",
													"        ",
													"        pm.test(`Response data has test_steps[${index}] contains description property: ${step.description}`, () => {",
													"            pm.expect(step.description).to.eql(pm.environment.get(\"testStepDescription1\"));",
													"        });",
													"        ",
													"        pm.test(`Response data has test_steps[${index}] contains expected property: ${step.expected}`, () => {",
													"            pm.expect(step.expected).to.eql(pm.environment.get(\"testStepExpected1\"));",
													"        });",
													"        ",
													"        pm.test(`Response data has test_steps[${index}] has order property`, () => {",
													"            pm.expect(step.order).to.not.eql(null);",
													"        });",
													"        ",
													"        pm.test(`Response data has test_steps[${index}] has ${step.attachments.length} attachment property`, () => {",
													"            pm.expect(step.attachments).to.not.eql(null);",
													"            pm.expect(step.attachments.length).to.eql(1);",
													"            pm.expect(step.attachments.links).not.to.eql(null);",
													"        });",
													"    });",
													"",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Automation\":",
													"                pm.test(`Response data has automation: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"No\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseAutomationNo\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Automation Content\":",
													"                pm.test(\"Response data has empty automation content\", () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"",
													"            case \"Status\":",
													"                pm.test(`Repsonse data has status: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Type\":",
													"                pm.test(`Repsonse data has type: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Performance\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseTypePerformance\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(`Repsonse data has priority: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"High\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCasePriorityHigh\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(`[API User 1]`);",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdTestCaseAssignedToAPIUser1\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(`Repsonse data has description: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCaseDescription\"));",
													"                });",
													"                break;",
													"",
													"            case \"Precondition\":",
													"                pm.test(`Repsonse data has precondition: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCasePrecondition\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"testCaseName\", \"Test Case A\");",
													"pm.environment.set(\"testCaseDescription\", \"Description of Test Case A\");",
													"pm.environment.set(\"testCasePrecondition\", \"Precondition of Test Case A\");",
													"",
													"pm.environment.set(\"testStepDescription1\", \"Description of test step A1\");",
													"pm.environment.set(\"testStepExpected1\", \"Expected of test step A1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{testCaseName}}\",\n    \"properties\": [\n        {\n            \"field_id\": \"{{fieldIdTestCaseAutomation}}\",\n            \"field_value\": \"{{fieldIdTestCaseAutomationNo}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseStatus}}\",\n            \"field_value\": \"{{fieldIdTestCaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseType}}\",\n            \"field_value\": \"{{fieldIdTestCaseTypePerformance}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseAssignedTo}}\",\n            \"field_value\": \"[{{fieldIdTestCaseAssignedToAPIUser1}}]\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseDescription}}\",\n            \"field_value\": \"{{testCaseDescription}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCasePrecondition}}\",\n            \"field_value\": \"{{testCasePrecondition}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCasePriority}}\",\n            \"field_value\": \"{{fieldIdTestCasePriorityHigh}}\"\n        }\n    ],\n    \"test_steps\": [\n        {\n            \"description\": \"{{testStepDescription1}}\",\n            \"expected\": \"{{testStepExpected1}}\",\n            \"attachments\": [\n            \t{\n\t\t\t\t\t\"name\": \"sample_file_name.txt\",\n\t\t\t\t\t\"content_type\": \"text/plain\",\n\t\t\t\t\t\"data\": \"dGhpcyBpcyBzYW1wbGUgdGVzdA==\"\n            \t}\n            ]\n        }\n    ],\n    \"parent_id\": \"{{moduleId2}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cases"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Approve test case",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    var testCaseInfo = pm.environment.get(\"testCaseInfo1\");",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData.id).to.eql(testCaseInfo.id);",
													"    });",
													"",
													"    pm.test(\"Response data contains name: \" + jsonData.name, () => {",
													"        pm.expect(jsonData.name).to.eql(testCaseInfo.name);",
													"    });",
													"",
													"    pm.test(\"Response data has order property\", () => {",
													"        pm.expect(jsonData.order).to.eql(testCaseInfo.order);",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData.pid).to.eql(testCaseInfo.pid);",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData.created_date).to.eql(testCaseInfo.created_date);",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has web_url property\", () => {",
													"        pm.expect(jsonData.web_url).to.eql(testCaseInfo.web_url);",
													"    });",
													"",
													"    pm.test(\"Response data contains parent_id property\", () => {",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"moduleId2\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"    });",
													"    ",
													"    pm.test(\"Response data has version property\", () => {",
													"        var subStrings = testCaseInfo.version.split('.');",
													"        var newVersion = (parseInt(subStrings[0]) + 1).toString() + '.0';",
													"        pm.expect(jsonData.version).to.eql(newVersion);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains description property: \" + jsonData.description, () => {",
													"        pm.expect(jsonData.description).to.eql(testCaseInfo.description);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains precondition property: \" + jsonData.precondition, () => {",
													"        pm.expect(jsonData.precondition).to.eql(testCaseInfo.precondition);",
													"    });",
													"    ",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData.creator_id).to.eql(testCaseInfo.creator_id);",
													"    });",
													"    ",
													"    pm.test(\"Response data has agent_ids property\", () => {",
													"        pm.expect(jsonData.agent_ids).to.not.eql(null);",
													"    });",
													"    ",
													"    jsonData.test_steps.forEach(function(step, index) {",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has links property\", () => {",
													"            pm.expect(step.links).to.not.eql(null);",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has id property\", () => {",
													"            pm.expect(step.id).to.eql(testCaseInfo.test_steps[index].id);",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] contains description property: \" + step.description, () => {",
													"            pm.expect(step.description).to.eql(pm.environment.get(\"testStepDescription1\"));",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] contains expected property: \" + step.expected, () => {",
													"            pm.expect(step.expected).to.eql(pm.environment.get(\"testStepExpected1\"));",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has order property\", () => {",
													"            pm.expect(step.order).to.eql(testCaseInfo.test_steps[index].order);",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has attachment property\", () => {",
													"            pm.expect(step.attachment).to.not.eql(null);",
													"        });",
													"    });",
													"",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Automation\":",
													"                pm.test(\"Response data has automation: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"No\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseAutomationNo\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Automation Content\":",
													"                pm.test(\"Response data has empty automation content\", () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Performance\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseTypePerformance\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"High\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCasePriorityHigh\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(`[API User 1]`);",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdTestCaseAssignedToAPIUser1\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(testCaseInfo.description);",
													"                });",
													"                break;",
													"",
													"            case \"Precondition\":",
													"                pm.test(\"Repsonse data contains precondition: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(testCaseInfo.precondition);",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    ",
													"    pm.environment.set(\"testCaseInfo1\", jsonData);",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cases/{{linkTestCase1}}/approve",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cases",
												"{{linkTestCase1}}",
												"approve"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Create test case - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(`Response data contains name: ${jsonData.name}`, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"testCaseName\"));",
													"    });",
													"",
													"    pm.test(\"Response data has order property\", () => {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has web_url property\", () => {",
													"        pm.expect(jsonData.web_url).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains parent_id property\", () => {",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"moduleId1\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData.test_case_version_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has version property\", () => {",
													"        pm.expect(jsonData.version).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(`Response data contains description property: ${jsonData.description}`, () => {",
													"        pm.expect(jsonData.description).to.eql(pm.environment.get(\"testCaseDescription\"));",
													"    });",
													"    ",
													"    pm.test(`Response data contains precondition property: ${jsonData.precondition}`, () => {",
													"        pm.expect(jsonData.precondition).to.eql(pm.environment.get(\"testCasePrecondition\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData.creator_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has agent_ids property\", () => {",
													"        pm.expect(jsonData.agent_ids).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains test step object\", () =>{",
													"        pm.expect(jsonData.test_steps.length).to.not.eql(0);",
													"    });",
													"    ",
													"    jsonData.test_steps.forEach((step, index) => {",
													"        pm.test(`Response data has test_steps[${index}] has links property`, () => {",
													"            pm.expect(step.links).to.not.eql(null);",
													"        });",
													"        ",
													"        pm.test(`Response data has test_steps[${index}] has id property`, () => {",
													"            pm.expect(step.id).to.not.eql(null);",
													"        });",
													"        ",
													"        pm.test(`Response data has test_steps[${index}] contains description property: ${step.description}`, () => {",
													"            pm.expect(step.description).to.eql(pm.environment.get(\"testStepDescription1\"));",
													"        });",
													"        ",
													"        pm.test(`Response data has test_steps[${index}] contains expected property: ${step.expected}`, () => {",
													"            pm.expect(step.expected).to.eql(pm.environment.get(\"testStepExpected1\"));",
													"        });",
													"        ",
													"        pm.test(`Response data has test_steps[${index}] has order property`, () => {",
													"            pm.expect(step.order).to.not.eql(null);",
													"        });",
													"        ",
													"        pm.test(`Response data has test_steps[${index}] has ${step.attachments.length} attachment property`, () => {",
													"            pm.expect(step.attachments).to.not.eql(null);",
													"            pm.expect(step.attachments.length).to.eql(1);",
													"            pm.expect(step.attachments.links).not.to.eql(null);",
													"        });",
													"    });",
													"",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Automation\":",
													"                pm.test(`Response data has automation: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"No\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseAutomationNo\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Automation Content\":",
													"                pm.test(\"Response data has empty automation content\", () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"",
													"            case \"Status\":",
													"                pm.test(`Repsonse data has status: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Type\":",
													"                pm.test(`Repsonse data has type: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Performance\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseTypePerformance\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(`Repsonse data has priority: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"High\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCasePriorityHigh\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(`[API User 1]`);",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdTestCaseAssignedToAPIUser1\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(`Repsonse data has description: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCaseDescription\"));",
													"                });",
													"                break;",
													"",
													"            case \"Precondition\":",
													"                pm.test(`Repsonse data has precondition: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCasePrecondition\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"testCaseName\", \"Test Case 1\");",
													"pm.environment.set(\"testCaseDescription\", \"Description of Test Case 1\");",
													"pm.environment.set(\"testCasePrecondition\", \"Precondition of Test Case 1\");",
													"",
													"pm.environment.set(\"testStepDescription1\", \"Description of test step 1\");",
													"pm.environment.set(\"testStepExpected1\", \"Expected of test step 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{testCaseName}}\",\n    \"properties\": [\n        {\n            \"field_id\": \"{{fieldIdTestCaseAutomation}}\",\n            \"field_value\": \"{{fieldIdTestCaseAutomationNo}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseStatus}}\",\n            \"field_value\": \"{{fieldIdTestCaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseType}}\",\n            \"field_value\": \"{{fieldIdTestCaseTypePerformance}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseAssignedTo}}\",\n            \"field_value\": \"[{{fieldIdTestCaseAssignedToAPIUser1}}]\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseDescription}}\",\n            \"field_value\": \"{{testCaseDescription}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCasePrecondition}}\",\n            \"field_value\": \"{{testCasePrecondition}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCasePriority}}\",\n            \"field_value\": \"{{fieldIdTestCasePriorityHigh}}\"\n        }\n    ],\n    \"test_steps\": [\n        {\n            \"description\": \"{{testStepDescription1}}\",\n            \"expected\": \"{{testStepExpected1}}\",\n            \"attachments\": [\n            \t{\n\t\t\t\t\t\"name\": \"sample_file_name.txt\",\n\t\t\t\t\t\"content_type\": \"text/plain\",\n\t\t\t\t\t\"data\": \"dGhpcyBpcyBzYW1wbGUgdGVzdA==\"\n            \t}\n            ]\n        }\n    ],\n    \"parent_id\": \"{{moduleId1}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cases"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Create test case - Success with automation",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains name: \" + jsonData.name, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"testCaseName\"));",
													"    });",
													"",
													"    pm.test(\"Response data has order property\", () => {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has web_url property\", () => {",
													"        pm.expect(jsonData.web_url).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains parent_id property\", () => {",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"moduleId1\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData.test_case_version_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has version property\", () => {",
													"        pm.expect(jsonData.version).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains description property: \" + jsonData.description, () => {",
													"        pm.expect(jsonData.description).to.eql(pm.environment.get(\"testCaseDescription\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data contains precondition property: \" + jsonData.precondition, () => {",
													"        pm.expect(jsonData.precondition).to.eql(pm.environment.get(\"testCasePrecondition\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData.creator_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has agent_ids property\", () => {",
													"        pm.expect(jsonData.agent_ids).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains test step object\", () =>{",
													"        pm.expect(jsonData.test_steps.length).to.not.eql(0);",
													"    });",
													"    ",
													"    jsonData.test_steps.forEach((step, index) => {",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has links property\", () => {",
													"            pm.expect(step.links).to.not.eql(null);",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has id property\", () => {",
													"            pm.expect(step.id).to.not.eql(null);",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] contains description property: \" + step.description, () => {",
													"            pm.expect(step.description).to.eql(pm.environment.get(\"testStepDescription1\"));",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] contains expected property: \" + step.description, () => {",
													"            pm.expect(step.expected).to.eql(pm.environment.get(\"testStepExpected1\"));",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has order property\", () => {",
													"            pm.expect(step.order).to.not.eql(null);",
													"        });",
													"        ",
													"        pm.test(`Response data has test_steps[${index}] has ${step.attachments.length} attachment property`, () => {",
													"            pm.expect(step.attachments).to.not.eql(null);",
													"            pm.expect(step.attachments.length).to.eql(1);",
													"            pm.expect(step.attachments.links).not.to.eql(null);",
													"        });",
													"    });",
													"",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Automation\":",
													"                pm.test(\"Response data has automation: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Yes\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseAutomationYes\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Automation Content\":",
													"                pm.test(\"Response data has empty automation content\", () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCaseAutomationContent\"));",
													"                });",
													"                break;",
													"",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Performance\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseTypePerformance\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"High\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCasePriorityHigh\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(`[API User 1]`);",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdTestCaseAssignedToAPIUser1\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCaseDescription\"));",
													"                });",
													"                break;",
													"",
													"            case \"Precondition\":",
													"                pm.test(\"Repsonse data contains precondition: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCasePrecondition\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"testCaseName\", \"Test Case Automation 2\");",
													"pm.environment.set(\"testCaseDescription\", \"Description of Test Case Automation 2\");",
													"pm.environment.set(\"testCasePrecondition\", \"Precondition of Test Case Automation 2\");",
													"",
													"pm.environment.set(\"testCaseAutomationContent\", \"Automation Content of Test Case Automation 2\");",
													"",
													"pm.environment.set(\"testStepDescription1\", \"Description of test step 1\");",
													"pm.environment.set(\"testStepExpected1\", \"Expected of test step 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{testCaseName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCaseAutomation}}\",\n\t    \t\"field_value\": \"{{fieldIdTestCaseAutomationYes}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCaseAutomationContent}}\",\n\t    \t\"field_value\": \"{{testCaseAutomationContent}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCaseStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdTestCaseStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCaseType}}\",\n\t    \t\"field_value\": \"{{fieldIdTestCaseTypePerformance}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCaseAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdTestCaseAssignedToAPIUser1}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCaseDescription}}\",\n\t    \t\"field_value\": \"{{testCaseDescription}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCasePrecondition}}\",\n\t    \t\"field_value\": \"{{testCasePrecondition}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCasePriority}}\",\n\t    \t\"field_value\": \"{{fieldIdTestCasePriorityHigh}}\"\n\t\t}\n\t],\n\t\"test_steps\": [\n\t\t{\n\t\t\t\"description\": \"{{testStepDescription1}}\",\n\t\t\t\"expected\": \"{{testStepExpected1}}\",\n\t\t\t\"attachments\": [\n            \t{\n\t\t\t\t\t\"name\": \"sample_file_name.txt\",\n\t\t\t\t\t\"content_type\": \"text/plain\",\n\t\t\t\t\t\"data\": \"dGhpcyBpcyBzYW1wbGUgdGVzdA==\"\n            \t}\n            ]\n\t\t}\n\t],\n\t\"parent_id\": \"{{moduleId1}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cases"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Create test case - Has no property test steps",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains name: \" + jsonData.name, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"testCaseName\"));",
													"    });",
													"",
													"    pm.test(\"Response data has order property\", () => {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has web_url property\", () => {",
													"        pm.expect(jsonData.web_url).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains parent_id property\", () => {",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"moduleId1\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData.test_case_version_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has version property\", () => {",
													"        pm.expect(jsonData.version).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains description property: \" + jsonData.description, () => {",
													"        pm.expect(jsonData.description).to.eql(pm.environment.get(\"testCaseDescription\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data contains precondition property: \" + jsonData.precondition, () => {",
													"        pm.expect(jsonData.precondition).to.eql(pm.environment.get(\"testCasePrecondition\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData.creator_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has agent_ids property\", () => {",
													"        pm.expect(jsonData.agent_ids).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data does not contain test step object\", () =>{",
													"        pm.expect(jsonData.test_steps.length).to.eql(0);",
													"    });",
													"",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Automation\":",
													"                pm.test(\"Response data has automation: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"No\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseAutomationNo\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Automation Content\":",
													"                pm.test(\"Response data has empty automation content\", () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Performance\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseTypePerformance\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"High\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCasePriorityHigh\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(`[API User 1]`);",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdTestCaseAssignedToAPIUser1\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCaseDescription\"));",
													"                });",
													"                break;",
													"",
													"            case \"Precondition\":",
													"                pm.test(\"Repsonse data contains precondition: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCasePrecondition\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"testCaseName\", \"Test Case 7\");",
													"pm.environment.set(\"testCaseDescription\", \"Description of Test Case 7\");",
													"pm.environment.set(\"testCasePrecondition\", \"Precondition of Test Case 7\");",
													"",
													"pm.environment.set(\"testStepDescription1\", \"Description of test step 1\");",
													"pm.environment.set(\"testStepExpected1\", \"Expected of test step 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{testCaseName}}\",\n    \"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCaseAutomation}}\",\n\t    \t\"field_value\": \"{{fieldIdTestCaseAutomationNo}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCaseStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdTestCaseStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCaseType}}\",\n\t    \t\"field_value\": \"{{fieldIdTestCaseTypePerformance}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCaseAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdTestCaseAssignedToAPIUser1}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCaseDescription}}\",\n\t    \t\"field_value\": \"{{testCaseDescription}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCasePrecondition}}\",\n\t    \t\"field_value\": \"{{testCasePrecondition}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCasePriority}}\",\n\t    \t\"field_value\": \"{{fieldIdTestCasePriorityHigh}}\"\n\t\t}\n\t],\n\t\"parent_id\": \"{{moduleId1}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cases"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Create test case - Success with called test case",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(`Response data contains name: ${jsonData.name}`, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"testCaseName\"));",
													"    });",
													"",
													"    pm.test(\"Response data has order property\", () => {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has web_url property\", () => {",
													"        pm.expect(jsonData.web_url).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains parent_id property\", () => {",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"moduleId1\"));",
													"    });",
													"",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData.test_case_version_id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has version property\", () => {",
													"        pm.expect(jsonData.version).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(`Response data contains description property: ${jsonData.description}`, () => {",
													"        pm.expect(jsonData.description).to.eql(pm.environment.get(\"testCaseDescription\"));",
													"    });",
													"",
													"    pm.test(`Response data contains precondition property: ${jsonData.precondition}`, () => {",
													"        pm.expect(jsonData.precondition).to.eql(pm.environment.get(\"testCasePrecondition\"));",
													"    });",
													"",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData.creator_id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has agent_ids property\", () => {",
													"        pm.expect(jsonData.agent_ids).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains test step object\", () => {",
													"        pm.expect(jsonData.test_steps.length).to.not.eql(0);",
													"    });",
													"",
													"    jsonData.test_steps.forEach((step, index) => {",
													"        pm.test(`Response data has test_steps[${index}] has links property`, () => {",
													"            pm.expect(step.links).to.not.eql(null);",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] has id property`, () => {",
													"            pm.expect(step.id).to.not.eql(null);",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] has order property`, () => {",
													"            pm.expect(step.order).to.not.eql(null);",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] has ${step.attachments.length} attachment property`, () => {",
													"            pm.expect(step.attachments).to.not.eql(null);",
													"            pm.expect(step.attachments.length).to.eql(1);",
													"            pm.expect(step.attachments.links).not.to.eql(null);",
													"        });",
													"",
													"        pm.test(\"Response data contains called_test_case object\", () => {",
													"            pm.expect(pm.response.text()).to.include(\"called_test_case\");",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] has called_test_case property`, () => {",
													"            var testCaseInfo = pm.environment.get(\"testCaseInfo1\");",
													"",
													"            pm.expect(step.called_test_case.links).to.not.eql(null);",
													"            pm.expect(step.called_test_case.id).to.eql(pm.environment.get(\"linkTestCase1\"));",
													"            pm.expect(step.called_test_case.name).to.eql(testCaseInfo.name);",
													"            pm.expect(step.called_test_case.order).to.eql(testCaseInfo.order);",
													"            pm.expect(step.called_test_case.pid).to.eql(testCaseInfo.pid);",
													"            pm.expect(step.called_test_case.created_date).to.eql(testCaseInfo.created_date);",
													"            pm.expect(step.called_test_case.last_modified_date).to.not.eql(null);",
													"            pm.expect(step.called_test_case.parent_id).to.eql(testCaseInfo.parent_id);",
													"            pm.expect(step.called_test_case.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"            pm.expect(step.called_test_case.description).to.eql(testCaseInfo.description);",
													"            pm.expect(step.called_test_case.precondition).to.eql(testCaseInfo.precondition);",
													"            pm.expect(step.called_test_case.creator_id).to.eql(testCaseInfo.creator_id);",
													"            pm.expect(step.called_test_case.agent_ids).to.eql(testCaseInfo.agent_ids);",
													"",
													"            step.called_test_case.properties.forEach((field) => {",
													"                switch (field.field_name) {",
													"                    case \"Automation\":",
													"                        pm.test(`Response data has automation: ${field.field_value_name}`, () => {",
													"                            pm.expect(field.field_value_name).to.eql(\"No\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseAutomationNo\").toString());",
													"                        });",
													"                        break;",
													"",
													"                    case \"Automation Content\":",
													"                        pm.test(\"Response data has empty automation content\", () => {",
													"                            pm.expect(field.field_value).to.eql(\"\");",
													"                        });",
													"                        break;",
													"",
													"                    case \"Status\":",
													"                        pm.test(`Repsonse data has status: ${field.field_value_name}`, () => {",
													"                            pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseStatusInProgress\").toString());",
													"                        });",
													"                        break;",
													"",
													"                    case \"Type\":",
													"                        pm.test(`Repsonse data has type: ${field.field_value_name}`, () => {",
													"                            pm.expect(field.field_value_name).to.eql(\"Performance\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseTypePerformance\").toString());",
													"                        });",
													"                        break;",
													"",
													"                    case \"Priority\":",
													"                        pm.test(`Repsonse data has priority: ${field.field_value_name}`, () => {",
													"                            pm.expect(field.field_value_name).to.eql(\"High\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCasePriorityHigh\").toString());",
													"                        });",
													"                        break;",
													"",
													"                    case \"Assigned To\":",
													"                        pm.test(`Repsonse data has property assigned to`, () => {",
													"                            pm.expect(field.field_value_name).to.eql(`[API User 1]`);",
													"                            pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdTestCaseAssignedToAPIUser1\").toString());",
													"                        });",
													"                        break;",
													"",
													"                    case \"Description\":",
													"                        pm.test(`Repsonse data has description: ${field.field_value}`, () => {",
													"                            pm.expect(field.field_value).to.eql(testCaseInfo.description);",
													"                        });",
													"                        break;",
													"",
													"                    case \"Precondition\":",
													"                        pm.test(`Repsonse data has precondition: ${field.field_value}`, () => {",
													"                            pm.expect(field.field_value).to.eql(testCaseInfo.precondition);",
													"                        });",
													"                        break;",
													"                }",
													"            });",
													"        });",
													"    });",
													"",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Automation\":",
													"                pm.test(`Response data has automation: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"No\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseAutomationNo\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Automation Content\":",
													"                pm.test(\"Response data has empty automation content\", () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"",
													"            case \"Status\":",
													"                pm.test(`Repsonse data has status: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Type\":",
													"                pm.test(`Repsonse data has type: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Performance\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseTypePerformance\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(`Repsonse data has priority: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"High\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCasePriorityHigh\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(`[API User 1]`);",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdTestCaseAssignedToAPIUser1\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(`Repsonse data has description: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCaseDescription\"));",
													"                });",
													"                break;",
													"",
													"            case \"Precondition\":",
													"                pm.test(`Repsonse data has precondition: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCasePrecondition\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"testCaseName\", \"Test Case 8\");",
													"pm.environment.set(\"testCaseDescription\", \"Description of Test Case 8\");",
													"pm.environment.set(\"testCasePrecondition\", \"Precondition of Test Case 8\");",
													"",
													"pm.environment.set(\"testStepDescription1\", \"Description of test step 1\");",
													"pm.environment.set(\"testStepExpected1\", \"Expected of test step 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{testCaseName}}\",\n    \"properties\": [\n        {\n            \"field_id\": \"{{fieldIdTestCaseAutomation}}\",\n            \"field_value\": \"{{fieldIdTestCaseAutomationNo}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseStatus}}\",\n            \"field_value\": \"{{fieldIdTestCaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseType}}\",\n            \"field_value\": \"{{fieldIdTestCaseTypePerformance}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseAssignedTo}}\",\n            \"field_value\": \"[{{fieldIdTestCaseAssignedToAPIUser1}}]\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseDescription}}\",\n            \"field_value\": \"{{testCaseDescription}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCasePrecondition}}\",\n            \"field_value\": \"{{testCasePrecondition}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCasePriority}}\",\n            \"field_value\": \"{{fieldIdTestCasePriorityHigh}}\"\n        }\n    ],\n    \"test_steps\": [\n        {\n            \"description\": \"{{testStepDescription1}}\",\n            \"expected\": \"{{testStepExpected1}}\",\n            \"called_test_case_id\": \"{{linkTestCase1}}\",\n            \"attachments\": [\n                {\n                    \"name\": \"sample_file_name.txt\",\n                    \"content_type\": \"text/plain\",\n                    \"data\": \"dGhpcyBpcyBzYW1wbGUgdGVzdA==\"\n                }\n            ]\n        }\n    ],\n    \"parent_id\": \"{{moduleId1}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cases"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create test case - Call test case without test step expected result",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response body has message property contains 'testSteps[0].expectedResult Expected result of Test Step cannot be null'\", () => {",
													"        pm.expect(jsonData.message).to.include(\"Expected result of Test Step cannot be null\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), () => {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Test Case 400\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCaseAutomation}}\",\n\t    \t\"field_value\": \"{{fieldIdTestCaseAutomationNo}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCaseStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdTestCaseStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCaseType}}\",\n\t    \t\"field_value\": \"{{fieldIdTestCaseTypePerformance}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCaseAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdTestCaseAssignedToAPIUser1}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCaseDescription}}\",\n\t    \t\"field_value\": \"Description of Test Case 400\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCasePrecondition}}\",\n\t    \t\"field_value\": \"Precondition of Test Case 400\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCasePriority}}\",\n\t    \t\"field_value\": \"{{fieldIdTestCasePriorityHigh}}\"\n\t\t}\n\t],\n\t\"test_steps\": [\n\t\t{\n\t\t\t\"description\": \"Description of Test Step 400\",\n\t\t\t\"called_test_case_id\": \"{{linkTestCase1}}\"\n\t\t}\n\t],\n\t\"parent_id\": \"{{moduleId1}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cases"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Create test case - Call test case with empty test step expected result",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(`Response data contains name: ${jsonData.name}`, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"testCaseName\"));",
													"    });",
													"",
													"    pm.test(\"Response data has order property\", () => {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has web_url property\", () => {",
													"        pm.expect(jsonData.web_url).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains parent_id property\", () => {",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"moduleId1\"));",
													"    });",
													"",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData.test_case_version_id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has version property\", () => {",
													"        pm.expect(jsonData.version).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(`Response data contains description property: ${jsonData.description}`, () => {",
													"        pm.expect(jsonData.description).to.eql(pm.environment.get(\"testCaseDescription\"));",
													"    });",
													"",
													"    pm.test(`Response data contains precondition property: ${jsonData.precondition}`, () => {",
													"        pm.expect(jsonData.precondition).to.eql(pm.environment.get(\"testCasePrecondition\"));",
													"    });",
													"",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData.creator_id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has agent_ids property\", () => {",
													"        pm.expect(jsonData.agent_ids).to.not.eql(null);",
													"    });",
													"",
													"    jsonData.test_steps.forEach((step, index) => {",
													"        pm.test(`Response data has test_steps[${index}] has links property`, () => {",
													"            pm.expect(step.links).to.not.eql(null);",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] has id property`, () => {",
													"            pm.expect(step.id).to.not.eql(null);",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] has order property`, () => {",
													"            pm.expect(step.order).to.not.eql(null);",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] has ${step.attachments.length} attachment property`, () => {",
													"            pm.expect(step.attachments).to.not.eql(null);",
													"            pm.expect(step.attachments.length).to.eql(1);",
													"            pm.expect(step.attachments.links).not.to.eql(null);",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] has called_test_case property`, () => {",
													"            var testCaseInfo = pm.environment.get(\"testCaseInfo1\");",
													"",
													"            pm.expect(step.called_test_case.links).to.not.eql(null);",
													"            pm.expect(step.called_test_case.id).to.eql(pm.environment.get(\"linkTestCase1\"));",
													"            pm.expect(step.called_test_case.name).to.eql(testCaseInfo.name);",
													"            pm.expect(step.called_test_case.order).to.eql(testCaseInfo.order);",
													"            pm.expect(step.called_test_case.pid).to.eql(testCaseInfo.pid);",
													"            pm.expect(step.called_test_case.created_date).to.eql(testCaseInfo.created_date);",
													"            pm.expect(step.called_test_case.last_modified_date).to.not.eql(null);",
													"            pm.expect(step.called_test_case.parent_id).to.eql(testCaseInfo.parent_id);",
													"            pm.expect(step.called_test_case.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"            pm.expect(step.called_test_case.description).to.eql(testCaseInfo.description);",
													"            pm.expect(step.called_test_case.precondition).to.eql(testCaseInfo.precondition);",
													"            pm.expect(step.called_test_case.creator_id).to.eql(testCaseInfo.creator_id);",
													"            pm.expect(step.called_test_case.agent_ids).to.eql(testCaseInfo.agent_ids);",
													"",
													"            step.called_test_case.properties.forEach((field) => {",
													"                switch (field.field_name) {",
													"                    case \"Automation\":",
													"                        pm.test(`Response data has automation: ${field.field_value_name}`, () => {",
													"                            pm.expect(field.field_value_name).to.eql(\"No\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseAutomationNo\").toString());",
													"                        });",
													"                        break;",
													"",
													"                    case \"Automation Content\":",
													"                        pm.test(\"Response data has empty automation content\", () => {",
													"                            pm.expect(field.field_value).to.eql(\"\");",
													"                        });",
													"                        break;",
													"",
													"                    case \"Status\":",
													"                        pm.test(`Repsonse data has status: ${field.field_value_name}`, () => {",
													"                            pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseStatusInProgress\").toString());",
													"                        });",
													"                        break;",
													"",
													"                    case \"Type\":",
													"                        pm.test(`Repsonse data has type: ${field.field_value_name}`, () => {",
													"                            pm.expect(field.field_value_name).to.eql(\"Performance\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseTypePerformance\").toString());",
													"                        });",
													"                        break;",
													"",
													"                    case \"Priority\":",
													"                        pm.test(`Repsonse data has priority: ${field.field_value_name}`, () => {",
													"                            pm.expect(field.field_value_name).to.eql(\"High\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCasePriorityHigh\").toString());",
													"                        });",
													"                        break;",
													"",
													"                    case \"Assigned To\":",
													"                        pm.test(`Repsonse data has property assigned to`, () => {",
													"                            pm.expect(field.field_value_name).to.eql(`[API User 1]`);",
													"                            pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdTestCaseAssignedToAPIUser1\").toString());",
													"                        });",
													"                        break;",
													"",
													"                    case \"Description\":",
													"                        pm.test(`Repsonse data has description: ${field.field_value}`, () => {",
													"                            pm.expect(field.field_value).to.eql(testCaseInfo.description);",
													"                        });",
													"                        break;",
													"",
													"                    case \"Precondition\":",
													"                        pm.test(`Repsonse data has precondition: ${field.field_value}`, () => {",
													"                            pm.expect(field.field_value).to.eql(testCaseInfo.precondition);",
													"                        });",
													"                        break;",
													"                }",
													"            });",
													"        });",
													"    });",
													"",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Automation\":",
													"                pm.test(`Response data has automation: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"No\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseAutomationNo\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Automation Content\":",
													"                pm.test(\"Response data has empty automation content\", () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"",
													"            case \"Status\":",
													"                pm.test(`Repsonse data has status: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Type\":",
													"                pm.test(`Repsonse data has type: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Performance\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseTypePerformance\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(`Repsonse data has priority: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"High\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCasePriorityHigh\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(`[API User 1]`);",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdTestCaseAssignedToAPIUser1\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(`Repsonse data has description: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCaseDescription\"));",
													"                });",
													"                break;",
													"",
													"            case \"Precondition\":",
													"                pm.test(`Repsonse data has precondition: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCasePrecondition\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"testCaseName\", \"Test Case 10\");",
													"pm.environment.set(\"testCaseDescription\", \"Description of Test Case 10\");",
													"pm.environment.set(\"testCasePrecondition\", \"Precondition of Test Case 10\");",
													"",
													"pm.environment.set(\"testStepDescription1\", \"Description of test step 1\");",
													"pm.environment.set(\"testStepExpected1\", \"Expected of test step 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{testCaseName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCaseAutomation}}\",\n\t    \t\"field_value\": \"{{fieldIdTestCaseAutomationNo}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCaseStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdTestCaseStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCaseType}}\",\n\t    \t\"field_value\": \"{{fieldIdTestCaseTypePerformance}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCaseAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdTestCaseAssignedToAPIUser1}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCaseDescription}}\",\n\t    \t\"field_value\": \"{{testCaseDescription}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCasePrecondition}}\",\n\t    \t\"field_value\": \"{{testCasePrecondition}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCasePriority}}\",\n\t    \t\"field_value\": \"{{fieldIdTestCasePriorityHigh}}\"\n\t\t}\n\t],\n\t\"test_steps\": [\n\t\t{\n\t\t\t\"description\": \"{{testStepDescription1}}\",\n\t\t\t\"expected\": \"\",\n\t\t\t\"called_test_case_id\": \"{{linkTestCase1}}\",\n\t\t\t\"attachments\": [\n                {\n                    \"name\": \"sample_file_name.txt\",\n                    \"content_type\": \"text/plain\",\n                    \"data\": \"dGhpcyBpcyBzYW1wbGUgdGVzdA==\"\n                }\n            ]\n\t\t}\n\t],\n\t\"parent_id\": \"{{moduleId1}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cases"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"projectEndDate\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"tokenType\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"projectId\");",
													"    pm.environment.unset(\"projectName\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"projectEndDate\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    ",
													"    pm.environment.unset(\"moduleId1\");",
													"    pm.environment.unset(\"moduleId2\");",
													"    ",
													"    pm.environment.unset(\"fieldIdTestCaseAutomation\");",
													"    pm.environment.unset(\"fieldIdTestCaseAutomationYes\");",
													"    pm.environment.unset(\"fieldIdTestCaseAutomationNo\");",
													"    pm.environment.unset(\"fieldIdTestCaseAutomationContent\");",
													"    pm.environment.unset(\"fieldIdTestCaseStatus\");",
													"    pm.environment.unset(\"fieldIdTestCaseStatusNew\");",
													"    pm.environment.unset(\"fieldIdTestCaseStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdTestCaseStatusReadyForBaseline\");",
													"    pm.environment.unset(\"fieldIdTestCaseStatusBaselined\");",
													"    pm.environment.unset(\"fieldIdTestCaseType\");",
													"    pm.environment.unset(\"fieldIdTestCaseTypeManual\");",
													"    pm.environment.unset(\"fieldIdTestCaseTypeAutomation\");",
													"    pm.environment.unset(\"fieldIdTestCaseTypePerformance\");",
													"    pm.environment.unset(\"fieldIdTestCaseTypeScenario\");",
													"    pm.environment.unset(\"fieldIdTestCaseAssignedTo\");",
													"    pm.environment.unset(\"fieldIdTestCaseAssignedToAPIUser1\"); ",
													"    pm.environment.unset(\"fieldIdTestCaseAssignedToSiteAdminUser\");",
													"    pm.environment.unset(\"fieldIdTestCaseDescription\");",
													"    pm.environment.unset(\"fieldIdTestCasePrecondition\");",
													"    pm.environment.unset(\"fieldIdTestCasePriority\");",
													"    pm.environment.unset(\"fieldIdTestCasePriorityUndecided\");",
													"    pm.environment.unset(\"fieldIdTestCasePriorityLow\");",
													"    pm.environment.unset(\"fieldIdTestCasePriorityMedium\");",
													"    pm.environment.unset(\"fieldIdTestCasePriorityHigh\");",
													"    pm.environment.unset(\"fieldIdTestCasePriorityUrgent\");",
													"    ",
													"    pm.environment.unset(\"testCaseName\");",
													"    pm.environment.unset(\"testCaseDescription\");",
													"    pm.environment.unset(\"testCasePrecondition\");",
													"    pm.environment.unset(\"testStepDescription1\");",
													"    pm.environment.unset(\"testStepExpected1\");",
													"    pm.environment.unset(\"testCaseAutomationContent\");",
													"    ",
													"    pm.environment.unset(\"linkTestCase1\");",
													"    pm.environment.unset(\"testCaseInfo1\");",
													"    pm.environment.unset(\"userId\");",
													"    pm.environment.unset(\"moduleId2\");",
													"    ",
													"    pm.environment.unset(\"username1\");",
													"    pm.environment.unset(\"firstName1\");",
													"    pm.environment.unset(\"lastName1\");",
													"    pm.environment.unset(\"email1\");",
													"    ",
													"    var userList = pm.environment.get(\"userList\");",
													"    userList.forEach((user) => {",
													"        var userName = `fieldIdTestCaseAssignedTo${user.first_name}${user.last_name}`.replace(/[\\s\\/-]/g, \"\");",
													"        pm.environment.unset(userName);",
													"    });",
													"    pm.environment.unset(\"userList\");",
													"    pm.environment.unset(\"fieldIdTestCaseAssignedToUserTest\");",
													"    pm.environment.unset(\"userTestFullName\");",
													"    pm.environment.unset(\"userId\");",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Create a test cycle",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code + \" -  Login\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"    ",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Get user id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Response data contains data of apiuser1@qas.com\", function() {",
													"        pm.expect(jsonData.items[0].username).to.eql(pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"        pm.expect(pm.response.text()).to.include(\"email\");",
													"        pm.expect(jsonData.items[0].first_name).to.eql(\"API\");",
													"        pm.expect(jsonData.items[0].last_name).to.eql(\"User 1\");",
													"        pm.expect(pm.response.text()).to.include(\"status\");",
													"        pm.expect(pm.response.text()).to.include(\"timezone_offset\");",
													"        pm.expect(pm.response.text()).to.include(\"country_name\");",
													"    });",
													"    ",
													"    pm.environment.set(\"userId\", jsonData.items[0].id);",
													"",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"username1\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"pm.environment.set(\"firstName1\", \"API\");",
													"pm.environment.set(\"lastName1\", \"User 1\");",
													"pm.environment.set(\"email1\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/users/search?username={{username1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"users",
												"search"
											],
											"query": [
												{
													"key": "username",
													"value": "{{username1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.test(\"Response data contains all properties of project data\", function(){",
													"        pm.expect(pm.response.text()).to.include(\"id\");",
													"        pm.expect(jsonData.name).to.eql(\"qTest API - Postman\");",
													"        pm.expect(jsonData.description).to.eql(\"Description of qTest API - Postman\");",
													"        pm.expect(pm.response.text()).to.include(\"status_id\");",
													"        pm.expect(pm.response.text()).to.include(\"start_date\");",
													"        pm.expect(pm.response.text()).to.include(\"end_date\");",
													"        pm.expect(pm.response.text()).to.include(\"sample\");",
													"        pm.expect(pm.response.text()).to.include(\"defect_tracking_systems\");",
													"        pm.expect(pm.response.text()).to.include(\"x_explorer_access_level\");",
													"        pm.expect(pm.response.text()).to.include(\"date_format\");",
													"        pm.expect(jsonData.automation.toString()).to.eql(\"true\");",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate\", pm.environment.get(\"startDate\"));",
													"    pm.environment.set(\"projectEndDate\", pm.environment.get(\"endDate\"));",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\", \"{{prefixApiUser}}apiuser1@qas.com\"\n  ],\n  \"automation\": true\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get release fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdRelease\";",
													"    var jsonData = pm.response.json();",
													"",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/\\s/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                const fieldValueId = PREFIX + field.label + item.label.replace(/\\s/g, \"\");",
													"                pm.environment.set(fieldValueId, item.value);",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/releases/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"releases",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create Release",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newReleaseId1\", jsonData.id);",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct release info\", function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"releaseName\"));",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.description).to.not.eql(null);",
													"        pm.expect(jsonData.note).to.not.eql(null);",
													"    });",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"releaseName\", \"Release 1\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate\", today.toISOString());",
													"today.setDate(today.getDate() + 10);",
													"pm.environment.set(\"endDate\", today.toISOString());",
													"",
													"pm.environment.set(\"releaseDescription\", \"Description of the release\");",
													"pm.environment.set(\"releaseNote\", \"Note of the release\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{releaseName}}\",\n    \"properties\": [\n      {\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"{{releaseDescription}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"{{releaseNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get build fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdBuild\";",
													"    var jsonData = pm.response.json();",
													"",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/\\s/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                const fieldValueId = PREFIX + field.label + item.label.replace(/\\s/g, \"\");",
													"                pm.environment.set(fieldValueId, item.value);",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/builds/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"builds",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create build",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newBuildId1\", jsonData.id);",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Response data has links\", function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id\", function() {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name: \" + jsonData.name, function() {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"buildName\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has order\", function() {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid\", function() {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modify_date\", function() {",
													"        pm.expect(jsonData.last_modify_date).to.not.eql(null);",
													"    });",
													"",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has build status is 'In Progress'\", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdBuildStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Build Date\":",
													"                pm.test(\"Repsonse data has property build date\", function() {",
													"                    tmp = pm.environment.get(\"buildDate\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Build Note\":",
													"                pm.test(\"Repsonse data has build note '\" + field.field_value + \"'\", function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"buildNote\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"buildName\", \"Build 1\");",
													"",
													"var today = new Date();",
													"today.setDate(today.getDate() + 1);",
													"pm.environment.set(\"buildDate\", today.toISOString());",
													"pm.environment.set(\"buildNote\", \"Note of the build\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{buildName}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdBuildStatus}},\n            \"field_value\": \"{{fieldIdBuildStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ],\n    \"release\": {\n    \t\"id\": \"{{newReleaseId1}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Create test cycle - Success with parentType=root",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"cycle1_id\", jsonData.id);",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Response data has links\", function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id\", function() {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name: \" + jsonData.name, function() {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"cycleName\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has order\", function() {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid\", function() {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modify_date\", function() {",
													"        pm.expect(jsonData.last_modify_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains description: \" + jsonData.description, function() {",
													"        pm.expect(jsonData.description).to.eql(pm.environment.get(\"cycleDescription\"));",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"cycleName\", \"Test Cycle 1\");",
													"pm.environment.set(\"cycleDescription\", \"Description of Test Cycle 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{cycleName}}\",\n    \"description\": \"{{cycleDescription}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cycles?parentId=0&parentType=root",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cycles"
											],
											"query": [
												{
													"key": "parentId",
													"value": "0"
												},
												{
													"key": "parentType",
													"value": "root"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create test cycle - Not exist test cycle id",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains message: 'TestCycle does not exist'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"does not exist\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Test Cycle 1\",\n    \"description\": \"Description of Test Cycle 1\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cycles?parentId={{cycle1_id}}1111&parentType=test-cycle",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cycles"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{cycle1_id}}1111"
												},
												{
													"key": "parentType",
													"value": "test-cycle"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create test cycle - Invalid test cycle id",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"    const expectedMessage = 'Failed to convert value of type';",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(`Repsonse body has message property contains '${expectedMessage}'`, function() {",
													"        pm.expect(jsonData.message).to.include(expectedMessage);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Test Cycle 1\",\n    \"description\": \"Description of Test Cycle 1\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cycles?parentId=ab{{newReleaseId1}}1111&parentType=test-cycle",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cycles"
											],
											"query": [
												{
													"key": "parentId",
													"value": "ab{{newReleaseId1}}1111"
												},
												{
													"key": "parentType",
													"value": "test-cycle"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create test cycle - With name contains more than 500 chars",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"    var jsonData = pm.response.json();",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'name size must be between 1 and 500'\", function() {",
													"        pm.expect(jsonData.message).to.eql(\"name size must be between 1 and 500\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI - The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI - The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI- The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI -The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI\",\n  \"description\": \"Description for Test Cycle 1\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cycles?parentId={{newReleaseId1}}&parentType=release",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cycles"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newReleaseId1}}"
												},
												{
													"key": "parentType",
													"value": "release"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create test cycle - Invalid target_release_id",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"    const expectedMessage = 'not a valid Long value';",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(`Repsonse body has message property contains '${expectedMessage}'`, function() {",
													"        pm.expect(jsonData.message).to.include(expectedMessage);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Test Cycle of Release 1\",\n    \"description\": \"Description of Test Cycle 1\",\n    \"target_release_id\": \"abc{{newReleaseId1}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cycles?parentType=release",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cycles"
											],
											"query": [
												{
													"key": "parentType",
													"value": "release"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Create test cycle - Under release and associated with buildId",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"cycle7_id\", jsonData.id);",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Response data has links\", function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id\", function() {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name: \" + jsonData.name, function() {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"cycleName\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has order\", function() {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid\", function() {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modify_date\", function() {",
													"        pm.expect(jsonData.last_modify_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains description: \" + jsonData.description, function() {",
													"        pm.expect(jsonData.description).to.eql(pm.environment.get(\"cycleDescription\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data contains value of target_release_id property\", function() {",
													"        pm.expect(jsonData.target_release_id).to.eql(pm.environment.get(\"newReleaseId1\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data contains value of target_build_id property\", function() {",
													"        pm.expect(jsonData.target_build_id).to.eql(pm.environment.get(\"newBuildId1\"));",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"cycleName\", \"Cycle 3 of Build 1\");",
													"pm.environment.set(\"cycleDescription\", \"Description of Cycle 3 of Build 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{cycleName}}\",\n    \"description\": \"{{cycleDescription}}\",\n    \"target_build_id\": \"{{newBuildId1}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cycles?parentType=release&parentId={{newReleaseId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cycles"
											],
											"query": [
												{
													"key": "parentType",
													"value": "release"
												},
												{
													"key": "parentId",
													"value": "{{newReleaseId1}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete release",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.environment.unset(\"newReleaseId1\");",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/{{newReleaseId1}}?force=true",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"{{newReleaseId1}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete test cycle 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cycles/{{cycle1_id}}?force=true",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cycles",
												"{{cycle1_id}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete test cycle 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cycles/{{cycle4_id}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cycles",
												"{{cycle4_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete test cycle 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cycles/{{cycle5_id}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cycles",
												"{{cycle5_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"projectEndDate\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"releaseName\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"    pm.environment.unset(\"releaseDescription\");",
													"    pm.environment.unset(\"releaseNote\");",
													"    pm.environment.unset(\"fieldIdReleaseStatus\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusPlanned\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusCompleted\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusClosed\");",
													"    pm.environment.unset(\"fieldIdReleaseStartDate\");",
													"    pm.environment.unset(\"fieldIdReleaseEndDate\");",
													"    pm.environment.unset(\"fieldIdReleaseDescription\");",
													"    pm.environment.unset(\"fieldIdReleaseReleaseNote\");",
													"    ",
													"    pm.environment.unset(\"fieldIdBuildStatus\");",
													"    pm.environment.unset(\"fieldIdBuildStatusPlanned\");",
													"    pm.environment.unset(\"fieldIdBuildStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdBuildStatusCompleted\");",
													"    pm.environment.unset(\"fieldIdBuildStatusClosed\");",
													"    pm.environment.unset(\"fieldIdBuildBuildDate\");",
													"    pm.environment.unset(\"fieldIdBuildBuildNote\");",
													"    pm.environment.unset(\"newReleaseId1\");",
													"    pm.environment.unset(\"newBuildId1\");",
													"    pm.environment.unset(\"buildDate\");",
													"    pm.environment.unset(\"buildNote\");",
													"    pm.environment.unset(\"buildName\");",
													"    ",
													"    pm.environment.unset(\"cycleName\");",
													"    pm.environment.unset(\"cycleDescription\");",
													"    pm.environment.unset(\"cycle1_id\");",
													"    pm.environment.unset(\"cycle2_id\");",
													"    pm.environment.unset(\"cycle3_id\");",
													"    pm.environment.unset(\"cycle4_id\");",
													"    pm.environment.unset(\"cycle5_id\");",
													"    pm.environment.unset(\"cycle6_id\");",
													"    pm.environment.unset(\"cycle7_id\");",
													"    pm.environment.unset(\"cycle8_id\");",
													"    ",
													"    pm.environment.unset(\"siteAdminId\");",
													"    pm.environment.unset(\"userId\");",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"tokenType\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"    ",
													"    pm.environment.unset(\"username1\");",
													"    pm.environment.unset(\"firstName1\");",
													"    pm.environment.unset(\"lastName1\");",
													"    pm.environment.unset(\"email1\");",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Create a test suite",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    //assert response body",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"",
													"    let CryptoJS = require(\"crypto-js\");",
													"    //Encrypt",
													"    let rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    let base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 201;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 201-Created",
													"pm.test(`Response status should be 201-Created ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate\", jsonData.start_date);",
													"    pm.environment.set(\"projectEndDate\", jsonData.end_date);",
													"    pm.environment.set(\"projectName\", jsonData.name);",
													"    ",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman - Create a Test Suite\",\n  \"description\": \"Description of qTest API Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\"\n  ],\n  \"automation\": true\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Queries Users by Project Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.environment.set(\"userList\", jsonData.items);",
													"    ",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/search/user?projectName={{projectName}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"search",
												"user"
											],
											"query": [
												{
													"key": "projectName",
													"value": "{{projectName}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get release fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"const PREFIX = \"fieldIdRelease\";",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"",
													"    var jsonData = pm.response.json();",
													"    var userList = pm.environment.get(\"userList\");",
													"    pm.environment.set(\"releaseFields\", jsonData);",
													"",
													"    jsonData.forEach((field) => {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"",
													"        if (field.allowed_values) {",
													"            var fieldValueId = \"\";",
													"",
													"            field.allowed_values.forEach((item, index) => {",
													"                fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                pm.environment.set(fieldValueId, item.value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/releases/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"releases",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create Release",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newReleaseId1\", jsonData.id);",
													"    pm.environment.set(\"releaseInfo1\", jsonData);",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"releaseName\", \"Release 1\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate\", today.toISOString());",
													"today.setDate(today.getDate() + 10);",
													"pm.environment.set(\"endDate\", today.toISOString());",
													"",
													"pm.environment.set(\"releaseDescription\", \"Description of the release\");",
													"pm.environment.set(\"releaseNote\", \"Note of the release\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{releaseName}}\",\n    \"properties\": [\n      {\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"{{releaseDescription}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"{{releaseNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get build fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"const PREFIX = \"fieldIdBuild\";",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    var jsonData = pm.response.json();",
													"    var userList = pm.environment.get(\"userList\");",
													"    pm.environment.set(\"buildFields\", jsonData);",
													"",
													"    jsonData.forEach((field) => {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"",
													"        if (field.allowed_values) {",
													"            var fieldValueId = \"\";",
													"",
													"            field.allowed_values.forEach((item, index) => {",
													"                fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                pm.environment.set(fieldValueId, item.value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/builds/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"builds",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create build",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newBuildId1\", jsonData.id);",
													"    pm.environment.set(\"buildInfo1\", jsonData);",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"buildName\", \"Build 1\");",
													"",
													"var today = new Date();",
													"today.setDate(today.getDate() + 1);",
													"pm.environment.set(\"buildDate\", today.toISOString());",
													"pm.environment.set(\"buildNote\", \"Note of the build\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{buildName}}\",\n    \"properties\": [\n      {\n            \"field_id\": {{fieldIdBuildStatus}},\n            \"field_value\": \"{{fieldIdBuildStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ],\n    \"release\": {\n      \"id\": \"{{newReleaseId1}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create a cycle",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newCycleId1\", jsonData.id);",
													"    pm.environment.set(\"cycleInfo1\", jsonData);",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"cycleName\", \"Cycle 1\");",
													"pm.environment.set(\"cycleDescription\", \"Description of Test Cycle 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{cycleName}}\",\n    \"description\": \"{{cycleDescription}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cycles?parentId=0&parentType=root",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cycles"
											],
											"query": [
												{
													"key": "parentId",
													"value": "0"
												},
												{
													"key": "parentType",
													"value": "root"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get test suite fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"const PREFIX = \"fieldIdTestSuite\";",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    var jsonData = pm.response.json();",
													"    var userList = pm.environment.get(\"userList\");",
													"    pm.environment.set(\"testSuiteFields\", jsonData);",
													"",
													"    jsonData.forEach((field) => {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"",
													"        if (field.allowed_values) {",
													"            var fieldValueId = \"\";",
													"",
													"            field.allowed_values.forEach((item, index) => {",
													"",
													"                switch (field.label) {",
													"                    case \"Assigned To\":",
													"                        userList.forEach((user, userIndex) => {",
													"                            // Just save variables of users who have admin permission",
													"                            if (item.label === `${user.first_name} ${user.last_name}`) {",
													"                                if (user.username === pm.environment.get(\"username\")) {",
													"                                    // UserTest: user who directly affects to the test case",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + `UserTest`;",
													"                                    pm.environment.set(\"userTestFullName\", item.label);",
													"                                } else {",
													"                                    // Other users who have admin permission",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                                }",
													"                                pm.environment.set(fieldValueId, item.value);",
													"                            }",
													"                        });",
													"                        break;",
													"                    case \"Target Release/Build\":",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"Target\" + (index + 1).toString();",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                        break;",
													"                    default:",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                        break;",
													"                }",
													"",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/test-suites/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"test-suites",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Get user id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Response data contains data of apiuser1@qas.com\", function() {",
													"        pm.expect(jsonData.items[0].username).to.eql(pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"        pm.expect(pm.response.text()).to.include(\"email\");",
													"        pm.expect(jsonData.items[0].first_name).to.eql(\"API\");",
													"        pm.expect(jsonData.items[0].last_name).to.eql(\"User 1\");",
													"        pm.expect(pm.response.text()).to.include(\"status\");",
													"        pm.expect(pm.response.text()).to.include(\"timezone_offset\");",
													"        pm.expect(pm.response.text()).to.include(\"country_name\");",
													"    });",
													"    ",
													"    pm.environment.set(\"userId\", jsonData.items[0].id);",
													"",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Inititalize Json body for api user 1. To be reused as baseline when verifying in test script",
													"let apiuser1 = {",
													"    \"username\": pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\",",
													"    \"first_name\": \"API\",",
													"    \"last_name\": \"User 1\",",
													"    \"email\": \"{{username}}\",",
													"    \"password\": \"{{password}}\"",
													"};",
													"pm.environment.set(\"assignedUser2\", apiuser1.username);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/users/search?username={{assignedUser2}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"users",
												"search"
											],
											"query": [
												{
													"key": "username",
													"value": "{{assignedUser2}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 201;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 201-Created",
													"pm.test(`Response status should be 201-Created ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"",
													"if (result) {",
													"   //get response body",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"projectId2\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate2\", jsonData.start_date);",
													"    pm.environment.set(\"projectEndDate2\", jsonData.end_date);",
													"    pm.environment.set(\"projectName2\", jsonData.name);",
													"    ",
													"    pm.environment.unset(\"startDate2\");",
													"    pm.environment.unset(\"endDate2\");",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"let startDate = new Date();",
													"let endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"// Function to add 0 before datetime value if it is less than 10",
													"Number.prototype.padLeft = function(base, chr) {",
													"    var len = (String(base || 10).length - String(this).length) + 1;",
													"    return len > 0 ? new Array(len).join(chr || '0') + this : this;",
													"};",
													"",
													"// Generate dynamic string for ProfileName",
													"let uniqueString = new Date(),",
													"    uniqueStringFormat = [(uniqueString.getMonth() + 1).padLeft(),",
													"        uniqueString.getDate().padLeft(),",
													"        uniqueString.getFullYear(),",
													"    ].join('') + '-' + [uniqueString.getHours().padLeft(),",
													"        uniqueString.getMinutes().padLeft(),",
													"        uniqueString.getSeconds().padLeft(),",
													"        uniqueString.getMilliseconds().padLeft()",
													"    ].join('');",
													"",
													"const projectName = \"qTest API - Postman\";",
													"pm.environment.set(\"projectName2\", `${projectName}${uniqueStringFormat}`);",
													"",
													"pm.environment.set(\"startDate2\", startDate.toISOString());",
													"pm.environment.set(\"endDate2\", endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{projectName2}}\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate2}}\",\n  \"end_date\": \"{{endDate2}}\",\n  \"admins\": [\n     \"{{username}}\",\"{{assignedUser2}}\"\n  ],\n  \"automation\": true\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Queries Users by Project Name 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.environment.set(\"userList2\", jsonData.items);",
													"    ",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/search/user?projectName={{projectName2}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"search",
												"user"
											],
											"query": [
												{
													"key": "projectName",
													"value": "{{projectName2}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get test suite fields 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"const PREFIX = \"fieldIdTestSuite2\";",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    var jsonData = pm.response.json();",
													"    var userList = pm.environment.get(\"userList2\");",
													"    pm.environment.set(\"testSuiteFields2\", jsonData);",
													"",
													"    jsonData.forEach((field) => {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"",
													"        if (field.allowed_values) {",
													"            var fieldValueId = \"\";",
													"",
													"            field.allowed_values.forEach((item, index) => {",
													"",
													"                switch (field.label) {",
													"                    case \"Assigned To\":",
													"                        userList.forEach((user, userIndex) => {",
													"                            // Just save variables of users who have admin permission",
													"                            if (item.label === `${user.first_name} ${user.last_name}`) {",
													"                                if (user.username === pm.environment.get(\"username\")) {",
													"                                    // UserTest: user who directly affects to the test case",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + `UserTest`;",
													"                                    pm.environment.set(\"userTestFullName\", item.label);",
													"                                } else {",
													"                                    // Other users who have admin permission",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                                }",
													"                                pm.environment.set(fieldValueId, item.value);",
													"                            }",
													"                        });",
													"                        break;",
													"                    case \"Target Release/Build\":",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"Target\" + (index + 1).toString();",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                        break;",
													"                    default:",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                        break;",
													"                }",
													"",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId2}}/settings/test-suites/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId2}}",
												"settings",
												"test-suites",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Login - Success with normal user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"pm.test(\"Status code is returned as 200-OK\", () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken1\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType1\", jsonData.token_type);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{prefixApiUser}}apiuser1@qas.com",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Create test suite - Success at root",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"const suiteName = pm.environment.get(\"suiteName\");",
													"const assignedUserId = pm.environment.get(\"fieldIdTestSuiteAssignedToUserTest\");",
													"const assignedFullName = pm.environment.get(\"userTestFullName\");",
													"const executionTypeId = pm.environment.get(\"fieldIdTestSuiteExecutionTypeSmoke\");",
													"const executionName = \"Smoke\";",
													"const description = pm.environment.get(\"suiteDescription\");",
													"const plannedStartDate = pm.environment.get(\"startDate\").split(\".\");",
													"const plannedEndDate = pm.environment.get(\"endDate\").split(\".\");",
													"const plannedStartDateFieldId = pm.environment.get(\"fieldIdTestSuitePlannedStartDate\");",
													"const plannedEndDateFieldId = pm.environment.get(\"fieldIdTestSuitePlannedEndDate\");",
													"const targetReleaseBuildFieldId = pm.environment.get(\"fieldIdTestSuiteTargetReleaseBuild\");",
													"const environmentFieldId = pm.environment.get(\"fieldIdTestSuiteEnvironment\");",
													"const assignedToFieldId = pm.environment.get(\"fieldIdTestSuiteAssignedTo\");",
													"const executionTypeFieldId = pm.environment.get(\"fieldIdTestSuiteExecutionType\");",
													"const descriptionFieldId = pm.environment.get(\"fieldIdTestSuiteDescription\");",
													"const expectedResponse = {",
													"    \"name\": suiteName,",
													"    \"properties\": [{",
													"        \"field_id\": plannedStartDateFieldId.toString(),",
													"        \"field_name\": \"Planned Start Date\",",
													"        \"field_value\": plannedStartDate[0],",
													"    }, {",
													"        \"field_id\": plannedEndDateFieldId.toString(),",
													"        \"field_name\": \"Planned End Date\",",
													"        \"field_value\": plannedEndDate[0],",
													"    }, {",
													"        \"field_id\": targetReleaseBuildFieldId,",
													"        \"field_name\": \"Target Release/Build\",",
													"        \"field_value\": \"\"",
													"    }, {",
													"        \"field_id\": environmentFieldId,",
													"        \"field_name\": \"Environment\",",
													"        \"field_value\": \"\"",
													"    }, {",
													"        \"field_id\": assignedToFieldId,",
													"        \"field_name\": \"Assigned To\",",
													"        \"field_value\": `[${assignedUserId}]`,",
													"        \"field_value_name\": `[${assignedFullName}]`",
													"    }, {",
													"        \"field_id\": executionTypeFieldId,",
													"        \"field_name\": \"Execution Type\",",
													"        \"field_value\": executionTypeId,",
													"        \"field_value_name\": executionName",
													"    }, {",
													"        \"field_id\": descriptionFieldId,",
													"        \"field_name\": \"Description\",",
													"        \"field_value\": description",
													"    }]",
													"};",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value",
													"function searchJSONItemFromList(jsonList, expectedKey, expectedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            return jsonList[i];",
													"        }",
													"    }",
													"    return null;",
													"}",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has id\", () => {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains name\", () => {",
													"        pm.expect(jsonData.name).to.eql(expectedResponse.name);",
													"    });",
													"",
													"    pm.test(\"Response data has order\", () => {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has pid\", () => {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has created_date\", () => {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has last_modify_date\", () => {",
													"        pm.expect(jsonData.last_modify_date).to.not.eql(null);",
													"    });",
													"",
													"    // Verify that number of properties in in JSON response should be the same as expectation",
													"    pm.test(\"Number of properties in in JSON response should be the same as expectation\", () => {",
													"        pm.expect(jsonData.properties.length).to.eql(expectedResponse.properties.length);",
													"    });",
													"",
													"    // Get Planned Start Date property to verify",
													"    const orgPlannedStartDate = searchJSONItemFromList(jsonData.properties, \"field_name\", \"Planned Start Date\");",
													"    const expPlannedStartDate = searchJSONItemFromList(expectedResponse.properties, \"field_name\", \"Planned Start Date\");",
													"    pm.test(\"Repsonse data contains Planned Start Date\", () => {",
													"        pm.expect(orgPlannedStartDate.field_id.toString()).to.include(expPlannedStartDate.field_id);",
													"        pm.expect(orgPlannedStartDate.field_value).to.include(expPlannedStartDate.field_value);",
													"    });",
													"",
													"    // Get Planned End Date property to verify",
													"    const orgPlannedEndDate = searchJSONItemFromList(jsonData.properties, \"field_name\", \"Planned End Date\");",
													"    const expPlannedEndDate = searchJSONItemFromList(expectedResponse.properties, \"field_name\", \"Planned End Date\");",
													"    pm.test(\"Repsonse data contains Planned End Date\", () => {",
													"        pm.expect(orgPlannedEndDate.field_id.toString()).to.include(expPlannedEndDate.field_id);",
													"        pm.expect(orgPlannedEndDate.field_value).to.include(expPlannedEndDate.field_value);",
													"    });",
													"",
													"    // Get Target Release/Build property to verify",
													"    const orgTargetReleaseBuild = searchJSONItemFromList(jsonData.properties, \"field_name\", \"Target Release/Build\");",
													"    const expTargetReleaseBuild = searchJSONItemFromList(expectedResponse.properties, \"field_name\", \"Target Release/Build\");",
													"    pm.test(\"Repsonse data has Target Release/Build property\", () => {",
													"        pm.expect(orgTargetReleaseBuild.field_id).to.eql(expTargetReleaseBuild.field_id);",
													"        pm.expect(orgTargetReleaseBuild.field_value).to.eql(expTargetReleaseBuild.field_value);",
													"    });",
													"",
													"    // Get Environment property to verify",
													"    const orgEnvironment = searchJSONItemFromList(jsonData.properties, \"field_name\", \"Environment\");",
													"    const expEnvironment = searchJSONItemFromList(expectedResponse.properties, \"field_name\", \"Environment\");",
													"    pm.test(\"Repsonse data has Environment property\", () => {",
													"        pm.expect(orgEnvironment.field_id).to.eql(expEnvironment.field_id);",
													"        pm.expect(orgEnvironment.field_value).to.eql(expEnvironment.field_value);",
													"    });",
													"",
													"",
													"    // Get Assigned To property to verify",
													"    const orgAssignedTo = searchJSONItemFromList(jsonData.properties, \"field_name\", \"Assigned To\");",
													"    const expAssignedTo = searchJSONItemFromList(expectedResponse.properties, \"field_name\", \"Assigned To\");",
													"    pm.test(\"Repsonse data has Assigned To property\", () => {",
													"        pm.expect(orgAssignedTo.field_id).to.eql(expAssignedTo.field_id);",
													"        pm.expect(orgAssignedTo.field_value).to.eql(expAssignedTo.field_value);",
													"    });",
													"",
													"    // Get Execution Type property to verify",
													"    const orgExecutionType = searchJSONItemFromList(jsonData.properties, \"field_name\", \"Execution Type\");",
													"    const expExecutionType = searchJSONItemFromList(expectedResponse.properties, \"field_name\", \"Execution Type\");",
													"    pm.test(\"Repsonse data has Execution Type property\", () => {",
													"        pm.expect(orgExecutionType.field_id).to.eql(expExecutionType.field_id);",
													"        pm.expect(orgExecutionType.field_value).to.eql(expExecutionType.field_value.toString());",
													"        pm.expect(orgExecutionType.field_value_name).to.eql(expExecutionType.field_value_name);",
													"    });",
													"",
													"    // Get Description property to verify",
													"    const orgDescription = searchJSONItemFromList(jsonData.properties, \"field_name\", \"Description\");",
													"    const expDescription = searchJSONItemFromList(expectedResponse.properties, \"field_name\", \"Description\");",
													"    pm.test(\"Repsonse data has Description property\", () => {",
													"        pm.expect(orgDescription.field_id).to.eql(expDescription.field_id);",
													"        pm.expect(orgDescription.field_value).to.eql(expDescription.field_value);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"suiteName\", \"Suite Root\");",
													"pm.environment.set(\"suiteDescription\", \"Description of Test Suite 1\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate\", today.toISOString());",
													"today.setDate(today.getDate() + 10);",
													"pm.environment.set(\"endDate\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"{{suiteName}}\",\n\t\"properties\": [\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuitePlannedStartDate}},\n\t\t\t\"field_value\": \"{{startDate}}\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuitePlannedEndDate}},\n\t\t\t\"field_value\": \"{{endDate}}\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuiteAssignedTo}},\n\t\t\t\"field_value\": \"[{{fieldIdTestSuiteAssignedToUserTest}}]\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuiteExecutionType}},\n\t\t\t\"field_value\": \"{{fieldIdTestSuiteExecutionTypeSmoke}}\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuiteDescription}},\n\t\t\t\"field_value\": \"{{suiteDescription}}\"\n\t\t\t\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-suites?parentId=0&parentType=root",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-suites"
											],
											"query": [
												{
													"key": "parentId",
													"value": "0"
												},
												{
													"key": "parentType",
													"value": "root"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create test suite - Not exist field id",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 400;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"const expectedErrorMessage = \"Field 1234 does not exist\";",
													"",
													"// Verify that the returned status should be 400-Bad Request",
													"pm.test(`Response status should be 400-Bad Request ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response data has message: 'Field 1234 does not exist'\", () => {",
													"        pm.expect(jsonData.message).to.eql(expectedErrorMessage);",
													"    });",
													"",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"startDate\", today.toISOString());",
													"today.setDate(today.getDate() + 10);",
													"pm.environment.set(\"endDate\", today.toISOString());",
													"",
													"pm.environment.set(\"notExistPostfix\", \"1234\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Suite 400\",\n\t\"properties\": [\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuitePlannedStartDate}},\n\t\t\t\"field_value\": \"{{startDate}}\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuitePlannedEndDate}},\n\t\t\t\"field_value\": \"{{endDate}}\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuiteAssignedTo}},\n\t\t\t\"field_value\": \"[{{fieldIdTestSuiteAssignedToUserTest}}]\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuiteExecutionType}},\n\t\t\t\"field_value\": \"{{fieldIdTestSuiteExecutionTypeSmoke}}\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuiteDescription}},\n\t\t\t\"field_value\": \"{{suiteDescription}}\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": 1234,\n\t\t\t\"field_value\": \"abcd\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-suites",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-suites"
											],
											"query": [
												{
													"key": "parentId",
													"value": "0",
													"disabled": true
												},
												{
													"key": "parentType",
													"value": "root",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Create test suite - Success with parent is test cycle",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"const suiteName = pm.environment.get(\"suiteName\");",
													"const assignedUserId = pm.environment.get(\"fieldIdTestSuiteAssignedToUserTest\");",
													"const assignedFullName = pm.environment.get(\"userTestFullName\");",
													"const executionTypeId = pm.environment.get(\"fieldIdTestSuiteExecutionTypeSmoke\");",
													"const executionName = \"Smoke\";",
													"const description = pm.environment.get(\"suiteDescription\");",
													"const plannedStartDate = pm.environment.get(\"startDate\").split(\".\");",
													"const plannedEndDate = pm.environment.get(\"endDate\").split(\".\");",
													"const plannedStartDateFieldId = pm.environment.get(\"fieldIdTestSuitePlannedStartDate\");",
													"const plannedEndDateFieldId = pm.environment.get(\"fieldIdTestSuitePlannedEndDate\");",
													"const targetReleaseBuildFieldId = pm.environment.get(\"fieldIdTestSuiteTargetReleaseBuild\");",
													"const environmentFieldId = pm.environment.get(\"fieldIdTestSuiteEnvironment\");",
													"const assignedToFieldId = pm.environment.get(\"fieldIdTestSuiteAssignedTo\");",
													"const executionTypeFieldId = pm.environment.get(\"fieldIdTestSuiteExecutionType\");",
													"const descriptionFieldId = pm.environment.get(\"fieldIdTestSuiteDescription\");",
													"const expectedResponse = {",
													"    \"name\": suiteName,",
													"    \"properties\": [{",
													"        \"field_id\": plannedStartDateFieldId.toString(),",
													"        \"field_name\": \"Planned Start Date\",",
													"        \"field_value\": plannedStartDate[0]",
													"    }, {",
													"        \"field_id\": plannedEndDateFieldId.toString(),",
													"        \"field_name\": \"Planned End Date\",",
													"        \"field_value\": plannedEndDate[0]",
													"    }, {",
													"        \"field_id\": targetReleaseBuildFieldId,",
													"        \"field_name\": \"Target Release/Build\",",
													"        \"field_value\": \"\"",
													"    }, {",
													"        \"field_id\": environmentFieldId,",
													"        \"field_name\": \"Environment\",",
													"        \"field_value\": \"\"",
													"    }, {",
													"        \"field_id\": assignedToFieldId,",
													"        \"field_name\": \"Assigned To\",",
													"        \"field_value\": `[${assignedUserId}]`,",
													"        \"field_value_name\": `[${assignedFullName}]`",
													"    }, {",
													"        \"field_id\": executionTypeFieldId,",
													"        \"field_name\": \"Execution Type\",",
													"        \"field_value\": executionTypeId.toString(),",
													"        \"field_value_name\": executionName",
													"    }, {",
													"        \"field_id\": descriptionFieldId,",
													"        \"field_name\": \"Description\",",
													"        \"field_value\": description",
													"    }]",
													"};",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value",
													"function searchJSONItemFromList(jsonList, expectedKey, expectedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            return jsonList[i];",
													"        }",
													"    }",
													"    return null;",
													"}",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.environment.set(\"newTestSuiteId1\", jsonData.id);",
													"    pm.environment.set(\"testSuiteInfo1\", jsonData);",
													"",
													"    pm.test(\"Response data has links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has id\", () => {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains name\", () => {",
													"        pm.expect(jsonData.name).to.eql(expectedResponse.name);",
													"    });",
													"",
													"    pm.test(\"Response data has order\", () => {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has pid\", () => {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has created_date\", () => {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has last_modify_date\", () => {",
													"        pm.expect(jsonData.last_modify_date).to.not.eql(null);",
													"    });",
													"",
													"    // Verify that number of properties in in JSON response should be the same as expectation",
													"    pm.test(\"Number of properties in in JSON response should be the same as expectation\", () => {",
													"        pm.expect(jsonData.properties.length).to.eql(expectedResponse.properties.length);",
													"    });",
													"",
													"    // Get Planned Start Date property to verify",
													"    const orgPlannedStartDate = searchJSONItemFromList(jsonData.properties, \"field_name\", \"Planned Start Date\");",
													"    const expPlannedStartDate = searchJSONItemFromList(expectedResponse.properties, \"field_name\", \"Planned Start Date\");",
													"    pm.test(\"Repsonse data contains Planned Start Date\", () => {",
													"        pm.expect(orgPlannedStartDate.field_id.toString()).to.include(expPlannedStartDate.field_id);",
													"        pm.expect(orgPlannedStartDate.field_value).to.include(expPlannedStartDate.field_value);",
													"    });",
													"",
													"    // Get Planned End Date property to verify",
													"    const orgPlannedEndDate = searchJSONItemFromList(jsonData.properties, \"field_name\", \"Planned End Date\");",
													"    const expPlannedEndDate = searchJSONItemFromList(expectedResponse.properties, \"field_name\", \"Planned End Date\");",
													"    pm.test(\"Repsonse data contains Planned End Date\", () => {",
													"        pm.expect(orgPlannedEndDate.field_id.toString()).to.include(expPlannedEndDate.field_id);",
													"        pm.expect(orgPlannedEndDate.field_value).to.include(expPlannedEndDate.field_value);",
													"    });",
													"",
													"    // Get Target Release/Build property to verify",
													"    const orgTargetReleaseBuild = searchJSONItemFromList(jsonData.properties, \"field_name\", \"Target Release/Build\");",
													"    const expTargetReleaseBuild = searchJSONItemFromList(expectedResponse.properties, \"field_name\", \"Target Release/Build\");",
													"    pm.test(\"Repsonse data has Target Release/Build property\", () => {",
													"        pm.expect(orgTargetReleaseBuild.field_id).to.eql(expTargetReleaseBuild.field_id);",
													"        pm.expect(orgTargetReleaseBuild.field_value).to.eql(expTargetReleaseBuild.field_value);",
													"    });",
													"",
													"    // Get Environment property to verify",
													"    const orgEnvironment = searchJSONItemFromList(jsonData.properties, \"field_name\", \"Environment\");",
													"    const expEnvironment = searchJSONItemFromList(expectedResponse.properties, \"field_name\", \"Environment\");",
													"    pm.test(\"Repsonse data has Environment property\", () => {",
													"        pm.expect(orgEnvironment.field_id).to.eql(expEnvironment.field_id);",
													"        pm.expect(orgEnvironment.field_value).to.eql(expEnvironment.field_value);",
													"    });",
													"",
													"",
													"    // Get Assigned To property to verify",
													"    const orgAssignedTo = searchJSONItemFromList(jsonData.properties, \"field_name\", \"Assigned To\");",
													"    const expAssignedTo = searchJSONItemFromList(expectedResponse.properties, \"field_name\", \"Assigned To\");",
													"    pm.test(\"Repsonse data has Assigned To property\", () => {",
													"        pm.expect(orgAssignedTo.field_id).to.eql(expAssignedTo.field_id);",
													"        pm.expect(orgAssignedTo.field_value).to.eql(expAssignedTo.field_value);",
													"    });",
													"",
													"    // Get Execution Type property to verify",
													"    const orgExecutionType = searchJSONItemFromList(jsonData.properties, \"field_name\", \"Execution Type\");",
													"    const expExecutionType = searchJSONItemFromList(expectedResponse.properties, \"field_name\", \"Execution Type\");",
													"    pm.test(\"Repsonse data has Execution Type property\", () => {",
													"        pm.expect(orgExecutionType.field_id).to.eql(expExecutionType.field_id);",
													"        pm.expect(orgExecutionType.field_value).to.eql(expExecutionType.field_value.toString());",
													"        pm.expect(orgExecutionType.field_value_name).to.eql(expExecutionType.field_value_name);",
													"    });",
													"",
													"    // Get Description property to verify",
													"    const orgDescription = searchJSONItemFromList(jsonData.properties, \"field_name\", \"Description\");",
													"    const expDescription = searchJSONItemFromList(expectedResponse.properties, \"field_name\", \"Description\");",
													"    pm.test(\"Repsonse data has Description property\", () => {",
													"        pm.expect(orgDescription.field_id).to.eql(expDescription.field_id);",
													"        pm.expect(orgDescription.field_value).to.eql(expDescription.field_value);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"suiteName\", \"Suite of Cycle 1\");",
													"pm.environment.set(\"suiteDescription\", \"Description of Test Suite 3\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate\", today.toISOString());",
													"today.setDate(today.getDate() + 5);",
													"pm.environment.set(\"endDate\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"{{suiteName}}\",\n\t\"properties\": [\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuitePlannedStartDate}},\n\t\t\t\"field_value\": \"{{startDate}}\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuitePlannedEndDate}},\n\t\t\t\"field_value\": \"{{endDate}}\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuiteAssignedTo}},\n\t\t\t\"field_value\": \"[{{fieldIdTestSuiteAssignedToUserTest}}]\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuiteExecutionType}},\n\t\t\t\"field_value\": \"{{fieldIdTestSuiteExecutionTypeSmoke}}\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuiteDescription}},\n\t\t\t\"field_value\": \"{{suiteDescription}}\"\n\t\t\t\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-suites?parentId={{newCycleId1}}&parentType=test-cycle",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-suites"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newCycleId1}}"
												},
												{
													"key": "parentType",
													"value": "test-cycle"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create test suite - Property name has more than 500 characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 400;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"const expectedErrorMessage = \"name size must be between 1 and 500\";",
													"",
													"// Verify that the returned status should be 400-Bad Request",
													"pm.test(`Response status should be 400-Bad Request ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data contains message: \" + jsonData.message, () => {",
													"        pm.expect(jsonData.message).to.eql(expectedErrorMessage);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"startDate\", today.toISOString());",
													"today.setDate(today.getDate() + 10);",
													"pm.environment.set(\"endDate\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI - The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI - The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI- The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI -The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI\",\n\t\"properties\": [\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuitePlannedStartDate}},\n\t\t\t\"field_value\": \"{{startDate}}\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuitePlannedEndDate}},\n\t\t\t\"field_value\": \"{{endDate}}\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuiteAssignedTo}},\n\t\t\t\"field_value\": \"[{{fieldIdTestSuiteAssignedToUserTest}}]\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuiteExecutionType}},\n\t\t\t\"field_value\": \"{{fieldIdTestSuiteExecutionTypeSmoke}}\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuiteDescription}},\n\t\t\t\"field_value\": \"Description 400\"\n\t\t\t\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-suites?parentId=0&parentType=root",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-suites"
											],
											"query": [
												{
													"key": "parentId",
													"value": "0"
												},
												{
													"key": "parentType",
													"value": "root"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Create test suite - Invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 401;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"const expectedErrorMessage = \"Invalid access token\";",
													"",
													"// Verify that the returned status should be 401-Unauthorized",
													"pm.test(`Response status should be 401-Unauthorized ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Repsonse body has property message value contains 'Invalid access token'\", function() {",
													"        pm.expect(jsonData.error_description).to.include(expectedErrorMessage);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"startDate\", today.toISOString());",
													"today.setDate(today.getDate() + 5);",
													"pm.environment.set(\"endDate\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}000"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Suite 400\",\n\t\"properties\": [\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuitePlannedStartDate}},\n\t\t\t\"field_value\": \"{{startDate}}\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuitePlannedEndDate}},\n\t\t\t\"field_value\": \"{{endDate}}\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuiteAssignedTo}},\n\t\t\t\"field_value\": \"[{{fieldIdTestSuiteAssignedToUserTest}}]\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuiteExecutionType}},\n\t\t\t\"field_value\": \"{{fieldIdTestSuiteExecutionTypeSmoke}}\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuiteDescription}},\n\t\t\t\"field_value\": \"Description 400\"\n\t\t\t\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-suites?parentId=0&parentType=root",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-suites"
											],
											"query": [
												{
													"key": "parentId",
													"value": "0"
												},
												{
													"key": "parentType",
													"value": "root"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"    });",
													"    ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"/*",
													"  Unset all fields of type. Valid Type values are Release, Build, TestSuite",
													"*/",
													"function unsetFieldIdsOfType(type, fieldsArray) {",
													"    const PREFIX = `fieldId${type}`;",
													"    let userList = pm.environment.get(\"userList\");",
													"",
													"    fieldsArray.forEach((field) => {",
													"        let variableName = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\");",
													"        pm.environment.unset(variableName);",
													"",
													"        if (field.allowed_values) {",
													"            let fieldValueId = \"\";",
													"",
													"            field.allowed_values.forEach((item, index) => {",
													"                switch (field.label) {",
													"                    case \"Assigned To\":",
													"                        pm.environment.unset(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"UserTest\");",
													"",
													"                        userList.forEach((user, userIndex) => {",
													"                            fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                            pm.environment.unset(fieldValueId);",
													"                        });",
													"                        break;",
													"",
													"                    case \"Target Release/Build\":",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"Target\" + (index + 1).toString();",
													"                        pm.environment.unset(fieldValueId);",
													"                        break;",
													"",
													"                    default:",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                        pm.environment.unset(fieldValueId);",
													"                        break;",
													"                }",
													"",
													"            });",
													"        }",
													"    });",
													"",
													"}",
													"",
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    var releaseFields = pm.environment.get(\"releaseFields\");",
													"    var buildFields = pm.environment.get(\"buildFields\");",
													"    var testSuiteFields = pm.environment.get(\"testSuiteFields\");",
													"",
													"    unsetFieldIdsOfType(\"Release\", releaseFields);",
													"    unsetFieldIdsOfType(\"Build\", buildFields);",
													"    unsetFieldIdsOfType(\"TestSuite\", testSuiteFields);",
													"",
													"    pm.environment.unset(\"releaseFields\");",
													"    pm.environment.unset(\"buildFields\");",
													"    pm.environment.unset(\"testSuiteFields\");",
													"",
													"    var testSuiteFields2 = pm.environment.get(\"testSuiteFields2\");",
													"",
													"    unsetFieldIdsOfType(\"TestSuite2\", testSuiteFields2);",
													"    pm.environment.unset(\"testSuiteFields2\");",
													"",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"tokenType\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"projectEndDate\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"projectId\");",
													"    pm.environment.unset(\"userId\");",
													"",
													"    pm.environment.unset(\"releaseName\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"    pm.environment.unset(\"startDate2\");",
													"    pm.environment.unset(\"endDate2\");",
													"    ",
													"    pm.environment.unset(\"releaseDescription\");",
													"    pm.environment.unset(\"releaseNote\");",
													"",
													"    pm.environment.unset(\"newReleaseId1\");",
													"    pm.environment.unset(\"releaseInfo1\");",
													"",
													"    pm.environment.unset(\"newBuildId1\");",
													"    pm.environment.unset(\"buildInfo1\");",
													"    pm.environment.unset(\"buildDate\");",
													"    pm.environment.unset(\"buildNote\");",
													"    pm.environment.unset(\"buildName\");",
													"",
													"    pm.environment.unset(\"cycleName\");",
													"    pm.environment.unset(\"cycleDescription\");",
													"    pm.environment.unset(\"newCycleId1\");",
													"    pm.environment.unset(\"cycleInfo1\");",
													"",
													"    pm.environment.unset(\"newTestSuiteId1\");",
													"    pm.environment.unset(\"testSuiteInfo1\");",
													"    pm.environment.unset(\"suiteDescription\");",
													"    pm.environment.unset(\"suiteName\");",
													"",
													"    pm.environment.unset(\"notExistPostfix\");",
													"    pm.environment.unset(\"invalidPostfix\");",
													"",
													"    pm.environment.unset(\"userList\");",
													"    pm.environment.unset(\"userTestFullName\");",
													"    pm.environment.unset(\"projectName\");",
													"",
													"    pm.environment.unset(\"apiuser1\");",
													"",
													"    pm.environment.unset(\"assignedUser2\");",
													"    pm.environment.unset(\"projectId2\");",
													"    pm.environment.unset(\"projectName2\");",
													"    pm.environment.unset(\"projectStartDate2\");",
													"    pm.environment.unset(\"projectEndDate2\");",
													"    pm.environment.unset(\"accessToken1\");",
													"    pm.environment.unset(\"tokenType1\");",
													"    pm.environment.unset(\"userList2\");",
													"    pm.environment.unset(\"testSuiteFields2\");",
													"    pm.environment.unset(\"suiteName2\");",
													"    pm.environment.unset(\"suiteDescription2\");",
													"    pm.environment.unset(\"fieldIdTestSuiteAssignedToAPIUser1\");",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Create a project",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseCode = 200;",
													"",
													"if (pm.response.code === responseCode) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Login  with user 2 - Site Admin user has no Create Project permission",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseCode = 200;",
													"",
													"if (pm.response.code === responseCode) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken2\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType2\", jsonData.token_type);",
													"",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie2\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{prefixApiUser}}apiuser2@qas.com",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Login  with user 3 - normal user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseCode = 200;",
													"",
													"if (pm.response.code === responseCode) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken3\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType3\", jsonData.token_type);",
													"",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie3\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{prefixApiUser}}apiuser3@qas.com",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Get user id - Systen admin user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseCode = 200;\r",
													"\r",
													"if (pm.response.code === responseCode) {\r",
													"    //get response body\r",
													"    var jsonData = pm.response.json();\r",
													"    //assert status\r",
													"    pm.test(\"Response status: \" + pm.response.code, function() {\r",
													"        pm.response.to.have.status(responseCode);\r",
													"    });\r",
													"    \r",
													"    pm.environment.set(\"userId\", jsonData.items[0].id);\r",
													"\r",
													"} else {\r",
													"    //other mark failed\r",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {\r",
													"        pm.response.to.have.status(responseCode);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/users/search?username={{username}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"users",
												"search"
											],
											"query": [
												{
													"key": "username",
													"value": "{{username}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Get user id of user 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseCode = 200;",
													"",
													"if (pm.response.code === responseCode) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"    pm.test(\"Response data contains data of apiuser1@qas.com\", function() {",
													"        pm.expect(jsonData.items[0].username).to.eql(pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"        pm.expect(pm.response.text()).to.include(\"email\");",
													"        pm.expect(jsonData.items[0].first_name).to.eql(\"API\");",
													"        pm.expect(jsonData.items[0].last_name).to.eql(\"User 1\");",
													"        pm.expect(pm.response.text()).to.include(\"status\");",
													"        pm.expect(pm.response.text()).to.include(\"timezone_offset\");",
													"        pm.expect(pm.response.text()).to.include(\"country_name\");",
													"    });",
													"    ",
													"    pm.environment.set(\"userId1\", jsonData.items[0].id);",
													"",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"username1\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"pm.environment.set(\"firstName1\", \"API\");",
													"pm.environment.set(\"lastName1\", \"User 1\");",
													"pm.environment.set(\"email1\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/users/search?username={{username1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"users",
												"search"
											],
											"query": [
												{
													"key": "username",
													"value": "{{username1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Get user id of user 2 - Site Admin user has no Create Project permission",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseCode = 200;\r",
													"\r",
													"if (pm.response.code === responseCode) {\r",
													"    //get response body\r",
													"    var jsonData = pm.response.json();\r",
													"    //assert status\r",
													"    pm.test(\"Response status: \" + pm.response.code, function() {\r",
													"        pm.response.to.have.status(responseCode);\r",
													"    });\r",
													"    pm.test(\"Response data contains data of apiuser2@qas.com\", function() {\r",
													"        \r",
													"        pm.expect(pm.response.text()).to.include(\"email\");\r",
													"\t\tpm.expect(pm.response.text()).to.include(\"first_name\");\r",
													"\t\tpm.expect(pm.response.text()).to.include(\"last_name\");\r",
													"\t\tpm.expect(pm.response.text()).to.include(\"status\");\r",
													"        pm.expect(pm.response.text()).to.include(\"timezone_offset\");\r",
													"        pm.expect(pm.response.text()).to.include(\"country_name\");\r",
													"\t\tpm.expect(jsonData.items[0].username).to.eql(pm.environment.get(\"prefixApiUser\")+\"apiuser2@qas.com\");\r",
													"        pm.expect(jsonData.items[0].first_name).to.eql(\"API\");\r",
													"        pm.expect(jsonData.items[0].last_name).to.eql(\"User 2\");\r",
													"        \r",
													"    });\r",
													"    \r",
													"    pm.environment.set(\"userId2\", jsonData.items[0].id);\r",
													"\r",
													"} else {\r",
													"    //other mark failed\r",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {\r",
													"        pm.response.to.have.status(responseCode);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"username2\", pm.environment.get(\"prefixApiUser\")+\"apiuser2@qas.com\");",
													"pm.environment.set(\"firstName2\", \"API\");",
													"pm.environment.set(\"lastName2\", \"User 2\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/users/search?username={{username2}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"users",
												"search"
											],
											"query": [
												{
													"key": "username",
													"value": "{{username2}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Get user id of user 3 - normal user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseCode = 200;\r",
													"\r",
													"if (pm.response.code === responseCode) {\r",
													"    //get response body\r",
													"    var jsonData = pm.response.json();\r",
													"    //assert status\r",
													"    pm.test(\"Response status: \" + pm.response.code, function() {\r",
													"        pm.response.to.have.status(responseCode);\r",
													"    });\r",
													"    pm.test(\"Response data contains data of apiuser3@qas.com\", function() {\r",
													"        \r",
													"        pm.expect(pm.response.text()).to.include(\"email\");\r",
													"\t\tpm.expect(pm.response.text()).to.include(\"first_name\");\r",
													"\t\tpm.expect(pm.response.text()).to.include(\"last_name\");\r",
													"\t\tpm.expect(pm.response.text()).to.include(\"status\");\r",
													"        pm.expect(pm.response.text()).to.include(\"timezone_offset\");\r",
													"        pm.expect(pm.response.text()).to.include(\"country_name\");\r",
													"\t\tpm.expect(jsonData.items[0].username).to.eql(pm.environment.get(\"prefixApiUser\")+\"apiuser3@qas.com\");\r",
													"        pm.expect(jsonData.items[0].first_name).to.eql(\"API\");\r",
													"        pm.expect(jsonData.items[0].last_name).to.eql(\"User 3\");\r",
													"        \r",
													"    });\r",
													"    \r",
													"    pm.environment.set(\"userId3\", jsonData.items[0].id);\r",
													"\r",
													"} else {\r",
													"    //other mark failed\r",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {\r",
													"        pm.response.to.have.status(responseCode);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"username3\", pm.environment.get(\"prefixApiUser\")+\"apiuser3@qas.com\");",
													"pm.environment.set(\"firstName3\", \"API\");",
													"pm.environment.set(\"lastName3\", \"User 3\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/users/search?username={{username3}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"users",
												"search"
											],
											"query": [
												{
													"key": "username",
													"value": "{{username3}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Create Custome User Group without Create Project permission",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var statusCode = 200;",
													"//assert status",
													"pm.test(\"Response status: \" + pm.response.code, function() {",
													"    pm.response.to.have.status(statusCode);",
													"});",
													"",
													"if (pm.response.code === statusCode) {",
													"    ",
													"     //get response body",
													"    var jsonData = pm.response.json();",
													"    pm.test(\"Response body returns ID property correctly \", function() {",
													"        pm.expect(jsonData.id).to.greaterThan(0);",
													"    });",
													"    pm.test(\"Name is correct\", function() {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"customeGroupName\"));",
													"    });",
													"    ",
													"    pm.environment.set(\"idCustomGroup\",jsonData.id);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(statusCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Function to add 0 before datetime value if it is less than 10",
													"Number.prototype.padLeft = function(base, chr) {",
													"   var len = (String(base || 10).length - String(this).length) + 1;",
													"   return len > 0 ? new Array(len).join(chr || '0') + this : this;",
													"};",
													"",
													"// Generate dynamic string for ProfileName",
													"let uniqueString = new Date(),",
													"    uniqueStringFormat = [(uniqueString.getMonth() + 1).padLeft(),",
													"       uniqueString.getDate().padLeft(),",
													"       uniqueString.getFullYear(),",
													"   ].join('') + '-' + [uniqueString.getHours().padLeft(),",
													"       uniqueString.getMinutes().padLeft(),",
													"       uniqueString.getSeconds().padLeft(),",
													"       uniqueString.getMilliseconds().padLeft()",
													"   ].join('');",
													"   ",
													"const customeGroupName = \"qTest API Postman Custome User Group\";",
													"pm.environment.set(\"customeGroupName\", `${customeGroupName}${uniqueStringFormat}`);",
													"pm.environment.set(\"description\", \"This is description\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{customeGroupName}}\"\n    ,\n    \"user_ids\": [\n    \t{{userId2}}\n    ]\n   \n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/groups",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Create Site Template",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"// generator csrf token",
													"var base64object = function(input) {",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);",
													" return base64;",
													"};",
													"let uuid = require('uuid');",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());",
													"pm.environment.set(\"csrfToken\", token);",
													"// Function to add 0 before datetime value if it is less than 10",
													"Number.prototype.padLeft = function(base, chr) {",
													"   var len = (String(base || 10).length - String(this).length) + 1;",
													"   return len > 0 ? new Array(len).join(chr || '0') + this : this;",
													"};",
													"",
													"// Generate dynamic string for ProfileName",
													"let uniqueString = new Date(),",
													"    uniqueStringFormat = [(uniqueString.getMonth() + 1).padLeft(),",
													"       uniqueString.getDate().padLeft(),",
													"       uniqueString.getFullYear(),",
													"   ].join('') + '-' + [uniqueString.getHours().padLeft(),",
													"       uniqueString.getMinutes().padLeft(),",
													"       uniqueString.getSeconds().padLeft(),",
													"       uniqueString.getMilliseconds().padLeft()",
													"   ].join('');",
													"const templateName = \"qTest API Postman Site template \";",
													"pm.environment.set(\"templateName\", `${templateName}${uniqueStringFormat}`);",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseCode = 200;\r",
													"    \r",
													"pm.test(\"Response code: \" + pm.response.code, function(){\r",
													"    pm.response.to.have.status(responseCode);\r",
													"});\r",
													"    \r",
													"if (pm.response.code === responseCode) {\r",
													"   //get response body\r",
													"    var jsonData = pm.response.json();\r",
													"    \r",
													"    pm.test(\"Response data contains templateId \", function(){\r",
													"        pm.expect(pm.response.text()).to.include(\"templateId\");\r",
													"    });\r",
													"    pm.test(\"Response data contains name\", function(){\r",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"templateName\"));\r",
													"    });\r",
													"   \r",
													"    pm.environment.set(\"templateId1\", jsonData.templateId);\r",
													"} else {\r",
													"    //other mark failed\r",
													"     pm.test(\"Response code: \" + responseCode + \"\\n Reponse body: \" + pm.response.text(), function(){\r",
													"        pm.response.to.have.status(responseCode);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}",
												"type": "text"
											},
											{
												"key": "x-csrf-token",
												"value": "{{csrfToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/sitetemplate/create-template?templateName={{templateName}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"sitetemplate",
												"create-template"
											],
											"query": [
												{
													"key": "templateName",
													"value": "{{templateName}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "201 - Success with All required fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" var responseCode = 201;",
													" const projectName = pm.environment.get(\"projectName1\");",
													" const isSample = false;",
													" const isAutomation = false;",
													" const explorerAccessLevel = 7;",
													" const dateFormat = 'yyyy.MM.dd';",
													" const uuid = \"\";",
													" const defectTrackingSystem = [];",
													" const statusId = 101;",
													" const startDate = pm.environment.get(\"startDate\").split(`T`)[0];",
													" const adminIds = [pm.environment.get(\"userId\")];",
													"",
													"if (pm.response.code === responseCode) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"    ",
													"    pm.test(\"Response data has project id\", function(){",
													"        pm.expect(jsonData.id > 0).to.be.true;",
													"    });",
													"    pm.test(\"Response data contains project name\", function(){",
													"        pm.expect(jsonData.name).to.eql(projectName);",
													"    });",
													"    pm.test(\"Response data contains status id\" , function(){",
													"        pm.expect(jsonData.status_id).to.eql(statusId);",
													"    });",
													"    pm.test(\"Response data contains start date\" , function(){",
													"        pm.expect(jsonData.start_date).to.include(startDate);",
													"    });",
													"    pm.test(\"Response data contains admin_ids\" , function(){",
													"        pm.expect(jsonData.admin_ids).to.eql(adminIds);",
													"    });",
													"    pm.test(\"Response data contains sample: false\", function(){",
													"        pm.expect(jsonData.sample).to.eql(isSample);",
													"    });",
													"    pm.test(\"Response data contains defect_tracking_systems\" , function(){",
													"        pm.expect(jsonData.defect_tracking_systems).to.eql(defectTrackingSystem);",
													"    });",
													"    pm.test(\"Response data contains x_explorer_access_level\" , function(){",
													"        pm.expect(jsonData.x_explorer_access_level).to.eql(explorerAccessLevel);",
													"    });",
													"    pm.test(\"Response data contains date_format: yyyy.MM.dd\", function(){",
													"        pm.expect(jsonData.date_format).to.eql(dateFormat);",
													"    });",
													"    pm.test(\"Response data contains automation: false\", function(){",
													"        pm.expect(jsonData.automation).to.eql(isAutomation);",
													"    });",
													"    pm.test(\"Response data contains uuid\" , function(){",
													"        pm.expect(jsonData.uuid).to.eql(uuid);",
													"    });",
													"    ",
													"    pm.environment.set(\"projectId1\", jsonData.id);",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var startDate = new Date();",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"",
													"// Function to add 0 before datetime value if it is less than 10",
													"Number.prototype.padLeft = function(base, chr) {",
													"   var len = (String(base || 10).length - String(this).length) + 1;",
													"   return len > 0 ? new Array(len).join(chr || '0') + this : this;",
													"};",
													"",
													"// Generate dynamic string for ProfileName",
													"let uniqueString = new Date(),",
													"    uniqueStringFormat = [(uniqueString.getMonth() + 1).padLeft(),",
													"       uniqueString.getDate().padLeft(),",
													"       uniqueString.getFullYear(),",
													"   ].join('') + '-' + [uniqueString.getHours().padLeft(),",
													"       uniqueString.getMinutes().padLeft(),",
													"       uniqueString.getSeconds().padLeft(),",
													"       uniqueString.getMilliseconds().padLeft()",
													"   ].join('');",
													"const projectName = \"qTest API - Postman - \";",
													"pm.environment.set(\"projectName1\", `${projectName}${uniqueStringFormat}`);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{projectName1}}\",\n  \"start_date\": \"{{startDate}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Blank project name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseCode = 400;",
													"const errorMessage = \"Name cannot be empty\";",
													"",
													"if (pm.response.code === responseCode) {",
													"    var jsonData = pm.response.json();",
													"    //assert status",
													"    pm.test(\"Response status code should be 400-Bad Request\", function() {",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"    pm.test(`Response data contains error message: ${errorMessage}`, function() {",
													"        pm.expect(jsonData.message).to.include(errorMessage);",
													"    });",
													"",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var startDate = new Date();",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"\",\n  \"start_date\": \"{{startDate}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Invalid format of End date",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseCode = 400;",
													"const errorMessage = `Invalid format: \\\"${pm.environment.get('endDate')}123\\\"`;",
													"",
													"if (pm.response.code === responseCode) {",
													"    var jsonData = pm.response.json();",
													"    //assert status",
													"    pm.test(\"Response status code should be 400-Bad Request\", function() {",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"    pm.test(`Response data contains error message: ${errorMessage}`, function() {",
													"        pm.expect(jsonData.message).to.include(errorMessage);",
													"    });",
													"",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"end_date\": \"{{endDate}}123\",\n  \"admins\": [\n    \"{{username}}\"\n  ],\n  \"automation\": false,\n  \"template_id\": \"30\",\n  \"uuid\": \"uuid\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Invalid template_id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseCode = 400;",
													"const errorMessage = `template_id is not valid`;",
													"",
													"if (pm.response.code === responseCode) {",
													"    var jsonData = pm.response.json();",
													"    //assert status",
													"    pm.test(\"Response status code should be 400-Bad Request\", function() {",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"    pm.test(`Response data contains error message: ${errorMessage}`, function() {",
													"        pm.expect(jsonData.message).to.include(errorMessage);",
													"    });",
													"",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\"\n  ],\n  \"automation\": false,\n  \"template_id\": \"\",\n  \"uuid\": \"uuid\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseCode = 401;",
													"const errorType = 'invalid_token';",
													"const errorDescription = `Invalid access token: 11111${pm.environment.get('accessToken')}`;",
													"",
													"if (pm.response.code === responseCode) {",
													"    var jsonData = pm.response.json();",
													"    //assert status",
													"    pm.test(\"Response status code should be 401-Unauthorized\", function() {",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"    pm.test(`Response data contains error type invalid_token`, function() {",
													"        pm.expect(jsonData.error).to.eql(errorType);",
													"    });",
													"    pm.test(`Response data contains error description`, function() {",
													"        pm.expect(jsonData.error_description).to.eql(errorDescription);",
													"    });",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var startDate = new Date();",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} 11111{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete project 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId1\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId1\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "text/plain",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId1}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											],
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId2\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId2\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId2}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId3\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId3\");",
													"    pm.environment.unset(\"projectName3\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId3}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId4\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId4\");",
													"    pm.environment.unset(\"projectName4\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId4}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId5\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId5\");",
													"    pm.environment.unset(\"projectName5\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId5}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project 6",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId6\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId6\");",
													"    pm.environment.unset(\"projectName6\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId6}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete Site Field Template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													" ",
													"    pm.environment.unset(\"idCustomeGroup\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId5}}",
													"type": "text",
													"disabled": true
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/sitetemplate/{{templateId1}}/delete",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"sitetemplate",
												"{{templateId1}}",
												"delete"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete Custom User Group",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													" ",
													"    pm.environment.unset(\"idCustomGroup\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/user-groups/custom/{{idCustomGroup}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"user-groups",
												"custom",
												"{{idCustomGroup}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Logout success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code: \" + pm.response.code, function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//clean up environment variables",
													"pm.environment.unset(\"startDate\");",
													"pm.environment.unset(\"endDate\");",
													"pm.environment.unset(\"csrfToken\");",
													"pm.environment.unset(\"qtestUserCookie\");",
													"pm.environment.unset(\"userId\");",
													"pm.environment.unset(\"accessToken\");",
													"pm.environment.unset(\"tokenType\");",
													"pm.environment.unset(\"email1\");",
													"pm.environment.unset(\"firstName1\");",
													"pm.environment.unset(\"lastName1\");",
													"pm.environment.unset(\"username1\");",
													"pm.environment.unset(\"userId1\");",
													"pm.environment.unset(\"projectName1\");",
													"pm.environment.unset(\"customeGroupName\");",
													"pm.environment.unset(\"description\");",
													"pm.environment.unset(\"templateName\");",
													"pm.environment.unset(\"templateId1\");",
													"//clean up environment variables",
													"pm.environment.unset(\"startDate\");",
													"pm.environment.unset(\"endDate\");",
													"pm.environment.unset(\"csrfToken\");",
													"pm.environment.unset(\"qtestUserCookie2\");",
													"pm.environment.unset(\"userId2\");",
													"pm.environment.unset(\"accessToken2\");",
													"pm.environment.unset(\"tokenType2\");",
													"",
													"pm.environment.unset(\"username2\");",
													"pm.environment.unset(\"firstName2\");",
													"pm.environment.unset(\"lastName2\");",
													"pm.environment.unset(\"projectName2\");",
													"pm.environment.unset(\"startDate\");",
													"pm.environment.unset(\"endDate\");",
													"pm.environment.unset(\"csrfToken\");",
													"pm.environment.unset(\"qtestUserCookie3\");",
													"pm.environment.unset(\"userId3\");",
													"pm.environment.unset(\"accessToken3\");",
													"pm.environment.unset(\"tokenType3\");",
													"",
													"pm.environment.unset(\"username3\");",
													"pm.environment.unset(\"firstName3\");",
													"pm.environment.unset(\"lastName3\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				}
			]
		}
	]
}