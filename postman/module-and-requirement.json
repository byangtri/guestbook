{
	"info": {
		"_postman_id": "cf50d682-b3a1-4fb5-abbd-e39fb7ec8b39",
		"name": "Module & Requirement",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Module",
			"item": [
				{
					"name": "Create module",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2bf597f2-7016-48a2-ab01-5e4920b85b0c",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"    ",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic YXBpdHJ5b3V0Og=="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d0dac17-5c8d-40f2-8f43-809f08532390",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.test(\"Response data contains all properties of project data\", function(){",
													"        pm.expect(pm.response.text()).to.include(\"id\");",
													"        pm.expect(jsonData.name).to.eql(\"qTest API - Postman\");",
													"        pm.expect(jsonData.description).to.eql(\"Description of qTest API - Postman\");",
													"        pm.expect(pm.response.text()).to.include(\"status_id\");",
													"        pm.expect(pm.response.text()).to.include(\"start_date\");",
													"        pm.expect(pm.response.text()).to.include(\"end_date\");",
													"        pm.expect(pm.response.text()).to.include(\"sample\");",
													"        pm.expect(pm.response.text()).to.include(\"defect_tracking_systems\");",
													"        pm.expect(pm.response.text()).to.include(\"x_explorer_access_level\");",
													"        pm.expect(pm.response.text()).to.include(\"date_format\");",
													"        pm.expect(jsonData.automation.toString()).to.eql(\"true\");",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate\", pm.environment.get(\"startDate\"));",
													"    pm.environment.set(\"projectEndDate\", pm.environment.get(\"endDate\"));",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7efc711d-f7e3-47b4-b99e-dd66b9e4e77f",
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\"\n  ],\n  \"automation\": true\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "test case sharing = false",
									"item": [
										{
											"name": "201 - Create module - Success",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "19da10aa-eb8f-49a0-b327-2fd1cf2b6263",
														"type": "text/javascript",
														"exec": [
															"if (pm.response.code === 201) {",
															"    pm.test(\"Response status \" + pm.response.code, function () {",
															"        pm.response.to.have.status(201); ",
															"    });",
															"    ",
															"    var jsonData = pm.response.json();",
															"    ",
															"    pm.test(\"Response data has links\", function () {",
															"        pm.expect(jsonData.links).to.not.eql(null);",
															"    });",
															"    ",
															"    pm.test(\"Response data has id\", function() {",
															"       pm.expect(jsonData.id).to.not.eql(null); ",
															"    });",
															"    ",
															"    pm.test(\"Response data contains name \" + jsonData.name, function() {",
															"        pm.expect(jsonData.name).to.eql(\"Module 1\");",
															"    });",
															"    ",
															"    pm.test(\"Response data has order property\", function() {",
															"        pm.expect(jsonData.order).to.not.eql(null);",
															"    });",
															"    ",
															"    pm.test(\"Response data has pid property\", function() {",
															"        pm.expect(jsonData.pid).to.not.eql(null);",
															"    });",
															"    ",
															"    pm.test(\"Response data has created_date property\", function() {",
															"        pm.expect(jsonData.created_date).to.not.eql(null);",
															"    });",
															"    ",
															"    pm.test(\"Response data has last_modify_date property\", function() {",
															"        pm.expect(jsonData.created_date).to.not.eql(null);",
															"    });",
															"    ",
															"    pm.test(\"Response data has parent_id property\", function() {",
															"        pm.expect(jsonData.parent_id).to.not.eql(null);",
															"    });",
															"    ",
															"    pm.test(\"Response data has description property\", function() {",
															"        pm.expect(jsonData.description).to.eql(\"Description of Module 1\");",
															"    });",
															"    ",
															"    pm.environment.set(\"parentId\", jsonData.id);",
															"    ",
															"} else {",
															"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
															"        pm.response.to.have.status(201);",
															"    });",
															"}"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"name\": \"Module 1\",\r\n  \"description\": \"Description of Module 1\",\r\n  \"shared\": false\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "201 - Create module - Under parentId success",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6d7b6144-7774-4827-a5b6-5bf17673081c",
														"type": "text/javascript",
														"exec": [
															"if (pm.response.code === 201) {",
															"    pm.test(\"Response status \" + pm.response.code, function () {",
															"        pm.response.to.have.status(201); ",
															"    });",
															"    ",
															"    var jsonData = pm.response.json();",
															"    ",
															"    pm.test(\"Response data has links\", function () {",
															"        pm.expect(jsonData.links).to.not.eql(null);",
															"    });",
															"    ",
															"    pm.test(\"Response data has id\", function() {",
															"       pm.expect(jsonData.id).to.not.eql(null); ",
															"    });",
															"    ",
															"    pm.test(\"Response data contains name \" + jsonData.name, function() {",
															"        pm.expect(jsonData.name).to.eql(\"Module 1.1\");",
															"    });",
															"    ",
															"    pm.test(\"Response data has order property\", function() {",
															"        pm.expect(jsonData.order).to.not.eql(null);",
															"    });",
															"    ",
															"    pm.test(\"Response data has pid property\", function() {",
															"        pm.expect(jsonData.pid).to.not.eql(null);",
															"    });",
															"    ",
															"    pm.test(\"Response data has created_date property\", function() {",
															"        pm.expect(jsonData.created_date).to.not.eql(null);",
															"    });",
															"    ",
															"    pm.test(\"Response data has last_modify_date property\", function() {",
															"        pm.expect(jsonData.created_date).to.not.eql(null);",
															"    });",
															"    ",
															"    pm.test(\"Response data contains parent_id property\", function() {",
															"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"parentId\"));",
															"    });",
															"    ",
															"    pm.test(\"Response data has description property\", function() {",
															"        pm.expect(jsonData.description).to.eql(\"Description of Module 1.1\");",
															"    });",
															"    pm.environment.set(\"moduleId\", jsonData.id);",
															"} else {",
															"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
															"        pm.response.to.have.status(201);",
															"    });",
															"}"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"name\": \"Module 1.1\",\r\n  \"description\": \"Description of Module 1.1\",\r\n  \"shared\": false\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules?parentId={{parentId}}",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"modules"
													],
													"query": [
														{
															"key": "parentId",
															"value": "{{parentId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Create module - Not exist parentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e27d22f3-5289-4294-9fd4-99d886a10a66",
														"type": "text/javascript",
														"exec": [
															"if (pm.response.code === 400) {",
															"    pm.test(\"Response status: \" + pm.response.code, function() {",
															"        pm.response.to.have.status(400);",
															"    });",
															"",
															"    var jsonData = pm.response.json();",
															"",
															"    pm.test(\"Response object has message: \" + jsonData.message, function() {",
															"        pm.expect(jsonData.message).to.eql(\"Parent module does not exist\");",
															"    });",
															"",
															"} else {",
															"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
															"        pm.response.to.have.status(400);",
															"    });",
															"}"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"name\": \"MD-2 Homepage\",\r\n  \"description\": \"Description of Module 1\",\r\n  \"shared\": false\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules?parentId=0",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"modules"
													],
													"query": [
														{
															"key": "parentId",
															"value": "0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Create Module - Empty Name",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4b2faa80-8a11-45a1-a12d-16479a36111f",
														"type": "text/javascript",
														"exec": [
															"if (pm.response.code === 400) {",
															"    pm.test(\"Response status: \" + pm.response.code, function() {",
															"        pm.response.to.have.status(400);",
															"    });",
															"",
															"    var jsonData = pm.response.json();",
															"",
															"    pm.test(\"Response body has message: \" + jsonData.message, function() {",
															"        pm.expect(jsonData.message).to.eql(\"name may not be empty\");",
															"    });",
															"",
															"} else {",
															"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
															"        pm.response.to.have.status(400);",
															"    });",
															"}"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"description\": \"Description of Module 1\",\r\n  \"shared\": false\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Create Module - Empty Body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5142a0f9-1b59-48b4-b9e6-fbf9d4ec6451",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"const result = pm.response.code === RESPONSE_CODE;",
															"const EXPECTED_MSGS = [",
															"    \"Required request body is missing\",",
															"    \"Required request body content is missing\"];",
															"    ",
															"function validateMessage(actualMessage){",
															"    let result = false;",
															"    for(const msg of EXPECTED_MSGS) {",
															"        result = actualMessage.indexOf(msg) > -1;",
															"        if(result){",
															"            console.log(`Actual message is: ${actualMessage}`);",
															"            return result;",
															"        }",
															"    }",
															"    return result;",
															"}",
															"",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"    pm.test(`Response body has 'message' property value in following: '${EXPECTED_MSGS.toString()}'`, () => {",
															"        pm.expect(validateMessage(jsonData.message)).to.eql(true);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "401 - Create Module - Invalid access token",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "919aa374-1363-4073-a0f7-e375d5deeb3f",
														"type": "text/javascript",
														"exec": [
															"if (pm.response.code === 401) {",
															"    var jsonData = pm.response.json();",
															"",
															"    pm.test(\"Status code is 401\", function() {",
															"        pm.response.to.have.status(401);",
															"    });",
															"",
															"    pm.test(\"Repsonse body has property message value contains 'Invalid access token'\", function() {",
															"        pm.expect(jsonData.error_description).to.include(\"Invalid access token\");",
															"    });",
															"",
															"} else {",
															"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
															"        pm.response.to.have.status(401);",
															"    });",
															"}"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}223324"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"modules"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Create module - Invalid parentId",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1c9129de-b77c-4204-9a23-7d8e34c8ac33",
														"type": "text/javascript",
														"exec": [
															"if (pm.response.code === 400) {",
															"    pm.test(\"Response status: \" + pm.response.code, function() {",
															"        pm.response.to.have.status(400);",
															"    });",
															"",
															"    var jsonData = pm.response.json();",
															"",
															"    pm.test(\"Response object has message contain 'Failed to convert value of type' \", function() {",
															"        pm.expect(jsonData.message).to.include(\"Failed to convert value of type\");",
															"    });",
															"",
															"} else {",
															"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
															"        pm.response.to.have.status(400);",
															"    });",
															"}"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"name\": \"MD-2 Homepage\",\r\n  \"description\": \"Description of Module 1\",\r\n  \"shared\": false\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules?parentId=a123",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"modules"
													],
													"query": [
														{
															"key": "parentId",
															"value": "a123"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Create module - With name contains more than 500 chars",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "def4a023-7fea-458a-a36b-96d45a1d332e",
														"type": "text/javascript",
														"exec": [
															"if (pm.response.code === 400) {",
															"    pm.test(\"Response status: \" + pm.response.code, function() {",
															"        pm.response.to.have.status(400);",
															"    });",
															"",
															"    var jsonData = pm.response.json();",
															"",
															"    pm.test(\"Response object has message contain 'name size must be between 1 and 500' \", function() {",
															"        pm.expect(jsonData.message).to.include(\"name size must be between 1 and 500\");",
															"    });",
															"",
															"} else {",
															"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
															"        pm.response.to.have.status(400);",
															"    });",
															"}"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"name\": \"The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI - The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI - The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI- The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI -The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI\",\r\n  \"description\": \"Description of Module 1\",\r\n  \"shared\": false\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"modules"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete module 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8c65f23-97ea-4406-8bc4-e82b051080ae",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response object has message: \", function() {",
													"        pm.expect(jsonData.message).to.not.eql(null);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{moduleId}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{moduleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete parentId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36f3ec40-252e-4644-a08f-84920903f2b9",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{parentId}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{parentId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86b9778f-1143-4639-8dfd-0c061daf553c",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"projectEndDate\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3856743a-77ad-4b4b-a341-e679f3003fbd",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ce74f7a8-97e1-49b5-85ed-2483a1c76b89",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "59e53209-5dac-4204-9573-0a6556b5b657",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"parentId\");",
													"    pm.environment.unset(\"moduleId\");",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"tokenType\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"  ",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Multiple Modules",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aaeaef35-4f5a-4e8b-b101-228bcfd74320",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"    ",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"    ",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic YXBpdHJ5b3V0Og=="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "157e1315-e6e5-452b-accb-35f425301858",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.test(\"Response data contains all properties of project data\", function(){",
													"        pm.expect(pm.response.text()).to.include(\"id\");",
													"        pm.expect(jsonData.name).to.eql(\"qTest API - Postman\");",
													"        pm.expect(jsonData.description).to.eql(\"Description of qTest API - Postman\");",
													"        pm.expect(pm.response.text()).to.include(\"status_id\");",
													"        pm.expect(pm.response.text()).to.include(\"start_date\");",
													"        pm.expect(pm.response.text()).to.include(\"end_date\");",
													"        pm.expect(pm.response.text()).to.include(\"sample\");",
													"        pm.expect(pm.response.text()).to.include(\"defect_tracking_systems\");",
													"        pm.expect(pm.response.text()).to.include(\"x_explorer_access_level\");",
													"        pm.expect(pm.response.text()).to.include(\"date_format\");",
													"        pm.expect(jsonData.automation.toString()).to.eql(\"true\");",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate\", pm.environment.get(\"startDate\"));",
													"    pm.environment.set(\"projectEndDate\", pm.environment.get(\"endDate\"));",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4ba0939e-814f-4e3a-8ba1-02472d827a92",
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\"\n  ],\n  \"automation\": true\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create module 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "10c0b88b-72e0-435e-9114-1aaa47ad6247",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response data has links\", function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id\", function() {",
													"       pm.expect(jsonData.id).to.not.eql(null); ",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name \" + jsonData.name, function() {",
													"        pm.expect(jsonData.name).to.eql(\"Module 1\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has order property\", function() {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid property\", function() {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date property\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modify_date property\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has parent_id property\", function() {",
													"        pm.expect(jsonData.parent_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has description property\", function() {",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 1\");",
													"    });",
													"    ",
													"    pm.environment.set(\"moduleId1\", jsonData.id);",
													"    pm.environment.set(\"moduleInfo1\", pm.response.text());",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Module 1\",\r\n  \"description\": \"Description of Module 1\",\r\n  \"shared\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create module 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e5bc18b5-0cad-445f-9cf3-4a08111470f3",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response data has links\", function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id\", function() {",
													"       pm.expect(jsonData.id).to.not.eql(null); ",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name \" + jsonData.name, function() {",
													"        pm.expect(jsonData.name).to.eql(\"Module 2\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has order property\", function() {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid property\", function() {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date property\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modify_date property\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has parent_id property\", function() {",
													"        pm.expect(jsonData.parent_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has description property\", function() {",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 2\");",
													"    });",
													"    ",
													"    pm.environment.set(\"moduleId2\", jsonData.id);",
													"    pm.environment.set(\"moduleInfo2\", pm.response.text());",
													"    ",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Module 2\",\r\n  \"description\": \"Description of Module 2\",\r\n  \"shared\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create module 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0520b331-9399-4a63-b660-405bda0d8097",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response data has links\", function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id\", function() {",
													"       pm.expect(jsonData.id).to.not.eql(null); ",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name \" + jsonData.name, function() {",
													"        pm.expect(jsonData.name).to.eql(\"Module 3\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has order property\", function() {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid property\", function() {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date property\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modify_date property\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has parent_id property\", function() {",
													"        pm.expect(jsonData.parent_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has description property\", function() {",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 3\");",
													"    });",
													"    ",
													"    pm.environment.set(\"moduleId3\", jsonData.id);",
													"    pm.environment.set(\"moduleInfo3\", pm.response.text());",
													"    ",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Module 3\",\r\n  \"description\": \"Description of Module 3\",\r\n  \"shared\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											]
										}
									},
									"response": []
								},
								{
									"name": "201- Precondition - Create sub module 1.1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4b5b53b4-f646-47cd-a654-c752583b6df7",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response data has links\", function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id\", function() {",
													"       pm.expect(jsonData.id).to.not.eql(null); ",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name \" + jsonData.name, function() {",
													"        pm.expect(jsonData.name).to.eql(\"Module 1.1\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has order property\", function() {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid property\", function() {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date property\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modify_date property\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has parent_id property\", function() {",
													"        pm.expect(jsonData.parent_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has description property\", function() {",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 1.1\");",
													"    });",
													"    ",
													"    pm.environment.set(\"subModuleId1\", jsonData.id);",
													"    pm.environment.set(\"subModuleInfo1\", pm.response.text());",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Module 1.1\",\r\n  \"description\": \"Description of Module 1.1\",\r\n  \"shared\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules?parentId={{moduleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{moduleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get requirement fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "727bc1b1-6acd-4963-b08e-b64c7f3624b9",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdReq\";",
													"    var jsonData = pm.response.json();",
													"    var fieldValueId;",
													"    var siteAdminFullName = pm.environment.get(\"firstName\") + \" \" + pm.environment.get(\"lastName\");",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                if (field.label === \"Assigned To\") {",
													"                    if(item.label === \"API User 1\"){",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"APIUser1\";",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                    }",
													"                    else if (item.label === siteAdminFullName) {",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"SiteAdminUser\";",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                    }",
													"                } else {",
													"                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                    pm.environment.set(fieldValueId, item.value);",
													"                }",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/requirements/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"requirements",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create requirement 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f5a8c25d-c9ae-4eb3-811f-785f6b2dbf84",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement info of \" + pm.environment.get(\"reqName\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"subModuleId1\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[\" + pm.environment.get(\"firstName\") + \" \" + pm.environment.get(\"lastName\") + \"]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToSiteAdminUser\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    pm.environment.set(\"reqId1\", jsonData.id);",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b04171ad-59ec-4ce4-b7fc-9011b41cc5d0",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 1\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 1\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToSiteAdminUser}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription}}\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{subModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{subModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create requirement 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c67a4fc0-bda5-4c03-a976-93f0cbc2b7ab",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement info of \" + pm.environment.get(\"reqName\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"moduleId3\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[\" + pm.environment.get(\"firstName\") + \" \" + pm.environment.get(\"lastName\") + \"]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToSiteAdminUser\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    pm.environment.set(\"reqId1\", jsonData.id);",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ac464e69-2f95-4c81-ae7f-be36546644bc",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 3\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 3\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToSiteAdminUser}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription}}\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{moduleId3}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{moduleId3}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get test case fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67e9e663-8379-4a54-b504-b3c1bcbbfb3b",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdTestCase\";",
													"    var jsonData = pm.response.json();",
													"    var userList = pm.environment.get(\"userList\");",
													"",
													"    var fieldValueId;",
													"    var siteAdminFullName = pm.environment.get(\"firstName\") + \" \" + pm.environment.get(\"lastName\");",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                if (field.label === \"Assigned To\") {",
													"                    if(item.label === pm.environment.get(\"firstName\") + \" \" + pm.environment.get(\"lastName\")){",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"APIUser1\";",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                    }",
													"                    else if (item.label === siteAdminFullName) {",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"SiteAdminUser\";",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                    }",
													"                } else {",
													"                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                    pm.environment.set(fieldValueId, item.value);",
													"                }",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/test-cases/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"test-cases",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create test case 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ca78905-4b27-4e41-b5b6-ada7dd44f2e8",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newTestCaseId1\", jsonData.id);",
													"    pm.environment.set(\"testCaseInfo1\", jsonData);",
													"    pm.environment.set(\"versionId1\", jsonData.test_case_version_id);",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains name: \" + jsonData.name, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"testCaseName\"));",
													"    });",
													"",
													"    pm.test(\"Response data has order property\", () => {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has web_url property\", () => {",
													"        pm.expect(jsonData.web_url).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains parent_id property\", () => {",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"subModuleId1\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData.test_case_version_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has version property\", () => {",
													"        pm.expect(jsonData.version).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains description property: \" + jsonData.description, () => {",
													"        pm.expect(jsonData.description).to.eql(pm.environment.get(\"testCaseDescription\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data contains precondition property: \" + jsonData.precondition, () => {",
													"        pm.expect(jsonData.precondition).to.eql(pm.environment.get(\"testCasePrecondition\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData.creator_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has agent_ids property\", () => {",
													"        pm.expect(jsonData.agent_ids).to.not.eql(null);",
													"    });",
													"",
													"    jsonData.test_steps.forEach((step, index) => {",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has links property\", () => {",
													"            pm.expect(step.links).to.not.eql(null);",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has id property\", () => {",
													"            pm.expect(step.id).to.not.eql(null);",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] contains description property: \" + step.description, () => {",
													"            pm.expect(step.description).to.eql(pm.environment.get(\"testStepDescription1\"));",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] contains expected property: \" + step.description, () => {",
													"            pm.expect(step.expected).to.eql(pm.environment.get(\"testStepExpected1\"));",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has order property\", () => {",
													"            pm.expect(step.order).to.not.eql(null);",
													"        });",
													"        ",
													"        pm.test(`Response data has test_steps[${index}] has ${step.attachments.length} attachment property`, () => {",
													"            pm.expect(step.attachments).to.not.eql(null);",
													"            pm.expect(step.attachments.length).to.eql(1);",
													"            pm.expect(step.attachments.links).not.to.eql(null);",
													"        });",
													"    });",
													"",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Automation\":",
													"                pm.test(\"Response data has automation: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"No\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseAutomationNo\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Automation Content\":",
													"                pm.test(\"Response data has empty automation content\", () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Performance\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseTypePerformance\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"High\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCasePriorityHigh\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdTestCaseAssignedToAPIUser1\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCaseDescription\"));",
													"                });",
													"                break;",
													"",
													"            case \"Precondition\":",
													"                pm.test(\"Repsonse data contains precondition: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCasePrecondition\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9ba61ad8-7912-4332-8cd6-331375199407",
												"exec": [
													"pm.environment.set(\"testCaseName\", \"Test Case 1\");",
													"pm.environment.set(\"testCaseDescription\", \"Description of Test Case 1\");",
													"pm.environment.set(\"testCasePrecondition\", \"Precondition of Test Case 1\");",
													"",
													"pm.environment.set(\"testStepDescription1\", \"Description of test step 1\");",
													"pm.environment.set(\"testStepExpected1\", \"Expected of test step 1\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{testCaseName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCaseAutomation}}\",\n\t    \t\"field_value\": \"{{fieldIdTestCaseAutomationNo}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCaseStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdTestCaseStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCaseType}}\",\n\t    \t\"field_value\": \"{{fieldIdTestCaseTypePerformance}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCaseAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdTestCaseAssignedToAPIUser1}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCaseDescription}}\",\n\t    \t\"field_value\": \"{{testCaseDescription}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCasePrecondition}}\",\n\t    \t\"field_value\": \"{{testCasePrecondition}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCasePriority}}\",\n\t    \t\"field_value\": \"{{fieldIdTestCasePriorityHigh}}\"\n\t\t}\n\t],\n\t\"test_steps\": [\n\t\t{\n\t\t\t\"description\": \"{{testStepDescription1}}\",\n\t\t\t\"expected\": \"{{testStepExpected1}}\",\n\t\t\t\"attachments\": [\n            \t{\n\t\t\t\t\t\"name\": \"sample_file_name.txt\",\n\t\t\t\t\t\"content_type\": \"text/plain\",\n\t\t\t\t\t\"data\": \"dGhpcyBpcyBzYW1wbGUgdGVzdA==\"\n            \t}\n            ]\n\t\t}\n\t],\n\t\"parent_id\": \"{{subModuleId1}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cases"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Get multiple modules - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8360fd-003b-4659-a1d8-da8ef984acdf",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    var jsonDataArray = pm.response.json();",
													"",
													"    pm.test(\"Response data has \" + jsonDataArray.length + \" object(s)\", function() {",
													"        pm.expect(jsonDataArray.length).to.eql(3);",
													"    });",
													"    ",
													"    var moduleInfo;",
													"    jsonDataArray.forEach(function (item, i){",
													"        if(pm.environment.get(\"moduleId1\") === item.id){",
													"            moduleInfo = JSON.parse(pm.environment.get(\"moduleInfo1\"));",
													"        }",
													"        else if(pm.environment.get(\"moduleId2\") === item.id){",
													"            moduleInfo = JSON.parse(pm.environment.get(\"moduleInfo2\"));",
													"        }",
													"        else if(pm.environment.get(\"moduleId3\") === item.id){",
													"            moduleInfo = JSON.parse(pm.environment.get(\"moduleInfo3\"));",
													"        }",
													"        pm.test(\"Response data contains information of \" + moduleInfo.name, function() {",
													"            pm.expect(item.links).to.not.eql(null);",
													"            pm.expect(item.id).to.eql(moduleInfo.id);",
													"            pm.expect(item.name).to.eql(moduleInfo.name);",
													"            pm.expect(item.order).to.not.eql(null);",
													"            pm.expect(item.pid).to.eql(moduleInfo.pid);",
													"            pm.expect(item.created_date).to.eql(moduleInfo.created_date);",
													"            pm.expect(item.last_modified_date).to.eql(moduleInfo.last_modified_date);",
													"            pm.expect(item.parent_id).to.eql(moduleInfo.parent_id);",
													"            pm.expect(item.description).to.eql(moduleInfo.description);",
													"        });",
													"    });",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9a6742f5-8cab-48a6-82df-0e5146444547",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Get multiple modules - Search an existed module",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d6569b11-a467-4a17-a025-3457b599d15d",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    var jsonDataArray = pm.response.json();",
													"",
													"    pm.test(\"Response data has \" + jsonDataArray.length + \" object(s)\", function() {",
													"        pm.expect(jsonDataArray.length).to.eql(1);",
													"    });",
													"",
													"    var moduleInfo = JSON.parse(pm.environment.get(\"moduleInfo2\"));",
													"    jsonDataArray.forEach(function(item, i) {",
													"        if (item.name === moduleInfo.name) {",
													"            pm.test(\"Response data contains information of \" + moduleInfo.name, function() {",
													"                pm.expect(item.links).to.not.eql(null);",
													"                pm.expect(item.id).to.eql(moduleInfo.id);",
													"                pm.expect(item.name).to.eql(moduleInfo.name);",
													"                pm.expect(item.order).to.not.eql(null);",
													"                pm.expect(item.pid).to.eql(moduleInfo.pid);",
													"                pm.expect(item.created_date).to.eql(moduleInfo.created_date);",
													"                pm.expect(item.last_modified_date).to.eql(moduleInfo.last_modified_date);",
													"                pm.expect(item.parent_id).to.eql(moduleInfo.parent_id);",
													"                pm.expect(item.description).to.eql(moduleInfo.description);",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules?search=Module 2",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											],
											"query": [
												{
													"key": "search",
													"value": "Module 2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Get multiple modules - Search an unexisted module",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e7d59b7-cc79-4345-8fc5-a32c704a8868",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    var jsonDataArray = pm.response.json();",
													"",
													"    pm.test(\"Response data has \" + jsonDataArray.length + \" object(s)\", function() {",
													"        pm.expect(jsonDataArray.length).to.eql(0);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules?search=1234",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											],
											"query": [
												{
													"key": "search",
													"value": "1234"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Get multiple modules - Search modules with expand=descendants",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f27e7bb-0923-4315-8321-96759971372b",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    var jsonDataArray = pm.response.json();",
													"",
													"    pm.test(\"Response data has \" + jsonDataArray.length + \" object(s)\", function() {",
													"        pm.expect(jsonDataArray.length).to.eql(3);",
													"    });",
													"",
													"    var moduleInfo, subModuleInfo;",
													"    jsonDataArray.forEach(function(item, i) {",
													"        if (pm.environment.get(\"moduleId1\") === item.id) {",
													"            moduleInfo = JSON.parse(pm.environment.get(\"moduleInfo1\"));",
													"            subModuleInfo = JSON.parse(pm.environment.get(\"subModuleInfo1\"));",
													"        } else if (pm.environment.get(\"moduleId2\") === item.id) {",
													"            moduleInfo = JSON.parse(pm.environment.get(\"moduleInfo2\"));",
													"        } else if (pm.environment.get(\"moduleId3\") === item.id) {",
													"            moduleInfo = JSON.parse(pm.environment.get(\"moduleInfo3\"));",
													"        }",
													"        pm.test(\"Response data contains information of \" + moduleInfo.name, function() {",
													"            pm.expect(item.links).to.not.eql(null);",
													"            pm.expect(item.id).to.eql(moduleInfo.id);",
													"            pm.expect(item.name).to.eql(moduleInfo.name);",
													"            pm.expect(item.order).to.not.eql(null);",
													"            pm.expect(item.pid).to.eql(moduleInfo.pid);",
													"            pm.expect(item.created_date).to.eql(moduleInfo.created_date);",
													"            pm.expect(item.last_modified_date).to.eql(moduleInfo.last_modified_date);",
													"            pm.expect(item.parent_id).to.eql(moduleInfo.parent_id);",
													"            pm.expect(item.description).to.eql(moduleInfo.description);",
													"        });",
													"        if (item.hasOwnProperty(\"children\") && item.children.length > 0) {",
													"            item.children.forEach(function(children) {",
													"                if (children.name === subModuleInfo.name) {",
													"                    pm.test(\"Module '\" + moduleInfo.name + \"' has \" + item.children.length + \" children and contains sub module '\" + subModuleInfo.name + \"'\", function() {",
													"                        pm.expect(children.links).to.not.eql(null);",
													"                        pm.expect(children.id).to.eql(subModuleInfo.id);",
													"                        pm.expect(children.name).to.eql(subModuleInfo.name);",
													"                        pm.expect(children.order).to.not.eql(null);",
													"                        pm.expect(children.pid).to.eql(subModuleInfo.pid);",
													"                        pm.expect(children.created_date).to.eql(subModuleInfo.created_date);",
													"                        pm.expect(children.last_modified_date).to.eql(subModuleInfo.last_modified_date);",
													"                        pm.expect(children.parent_id).to.eql(subModuleInfo.parent_id);",
													"                        pm.expect(children.description).to.eql(subModuleInfo.description);",
													"                    });",
													"                }",
													"            });",
													"",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules?expand=descendants",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											],
											"query": [
												{
													"key": "expand",
													"value": "descendants"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Get multiple modues - Search modules without expand-descendants",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2338bcbd-1461-4dcc-9715-e79dce4b1860",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    var jsonDataArray = pm.response.json();",
													"",
													"    pm.test(\"Response data has \" + jsonDataArray.length + \" object(s)\", function() {",
													"        pm.expect(jsonDataArray.length).to.eql(3);",
													"    });",
													"",
													"    pm.test(\"Response data does not contain children property\", function() {",
													"        pm.expect(pm.response.text()).not.to.include(\"children\");",
													"    });",
													"    ",
													"    var moduleInfo;",
													"    jsonDataArray.forEach(function(item, i) {",
													"        if (pm.environment.get(\"moduleId1\") === item.id) {",
													"            moduleInfo = JSON.parse(pm.environment.get(\"moduleInfo1\"));",
													"        } else if (pm.environment.get(\"moduleId2\") === item.id) {",
													"            moduleInfo = JSON.parse(pm.environment.get(\"moduleInfo2\"));",
													"        } else if (pm.environment.get(\"moduleId3\") === item.id) {",
													"            moduleInfo = JSON.parse(pm.environment.get(\"moduleInfo3\"));",
													"        }",
													"        pm.test(\"Response data contains information of \" + moduleInfo.name, function() {",
													"            pm.expect(item.links).to.not.eql(null);",
													"            pm.expect(item.id).to.eql(moduleInfo.id);",
													"            pm.expect(item.name).to.eql(moduleInfo.name);",
													"            pm.expect(item.order).to.not.eql(null);",
													"            pm.expect(item.pid).to.eql(moduleInfo.pid);",
													"            pm.expect(item.created_date).to.eql(moduleInfo.created_date);",
													"            pm.expect(item.last_modified_date).to.eql(moduleInfo.last_modified_date);",
													"            pm.expect(item.parent_id).to.eql(moduleInfo.parent_id);",
													"            pm.expect(item.description).to.eql(moduleInfo.description);",
													"        });",
													"    });",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Get multiple modues - Invalid value of expand property",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "39a333c4-571e-437d-8c60-bd3919881644",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains message 'No enum'\", function() {",
													"        pm.expect(pm.response.json().message).to.include(\"No enum\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules?expand=not_descendants",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											],
											"query": [
												{
													"key": "expand",
													"value": "not_descendants"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Get multiple modules - Search an existed module with expand=descendants",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83d2e01a-ea26-4bcf-9e4e-61f990f77ccd",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    var jsonDataArray = pm.response.json();",
													"",
													"    pm.test(\"Response data has \" + jsonDataArray.length + \" object(s)\", function() {",
													"        pm.expect(jsonDataArray.length).to.eql(1);",
													"    });",
													"",
													"    var moduleInfo = JSON.parse(pm.environment.get(\"moduleInfo1\"));",
													"    var subModuleInfo = JSON.parse(pm.environment.get(\"subModuleInfo1\"));",
													"    jsonDataArray.forEach(function(item, i) {",
													"        if (moduleInfo.name === item.name) {",
													"            pm.test(\"Response data contains information of \" + moduleInfo.name, function() {",
													"                pm.expect(item.links).to.not.eql(null);",
													"                pm.expect(item.id).to.eql(moduleInfo.id);",
													"                pm.expect(item.name).to.eql(moduleInfo.name);",
													"                pm.expect(item.order).to.not.eql(null);",
													"                pm.expect(item.pid).to.eql(moduleInfo.pid);",
													"                pm.expect(item.created_date).to.eql(moduleInfo.created_date);",
													"                pm.expect(item.last_modified_date).to.eql(moduleInfo.last_modified_date);",
													"                pm.expect(item.parent_id).to.eql(moduleInfo.parent_id);",
													"                pm.expect(item.description).to.eql(moduleInfo.description);",
													"            });",
													"            if (item.hasOwnProperty(\"children\") && item.children.length > 0) {",
													"                item.children.forEach(function(children) {",
													"                    if (children.name === subModuleInfo.name) {",
													"                        pm.test(\"Module '\" + moduleInfo.name + \"' has children and contains sub module '\" + subModuleInfo.name + \"'\", function() {",
													"                            pm.expect(children.links).to.not.eql(null);",
													"                            pm.expect(children.id).to.eql(subModuleInfo.id);",
													"                            pm.expect(children.name).to.eql(subModuleInfo.name);",
													"                            pm.expect(children.order).to.not.eql(null);",
													"                            pm.expect(children.pid).to.eql(subModuleInfo.pid);",
													"                            pm.expect(children.created_date).to.eql(subModuleInfo.created_date);",
													"                            pm.expect(children.last_modified_date).to.eql(subModuleInfo.last_modified_date);",
													"                            pm.expect(children.parent_id).to.eql(subModuleInfo.parent_id);",
													"                            pm.expect(children.description).to.eql(subModuleInfo.description);",
													"                        });",
													"                    }",
													"                });",
													"            }",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules?search=Module 1&expand=descendants",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											],
											"query": [
												{
													"key": "search",
													"value": "Module 1"
												},
												{
													"key": "expand",
													"value": "descendants"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Get multiple modules - Search an unexisted module with expand=descendants",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "37cf70ba-7c81-4a6a-8b87-a72785f248af",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    var jsonDataArray = pm.response.json();",
													"",
													"    pm.test(\"Response data has \" + jsonDataArray.length + \" object(s)\", function() {",
													"        pm.expect(jsonDataArray.length).to.eql(0);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules?search=No exist module&expand=descendants",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											],
											"query": [
												{
													"key": "search",
													"value": "No exist module"
												},
												{
													"key": "expand",
													"value": "descendants"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Get multiple modules - Invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c7b8adc9-286c-4c30-bb52-cc9a2be27f29",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 401) {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 401\", function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"",
													"    pm.test(\"Repsonse body contains 'Invalid access token'\", function() {",
													"        pm.expect(jsonData.error_description).to.include(\"Invalid access token\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} 2222{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules?search=Module 1&expand=descendants",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											],
											"query": [
												{
													"key": "search",
													"value": "Module 1"
												},
												{
													"key": "expand",
													"value": "descendants"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8a5bf2ce-a073-4a9b-889f-f0ba01880851",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"projectEndDate\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "710bae14-f646-4735-bf96-4cb0debddbd8",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"id": "7d5d18e5-5b87-4bb3-b2e3-6751f0bd4bab",
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"moduleId1\");",
													"    pm.environment.unset(\"moduleInfo1\");",
													"    pm.environment.unset(\"moduleId2\");",
													"    pm.environment.unset(\"moduleInfo2\");",
													"    pm.environment.unset(\"moduleId3\");",
													"    pm.environment.unset(\"moduleInfo3\");",
													"    pm.environment.unset(\"subModuleId1\");",
													"    pm.environment.unset(\"subModuleInfo1\");",
													"    ",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"tokenType\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"",
													"    pm.environment.unset(\"fieldIdReqStatus\");",
													"    pm.environment.unset(\"fieldIdReqStatusNew\");",
													"    pm.environment.unset(\"fieldIdReqStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdReqStatusReadyForBaseline\");",
													"    pm.environment.unset(\"fieldIdReqStatusBaselined\");",
													"    pm.environment.unset(\"fieldIdReqPriority\");",
													"    pm.environment.unset(\"fieldIdReqPriorityMusthave\");",
													"    pm.environment.unset(\"fieldIdReqPriorityShouldhave\");",
													"    pm.environment.unset(\"fieldIdReqPriorityNicetohave\");",
													"    pm.environment.unset(\"fieldIdReqType\");",
													"    pm.environment.unset(\"fieldIdReqTypeFunctional\");",
													"    pm.environment.unset(\"fieldIdReqTypeNonfunctional\");",
													"    pm.environment.unset(\"fieldIdReqAssignedTo\");",
													"    pm.environment.unset(\"fieldIdReqAssignedToSiteAdminUser\");",
													"    pm.environment.unset(\"fieldIdReqDescription\");",
													"    pm.environment.unset(\"reqDescription\");",
													"    pm.environment.unset(\"reqId1\");",
													"",
													"    pm.environment.unset(\"fieldIdTestCaseAutomation\");",
													"    pm.environment.unset(\"fieldIdTestCaseAutomationYes\");",
													"    pm.environment.unset(\"fieldIdTestCaseAutomationNo\");",
													"    pm.environment.unset(\"fieldIdTestCaseAutomationContent\");",
													"    pm.environment.unset(\"fieldIdTestCaseStatus\");",
													"    pm.environment.unset(\"fieldIdTestCaseStatusNew\");",
													"    pm.environment.unset(\"fieldIdTestCaseStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdTestCaseStatusReadyForBaseline\");",
													"    pm.environment.unset(\"fieldIdTestCaseStatusBaselined\");",
													"    pm.environment.unset(\"fieldIdTestCaseType\");",
													"    pm.environment.unset(\"fieldIdTestCaseTypeManual\");",
													"    pm.environment.unset(\"fieldIdTestCaseTypeAutomation\");",
													"    pm.environment.unset(\"fieldIdTestCaseTypePerformance\");",
													"    pm.environment.unset(\"fieldIdTestCaseTypeScenario\");",
													"    pm.environment.unset(\"fieldIdTestCaseAssignedTo\");",
													"    pm.environment.unset(\"fieldIdTestCaseAssignedToUser1\");",
													"    pm.environment.unset(\"fieldIdTestCaseDescription\");",
													"    pm.environment.unset(\"fieldIdTestCasePrecondition\");",
													"    pm.environment.unset(\"fieldIdTestCasePriority\");",
													"    pm.environment.unset(\"fieldIdTestCasePriorityUndecided\");",
													"    pm.environment.unset(\"fieldIdTestCasePriorityLow\");",
													"    pm.environment.unset(\"fieldIdTestCasePriorityMedium\");",
													"    pm.environment.unset(\"fieldIdTestCasePriorityHigh\");",
													"    pm.environment.unset(\"fieldIdTestCasePriorityUrgent\");",
													"    ",
													"    pm.environment.unset(\"testCaseName\");",
													"    pm.environment.unset(\"testCaseDescription\");",
													"    pm.environment.unset(\"testCasePrecondition\");",
													"    pm.environment.unset(\"testStepDescription1\");",
													"    pm.environment.unset(\"testStepExpected1\");",
													"    ",
													"    pm.environment.unset(\"newTestCaseId1\");",
													"    pm.environment.unset(\"testCaseInfo1\");",
													"    pm.environment.unset(\"versionId1\");",
													"    ",
													"    var userList = pm.environment.get(\"userList\");",
													"    if(userList){",
													"        userList.forEach((user) => {",
													"        var userName = `fieldIdTestCaseAssignedTo${user.first_name}${user.last_name}`.replace(/[\\s\\/-]/g, \"\");",
													"        pm.environment.unset(userName);",
													"        });",
													"    }",
													"    ",
													"    pm.environment.unset(\"userList\");",
													"    pm.environment.unset(\"fieldIdTestCaseAssignedToUserTest\");",
													"    pm.environment.unset(\"fieldIdTestCaseAssignedToSiteAdminUser\");",
													"    pm.environment.unset(\"userTestFullName\");",
													"    pm.environment.unset(\"userId\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"tokenType\");",
													"    pm.environment.unset(\"endDate\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"moduleId1\");",
													"    pm.environment.unset(\"moduleInfo1\");",
													"    pm.environment.unset(\"moduleId2\");",
													"    pm.environment.unset(\"moduleInfo2\");",
													"    pm.environment.unset(\"moduleId3\");",
													"    pm.environment.unset(\"moduleInfo3\");",
													"    pm.environment.unset(\"subModuleId1\");",
													"    pm.environment.unset(\"subModulesubModuleInfo1d1\");",
													"",
													"    ",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"id": "bbd6f45f-6fb5-4e7c-bbd4-17efcddc0f43",
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Module",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0fca5e24-865c-423c-b318-21e141d8dfc3",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic YXBpdHJ5b3V0Og=="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d4283aa0-a520-4671-b017-511c55fcfbe5",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.test(\"Response data contains all properties of project data\", function(){",
													"        pm.expect(pm.response.text()).to.include(\"id\");",
													"        pm.expect(jsonData.name).to.eql(\"qTest API - Postman\");",
													"        pm.expect(jsonData.description).to.eql(\"Description of qTest API - Postman\");",
													"        pm.expect(pm.response.text()).to.include(\"status_id\");",
													"        pm.expect(pm.response.text()).to.include(\"start_date\");",
													"        pm.expect(pm.response.text()).to.include(\"end_date\");",
													"        pm.expect(pm.response.text()).to.include(\"sample\");",
													"        pm.expect(pm.response.text()).to.include(\"defect_tracking_systems\");",
													"        pm.expect(pm.response.text()).to.include(\"x_explorer_access_level\");",
													"        pm.expect(pm.response.text()).to.include(\"date_format\");",
													"        pm.expect(jsonData.automation.toString()).to.eql(\"true\");",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate\", pm.environment.get(\"startDate\"));",
													"    pm.environment.set(\"projectEndDate\", pm.environment.get(\"endDate\"));",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ac842e39-75c5-4df6-84ed-0f092ca5e9a0",
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\"\n  ],\n  \"automation\": true\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create module 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6cb74c88-cc53-491b-88a4-daf1ab8bf538",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response data has links\", function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id\", function() {",
													"       pm.expect(jsonData.id).to.not.eql(null); ",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name \" + jsonData.name, function() {",
													"        pm.expect(jsonData.name).to.eql(\"Module 1\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has order property\", function() {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid property\", function() {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date property\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modify_date property\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has parent_id property\", function() {",
													"        pm.expect(jsonData.parent_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has description property\", function() {",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 1\");",
													"    });",
													"    ",
													"    pm.environment.set(\"moduleId\", jsonData.id);",
													"    pm.environment.set(\"moduleInfo\", pm.response.text());",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Module 1\",\r\n  \"description\": \"Description of Module 1\",\r\n  \"shared\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											]
										}
									},
									"response": []
								},
								{
									"name": "201- Precondition - Create sub module 1.1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b0ccc745-a27b-4523-bec0-7df5df90e93b",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response data has links\", function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id\", function() {",
													"       pm.expect(jsonData.id).to.not.eql(null); ",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name \" + jsonData.name, function() {",
													"        pm.expect(jsonData.name).to.eql(\"Module 1.1\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has order property\", function() {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid property\", function() {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date property\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modify_date property\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has parent_id property\", function() {",
													"        pm.expect(jsonData.parent_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has description property\", function() {",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 1.1\");",
													"    });",
													"    ",
													"    pm.environment.set(\"subModuleId\", jsonData.id);",
													"    pm.environment.set(\"subModuleInfo\", pm.response.text());",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Module 1.1\",\r\n  \"description\": \"Description of Module 1.1\",\r\n  \"shared\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules?parentId={{moduleId}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{moduleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get requirement fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a8f2e70-b130-4542-86d3-28ba8c80b4e2",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdReq\";",
													"    var jsonData = pm.response.json();",
													"    var fieldValueId;",
													"    var siteAdminFullName = pm.environment.get(\"firstName\") + \" \" + pm.environment.get(\"lastName\");",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                if (field.label === \"Assigned To\") {",
													"                    if(item.label === \"API User 1\"){",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"APIUser1\";",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                    }",
													"                    else if (item.label === siteAdminFullName) {",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"SiteAdminUser\";",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                    }",
													"                } else {",
													"                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                    pm.environment.set(fieldValueId, item.value);",
													"                }",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/requirements/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"requirements",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create requirement 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7346d841-532a-4f9c-940b-ea2de056b789",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement info of \" + pm.environment.get(\"reqName\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"moduleId\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[\" + pm.environment.get(\"firstName\") + \" \" + pm.environment.get(\"lastName\") + \"]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToSiteAdminUser\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    pm.environment.set(\"reqId1\", jsonData.id);",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ee111129-039d-4c33-9575-f4f7c6ee83a5",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 1\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 1\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToSiteAdminUser}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription}}\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{moduleId}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{moduleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create requirement 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "97e1f35c-a962-4715-b6ef-6d0cc5148911",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement info of \" + pm.environment.get(\"reqName\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"subModuleId\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[\" + pm.environment.get(\"firstName\") + \" \" + pm.environment.get(\"lastName\") + \"]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToSiteAdminUser\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    pm.environment.set(\"reqId1\", jsonData.id);",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "385c87c7-1513-4786-9fed-5a96d01656aa",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 3\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 3\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToSiteAdminUser}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription}}\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{subModuleId}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{subModuleId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get test case field",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9473b26e-1894-4db7-b793-95f723ff0710",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdTestCase\";",
													"    var jsonData = pm.response.json();",
													"    var userList = pm.environment.get(\"userList\");",
													"",
													"    var fieldValueId;",
													"    var siteAdminFullName = pm.environment.get(\"firstName\") + \" \" + pm.environment.get(\"lastName\");",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                if (field.label === \"Assigned To\") {",
													"                    if(item.label === pm.environment.get(\"firstName\") + \" \" + pm.environment.get(\"lastName\")){",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"APIUser1\";",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                    }",
													"                    else if (item.label === siteAdminFullName) {",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"SiteAdminUser\";",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                    }",
													"                } else {",
													"                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                    pm.environment.set(fieldValueId, item.value);",
													"                }",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/test-cases/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"test-cases",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create test case 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b719a7d5-88c5-485f-afd8-e98162bc9faa",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newTestCaseId1\", jsonData.id);",
													"    pm.environment.set(\"testCaseInfo1\", jsonData);",
													"    pm.environment.set(\"versionId1\", jsonData.test_case_version_id);",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains name: \" + jsonData.name, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"testCaseName\"));",
													"    });",
													"",
													"    pm.test(\"Response data has order property\", () => {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has web_url property\", () => {",
													"        pm.expect(jsonData.web_url).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains parent_id property\", () => {",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"subModuleId\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData.test_case_version_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has version property\", () => {",
													"        pm.expect(jsonData.version).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains description property: \" + jsonData.description, () => {",
													"        pm.expect(jsonData.description).to.eql(pm.environment.get(\"testCaseDescription\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data contains precondition property: \" + jsonData.precondition, () => {",
													"        pm.expect(jsonData.precondition).to.eql(pm.environment.get(\"testCasePrecondition\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData.creator_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has agent_ids property\", () => {",
													"        pm.expect(jsonData.agent_ids).to.not.eql(null);",
													"    });",
													"",
													"    jsonData.test_steps.forEach((step, index) => {",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has links property\", () => {",
													"            pm.expect(step.links).to.not.eql(null);",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has id property\", () => {",
													"            pm.expect(step.id).to.not.eql(null);",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] contains description property: \" + step.description, () => {",
													"            pm.expect(step.description).to.eql(pm.environment.get(\"testStepDescription1\"));",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] contains expected property: \" + step.description, () => {",
													"            pm.expect(step.expected).to.eql(pm.environment.get(\"testStepExpected1\"));",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has order property\", () => {",
													"            pm.expect(step.order).to.not.eql(null);",
													"        });",
													"        ",
													"        pm.test(`Response data has test_steps[${index}] has ${step.attachments.length} attachment property`, () => {",
													"            pm.expect(step.attachments).to.not.eql(null);",
													"            pm.expect(step.attachments.length).to.eql(1);",
													"            pm.expect(step.attachments.links).not.to.eql(null);",
													"        });",
													"    });",
													"",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Automation\":",
													"                pm.test(\"Response data has automation: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"No\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseAutomationNo\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Automation Content\":",
													"                pm.test(\"Response data has empty automation content\", () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Performance\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseTypePerformance\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"High\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCasePriorityHigh\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdTestCaseAssignedToAPIUser1\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCaseDescription\"));",
													"                });",
													"                break;",
													"",
													"            case \"Precondition\":",
													"                pm.test(\"Repsonse data contains precondition: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCasePrecondition\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fd0777ec-5c93-4f26-a22f-21eaa6eeb9fc",
												"exec": [
													"pm.environment.set(\"testCaseName\", \"Test Case 1\");",
													"pm.environment.set(\"testCaseDescription\", \"Description of Test Case 1\");",
													"pm.environment.set(\"testCasePrecondition\", \"Precondition of Test Case 1\");",
													"",
													"pm.environment.set(\"testStepDescription1\", \"Description of test step 1\");",
													"pm.environment.set(\"testStepExpected1\", \"Expected of test step 1\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{testCaseName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCaseAutomation}}\",\n\t    \t\"field_value\": \"{{fieldIdTestCaseAutomationNo}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCaseStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdTestCaseStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCaseType}}\",\n\t    \t\"field_value\": \"{{fieldIdTestCaseTypePerformance}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCaseAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdTestCaseAssignedToAPIUser1}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCaseDescription}}\",\n\t    \t\"field_value\": \"{{testCaseDescription}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCasePrecondition}}\",\n\t    \t\"field_value\": \"{{testCasePrecondition}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdTestCasePriority}}\",\n\t    \t\"field_value\": \"{{fieldIdTestCasePriorityHigh}}\"\n\t\t}\n\t],\n\t\"test_steps\": [\n\t\t{\n\t\t\t\"description\": \"{{testStepDescription1}}\",\n\t\t\t\"expected\": \"{{testStepExpected1}}\",\n\t\t\t\"attachments\": [\n            \t{\n\t\t\t\t\t\"name\": \"sample_file_name.txt\",\n\t\t\t\t\t\"content_type\": \"text/plain\",\n\t\t\t\t\t\"data\": \"dGhpcyBpcyBzYW1wbGUgdGVzdA==\"\n            \t}\n            ]\n\t\t}\n\t],\n\t\"parent_id\": \"{{subModuleId}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cases"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Get module - Get an existed module without expand=descendants",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f6d80eee-6a38-471a-a794-f6b24baf89c9",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Response status \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"    var moduleInfo = JSON.parse(pm.environment.get(\"moduleInfo\"));",
													"    pm.test(\"Response data contains information of \" + moduleInfo.name, function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.eql(moduleInfo.id);",
													"        pm.expect(jsonData.name).to.eql(moduleInfo.name);",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.eql(moduleInfo.pid);",
													"        pm.expect(jsonData.created_date).to.eql(moduleInfo.created_date);",
													"        pm.expect(jsonData.last_modified_date).to.eql(moduleInfo.last_modified_date);",
													"        pm.expect(jsonData.parent_id).to.eql(moduleInfo.parent_id);",
													"        pm.expect(jsonData.description).to.eql(moduleInfo.description);",
													"    });",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{moduleId}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{moduleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Get module - Get an existed module with expand=descendants",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "145f4997-39d1-4864-a3fe-04d5d6eee706",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"    var moduleInfo = JSON.parse(pm.environment.get(\"moduleInfo\"));",
													"    pm.test(\"Response data contains information of \" + moduleInfo.name, function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.eql(moduleInfo.id);",
													"        pm.expect(jsonData.name).to.eql(moduleInfo.name);",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.eql(moduleInfo.pid);",
													"        pm.expect(jsonData.created_date).to.eql(moduleInfo.created_date);",
													"        pm.expect(jsonData.last_modified_date).to.eql(moduleInfo.last_modified_date);",
													"        pm.expect(jsonData.parent_id).to.eql(moduleInfo.parent_id);",
													"        pm.expect(jsonData.description).to.eql(moduleInfo.description);",
													"    });",
													"",
													"    pm.test(\"Has \" + jsonData.children.length + \" children under module '\" + moduleInfo.name + \"'\", function() {",
													"        pm.expect(jsonData.children.length).to.eql(1);",
													"    });",
													"",
													"    var subModuleInfo = JSON.parse(pm.environment.get(\"subModuleInfo\"));",
													"    if (jsonData.hasOwnProperty(\"children\") && jsonData.children.length > 0) {",
													"        jsonData.children.forEach(function(children) {",
													"            if (children.name === subModuleInfo.name) {",
													"                pm.test(\"Module '\" + moduleInfo.name + \"' has 1 children and contains sub module '\" + subModuleInfo.name + \"'\", function() {",
													"                    pm.expect(children.links).to.not.eql(null);",
													"                    pm.expect(children.id).to.eql(subModuleInfo.id);",
													"                    pm.expect(children.name).to.eql(subModuleInfo.name);",
													"                    pm.expect(children.order).to.not.eql(null);",
													"                    pm.expect(children.pid).to.eql(subModuleInfo.pid);",
													"                    pm.expect(children.created_date).to.eql(subModuleInfo.created_date);",
													"                    pm.expect(children.last_modified_date).to.eql(subModuleInfo.last_modified_date);",
													"                    pm.expect(children.parent_id).to.eql(subModuleInfo.parent_id);",
													"                    pm.expect(children.description).to.eql(subModuleInfo.description);",
													"                });",
													"            }",
													"        });",
													"    }",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{moduleId}}?expand=descendants",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{moduleId}}"
											],
											"query": [
												{
													"key": "expand",
													"value": "descendants"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Get module - Not exist projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "167a6692-beda-4ddb-ae8b-b0b3183f5e42",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body contains 'Project not found'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Project not found\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/0/modules/{{moduleId}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"0",
												"modules",
												"{{moduleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get module - Invalid projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b1db5a4b-90d7-482a-b327-2c3d4eafa59d",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body contains 'For input string'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"For input string\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/a32/modules/{{moduleId}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"a32",
												"modules",
												"{{moduleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Get module - Not exist moduleId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eb240da9-073f-4dbd-92c9-d654ae4de757",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body contains 'Module does not exist'\", function() {",
													"        pm.expect(jsonData.message).to.eql(\"Module does not exist\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/0",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"0"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get module - Invalid moduleId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9f26d4ba-c7f1-4938-a277-9ab09a1bfb76",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body contains 'Failed to convert value of type'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Failed to convert value of type\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/a1234",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"a1234"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get module - Invalid value of expand property",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a40b4abf-51ec-4cd8-90a4-3d8de46f324e",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response object contains \" + jsonData.message, function() {",
													"        pm.expect(jsonData.message).to.include(\"No enum\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{moduleId}}?expand=not_descendants",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{moduleId}}"
											],
											"query": [
												{
													"key": "expand",
													"value": "not_descendants"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "94651620-18f8-4b5e-95aa-6f164be781a5",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"projectEndDate\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4614a197-3e94-46a3-b852-c448517d0050",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "798b9ed3-436e-4742-8045-31169acc2dd9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6450aec3-3cd9-4084-a824-2a5c1d201662",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"moduleId\");",
													"    pm.environment.unset(\"moduleInfo\");",
													"    pm.environment.unset(\"subModuleId\");",
													"    pm.environment.unset(\"subModuleInfo\");",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"tokenType\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"",
													"    pm.environment.unset(\"fieldIdReqStatus\");",
													"    pm.environment.unset(\"fieldIdReqStatusNew\");",
													"    pm.environment.unset(\"fieldIdReqStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdReqStatusReadyForBaseline\");",
													"    pm.environment.unset(\"fieldIdReqStatusBaselined\");",
													"    pm.environment.unset(\"fieldIdReqPriority\");",
													"    pm.environment.unset(\"fieldIdReqPriorityMusthave\");",
													"    pm.environment.unset(\"fieldIdReqPriorityShouldhave\");",
													"    pm.environment.unset(\"fieldIdReqPriorityNicetoHave\");",
													"    pm.environment.unset(\"fieldIdReqType\");",
													"    pm.environment.unset(\"fieldIdReqTypeFunctional\");",
													"    pm.environment.unset(\"fieldIdReqTypeNonfunctional\");",
													"    pm.environment.unset(\"fieldIdReqAssignedTo\");",
													"    pm.environment.unset(\"fieldIdReqAssignedToAPIUser1\");",
													"",
													"    pm.environment.unset(\"fieldIdTestCaseAutomation\");",
													"    pm.environment.unset(\"fieldIdTestCaseAutomationYes\");",
													"    pm.environment.unset(\"fieldIdTestCaseAutomationNo\");",
													"    pm.environment.unset(\"fieldIdTestCaseAutomationContent\");",
													"    pm.environment.unset(\"fieldIdTestCaseStatus\");",
													"    pm.environment.unset(\"fieldIdTestCaseStatusNew\");",
													"    pm.environment.unset(\"fieldIdTestCaseStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdTestCaseStatusReadyForBaseline\");",
													"    pm.environment.unset(\"fieldIdTestCaseStatusBaselined\");",
													"    pm.environment.unset(\"fieldIdTestCaseType\");",
													"    pm.environment.unset(\"fieldIdTestCaseTypeManual\");",
													"    pm.environment.unset(\"fieldIdTestCaseTypeAutomation\");",
													"    pm.environment.unset(\"fieldIdTestCaseTypePerformance\");",
													"    pm.environment.unset(\"fieldIdTestCaseTypeScenario\");",
													"    pm.environment.unset(\"fieldIdTestCaseAssignedTo\");",
													"    pm.environment.unset(\"fieldIdTestCaseAssignedToUser1\");",
													"    pm.environment.unset(\"fieldIdTestCaseDescription\");",
													"    pm.environment.unset(\"fieldIdTestCasePrecondition\");",
													"    pm.environment.unset(\"fieldIdTestCasePriority\");",
													"    pm.environment.unset(\"fieldIdTestCasePriorityUndecided\");",
													"    pm.environment.unset(\"fieldIdTestCasePriorityLow\");",
													"    pm.environment.unset(\"fieldIdTestCasePriorityMedium\");",
													"    pm.environment.unset(\"fieldIdTestCasePriorityHigh\");",
													"    pm.environment.unset(\"fieldIdTestCasePriorityUrgent\");",
													"    ",
													"    pm.environment.unset(\"testCaseName\");",
													"    pm.environment.unset(\"testCaseDescription\");",
													"    pm.environment.unset(\"testCasePrecondition\");",
													"    pm.environment.unset(\"testStepDescription1\");",
													"    pm.environment.unset(\"testStepExpected1\");",
													"    ",
													"    pm.environment.unset(\"newTestCaseId1\");",
													"    pm.environment.unset(\"testCaseInfo1\");",
													"    pm.environment.unset(\"versionId1\");",
													"",
													"",
													"    pm.environment.unset(\"reqName\");",
													"    pm.environment.unset(\"projectEndDate\");",
													"    pm.environment.unset(\"projectId\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"fieldIdReqAssignedToSiteAdminUser\");",
													"    pm.environment.unset(\"fieldIdReqDescription\");",
													"    pm.environment.unset(\"fieldIdReqPriorityNicetohave\");",
													"    pm.environment.unset(\"reqDescription\");",
													"    pm.environment.unset(\"reqId1\");",
													"    pm.environment.unset(\"fieldIdTestCaseAssignedToAPIUser1\");",
													"    pm.environment.unset(\"fieldIdTestCaseAutomationTosca\");",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update Module",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc1e1353-e75b-4b0e-915b-12f5413adbfc",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"    ",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic YXBpdHJ5b3V0Og=="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fbee92e7-47c0-4e21-b048-d70ac9db951f",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.test(\"Response data contains all properties of project data\", function(){",
													"        pm.expect(pm.response.text()).to.include(\"id\");",
													"        pm.expect(jsonData.name).to.eql(\"qTest API - Postman\");",
													"        pm.expect(jsonData.description).to.eql(\"Description of qTest API - Postman\");",
													"        pm.expect(pm.response.text()).to.include(\"status_id\");",
													"        pm.expect(pm.response.text()).to.include(\"start_date\");",
													"        pm.expect(pm.response.text()).to.include(\"end_date\");",
													"        pm.expect(pm.response.text()).to.include(\"sample\");",
													"        pm.expect(pm.response.text()).to.include(\"defect_tracking_systems\");",
													"        pm.expect(pm.response.text()).to.include(\"x_explorer_access_level\");",
													"        pm.expect(pm.response.text()).to.include(\"date_format\");",
													"        pm.expect(jsonData.automation.toString()).to.eql(\"true\");",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate\", pm.environment.get(\"startDate\"));",
													"    pm.environment.set(\"projectEndDate\", pm.environment.get(\"endDate\"));",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5c403cb5-21cb-420d-955b-362ddc1b7961",
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\"\n  ],\n  \"automation\": true\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create module 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "234fb546-3a5c-4e9a-94ce-12bd147f80f1",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response data has links\", function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id\", function() {",
													"       pm.expect(jsonData.id).to.not.eql(null); ",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name \" + jsonData.name, function() {",
													"        pm.expect(jsonData.name).to.eql(\"Module 1\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has order property\", function() {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid property\", function() {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date property\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modify_date property\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has parent_id property\", function() {",
													"        pm.expect(jsonData.parent_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has description property\", function() {",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 1\");",
													"    });",
													"    ",
													"    pm.environment.set(\"moduleId1\", jsonData.id);",
													"    pm.environment.set(\"moduleInfo1\", pm.response.text());",
													"    pm.environment.set(\"rootId\", jsonData.parent_id);",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Module 1\",\r\n  \"description\": \"Description of Module 1\",\r\n  \"shared\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create module 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0138c325-b961-42e5-acfd-3bb55f794e2f",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response data has links\", function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id\", function() {",
													"       pm.expect(jsonData.id).to.not.eql(null); ",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name \" + jsonData.name, function() {",
													"        pm.expect(jsonData.name).to.eql(\"Module 2\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has order property\", function() {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid property\", function() {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date property\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modify_date property\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has parent_id property\", function() {",
													"        pm.expect(jsonData.parent_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has description property\", function() {",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 2\");",
													"    });",
													"    ",
													"    pm.environment.set(\"moduleId2\", jsonData.id);",
													"    pm.environment.set(\"moduleInfo2\", pm.response.text());",
													"    ",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Module 2\",\r\n  \"description\": \"Description of Module 2\",\r\n  \"shared\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											]
										}
									},
									"response": []
								},
								{
									"name": "201- Precondition - Create sub module 1.1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5250f3a2-fc46-45ef-bfbe-c87e19f48317",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response data has links\", function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id\", function() {",
													"       pm.expect(jsonData.id).to.not.eql(null); ",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name \" + jsonData.name, function() {",
													"        pm.expect(jsonData.name).to.eql(\"Module 1.1\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has order property\", function() {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid property\", function() {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date property\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modify_date property\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has parent_id property\", function() {",
													"        pm.expect(jsonData.parent_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has description property\", function() {",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 1.1\");",
													"    });",
													"    ",
													"    pm.environment.set(\"subModuleId\", jsonData.id);",
													"    pm.environment.set(\"subModuleInfo\", pm.response.text());",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Module 1.1\",\r\n  \"description\": \"Description of Module 1.1\",\r\n  \"shared\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules?parentId={{moduleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{moduleId1}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Update module - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0e564174-a3c8-4712-81e2-7edbdbc872ff",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"    var moduleInfo = JSON.parse(pm.environment.get(\"moduleInfo1\"));",
													"    pm.test(\"Response data contains information of updated module: '\" + moduleInfo.name + \"'\", function() {",
													"        pm.expect(JSON.stringify(jsonData.links)).to.eql(JSON.stringify(moduleInfo.links));",
													"        pm.expect(jsonData.id).to.eql(moduleInfo.id);",
													"        pm.expect(jsonData.name).to.eql(\"Edited Module 1\");",
													"        pm.expect(jsonData.order).to.eql(moduleInfo.order);",
													"        pm.expect(jsonData.pid).to.eql(moduleInfo.pid);",
													"        pm.expect(jsonData.created_date).to.eql(moduleInfo.created_date);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(moduleInfo.parent_id);",
													"        pm.expect(jsonData.description).to.eql(\"Description of Edited Module 1\");",
													"    });",
													"    pm.environment.set(\"moduleInfo1\", pm.response.text());",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Edited Module 1\",\r\n  \"description\": \"Description of Edited Module 1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{moduleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{moduleId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Update module - Not exist projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "843d7cca-02c2-4ffa-9243-39f4e8587188",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains message 'Project not found'\", function() {",
													"        pm.expect(pm.response.json().message).to.include(\"Project not found\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Edited Module 1\",\r\n  \"description\": \"Description of Edited Module 1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/0/modules/{{moduleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"0",
												"modules",
												"{{moduleId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update module - Invalid projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "805df8cd-5702-4aa7-aa0c-0ae55767718e",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains message 'For input string'\", function() {",
													"        pm.expect(pm.response.json().message).to.include(\"For input string\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Edited Module 1\",\r\n  \"description\": \"Description of Edited Module 1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/a1234/modules/{{moduleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"a1234",
												"modules",
												"{{moduleId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Update module - Not exist moduleId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9eb02e9-2e90-4f8e-8f36-181b3de317c0",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains message 'Module does not exist'\", function() {",
													"        pm.expect(pm.response.json().message).to.include(\"Module does not exist\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Edited Module 1\",\r\n  \"description\": \"Description of Edited Module 1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/1",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update module - Invalid moduleId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c8311fe-a68d-4dae-aa9f-6cbb9b7f6056",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains message 'Failed to convert value of type'\", function() {",
													"        pm.expect(pm.response.json().message).to.include(\"Failed to convert value of type\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Edited Module 1\",\r\n  \"description\": \"Description of Edited Module 1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/a{{moduleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"a{{moduleId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update module - Invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cdd5bce5-b279-466a-a0f0-a394c3a844c1",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 401) {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 401\", function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"",
													"    pm.test(\"Repsonse body contains 'Invalid access token'\", function() {",
													"        pm.expect(jsonData.error_description).to.include(\"Invalid access token\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}231234"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Edited Module 1\",\r\n  \"description\": \"Description of Edited Module 1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{moduleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{moduleId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update module - Without body request",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f9d5e7b7-bd23-430a-87c0-95444dc13e7b",
												"exec": [
													"const RESPONSE_CODE = 400;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"const EXPECTED_MSGS = [",
													"    \"Required request body is missing\",",
													"    \"Required request body content is missing\"];",
													"    ",
													"function validateMessage(actualMessage){",
													"    let result = false;",
													"    for(const msg of EXPECTED_MSGS) {",
													"        result = actualMessage.indexOf(msg) > -1;",
													"        if(result){",
													"            console.log(`Actual message is: ${actualMessage}`);",
													"            return result;",
													"        }",
													"    }",
													"    return result;",
													"}",
													"",
													"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"if (result) {",
													"    const jsonData = pm.response.json();",
													"    pm.test(`Response body has 'message' property value in following: '${EXPECTED_MSGS.toString()}'`, () => {",
													"        pm.expect(validateMessage(jsonData.message)).to.eql(true);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{moduleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{moduleId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Update module - Move module 1 into module 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b001919b-ab28-4f17-b7a8-e3c4c02a41f3",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"    var moduleInfo = JSON.parse(pm.environment.get(\"moduleInfo1\"));",
													"    pm.test(\"Response data contains information of updated module: '\" + moduleInfo.name + \"'\", function() {",
													"        pm.expect(JSON.stringify(jsonData.links)).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.eql(moduleInfo.id);",
													"        pm.expect(jsonData.name).to.eql(\"Edited Module 1\");",
													"        pm.expect(jsonData.order).to.eql(moduleInfo.order);",
													"        pm.expect(jsonData.pid).to.eql(moduleInfo.pid);",
													"        pm.expect(jsonData.created_date).to.eql(moduleInfo.created_date);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"moduleId2\"));",
													"        pm.expect(jsonData.description).to.eql(\"Description of Edited Module 1\");",
													"    });",
													"    pm.test(\"Response data of module '\" + moduleInfo.name + \"' has parent id as same as Module 2\", function() {",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"moduleId2\"));",
													"    });",
													"    ",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Move Module 1 into Module 2\",\r\n  \"description\": \"Description of Move Module 1 into Module 2\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{moduleId1}}?parentId={{moduleId2}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{moduleId1}}"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{moduleId2}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Update module - Move sub module 1 into root tree",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e742b13d-256c-43a1-a82a-9e92b9719e1b",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"    var moduleInfo = JSON.parse(pm.environment.get(\"subModuleInfo\"));",
													"    pm.test(\"Response data contains information of updated module: '\" + moduleInfo.name + \"'\", function() {",
													"        pm.expect(JSON.stringify(jsonData.links)).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.eql(moduleInfo.id);",
													"        pm.expect(jsonData.name).to.eql(\"Module 1.1\");",
													"        pm.expect(jsonData.order).to.eql(moduleInfo.order);",
													"        pm.expect(jsonData.pid).to.eql(moduleInfo.pid);",
													"        pm.expect(jsonData.created_date).to.eql(moduleInfo.created_date);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"rootId\"));",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 1.1\");",
													"    });",
													"    pm.test(\"Response data of module '\" + moduleInfo.name + \"' has parent id as same as root tree\", function() {",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"rootId\"));",
													"    });",
													"    ",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Move sub module 1 into root tree\",\r\n  \"description\": \"Description of Move sub module 1 into root tree\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{subModuleId}}?parentId={{rootId}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{subModuleId}}"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{rootId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update module - Move module 2 into module 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "073a352e-8129-434c-af26-e40d8809a6fe",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body contains 'Parent must not be a child of the module'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Parent must not be a child of the module\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Move Module 2 into Module 1\",\r\n  \"description\": \"Description of Move Module 2 into Module 1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{moduleId2}}?parentId={{moduleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{moduleId2}}"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{moduleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update module - Not exist projectId and valid parentId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "07c650df-4aac-4859-a07a-17b976faa07d",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data contains message 'Project not found'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Project not found\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Edited Module 1\",\r\n  \"description\": \"Description of Edited Module 1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/0/modules/{{moduleId1}}?parentId={{rootId}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"0",
												"modules",
												"{{moduleId1}}"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{rootId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update module - Invalid projectId and valid parentId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e7bb0676-5e11-47d4-94c2-fec079c374ec",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data contains message 'For input string'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"For input string\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Edited Module 1\",\r\n  \"description\": \"Description of Edited Module 1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/a{{projectId}}/modules/{{moduleId1}}?parentId={{rootId}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"a{{projectId}}",
												"modules",
												"{{moduleId1}}"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{rootId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete sub module 1.1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f99330bc-da74-49c7-af5d-e45d488b18ea",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{subModuleId}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{subModuleId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete module 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6240c1e3-bd82-4e41-9b0a-70592180993b",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{moduleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{moduleId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete module 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "08baf4b2-6dcb-4b8e-9105-55058ae1b181",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{moduleId2}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{moduleId2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "32de15c8-4327-40bd-a32b-e3b7ee20e188",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"projectEndDate\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b9ef9648-923d-49fe-afed-47911df530b1",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7e502153-5d18-464b-81e6-2c1511be2778",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5c9e22ef-0e15-4594-bb7f-43726f84ec68",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"moduleId1\");",
													"    pm.environment.unset(\"moduleInfo1\");",
													"    pm.environment.unset(\"moduleId2\");",
													"    pm.environment.unset(\"moduleInfo2\");",
													"    pm.environment.unset(\"subModuleId\");",
													"    pm.environment.unset(\"subModuleInfo\");",
													"    pm.environment.unset(\"rootId\");",
													"    ",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"tokenType\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete Module",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a52bf204-5653-43fa-b48f-75d8d5d4062c",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"    ",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											},
											{
												"key": "Authorization",
												"value": "Basic YXBpdHJ5b3V0Og=="
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f8f94bf8-cdf7-483f-973d-dbbe97d080b9",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.test(\"Response data contains all properties of project data\", function(){",
													"        pm.expect(pm.response.text()).to.include(\"id\");",
													"        pm.expect(jsonData.name).to.eql(\"qTest API - Postman\");",
													"        pm.expect(jsonData.description).to.eql(\"Description of qTest API - Postman\");",
													"        pm.expect(pm.response.text()).to.include(\"status_id\");",
													"        pm.expect(pm.response.text()).to.include(\"start_date\");",
													"        pm.expect(pm.response.text()).to.include(\"end_date\");",
													"        pm.expect(pm.response.text()).to.include(\"sample\");",
													"        pm.expect(pm.response.text()).to.include(\"defect_tracking_systems\");",
													"        pm.expect(pm.response.text()).to.include(\"x_explorer_access_level\");",
													"        pm.expect(pm.response.text()).to.include(\"date_format\");",
													"        pm.expect(jsonData.automation.toString()).to.eql(\"true\");",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate\", pm.environment.get(\"startDate\"));",
													"    pm.environment.set(\"projectEndDate\", pm.environment.get(\"endDate\"));",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bcb3cc89-4b4d-40b4-8ed7-28f774701460",
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\"\n  ],\n  \"automation\": true\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create module 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9d64e810-11c8-4d59-b7f9-393ff2438cad",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response data has links\", function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id\", function() {",
													"       pm.expect(jsonData.id).to.not.eql(null); ",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name \" + jsonData.name, function() {",
													"        pm.expect(jsonData.name).to.eql(\"Module 1\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has order property\", function() {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid property\", function() {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date property\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modify_date property\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has parent_id property\", function() {",
													"        pm.expect(jsonData.parent_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has description property\", function() {",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 1\");",
													"    });",
													"    ",
													"    pm.environment.set(\"moduleId1\", jsonData.id);",
													"    pm.environment.set(\"moduleInfo1\", pm.response.text());",
													"    pm.environment.set(\"rootId\", jsonData.parent_id);",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Module 1\",\r\n  \"description\": \"Description of Module 1\",\r\n  \"shared\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create module 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e212d50-3443-4eb8-bf23-ede1375166d7",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response data has links\", function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id\", function() {",
													"       pm.expect(jsonData.id).to.not.eql(null); ",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name \" + jsonData.name, function() {",
													"        pm.expect(jsonData.name).to.eql(\"Module 2\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has order property\", function() {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid property\", function() {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date property\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modify_date property\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has parent_id property\", function() {",
													"        pm.expect(jsonData.parent_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has description property\", function() {",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 2\");",
													"    });",
													"    ",
													"    pm.environment.set(\"moduleId2\", jsonData.id);",
													"    pm.environment.set(\"moduleInfo2\", pm.response.text());",
													"    ",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Module 2\",\r\n  \"description\": \"Description of Module 2\",\r\n  \"shared\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create module 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "361f6821-d67f-475d-897d-0fcfe8b3a1bd",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response data has links\", function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id\", function() {",
													"       pm.expect(jsonData.id).to.not.eql(null); ",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name \" + jsonData.name, function() {",
													"        pm.expect(jsonData.name).to.eql(\"Module 3\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has order property\", function() {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid property\", function() {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date property\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modify_date property\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has parent_id property\", function() {",
													"        pm.expect(jsonData.parent_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has description property\", function() {",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 3\");",
													"    });",
													"    ",
													"    pm.environment.set(\"moduleId3\", jsonData.id);",
													"    pm.environment.set(\"moduleInfo3\", pm.response.text());",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Module 3\",\r\n  \"description\": \"Description of Module 3\",\r\n  \"shared\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											]
										}
									},
									"response": []
								},
								{
									"name": "201- Precondition - Create sub module 1.1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "49c0afec-0e98-44e2-92f0-61c3f4da29ac",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response data has links\", function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id\", function() {",
													"       pm.expect(jsonData.id).to.not.eql(null); ",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name \" + jsonData.name, function() {",
													"        pm.expect(jsonData.name).to.eql(\"Module 1.1\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has order property\", function() {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid property\", function() {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date property\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modify_date property\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has parent_id property\", function() {",
													"        pm.expect(jsonData.parent_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has description property\", function() {",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 1.1\");",
													"    });",
													"    ",
													"    pm.environment.set(\"subModuleId1\", jsonData.id);",
													"    pm.environment.set(\"subModuleInfo1\", pm.response.text());",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Module 1.1\",\r\n  \"description\": \"Description of Module 1.1\",\r\n  \"shared\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules?parentId={{moduleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{moduleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201- Precondition - Create sub module 1.2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f6a60635-b060-4784-ae11-b30666d912a9",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response data has links\", function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id\", function() {",
													"       pm.expect(jsonData.id).to.not.eql(null); ",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name \" + jsonData.name, function() {",
													"        pm.expect(jsonData.name).to.eql(\"Module 1.2\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has order property\", function() {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid property\", function() {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date property\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modify_date property\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has parent_id property\", function() {",
													"        pm.expect(jsonData.parent_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has description property\", function() {",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 1.2\");",
													"    });",
													"    ",
													"    pm.environment.set(\"subModuleId2\", jsonData.id);",
													"    pm.environment.set(\"subModuleInfo2\", pm.response.text());",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Module 1.2\",\r\n  \"description\": \"Description of Module 1.2\",\r\n  \"shared\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules?parentId={{moduleId2}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{moduleId2}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Delete module - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7c2385b-9150-426e-8be3-8811e91e7a15",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response object has message: \", function() {",
													"        pm.expect(jsonData.message).to.not.eql(null);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{moduleId3}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{moduleId3}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Delete module - Get the deleted moduleId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24358276-ae1e-4eec-8904-22d2de0d6a1d",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains message 'Module does not exist'\", function() {",
													"        pm.expect(pm.response.json().message).to.include(\"Module does not exist\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{moduleId3}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{moduleId3}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Delete module - Not exist moduleId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f45af5a7-0f74-4fc9-9cf7-3ce87fa600bd",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"    pm.test(\"Response status: \" + pm.response.code + \" -  Delete Modules - Delete Child Module With Force Is True\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data contains message: 'Module does not exist'\", function() {",
													"        pm.expect(jsonData.message).to.eql(\"Module does not exist\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/0",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"0"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Delete module - Invalid moduleId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca24bbbc-9938-4386-8c85-1448739c798c",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data contains message: 'Failed to convert value of type'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Failed to convert value of type\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/a1234",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"a1234"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Delete module - Delete module 2 which contains sub module with force=true property",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "70e6cdd4-535c-4c1e-99d6-2ec15e0605e2",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data contains text message\", function() {",
													"        pm.expect(jsonData.message).to.not.eql(null);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{moduleId2}}?force=true",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{moduleId2}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "412 - Delete module -Delete module 1 which contains sub module and property force=false",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c16d5dbc-2a6b-4707-97db-9bb00612b0ab",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 412) {",
													"    pm.test(\"Response status: \" + pm.response.code , function() {",
													"        pm.response.to.have.status(412);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data contains message 'Module not be empty'\", function() {",
													"        pm.expect(jsonData.message).to.eql(\"Module not be empty\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(412);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{moduleId1}}?force=false",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{moduleId1}}"
											],
											"query": [
												{
													"key": "force",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "412 - Delete module - Delete module 1 which contains sub module without force property",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c1c14be-06f6-4209-939a-e941df22758d",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 412) {",
													"    pm.test(\"Response status: \" + pm.response.code , function() {",
													"        pm.response.to.have.status(412);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data contains message 'Module not be empty'\", function() {",
													"        pm.expect(jsonData.message).to.eql(\"Module not be empty\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(412);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{moduleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{moduleId1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete module 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c0206fa0-21b5-4f8d-aaf5-6b95f4dd1721",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{moduleId1}}?force=true",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{moduleId1}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "25a24d55-9389-422d-b7fc-26ef673f6b2c",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"projectEndDate\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5ac78ff0-c234-4be1-820b-015276125f54",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "4b2365a4-ab16-4ca1-a210-8474f06a0523",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "64430a33-38cc-4e6a-9350-777c68b273db",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"moduleId1\");",
													"    pm.environment.unset(\"moduleInfo1\");",
													"    pm.environment.unset(\"moduleId2\");",
													"    pm.environment.unset(\"moduleInfo2\");",
													"    pm.environment.unset(\"moduleId3\");",
													"    pm.environment.unset(\"moduleInfo3\");",
													"    pm.environment.unset(\"subModuleId1\");",
													"    pm.environment.unset(\"subModuleInfo1\");",
													"    pm.environment.unset(\"subModuleId2\");",
													"    pm.environment.unset(\"subModuleInfo2\");",
													"    pm.environment.unset(\"rootId\");",
													"    ",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"tokenType\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Requirement",
			"item": [
				{
					"name": "Create a requirement",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1dde5a55-4a96-4b93-9490-5137bab230df",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code + \" -  Login\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"    ",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "19fa7717-af90-48e0-9389-d9c7cf19855f",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.test(\"Response data contains all properties of project data\", function(){",
													"        pm.expect(pm.response.text()).to.include(\"id\");",
													"        pm.expect(jsonData.name).to.eql(\"qTest API - Postman\");",
													"        pm.expect(jsonData.description).to.eql(\"Description of qTest API - Postman\");",
													"        pm.expect(pm.response.text()).to.include(\"status_id\");",
													"        pm.expect(pm.response.text()).to.include(\"start_date\");",
													"        pm.expect(pm.response.text()).to.include(\"end_date\");",
													"        pm.expect(pm.response.text()).to.include(\"sample\");",
													"        pm.expect(pm.response.text()).to.include(\"defect_tracking_systems\");",
													"        pm.expect(pm.response.text()).to.include(\"x_explorer_access_level\");",
													"        pm.expect(pm.response.text()).to.include(\"date_format\");",
													"        pm.expect(jsonData.automation.toString()).to.eql(\"true\");",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate\", pm.environment.get(\"startDate\"));",
													"    pm.environment.set(\"projectEndDate\", pm.environment.get(\"endDate\"));",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f667474e-799a-478f-91b0-eef6f037f450",
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\"\n  ],\n  \"automation\": true\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create a module",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f5025d77-2b3d-4d83-9810-9f40b85fe663",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Repsonse body has correct module info of \" + jsonData.name, function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(\"Module 1\");",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.not.eql(null);",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 1\");",
													"    });",
													"    ",
													"    pm.environment.set(\"newModuleId1\", jsonData.id);",
													"    ",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Module 1\",\r\n  \"description\": \"Description of Module 1\",\r\n  \"shared\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get requirement fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "002b27a1-851e-47bd-bcce-b060a1412811",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdReq\";",
													"    var jsonData = pm.response.json();",
													"    var fieldValueId;",
													"    var siteAdminFullName = pm.environment.get(\"firstName\") + \" \" + pm.environment.get(\"lastName\");",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                if (field.label === \"Assigned To\") {",
													"                    if(item.label === \"API User 1\"){",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"APIUser1\";",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                    }",
													"                    else if (item.label === siteAdminFullName) {",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"SiteAdminUser\";",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                    }",
													"                } else {",
													"                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                    pm.environment.set(fieldValueId, item.value);",
													"                }",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/requirements/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"requirements",
												"fields"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Create requirement - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f0f3706-1e86-4142-b333-c6688e3acf83",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement info of \" + pm.environment.get(\"reqName\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[\" + pm.environment.get(\"firstName\") + \" \" + pm.environment.get(\"lastName\") + \"]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToSiteAdminUser\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    pm.environment.set(\"reqId1\", jsonData.id);",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "69b02711-abf7-419a-b92a-37d5dd5ec134",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 1\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToSiteAdminUser}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription}}\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Create requirement - Success with no property status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "725731fd-f237-4bd5-abb1-4d96af86309c",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement info of \" + pm.environment.get(\"reqName\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"New\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusNew\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[\" + pm.environment.get(\"firstName\") + \" \" + pm.environment.get(\"lastName\") + \"]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToSiteAdminUser\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    pm.environment.set(\"reqId2\", jsonData.id);",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c12eb9ca-99f1-44b8-b5dd-bcb4488a97e2",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 2\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 2\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n  \"properties\": [\n    {\n        \"field_id\": \"{{fieldIdReqPriority}}\",\n        \"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdReqType}}\",\n        \"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdReqAssignedTo}}\",\n        \"field_value\": \"[{{fieldIdReqAssignedToSiteAdminUser}}]\"\n    },\n    {\n        \"field_id\": \"{{fieldIdReqDescription}}\",\n        \"field_value\": \"{{reqDescription}}\"\n    }\n  ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Create requirement - Success with no property priority",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b4cdb1f8-af20-44a4-821b-c9aa26a7699d",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement info of \" + pm.environment.get(\"reqName\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Must have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityMusthave\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[\" + pm.environment.get(\"firstName\") + \" \" + pm.environment.get(\"lastName\") + \"]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToSiteAdminUser\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data has description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    pm.environment.set(\"reqId3\", jsonData.id);",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5a286c32-22c4-467b-b48d-75ea2ab52162",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 3\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 3\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToSiteAdminUser}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription}}\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Create requirement - Success with no property type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "888766b2-dc43-47e8-8ca0-7e71869df1c6",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement info of \" + pm.environment.get(\"reqName\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeFunctional\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[\" + pm.environment.get(\"firstName\") + \" \" + pm.environment.get(\"lastName\") + \"]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToSiteAdminUser\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data has description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    pm.environment.set(\"reqId4\", jsonData.id);",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b39ec766-40cc-49e6-bd2a-59ed70f1977f",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 4\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 4\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToSiteAdminUser}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription}}\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Create requirement - Success with no property assigned to",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6fb41a3c-b92e-470d-b6cf-b0189bb68eee",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement of \" + pm.environment.get(\"reqName\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has not assigned to any account\", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"\");",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data has description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    pm.environment.set(\"reqId5\", jsonData.id);",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "aab1dbac-0330-469b-b76c-9a54f84c9fb2",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 5\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 5\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription}}\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Create requirement - Success with no property description",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "409e8eeb-1765-4241-a7bb-a764dfc3f1a3",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement of \" + pm.environment.get(\"reqName\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[\" + pm.environment.get(\"firstName\") + \" \" + pm.environment.get(\"lastName\") + \"]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToSiteAdminUser\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data has empty description\", function() {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    pm.environment.set(\"reqId6\", jsonData.id);",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "406fcb6a-def8-41a4-a62b-1e635ffb9a09",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 6\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToSiteAdminUser}}]\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Create requirement - Not exist project Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9444cdd4-d967-4d0f-9da3-5e1d0af7aa38",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response body contains message 'Project not found'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Project not found\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c6c89b7a-3cca-4ab1-b458-ea790893cca4",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Requirement 1\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeFunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToSiteAdminUser}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"Description of Requirement 1\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/0/requirements",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"0",
												"requirements"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Create requirement - Invalid projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95687dcf-f3b5-49a5-9b3d-f6d1c1df50d8",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response body contains message 'For input string'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"For input string\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7046bc51-2f18-4a33-8def-4bd509abba19",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Requirement 1\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeFunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToSiteAdminUser}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"Description of Requirement 1\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}aaa/requirements",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}aaa",
												"requirements"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create requirement - Without parent Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "14622eec-fdb4-44f9-ad85-c4ad720de01a",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response body has message: \" + jsonData.message, function() {",
													"        pm.expect(jsonData.message).to.eql(\"Parent id is required\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e1ff4f7a-219e-42c5-8e68-8c8ede561336",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Requirement 1\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeFunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToSiteAdminUser}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"Description of Requirement 1\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Create requirement - Not exist parent Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec32e008-6863-494d-a95e-10df1351f3ff",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Response body contains message 'does not exist'\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"does not exist\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "52555687-240a-48c3-8a35-8d8e9d3dcc14",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Requirement 1\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeFunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToSiteAdminUser}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"Description of Requirement 1\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId=0",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create requirement - Invalid parent Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d6cdade-29a2-4a9d-a3bc-261e61ee6e05",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response body has message contains 'Failed to convert value of type'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Failed to convert value of type\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "57a623ac-8704-4e2f-9f65-86f58d379a71",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Requirement 1\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeFunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToSiteAdminUser}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"Description of Requirement 1\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}abcd",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}abcd"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create requirement - Has no property name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2080042d-3b2c-4506-b1b7-7c491fe71b4b",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response body has message contains 'name may not be empty'\", function() {",
													"        pm.expect(jsonData.message).to.eql(\"name may not be empty\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "33689a49-c5ad-42c0-88c4-cc9ded3ce580",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeFunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToSiteAdminUser}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"Description of Requirement 1\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create requirement - Empty name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d77cf702-66d1-466b-8a9b-9b7665a7305f",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response body has message contains 'name may not be empty' or 'name size must be between 1 and 500'\", function() {",
													"        pm.expect(jsonData.message).to.not.eql(null);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f658c719-f529-4f0a-9f9f-791292135366",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeFunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToSiteAdminUser}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"Description of Requirement 1\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create requirement - Name has more than 500 characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ccec4992-7607-42e8-8534-0d0b903fda47",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response body has message contains 'name may not be empty' or 'name size must be between 1 and 500'\", function() {",
													"        pm.expect(jsonData.message).to.not.eql(null);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a1a4ae55-aeb6-4c67-b730-f84c1c93d2ec",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI - The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI - The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI- The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI -The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeFunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToSiteAdminUser}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"Description of Requirement 1\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create requirement - Invalid status value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed917cae-1ee7-45d5-8816-68322fafdf0c",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Repsonse body has property message value contains 'is invalid'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"for field Status (id=\" + pm.environment.get(\"fieldIdReqStatus\") + \") is invalid\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f40644d7-a6b7-4d48-8dff-8591a942bbb9",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Requirement 1\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"abcd\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeFunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToSiteAdminUser}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"Description of Requirement 1\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create requirement - Invalid field id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "21dca346-c3ba-464d-a317-968943ae2a48",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Repsonse body has property message value contains 'does not exist'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"does not exist\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "26ce81ed-5c45-49f6-9a3a-af819b2fd5cd",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Requirement 1\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"23{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"abcd\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeFunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToSiteAdminUser}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"Description of Requirement 1\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Create requirement - Invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee87d8be-d037-430c-b390-e2a93142a87f",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 401) {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 401\", function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message value contains 'Invalid access token'\", function() {",
													"        pm.expect(jsonData.error_description).to.include(\"Invalid access token\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "74179873-83ab-4528-8e83-e3a906a610a8",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}000"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Requirement 1\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToSiteAdminUser}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"Description of Requirement 1\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create requirement - Assigned to not exist account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9164a221-597c-443b-9271-5e1b82d01b8d",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"    console.log(jsonData);",
													"",
													"    pm.test(\"Response body has message contains 'is invalid' \", function() {",
													"        pm.expect(jsonData.message).to.include(\"for field Assigned To (id=\" + pm.environment.get(\"fieldIdReqAssignedTo\") + \") is invalid\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6ea9be37-05b8-46c8-8215-f522d0036c63",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 1\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[1]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription}}\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Create requirement - Success with parentId in request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d1147af5-fee0-40d7-a039-ed5e60feb567",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement info of \" + pm.environment.get(\"reqName\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \" , function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[\" + pm.environment.get(\"firstName\") + \" \" + pm.environment.get(\"lastName\") + \"]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToSiteAdminUser\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    pm.environment.set(\"reqId7\", jsonData.id);",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ee4d9d10-2381-4245-ae54-61f65cdc8fcb",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 7\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 7\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToSiteAdminUser}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription}}\"\n\t\t}\n\t],\n\t\"parent_id\": {{newModuleId1}}\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Create requirement - With not exist parentId in request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3143a254-5586-43d5-b308-6bd27f9e3780",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Response body contains message 'does not exist'\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"does not exist\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4a4526b0-b1b5-40c9-b313-85befc16068d",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 7\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 7\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToSiteAdminUser}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription}}\"\n\t\t}\n\t],\n\t\"parent_id\": 0\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create requirement - With invalid parentId in request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2fa1c59f-2fa0-4ffc-8a55-4e8dad2800a5",
												"exec": [
													"if (pm.response.code === 400) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"    const messageError = 'not a valid Long value';",
													"    pm.test(`Response body contains message ${messageError}`, function() {",
													"        pm.expect(pm.response.text()).to.include(messageError);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f1c4016f-7924-4b72-8485-a3af22f1b4f8",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 7\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 7\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToSiteAdminUser}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription}}\"\n\t\t}\n\t],\n\t\"parent_id\": \"aa1234\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create requirement - With parentId empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c8b291f-bcc5-4d35-a3e5-a92f902e925b",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Response body contains message 'Parent id is required'\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"Parent id is required\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b945b99f-002d-438a-afcf-4af481152592",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 7\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 7\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToSiteAdminUser}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription}}\"\n\t\t}\n\t],\n\t\"parent_id\": \"\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete Module 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "38a38234-34a0-42bb-a0fc-ef2e20178071",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"newModuleId1\");",
													"    pm.environment.unset(\"reqId1\");",
													"    pm.environment.unset(\"reqId2\");",
													"    pm.environment.unset(\"reqId3\");",
													"    pm.environment.unset(\"reqId4\");",
													"    pm.environment.unset(\"reqId5\");",
													"    pm.environment.unset(\"reqId6\");",
													"    pm.environment.unset(\"reqId7\");",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "80f28058-24d8-4622-bd58-ce268a081cd9",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{newModuleId1}}?force=true",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{newModuleId1}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cf7dd808-a9c6-4543-9246-da9c1dfee68d",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"projectEndDate\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1e903b5d-3181-468a-9902-3b6f881db410",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0f56b620-eb31-4c42-beda-4de52cd95d4b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1a9b8612-0644-40bb-9874-730d004aaac9",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.environment.unset(\"tokenType\");",
													"    pm.environment.unset(\"accessToken\");",
													"",
													"    pm.environment.unset(\"fieldIdReqStatus\");",
													"    pm.environment.unset(\"fieldIdReqStatusNew\");",
													"    pm.environment.unset(\"fieldIdReqStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdReqStatusReadyForBaseline\");",
													"    pm.environment.unset(\"fieldIdReqStatusBaselined\");",
													"    pm.environment.unset(\"fieldIdReqPriority\");",
													"    pm.environment.unset(\"fieldIdReqPriorityMusthave\");",
													"    pm.environment.unset(\"fieldIdReqPriorityShouldhave\");",
													"    pm.environment.unset(\"fieldIdReqPriorityNicetoHave\");",
													"    pm.environment.unset(\"fieldIdReqType\");",
													"    pm.environment.unset(\"fieldIdReqTypeFunctional\");",
													"    pm.environment.unset(\"fieldIdReqTypeNonfunctional\");",
													"    pm.environment.unset(\"fieldIdReqAssignedTo\");",
													"    pm.environment.unset(\"fieldIdReqAssignedToAPIUser1\");",
													"    pm.environment.unset(\"fieldIdReqAssignedToSiteAdminUser\");",
													"    pm.environment.unset(\"fieldIdReqDescription\");",
													"    ",
													"    pm.environment.unset(\"newModuleId1\");",
													"    pm.environment.unset(\"reqName\");",
													"    pm.environment.unset(\"reqDescription\");",
													"    ",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"tokenType\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"    pm.environment.unset(\"siteAdminId\");",
													"",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f95eeeed-667f-4c14-be26-b6daf8e94bb8",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "349a221b-01d6-4a06-b479-7ea50478b735",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a9bd0d74-f581-4a8d-8fef-24a873dae872",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "862e7580-72d0-47d7-9951-97c392e01c55",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get a requirement",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "163bae18-b60a-4a74-afeb-c950fb6f905d",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code + \" -  Login\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "13fcacf3-60d0-489e-972c-50ec36643c8d",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.test(\"Response data contains all properties of project data\", function(){",
													"        pm.expect(pm.response.text()).to.include(\"id\");",
													"        pm.expect(jsonData.name).to.eql(\"qTest API - Postman\");",
													"        pm.expect(jsonData.description).to.eql(\"Description of qTest API - Postman\");",
													"        pm.expect(pm.response.text()).to.include(\"status_id\");",
													"        pm.expect(pm.response.text()).to.include(\"start_date\");",
													"        pm.expect(pm.response.text()).to.include(\"end_date\");",
													"        pm.expect(pm.response.text()).to.include(\"sample\");",
													"        pm.expect(pm.response.text()).to.include(\"defect_tracking_systems\");",
													"        pm.expect(pm.response.text()).to.include(\"x_explorer_access_level\");",
													"        pm.expect(pm.response.text()).to.include(\"date_format\");",
													"        pm.expect(jsonData.automation.toString()).to.eql(\"true\");",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate\", pm.environment.get(\"startDate\"));",
													"    pm.environment.set(\"projectEndDate\", pm.environment.get(\"endDate\"));",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d712d034-4e64-4af7-803a-812e25dea829",
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\"\n  ],\n  \"automation\": true\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create a module",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "49464208-e9a6-4b8e-973b-9de485d0ba62",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Repsonse body has correct module info of \" + jsonData.name, function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(\"Module 1\");",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.not.eql(null);",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 1\");",
													"    });",
													"    ",
													"    pm.environment.set(\"newModuleId1\", jsonData.id);",
													"    ",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Module 1\",\r\n  \"description\": \"Description of Module 1\",\r\n  \"shared\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get requirement fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ff9dbe9d-cb81-4ee4-a82d-53a0e840780e",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdReq\";",
													"    var jsonData = pm.response.json();",
													"    var fieldValueId;",
													"    var siteAdminFullName = pm.environment.get(\"firstName\") + \" \" + pm.environment.get(\"lastName\");",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                if (field.label === \"Assigned To\") {",
													"                    if(item.label === \"API User 1\"){",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"APIUser1\";",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                    }",
													"                    else if (item.label === siteAdminFullName) {",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"SiteAdminUser\";",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                    }",
													"                } else {",
													"                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                    pm.environment.set(fieldValueId, item.value);",
													"                }",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/requirements/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"requirements",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create a requirement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8f39d861-1d35-4ab7-ab62-78aea58df99e",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement info of \" + pm.environment.get(\"reqName\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[\" + pm.environment.get(\"firstName\") + \" \" + pm.environment.get(\"lastName\") + \"]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToSiteAdminUser\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    pm.environment.set(\"newReqId1\", jsonData.id);",
													"    pm.environment.set(\"reqInfo1\", jsonData);",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4bcb014b-e1a9-4181-9cef-34afafe0cc70",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 1\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToSiteAdminUser}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription}}\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Get requirement - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6baa2a0f-d47b-44ba-b31c-8a23d52fe4e3",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"    var reqInfo = pm.environment.get(\"reqInfo1\");",
													"    pm.test(\"Repsonse body has correct requirement info of \" + reqInfo.name, function() {",
													"        pm.expect(jsonData.links).to.eql(reqInfo.links);",
													"        pm.expect(jsonData.id).to.eql(reqInfo.id);",
													"        pm.expect(jsonData.name).to.eql(reqInfo.name);",
													"        pm.expect(jsonData.order).to.eql(reqInfo.order);",
													"        pm.expect(jsonData.pid).to.eql(reqInfo.pid);",
													"        pm.expect(jsonData.created_date).to.eql(reqInfo.created_date);",
													"        pm.expect(jsonData.last_modified_date).to.eql(reqInfo.last_modified_date);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[\" + pm.environment.get(\"firstName\") + \" \" + pm.environment.get(\"lastName\") + \"]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToSiteAdminUser\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data has description\", function() {",
													"                    pm.expect(field.field_value).to.not.eql(null);",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d74ec950-8795-48d7-bf41-d06a6fbd5569",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Get requirement - Not exist projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd5e114d-5e86-46a0-af5a-54e67572bf48",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message 'Project not found'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Project not found\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ae90f6a0-23df-46b5-aa7f-c228dde806b3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}123/requirements/{{newReqId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}123",
												"requirements",
												"{{newReqId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get requirement - Invalid projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b7536f0-36e1-4ff8-86b6-bf636ab627a6",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message 'For input string'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"For input string\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7b486d87-d2dd-4d34-a2d6-67419db4529a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}abcd/requirements/{{newReqId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}abcd",
												"requirements",
												"{{newReqId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Get requirement - Not exist requirement Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7bf9255b-16fd-4c76-898a-5982ad1c84b4",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message: \" + jsonData.message, function() {",
													"        pm.expect(jsonData.message).to.eql(\"Requirement not found!\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8d88b9da-0c10-4afa-81ed-9300fb10ca74",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}123",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}123"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get requirement - Invalid requirement Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a4cc1bab-b965-4228-bcc6-69b08d4162bb",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'Failed to convert value of type': \", function() {",
													"        pm.expect(jsonData.message).to.include(\"Failed to convert value of type\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9df2b116-0905-4a5a-8bdf-a6f5e42992dc",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}abcd",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}abcd"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Get requirement - Invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9e618e3-2f71-42fa-aa00-2a955a194ecc",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 401) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 401\", function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has error 'Invalid access token'\", function() {",
													"        pm.expect(jsonData.error_description).to.include(\"Invalid access token\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "20be4d76-4cff-465f-9d9f-2501f2197cdb",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}223"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete Module 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "063f9470-0a81-499d-93c1-cedaeda8549d",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"newModuleId1\");",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "323168ec-dcfb-46a7-b327-ce2e193ff209",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{newModuleId1}}?force=true",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{newModuleId1}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c5d8b3f5-0553-41fd-85a8-c59f8cb24d45",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"projectEndDate\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "11621aa5-c063-4b7a-b3b4-cc5b87c2f086",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "aa85866b-c2cd-473c-a418-2d406672ca1f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "22a29124-b760-4bfc-8170-388a4388df5f",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"tokenType\");",
													"    ",
													"    pm.environment.unset(\"fieldIdReqStatus\");",
													"    pm.environment.unset(\"fieldIdReqStatusNew\");",
													"    pm.environment.unset(\"fieldIdReqStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdReqStatusReadyForBaseline\");",
													"    pm.environment.unset(\"fieldIdReqStatusBaselined\");",
													"    pm.environment.unset(\"fieldIdReqPriority\");",
													"    pm.environment.unset(\"fieldIdReqPriorityMusthave\");",
													"    pm.environment.unset(\"fieldIdReqPriorityShouldhave\");",
													"    pm.environment.unset(\"fieldIdReqPriorityNicetoHave\");",
													"    pm.environment.unset(\"fieldIdReqType\");",
													"    pm.environment.unset(\"fieldIdReqTypeFunctional\");",
													"    pm.environment.unset(\"fieldIdReqTypeNonfunctional\");",
													"    pm.environment.unset(\"fieldIdReqAssignedTo\");",
													"    pm.environment.unset(\"fieldIdReqAssignedToAPIUser1\");",
													"    pm.environment.unset(\"fieldIdReqAssignedToSiteAdminUser\");",
													"    pm.environment.unset(\"fieldIdReqDescription\");",
													"    ",
													"    pm.environment.unset(\"newModuleId1\");",
													"    pm.environment.unset(\"reqName\");",
													"    pm.environment.unset(\"reqDescription\");",
													"    pm.environment.unset(\"newReqId1\");",
													"    pm.environment.unset(\"reqInfo1\");",
													"    ",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"tokenType\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2eb6a492-1ab0-43c8-81b9-75bde830964e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "18232efc-11d4-452b-a092-205c71a973f6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get multiple requirements",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd692467-a963-4698-92ee-40a1bc05ebab",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code + \" -  Login\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Get user id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2bdee020-cc92-4ac4-8ad6-723be8cb0a39",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Response data contains data of apiuser1@qas.com\", function() {",
													"        pm.expect(jsonData.items[0].username).to.eql(pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"        pm.expect(pm.response.text()).to.include(\"email\");",
													"        pm.expect(jsonData.items[0].first_name).to.eql(\"API\");",
													"        pm.expect(jsonData.items[0].last_name).to.eql(\"User 1\");",
													"        pm.expect(pm.response.text()).to.include(\"status\");",
													"        pm.expect(pm.response.text()).to.include(\"timezone_offset\");",
													"        pm.expect(pm.response.text()).to.include(\"country_name\");",
													"    });",
													"    ",
													"    pm.environment.set(\"userId\", jsonData.items[0].id);",
													"",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "459c5448-cb76-412e-b172-470a9af7f2fc",
												"exec": [
													"pm.environment.set(\"username1\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"pm.environment.set(\"firstName1\", \"API\");",
													"pm.environment.set(\"lastName1\", \"User 1\");",
													"pm.environment.set(\"email1\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/users/search?username={{username1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"users",
												"search"
											],
											"query": [
												{
													"key": "username",
													"value": "{{username1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e06513ba-9f19-4de1-a9e9-ccc3ddb83051",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.test(\"Response data contains all properties of project data\", function(){",
													"        pm.expect(pm.response.text()).to.include(\"id\");",
													"        pm.expect(jsonData.name).to.eql(\"qTest API - Postman\");",
													"        pm.expect(jsonData.description).to.eql(\"Description of qTest API - Postman\");",
													"        pm.expect(pm.response.text()).to.include(\"status_id\");",
													"        pm.expect(pm.response.text()).to.include(\"start_date\");",
													"        pm.expect(pm.response.text()).to.include(\"end_date\");",
													"        pm.expect(pm.response.text()).to.include(\"sample\");",
													"        pm.expect(pm.response.text()).to.include(\"defect_tracking_systems\");",
													"        pm.expect(pm.response.text()).to.include(\"x_explorer_access_level\");",
													"        pm.expect(pm.response.text()).to.include(\"date_format\");",
													"        pm.expect(jsonData.automation.toString()).to.eql(\"true\");",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate\", pm.environment.get(\"startDate\"));",
													"    pm.environment.set(\"projectEndDate\", pm.environment.get(\"endDate\"));",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "007ce337-f175-4e06-919a-bfd6c4322cc9",
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\", \"{{prefixApiUser}}apiuser1@qas.com\"\n  ],\n  \"automation\": true\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create Module 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "251be13a-7968-4ed0-9d67-85871925823f",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Repsonse body has correct module info of \" + jsonData.name, function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(\"Module 1\");",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.not.eql(null);",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 1\");",
													"    });",
													"    ",
													"    pm.environment.set(\"newModuleId1\", jsonData.id);",
													"    ",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Module 1\",\r\n  \"description\": \"Description of Module 1\",\r\n  \"shared\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create Module 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b885da6-404d-416e-a0be-1d5f53956952",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Repsonse body has correct module info of \" + jsonData.name, function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(\"Module 2\");",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.not.eql(null);",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 2\");",
													"    });",
													"    ",
													"    pm.environment.set(\"newModuleId2\", jsonData.id);",
													"    ",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Module 2\",\r\n  \"description\": \"Description of Module 2\",\r\n  \"shared\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get requirement fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e23868ea-f663-4bf1-84a4-d9e51d405b77",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdReq\";",
													"    var jsonData = pm.response.json();",
													"    var fieldValueId;",
													"    var siteAdminFullName = pm.environment.get(\"firstName\") + \" \" + pm.environment.get(\"lastName\");",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                if (field.label === \"Assigned To\") {",
													"                    if(item.label === \"API User 1\"){",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"APIUser1\";",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                    }",
													"                    else if (item.label === siteAdminFullName) {",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"SiteAdminUser\";",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                    }",
													"                } else {",
													"                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                    pm.environment.set(fieldValueId, item.value);",
													"                }",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/requirements/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"requirements",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create requirement 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4252c6b2-fb4e-49ba-b851-fa9dfeba0a99",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement info of \" + pm.environment.get(\"reqName\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[API User 1]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToAPIUser1\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    pm.environment.set(\"newReqId1\", jsonData.id);",
													"    pm.environment.set(\"reqInfo1\", jsonData);",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4c315d4a-194e-48eb-a1f9-5a64df27dc30",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 1\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToAPIUser1}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription}}\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create requirement 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8adfe1a-d0b8-471f-8a8f-0db42ea0a898",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement info of \" + pm.environment.get(\"reqName\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[API User 1]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToAPIUser1\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    pm.environment.set(\"newReqId2\", jsonData.id);",
													"    pm.environment.set(\"reqInfo2\", jsonData);",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5a419ffa-db96-4f30-bdde-13bab93217a3",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 2\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 2\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToAPIUser1}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription}}\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create requirement 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2508480d-9ced-492e-a126-881b2d974a1e",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement info of \" + pm.environment.get(\"reqName\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[API User 1]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToAPIUser1\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    pm.environment.set(\"newReqId3\", jsonData.id);",
													"    pm.environment.set(\"reqInfo3\", jsonData);",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8da29def-009d-4554-909f-7f90ef5936aa",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 3\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 3\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToAPIUser1}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription}}\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create requirement 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "af4c24a8-5add-4e07-8983-a57c7772e402",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement info of \" + pm.environment.get(\"reqName\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[API User 1]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToAPIUser1\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    pm.environment.set(\"newReqId4\", jsonData.id);",
													"    pm.environment.set(\"reqInfo4\", jsonData);",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d96aca8b-1230-4b1b-befb-ce44bab14983",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 4\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 4\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToAPIUser1}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription}}\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create requirement 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d6a6b13f-b639-4bd6-a3d1-b9707bb0aec6",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement info of \" + pm.environment.get(\"reqName\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[API User 1]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToAPIUser1\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    pm.environment.set(\"newReqId5\", jsonData.id);",
													"    pm.environment.set(\"reqInfo5\", jsonData);",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fd5731cb-beb3-4b60-a660-36cbac9cebbd",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 5\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 5\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToAPIUser1}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription}}\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Get multiple requirements - Under module contains some requirements",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "19469876-bbcf-4a15-b689-60ed2a236445",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"    var reqInfo;",
													"    var reqInfo1 = pm.environment.get(\"reqInfo1\");",
													"    var reqInfo2 = pm.environment.get(\"reqInfo2\");",
													"    var reqInfo3 = pm.environment.get(\"reqInfo3\");",
													"    var reqInfo4 = pm.environment.get(\"reqInfo4\");",
													"    var reqInfo5 = pm.environment.get(\"reqInfo5\");",
													"    jsonData.forEach(function(requirement, index) {",
													"        if (requirement.id === reqInfo1.id) {",
													"            reqInfo = reqInfo1;",
													"        } else if (requirement.id === reqInfo2.id) {",
													"            reqInfo = reqInfo2;",
													"        } else if (requirement.id === reqInfo3.id) {",
													"            reqInfo = reqInfo3;",
													"        } else if (requirement.id === reqInfo4.id) {",
													"            reqInfo = reqInfo4;",
													"        } else if (requirement.id === reqInfo5.id) {",
													"            reqInfo = reqInfo5;",
													"        }",
													"        pm.test(\"Response data contains name: \" + requirement.name, function(){",
													"            pm.expect(requirement.name).to.eql(reqInfo.name);",
													"            pm.expect(requirement.links).to.eql(reqInfo.links);",
													"            pm.expect(requirement.id).to.eql(reqInfo.id);",
													"            pm.expect(requirement.order).to.eql(reqInfo.order);",
													"            pm.expect(requirement.pid).to.eql(reqInfo.pid);",
													"            pm.expect(requirement.created_date).to.eql(reqInfo.created_date);",
													"            pm.expect(requirement.last_modified_date).to.eql(reqInfo.last_modified_date);",
													"            var tmp;",
													"            requirement.properties.forEach(function(field) {",
													"                switch (field.field_name) {",
													"                    case \"Status\":",
													"                            pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                        break;",
													"",
													"                    case \"Priority\":",
													"                        ",
													"                            pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                        ",
													"                        break;",
													"",
													"                    case \"Type\":",
													"                            pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                        break;",
													"",
													"                    case \"Assigned To\":",
													"                            pm.expect(field.field_value_name).to.eql(\"[API User 1]\");",
													"                            pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToAPIUser1\").toString());",
													"                        break;",
													"",
													"                    case \"Description\":",
													"                            pm.expect(field.field_value).to.eql(\"Description of \" + requirement.name);",
													"                        break;",
													"                }",
													"            });",
													"        });",
													"",
													"        pm.test(\"Response data of \" + requirement.name + \" contains parent_id property\", function() {",
													"            pm.expect(requirement.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "50605b20-003d-4edb-a7fd-2ffa45112867",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}&page=1&size=10",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "size",
													"value": "10"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Get multiple requirements - Under module without any requirements",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c7c9e45-0710-4fe4-a1c3-e1b90867ef15",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    var jsonData = pm.response.json();",
													"    pm.test(\"Repsonse body is an empty array\", function() {",
													"        pm.expect(jsonData).to.eql([]);",
													"    });",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c40b6410-3215-48c5-a224-1fc051bcc094",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId2}}&page=1&size=10",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId2}}"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "size",
													"value": "10"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get multiple requirements - Invalid Page param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f668d6cc-534f-4d57-97ab-deb08e63c7ae",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'Failed to convert value of type'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Failed to convert value of type\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e666a1e1-a305-4fb8-83e5-52db5ccdce08",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}&page=abc&size=2",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												},
												{
													"key": "page",
													"value": "abc"
												},
												{
													"key": "size",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get multiple requirements - Invalid Size param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f3c2e529-a333-4d8d-9f07-ef74f92980bb",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'Failed to convert value of type'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Failed to convert value of type\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "beda59bd-efc7-45e8-aba5-89191916b4ca",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}&page=1&size=abc",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "size",
													"value": "abc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Get multiple requirements - Value of page param is negative",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "68124ec4-f51d-4810-9166-295d3d0844ef",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"    var reqInfo;",
													"    var reqInfo1 = pm.environment.get(\"reqInfo1\");",
													"    var reqInfo2 = pm.environment.get(\"reqInfo2\");",
													"    var reqInfo3 = pm.environment.get(\"reqInfo3\");",
													"    var reqInfo4 = pm.environment.get(\"reqInfo4\");",
													"    var reqInfo5 = pm.environment.get(\"reqInfo5\");",
													"    jsonData.forEach(function(requirement, index) {",
													"        if (requirement.id === reqInfo1.id) {",
													"            reqInfo = reqInfo1;",
													"        } else if (requirement.id === reqInfo2.id) {",
													"            reqInfo = reqInfo2;",
													"        } else if (requirement.id === reqInfo3.id) {",
													"            reqInfo = reqInfo3;",
													"        } else if (requirement.id === reqInfo4.id) {",
													"            reqInfo = reqInfo4;",
													"        } else if (requirement.id === reqInfo5.id) {",
													"            reqInfo = reqInfo5;",
													"        }",
													"        pm.test(\"Response data contains name: \" + requirement.name, function() {",
													"            pm.expect(requirement.name).to.eql(reqInfo.name);",
													"            pm.expect(requirement.links).to.eql(reqInfo.links);",
													"            pm.expect(requirement.id).to.eql(reqInfo.id);",
													"            pm.expect(requirement.order).to.eql(reqInfo.order);",
													"            pm.expect(requirement.pid).to.eql(reqInfo.pid);",
													"            pm.expect(requirement.created_date).to.eql(reqInfo.created_date);",
													"            pm.expect(requirement.last_modified_date).to.eql(reqInfo.last_modified_date);",
													"            var tmp;",
													"            requirement.properties.forEach(function(field) {",
													"                switch (field.field_name) {",
													"                    case \"Status\":",
													"                            pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                        break;",
													"",
													"                    case \"Priority\":",
													"                        ",
													"                            pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                        ",
													"                        break;",
													"",
													"                    case \"Type\":",
													"                            pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                        break;",
													"",
													"                    case \"Assigned To\":",
													"                            pm.expect(field.field_value_name).to.eql(\"[API User 1]\");",
													"                            pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToAPIUser1\").toString());",
													"                        break;",
													"",
													"                    case \"Description\":",
													"                            pm.expect(field.field_value).to.eql(\"Description of \" + requirement.name);",
													"                        break;",
													"                }",
													"            });",
													"        });",
													"",
													"        pm.test(\"Response data of \" + requirement.name + \" contains parent_id property\", function() {",
													"            pm.expect(requirement.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6ec42845-f726-4ed8-9503-86799a48c194",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}&page=-10&size=2",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												},
												{
													"key": "page",
													"value": "-10"
												},
												{
													"key": "size",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get multiple requirements - Invalid page param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "570a6d78-983c-421f-bfb2-892cafcf8a33",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'Failed to convert value of type'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Failed to convert value of type\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5585df00-e2eb-414e-8bbb-c6fbbc385581",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}&page=abc1&size=10",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												},
												{
													"key": "page",
													"value": "abc1"
												},
												{
													"key": "size",
													"value": "10"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Get multiple requirements - Value of size param is negative",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d6c811e-e7fa-4e40-abc9-133aeb0c314e",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"    var reqInfo;",
													"    var reqInfo1 = pm.environment.get(\"reqInfo1\");",
													"    var reqInfo2 = pm.environment.get(\"reqInfo2\");",
													"    var reqInfo3 = pm.environment.get(\"reqInfo3\");",
													"    var reqInfo4 = pm.environment.get(\"reqInfo4\");",
													"    var reqInfo5 = pm.environment.get(\"reqInfo5\");",
													"    jsonData.forEach(function(requirement, index) {",
													"        if (requirement.id === reqInfo1.id) {",
													"            reqInfo = reqInfo1;",
													"        } else if (requirement.id === reqInfo2.id) {",
													"            reqInfo = reqInfo2;",
													"        } else if (requirement.id === reqInfo3.id) {",
													"            reqInfo = reqInfo3;",
													"        } else if (requirement.id === reqInfo4.id) {",
													"            reqInfo = reqInfo4;",
													"        } else if (requirement.id === reqInfo5.id) {",
													"            reqInfo = reqInfo5;",
													"        }",
													"        pm.test(\"Response data contains name: \" + requirement.name, function() {",
													"            pm.expect(requirement.name).to.eql(reqInfo.name);",
													"            pm.expect(requirement.links).to.eql(reqInfo.links);",
													"            pm.expect(requirement.id).to.eql(reqInfo.id);",
													"            pm.expect(requirement.order).to.eql(reqInfo.order);",
													"            pm.expect(requirement.pid).to.eql(reqInfo.pid);",
													"            pm.expect(requirement.created_date).to.eql(reqInfo.created_date);",
													"            pm.expect(requirement.last_modified_date).to.eql(reqInfo.last_modified_date);",
													"            var tmp;",
													"            requirement.properties.forEach(function(field) {",
													"                switch (field.field_name) {",
													"                    case \"Status\":",
													"                            pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                        break;",
													"",
													"                    case \"Priority\":",
													"                        ",
													"                            pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                        ",
													"                        break;",
													"",
													"                    case \"Type\":",
													"                            pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                        break;",
													"",
													"                    case \"Assigned To\":",
													"                            pm.expect(field.field_value_name).to.eql(\"[API User 1]\");",
													"                            pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToAPIUser1\").toString());",
													"                        break;",
													"",
													"                    case \"Description\":",
													"                            pm.expect(field.field_value).to.eql(\"Description of \" + requirement.name);",
													"                        break;",
													"                }",
													"            });",
													"        });",
													"",
													"        pm.test(\"Response data of \" + requirement.name + \" contains parent_id property\", function() {",
													"            pm.expect(requirement.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "65e73403-edf0-4f06-bcbf-4d3155db2374",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}&page=1&size=-10",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "size",
													"value": "-10"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get multiple requirements - Invalid size param",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2778f905-8d59-4ab7-af29-6327de0913b4",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'Failed to convert value of type'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Failed to convert value of type\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cab856a4-ac7d-4d1c-a798-a3949318e140",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}&page=1&size=abcese10",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "size",
													"value": "abcese10"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Get multiple requirements - Page param is larger than maximum pagination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50cd3b25-a60f-44ce-a37c-8fba4fe80b8a",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body is an empty array\", function() {",
													"        pm.expect(jsonData).to.eql([]);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "288ad725-80ed-4dd2-8eee-285c28b95791",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}&page=4&size=2",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												},
												{
													"key": "page",
													"value": "4"
												},
												{
													"key": "size",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Get multiple requirements - Not exist parent Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e20c099c-bcca-4198-9672-9ea63d0c3daf",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    var jsonData = pm.response;",
													"    console.log(jsonData);",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has status: \" + jsonData.status, function() {",
													"        pm.expect(jsonData.status).to.eql(\"Not Found\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}123&page=1&size=2",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}123"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "size",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get multiple requirements - Invalid parent Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "409214b2-946f-4c71-9dd5-b697ad8892ba",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'Failed to convert value of type'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Failed to convert value of type\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}abc&page=1&size=2",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}abc"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "size",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Get multiple requirements - Not exist projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a69edd4a-6774-46fb-852e-ff5448603e40",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message 'Project not found'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Project not found\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}123/requirements?parentId={{newModuleId1}}&page=1&size=2",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}123",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "size",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get multiple requirements - Invalid projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b32cd5b2-911a-4ecb-8c1f-4068cb857bcf",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'For input string'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"For input string\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}abc/requirements?parentId={{newModuleId1}}&page=1&size=2",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}abc",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "size",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Get multiple requirements - Invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eda77f9e-0ec1-411e-b09b-b042a5aee081",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 401) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"",
													"    pm.test(\"Has 'error' in response body - error\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"error\");",
													"    })",
													"",
													"    pm.test(\"Has 'error_description' in response body - error_description: 'Invalid access token'\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"error_description\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} 1111{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}&page=1&size=2",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												},
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "size",
													"value": "2"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete Module 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cf7febd4-d882-41cf-9f12-63102c4eef3d",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"newModuleId1\");",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "228d2a9d-267e-4c3c-832f-7d3ac8706d20",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{newModuleId1}}?force=true",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{newModuleId1}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86f31353-71b4-4105-a865-e397d0fba37f",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"projectEndDate\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "47023af9-62bc-472d-8bd4-8a0c8ae7b5e8",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "53c9f98f-b871-486c-88d5-24ac6c866346",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "75af9cb5-1008-4b48-9d78-c24ad067f97b",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"siteAdminId\");",
													"    pm.environment.unset(\"userId\");",
													"    pm.environment.unset(\"newModuleId2\");",
													"    pm.environment.unset(\"fieldIdReqStatus\");",
													"    pm.environment.unset(\"fieldIdReqStatusNew\");",
													"    pm.environment.unset(\"fieldIdReqStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdReqStatusReadyForBaseline\");",
													"    pm.environment.unset(\"fieldIdReqStatusBaselined\");",
													"    pm.environment.unset(\"fieldIdReqPriority\");",
													"    pm.environment.unset(\"fieldIdReqPriorityMusthave\");",
													"    pm.environment.unset(\"fieldIdReqPriorityShouldhave\");",
													"    pm.environment.unset(\"fieldIdReqPriorityNicetoHave\");",
													"    pm.environment.unset(\"fieldIdReqType\");",
													"    pm.environment.unset(\"fieldIdReqTypeFunctional\");",
													"    pm.environment.unset(\"fieldIdReqTypeNonfunctional\");",
													"    pm.environment.unset(\"fieldIdReqAssignedTo\");",
													"    pm.environment.unset(\"fieldIdReqAssignedToAPIUser1\");",
													"    pm.environment.unset(\"fieldIdReqAssignedToSiteAdminUser\");",
													"    pm.environment.unset(\"fieldIdReqDescription\");",
													"    ",
													"    pm.environment.unset(\"newModuleId1\");",
													"    pm.environment.unset(\"reqName\");",
													"    pm.environment.unset(\"reqDescription\");",
													"    pm.environment.unset(\"newReqId1\");",
													"    pm.environment.unset(\"newReqId2\");",
													"    pm.environment.unset(\"newReqId3\");",
													"    pm.environment.unset(\"newReqId4\");",
													"    pm.environment.unset(\"newReqId5\");",
													"    pm.environment.unset(\"reqInfo1\");",
													"    pm.environment.unset(\"reqInfo2\");",
													"    pm.environment.unset(\"reqInfo3\");",
													"    pm.environment.unset(\"reqInfo4\");",
													"    pm.environment.unset(\"reqInfo5\");",
													"    ",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"tokenType\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"    ",
													"    pm.environment.unset(\"username1\");",
													"    pm.environment.unset(\"firstName1\");",
													"    pm.environment.unset(\"lastName1\");",
													"    pm.environment.unset(\"email1\");",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update a requirement",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1be391c7-2abb-45fa-b98a-d179a443efbf",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code + \" -  Login\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"    ",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Get user id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dff8508b-f8e0-485c-808a-461d53246204",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Response data contains data of apiuser1@qas.com\", function() {",
													"        pm.expect(jsonData.items[0].username).to.eql(pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"        pm.expect(pm.response.text()).to.include(\"email\");",
													"        pm.expect(jsonData.items[0].first_name).to.eql(\"API\");",
													"        pm.expect(jsonData.items[0].last_name).to.eql(\"User 1\");",
													"        pm.expect(pm.response.text()).to.include(\"status\");",
													"        pm.expect(pm.response.text()).to.include(\"timezone_offset\");",
													"        pm.expect(pm.response.text()).to.include(\"country_name\");",
													"    });",
													"    ",
													"    pm.environment.set(\"userId\", jsonData.items[0].id);",
													"",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "85cff8f6-2ebf-4e35-a153-1b3b5a090c82",
												"exec": [
													"pm.environment.set(\"username1\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"pm.environment.set(\"firstName1\", \"API\");",
													"pm.environment.set(\"lastName1\", \"User 1\");",
													"pm.environment.set(\"email1\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/users/search?username={{username1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"users",
												"search"
											],
											"query": [
												{
													"key": "username",
													"value": "{{username1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22943d4b-1b6b-47e8-a5e2-a5a94bf25dcd",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.test(\"Response data contains all properties of project data\", function(){",
													"        pm.expect(pm.response.text()).to.include(\"id\");",
													"        pm.expect(jsonData.name).to.eql(\"qTest API - Postman\");",
													"        pm.expect(jsonData.description).to.eql(\"Description of qTest API - Postman\");",
													"        pm.expect(pm.response.text()).to.include(\"status_id\");",
													"        pm.expect(pm.response.text()).to.include(\"start_date\");",
													"        pm.expect(pm.response.text()).to.include(\"end_date\");",
													"        pm.expect(pm.response.text()).to.include(\"sample\");",
													"        pm.expect(pm.response.text()).to.include(\"defect_tracking_systems\");",
													"        pm.expect(pm.response.text()).to.include(\"x_explorer_access_level\");",
													"        pm.expect(pm.response.text()).to.include(\"date_format\");",
													"        pm.expect(jsonData.automation.toString()).to.eql(\"true\");",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate\", pm.environment.get(\"startDate\"));",
													"    pm.environment.set(\"projectEndDate\", pm.environment.get(\"endDate\"));",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d96f68c6-55b3-420b-8b96-58a4ff64e4cb",
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\", \"{{prefixApiUser}}apiuser1@qas.com\"\n  ],\n  \"automation\": true\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create Module 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e2f7b7ab-bf72-4567-b51d-94fbad487d83",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Repsonse body has correct module info of \" + jsonData.name, function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(\"Module 1\");",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.not.eql(null);",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 1\");",
													"    });",
													"    ",
													"    pm.environment.set(\"newModuleId1\", jsonData.id);",
													"    ",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Module 1\",\r\n  \"description\": \"Description of Module 1\",\r\n  \"shared\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create Module 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "19c749ec-acbe-4d59-8958-38126d82a487",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Repsonse body has correct module info of \" + jsonData.name, function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(\"Module 2\");",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.not.eql(null);",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 2\");",
													"    });",
													"    ",
													"    pm.environment.set(\"newModuleId2\", jsonData.id);",
													"    ",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Module 2\",\r\n  \"description\": \"Description of Module 2\",\r\n  \"shared\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get requirement fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9302a2e8-84b2-4981-a4de-13f3bd2054f5",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdReq\";",
													"    var jsonData = pm.response.json();",
													"    var fieldValueId;",
													"    var siteAdminFullName = pm.environment.get(\"firstName\") + \" \" + pm.environment.get(\"lastName\");",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                if (field.label === \"Assigned To\") {",
													"                    if(item.label === \"API User 1\"){",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"APIUser1\";",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                    }",
													"                    else if (item.label === siteAdminFullName) {",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"SiteAdminUser\";",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                    }",
													"                } else {",
													"                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                    pm.environment.set(fieldValueId, item.value);",
													"                }",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/requirements/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"requirements",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create requirement 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "506f9e9e-f7f6-4db3-9825-966cc353e972",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement info of \" + pm.environment.get(\"reqName1\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName1\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[\" + pm.environment.get(\"firstName\") + \" \" + pm.environment.get(\"lastName\") + \"]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToSiteAdminUser\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription1\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    pm.environment.set(\"newReqId1\", jsonData.id);",
													"    pm.environment.set(\"reqInfo1\", jsonData);",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e8a9a686-033d-455b-a9e6-6d64ff8001ba",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName1\", \"Requirement 1\");",
													"pm.environment.set(\"reqDescription1\", \"Description of Requirement 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName1}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToSiteAdminUser}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription1}}\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create requirement 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88c37d16-f9d1-485d-977a-3cf660c03de6",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement info of \" + pm.environment.get(\"reqName2\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName2\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[\" + pm.environment.get(\"firstName\") + \" \" + pm.environment.get(\"lastName\") + \"]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToSiteAdminUser\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription2\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    pm.environment.set(\"newReqId2\", jsonData.id);",
													"    pm.environment.set(\"reqInfo2\", jsonData);",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fdac51bb-1f44-4c70-a622-6f526552e5cb",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName2\", \"Requirement 2\");",
													"pm.environment.set(\"reqDescription2\", \"Description of Requirement 2\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName2}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToSiteAdminUser}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription2}}\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Update requirement - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca7c8706-59be-4e50-8f7b-e0c2ee6d3ce2",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    var reqInfo1 = pm.environment.get(\"reqInfo1\");",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement info of \" + pm.environment.get(\"reqName1\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName1\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[API User 1]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToAPIUser1\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription1\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "85604dfd-7c65-4523-b22a-69564267b9b1",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName1\", \"Requirement name is updated\");",
													"pm.environment.set(\"reqDescription1\", \"Requirement description is updated\");"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"{{reqName1}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToAPIUser1}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription1}}\"\n\t\t}\t\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Update requirement - Move requirement to new module id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a51a3651-ea7e-4cf8-959a-809b5ef3cf23",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    var reqInfo2 = pm.environment.get(\"reqInfo2\");",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement info of \" + pm.environment.get(\"reqName2\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName2\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"'\"+ pm.environment.get(\"reqName2\") + \"' contains parent_id property to be updated\", function() {",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId2\"));",
													"    });",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[API User 1]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToAPIUser1\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription2\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "56eae576-7e91-4ca4-a6d8-0228a60c6efe",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName2\", \"Requirement is moved\");",
													"pm.environment.set(\"reqDescription2\", \"Requirement description is updated\");"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"{{reqName2}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToAPIUser1}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription2}}\"\n\t\t}\t\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId2}}?parentId={{newModuleId2}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId2}}"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId2}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Update requirement - No property name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a0e3511e-045b-4dae-a639-56536b5106df",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    var reqInfo1 = pm.environment.get(\"reqInfo1\");",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement info of \" + pm.environment.get(\"reqName1\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName1\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[API User 1]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToAPIUser1\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription1\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "de52a359-af4e-4e82-9beb-b0b930f712e4",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqDescription1\", \"This requirement is updated with no property name\");"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToAPIUser1}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription1}}\"\n\t\t}\t\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update requirement - Invalid parentId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "994bc259-d10e-43c9-81c4-eb6810ac1949",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has message property contains 'Failed to convert value of type'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Failed to convert value of type\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ffda100e-00db-4cf3-84ec-d1287680b100",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}?parentId={{newModuleId2}}abcd",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId2}}abcd"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Update requirement - Not exist projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "996eb30b-c669-4b97-89c3-b1d392f8a655",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message 'Project not found'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Project not found\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Requirement 100\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToDemoAPI}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"Description of Requirement 100\"\n\t\t}\t\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/0/requirements/{{newReqId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"0",
												"requirements",
												"{{newReqId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update requirement - Invalid projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2299fad3-c102-4aa0-bbeb-8682f2eb33a0",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'For input string'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"For input string\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Requirement 100\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToDemoAPI}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"Description of Requirement 100\"\n\t\t}\t\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}abcd/requirements/{{newReqId1}}?parentId={{newModuleId2}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}abcd",
												"requirements",
												"{{newReqId1}}"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId2}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update requirement - Missing request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3435f6e-24bd-4ddd-9af7-d8d8983ea1f2",
												"exec": [
													"const RESPONSE_CODE = 400;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"const EXPECTED_MSGS = [",
													"    \"Required request body is missing\",",
													"    \"Required request body content is missing\"];",
													"    ",
													"function validateMessage(actualMessage){",
													"    let result = false;",
													"    for(const msg of EXPECTED_MSGS) {",
													"        result = actualMessage.indexOf(msg) > -1;",
													"        if(result){",
													"            console.log(`Actual message is: ${actualMessage}`);",
													"            return result;",
													"        }",
													"    }",
													"    return result;",
													"}",
													"",
													"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"if (result) {",
													"    const jsonData = pm.response.json();",
													"    pm.test(`Response body has 'message' property value in following: '${EXPECTED_MSGS.toString()}'`, () => {",
													"        pm.expect(validateMessage(jsonData.message)).to.eql(true);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4015cdd9-adb2-4c46-a150-71905aa80d71",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Update requirement - Invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f764747-6f9e-4358-ad41-83f5c3b890b5",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 401) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"",
													"    pm.test(\"Has 'error' in response body - error\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"error\");",
													"    });",
													"",
													"    pm.test(\"Has 'error_description' in response body - error_description: 'Invalid access token'\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"error_description\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} 1111{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Requirement 100\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToDemoAPI}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"Description of Requirement 100\"\n\t\t}\t\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete Module 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "32578bb2-f368-40b2-b21f-b91e8da3e4ca",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"newModuleId1\");",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f267a220-75e6-4d65-8f28-4fefafde646a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{newModuleId1}}?force=true",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{newModuleId1}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete Module 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "badb7d98-30e8-462e-9a6b-9c3c5f6ee604",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"newModuleId2\");",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cf6553cc-dd26-4b8c-bd96-9548631d9924",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{newModuleId2}}?force=true",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{newModuleId2}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "916ee963-f4e3-462f-9fbe-d772149a8302",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"projectEndDate\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "43764779-ca49-4e52-896b-ebda9f4db3cc",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d89fd5b0-2ae5-4be1-a353-2e0321c99bbf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7ccad609-7fcb-4982-82de-d28aec1ddfda",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.environment.unset(\"userId\");",
													"   pm.environment.unset(\"siteAdminId\");",
													"    pm.environment.unset(\"fieldIdReqStatus\");",
													"    pm.environment.unset(\"fieldIdReqStatusNew\");",
													"    pm.environment.unset(\"fieldIdReqStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdReqStatusReadyForBaseline\");",
													"    pm.environment.unset(\"fieldIdReqStatusBaselined\");",
													"    pm.environment.unset(\"fieldIdReqPriority\");",
													"    pm.environment.unset(\"fieldIdReqPriorityMusthave\");",
													"    pm.environment.unset(\"fieldIdReqPriorityShouldhave\");",
													"    pm.environment.unset(\"fieldIdReqPriorityNicetoHave\");",
													"    pm.environment.unset(\"fieldIdReqType\");",
													"    pm.environment.unset(\"fieldIdReqTypeFunctional\");",
													"    pm.environment.unset(\"fieldIdReqTypeNonfunctional\");",
													"    pm.environment.unset(\"fieldIdReqAssignedTo\");",
													"    pm.environment.unset(\"fieldIdReqAssignedToAPIUser1\");",
													"    pm.environment.unset(\"fieldIdReqAssignedToSiteAdminUser\");",
													"    pm.environment.unset(\"fieldIdReqDescription\");",
													"    ",
													"    pm.environment.unset(\"newModuleId1\");",
													"    pm.environment.unset(\"reqName1\");",
													"    pm.environment.unset(\"reqDescription1\");",
													"    pm.environment.unset(\"reqName2\");",
													"    pm.environment.unset(\"reqDescription2\");",
													"    pm.environment.unset(\"newReqId1\");",
													"    pm.environment.unset(\"reqInfo1\");",
													"    pm.environment.unset(\"newReqId2\");",
													"    pm.environment.unset(\"reqInfo2\");",
													"    ",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"tokenType\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"    ",
													"    pm.environment.unset(\"username1\");",
													"    pm.environment.unset(\"firstName1\");",
													"    pm.environment.unset(\"lastName1\");",
													"    pm.environment.unset(\"email1\");",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete a requirement",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3dd090e2-8c56-4968-9f2e-42a123273943",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code + \" -  Login\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Get user id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3698163-f94d-4ad1-a335-de1332bba848",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Response data contains data of apiuser1@qas.com\", function() {",
													"        pm.expect(jsonData.items[0].username).to.eql(pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"        pm.expect(pm.response.text()).to.include(\"email\");",
													"        pm.expect(jsonData.items[0].first_name).to.eql(\"API\");",
													"        pm.expect(jsonData.items[0].last_name).to.eql(\"User 1\");",
													"        pm.expect(pm.response.text()).to.include(\"status\");",
													"        pm.expect(pm.response.text()).to.include(\"timezone_offset\");",
													"        pm.expect(pm.response.text()).to.include(\"country_name\");",
													"    });",
													"    ",
													"    pm.environment.set(\"userId\", jsonData.items[0].id);",
													"",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ae4fe3e1-6fdb-4ce1-8e3e-136f9c0aafef",
												"exec": [
													"pm.environment.set(\"username1\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"pm.environment.set(\"firstName1\", \"API\");",
													"pm.environment.set(\"lastName1\", \"User 1\");",
													"pm.environment.set(\"email1\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/users/search?username={{username1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"users",
												"search"
											],
											"query": [
												{
													"key": "username",
													"value": "{{username1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4af615ae-0d5e-49b4-9bc4-b80363b025fa",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.test(\"Response data contains all properties of project data\", function(){",
													"        pm.expect(pm.response.text()).to.include(\"id\");",
													"        pm.expect(jsonData.name).to.eql(\"qTest API - Postman\");",
													"        pm.expect(jsonData.description).to.eql(\"Description of qTest API - Postman\");",
													"        pm.expect(pm.response.text()).to.include(\"status_id\");",
													"        pm.expect(pm.response.text()).to.include(\"start_date\");",
													"        pm.expect(pm.response.text()).to.include(\"end_date\");",
													"        pm.expect(pm.response.text()).to.include(\"sample\");",
													"        pm.expect(pm.response.text()).to.include(\"defect_tracking_systems\");",
													"        pm.expect(pm.response.text()).to.include(\"x_explorer_access_level\");",
													"        pm.expect(pm.response.text()).to.include(\"date_format\");",
													"        pm.expect(jsonData.automation.toString()).to.eql(\"true\");",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate\", pm.environment.get(\"startDate\"));",
													"    pm.environment.set(\"projectEndDate\", pm.environment.get(\"endDate\"));",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "26066020-963d-4a5c-a34c-ed4953b1e168",
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\", \"{{prefixApiUser}}apiuser1@qas.com\"\n  ],\n  \"automation\": true\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create a module",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d05f0ab1-27c0-4fad-bb3a-1e78178d8f48",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Repsonse body has correct module info of \" + jsonData.name, function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(\"Module 1\");",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.not.eql(null);",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 1\");",
													"    });",
													"    ",
													"    pm.environment.set(\"newModuleId1\", jsonData.id);",
													"    ",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Module 1\",\r\n  \"description\": \"Description of Module 1\",\r\n  \"shared\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get requirement fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f838787b-4747-4cae-aea8-e61ce1ef4a16",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdReq\";",
													"    var jsonData = pm.response.json();",
													"    var fieldValueId;",
													"    var siteAdminFullName = pm.environment.get(\"firstName\") + \" \" + pm.environment.get(\"lastName\");",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                if (field.label === \"Assigned To\") {",
													"                    if(item.label === \"API User 1\"){",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"APIUser1\";",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                    }",
													"                    else if (item.label === siteAdminFullName) {",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"SiteAdminUser\";",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                    }",
													"                } else {",
													"                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                    pm.environment.set(fieldValueId, item.value);",
													"                }",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/requirements/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"requirements",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create a requirement 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7debde50-7b11-47a4-b51d-2cc212a8ce45",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement info of \" + pm.environment.get(\"reqName\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[API User 1]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToAPIUser1\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    pm.environment.set(\"newReqId1\", jsonData.id);",
													"    pm.environment.set(\"reqInfo1\", jsonData);",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ed3e833a-d8f0-4017-b51f-f30b389a680c",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 1\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToAPIUser1}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription}}\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create a requirement 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cc932b52-c5f1-44d6-ba63-ea7b1ade7e17",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement info of \" + pm.environment.get(\"reqName\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[API User 1]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToAPIUser1\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    pm.environment.set(\"newReqId2\", jsonData.id);",
													"    pm.environment.set(\"reqInfo2\", jsonData);",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0c68af46-bf40-4969-aeb3-eeaf291d3858",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 2\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 2\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToAPIUser1}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription}}\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Delete requirement - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ddeb950-4124-439e-98d8-c612626fb5d9",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cef7675e-72f4-43cb-b773-7bd67f4c9f01",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Delete requirement - Not exist project Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e3a4996-8d25-498c-8f5e-d9d374dd7cbe",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"    ",
													"    pm.test(\"Response body has message contains 'Project not found'\", function() {",
													"       pm.expect(jsonData.message).to.include(\"Project not found\"); ",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ebe649cf-2ae6-4e4c-bd37-fb4df2d9eec1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}1234/requirements/{{newReqId2}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}1234",
												"requirements",
												"{{newReqId2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Delete requirement - Invalid project Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7eec6cda-3ab0-44e6-a2de-134bc1375be1",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"    ",
													"    pm.test(\"Response body has message contains 'For input string'\", function() {",
													"       pm.expect(jsonData.message).to.include(\"For input string\"); ",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5af58e9d-0baa-42f4-9221-755aec710d12",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}abcd/requirements/{{newReqId2}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}abcd",
												"requirements",
												"{{newReqId2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Delete requirement - Invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2eccf8aa-6748-4f8b-b63e-d270075d4f58",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 401) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"",
													"    pm.test(\"Has 'error' in response body - error: \" + jsonData.error, function() {",
													"        pm.expect(pm.response.text()).to.include(\"error\");",
													"    })",
													"",
													"    pm.test(\"Has 'error_description' in response body - error_description: 'Invalid access token'\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"error_description\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} 1111{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId2}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Delete requirement - Not exist requirement Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b57d614f-efad-46dc-a3f8-adf9860ee4a7",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has json property 'message' is 'Requirement not found!'\", function() {",
													"        var jsonData = pm.response.json();",
													"        pm.expect(jsonData.message).to.eql(\"Requirement not found!\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7a436cfd-2803-4448-9cdd-c874ee1599c5",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/1",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Delete requirement - Invalid requirement Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cf90c5ba-899e-440e-8821-1cab3be1e09d",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response body has message contains 'Failed to convert value of type'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Failed to convert value of type\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "872ce72e-5699-4c55-82e2-ada67995eef9",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/a21",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"a21"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete Module 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2ee6591-85dc-4427-b3df-c760ae760d79",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"newModuleId1\");",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e09bf91d-62c5-41bf-9bd3-71ba8a2b84f8",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{newModuleId1}}?force=true",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{newModuleId1}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eb043e85-01bb-493c-80da-63fc8153fa59",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"projectEndDate\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "be72de94-5322-4789-8efb-af710d7e6474",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b2cbff5c-f349-4380-b3dd-5e767c63d571",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "eeea9bf7-06b0-4fad-a16e-7450118865f3",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.environment.unset(\"siteAdminId\");",
													"    pm.environment.unset(\"userId\");",
													"    ",
													"    pm.environment.unset(\"fieldIdReqStatus\");",
													"    pm.environment.unset(\"fieldIdReqStatusNew\");",
													"    pm.environment.unset(\"fieldIdReqStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdReqStatusReadyForBaseline\");",
													"    pm.environment.unset(\"fieldIdReqStatusBaselined\");",
													"    pm.environment.unset(\"fieldIdReqPriority\");",
													"    pm.environment.unset(\"fieldIdReqPriorityMusthave\");",
													"    pm.environment.unset(\"fieldIdReqPriorityShouldhave\");",
													"    pm.environment.unset(\"fieldIdReqPriorityNicetoHave\");",
													"    pm.environment.unset(\"fieldIdReqType\");",
													"    pm.environment.unset(\"fieldIdReqTypeFunctional\");",
													"    pm.environment.unset(\"fieldIdReqTypeNonfunctional\");",
													"    pm.environment.unset(\"fieldIdReqAssignedTo\");",
													"    pm.environment.unset(\"fieldIdReqAssignedToAPIUser1\");",
													"    pm.environment.unset(\"fieldIdReqAssignedToSiteAdminUser\");",
													"    pm.environment.unset(\"fieldIdReqDescription\");",
													"    ",
													"    pm.environment.unset(\"newModuleId1\");",
													"    pm.environment.unset(\"reqName\");",
													"    pm.environment.unset(\"reqDescription\");",
													"    pm.environment.unset(\"newReqId1\");",
													"    pm.environment.unset(\"reqInfo1\");",
													"    pm.environment.unset(\"newReqId2\");",
													"    pm.environment.unset(\"reqInfo2\");",
													"    ",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"tokenType\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"    ",
													"    pm.environment.unset(\"username1\");",
													"    pm.environment.unset(\"firstName1\");",
													"    pm.environment.unset(\"lastName1\");",
													"    pm.environment.unset(\"email1\");",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "49c598bf-9b93-4d6b-a369-6d181f3b9c2a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "e9354122-bcfe-4001-a1b1-24e3f2048d23",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Add a comment to a requirement",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "00b31ff3-fbaa-400f-8b1a-694eb5a64c9d",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code + \" -  Login\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Get user id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e4c709a-0669-42ef-b35c-6b2faeafb59a",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Response data contains data of apiuser1@qas.com\", function() {",
													"        pm.expect(jsonData.items[0].username).to.eql(pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"        pm.expect(pm.response.text()).to.include(\"email\");",
													"        pm.expect(jsonData.items[0].first_name).to.eql(\"API\");",
													"        pm.expect(jsonData.items[0].last_name).to.eql(\"User 1\");",
													"        pm.expect(pm.response.text()).to.include(\"status\");",
													"        pm.expect(pm.response.text()).to.include(\"timezone_offset\");",
													"        pm.expect(pm.response.text()).to.include(\"country_name\");",
													"    });",
													"    ",
													"    pm.environment.set(\"userId\", jsonData.items[0].id);",
													"",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3df11ede-d59a-4377-8d9f-4e5948e52dad",
												"exec": [
													"pm.environment.set(\"username1\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"pm.environment.set(\"firstName1\", \"API\");",
													"pm.environment.set(\"lastName1\", \"User 1\");",
													"pm.environment.set(\"email1\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/users/search?username={{username1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"users",
												"search"
											],
											"query": [
												{
													"key": "username",
													"value": "{{username1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9953595f-d656-4cb8-b45f-0e37df88a902",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.test(\"Response data contains all properties of project data\", function(){",
													"        pm.expect(pm.response.text()).to.include(\"id\");",
													"        pm.expect(jsonData.name).to.eql(\"qTest API - Postman\");",
													"        pm.expect(jsonData.description).to.eql(\"Description of qTest API - Postman\");",
													"        pm.expect(pm.response.text()).to.include(\"status_id\");",
													"        pm.expect(pm.response.text()).to.include(\"start_date\");",
													"        pm.expect(pm.response.text()).to.include(\"end_date\");",
													"        pm.expect(pm.response.text()).to.include(\"sample\");",
													"        pm.expect(pm.response.text()).to.include(\"defect_tracking_systems\");",
													"        pm.expect(pm.response.text()).to.include(\"x_explorer_access_level\");",
													"        pm.expect(pm.response.text()).to.include(\"date_format\");",
													"        pm.expect(jsonData.automation.toString()).to.eql(\"true\");",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate\", pm.environment.get(\"startDate\"));",
													"    pm.environment.set(\"projectEndDate\", pm.environment.get(\"endDate\"));",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e1a6194b-4705-440f-988d-e9c1844e4148",
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\", \"{{prefixApiUser}}apiuser1@qas.com\"\n  ],\n  \"automation\": true\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get site admin id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "147d9101-f708-41c7-89b4-818efc3f05da",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Response data contains site admin user property\", function() {",
													"        pm.expect(jsonData.items[0].username).to.eql(pm.environment.get(\"username\"));",
													"        pm.expect(pm.response.text()).to.include(\"email\");",
													"        pm.expect(jsonData.items[0].first_name).to.eql(pm.environment.get(\"firstName\"));",
													"        pm.expect(jsonData.items[0].last_name).to.eql(pm.environment.get(\"lastName\"));",
													"        pm.expect(pm.response.text()).to.include(\"status\");",
													"        pm.expect(pm.response.text()).to.include(\"timezone_offset\");",
													"        pm.expect(pm.response.text()).to.include(\"country_name\");",
													"    });",
													"    ",
													"    pm.environment.set(\"siteAdminId\", jsonData.items[0].id);",
													"",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"username\": \"{{username}}\",\r\n  \"first_name\": \"{{firstName}}\",\r\n  \"last_name\": \"{{lastName}}\",\r\n  \"email\": \"{{username}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/users/search?username={{username}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"users",
												"search"
											],
											"query": [
												{
													"key": "username",
													"value": "{{username}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create Module 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "85256a77-e47f-45bb-a373-293b83b6e895",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Repsonse body has correct module info of \" + jsonData.name, function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(\"Module 1\");",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.not.eql(null);",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 1\");",
													"    });",
													"    ",
													"    pm.environment.set(\"newModuleId1\", jsonData.id);",
													"    ",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Module 1\",\r\n  \"description\": \"Description of Module 1\",\r\n  \"shared\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get requirement fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f126a46c-b8e4-4183-95c1-2051510d1205",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdReq\";",
													"    var jsonData = pm.response.json();",
													"    var fieldValueId;",
													"    var siteAdminFullName = pm.environment.get(\"firstName\") + \" \" + pm.environment.get(\"lastName\");",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                if (field.label === \"Assigned To\") {",
													"                    if(item.label === \"API User 1\"){",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"APIUser1\";",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                    }",
													"                    else if (item.label === siteAdminFullName) {",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"SiteAdminUser\";",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                    }",
													"                } else {",
													"                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                    pm.environment.set(fieldValueId, item.value);",
													"                }",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/requirements/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"requirements",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create a requirement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "662a5d95-0399-46c6-bdd5-499263333cc7",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement info of \" + pm.environment.get(\"reqName\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[API User 1]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToAPIUser1\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    pm.environment.set(\"newReqPId1\", jsonData.pid);",
													"    pm.environment.set(\"newReqId1\", jsonData.id);",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19fc20c7-9519-47b8-bdfb-5df9eab5dd03",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 1\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToAPIUser1}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription}}\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "201 - Add comment to requirement id - Success with id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24c8393f-92a7-415e-bf4d-e525b5c54f43",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response data has links property\", function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created property\", function () {",
													"        pm.expect(jsonData.created).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has userId property\", function () {",
													"        pm.expect(jsonData.userId).to.eql(pm.environment.get(\"siteAdminId\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has id property\", function () {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains content: \" + jsonData.content, function () {",
													"        pm.expect(jsonData.content).to.eql(pm.environment.get(\"commentContent1\"));",
													"    });",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cd29dd5d-e50d-49c1-9940-d6c709283d0a",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"commentContent1\", \"Comment 1 of Requirement 1 by id\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"content\": \"{{commentContent1}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Add comment to requirement id - Invalid requirement Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ef94661-e788-4909-ab08-c94c7ee9d62a",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(400); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response data has message contains 'Wrong format for artifact id!'\", function () {",
													"        pm.expect(jsonData.message).to.eql(\"Wrong format for artifact id!\");",
													"    });",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a2d753ee-c3b2-4766-90cd-03f06a967a8a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"content\": \"Comment 100\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}abcd/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}abcd",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Add comment to requirement id - Not exist requirement Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9293c0b1-eec9-423c-9919-2c2b2520f4a1",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(404); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response data has message contains 'Object with Id or Key is not found'\", function () {",
													"        pm.expect(jsonData.message).to.include(\"is not found\");",
													"    });",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c986a462-e8e8-49f6-8f74-f0e955f32110",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"content\": \"Comment 100\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}1234/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}1234",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Add comment to requirement id - The empty request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc63a777-d355-495b-85a8-ce58205aa131",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response body has message contains: \" + jsonData.message, function() {",
													"        pm.expect(jsonData.message).to.eql(\"content may not be blank\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c9922d94-7cba-4134-99e7-651dc3967c43",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Add comment to requirement id - Blank value in content property",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86ba706e-6fd9-4717-a1f3-419e0c99cb86",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response body has message contains: \" + jsonData.message, function() {",
													"        pm.expect(jsonData.message).to.eql(\"content may not be blank\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ec35c3d4-342d-4a63-8a91-600f6e28f1b3",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"content\": \"\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Add comment to requirement id - Missing body",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aafe6811-676f-491a-83a5-41d0c2c35d95",
												"exec": [
													"const RESPONSE_CODE = 400;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"const EXPECTED_MSGS = [",
													"    \"Required request body is missing\",",
													"    \"Required request body content is missing\"];",
													"    ",
													"function validateMessage(actualMessage){",
													"    let result = false;",
													"    for(const msg of EXPECTED_MSGS) {",
													"        result = actualMessage.indexOf(msg) > -1;",
													"        if(result){",
													"            console.log(`Actual message is: ${actualMessage}`);",
													"            return result;",
													"        }",
													"    }",
													"    return result;",
													"}",
													"",
													"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"if (result) {",
													"    const jsonData = pm.response.json();",
													"    pm.test(`Response body has 'message' property value in following: '${EXPECTED_MSGS.toString()}'`, () => {",
													"        pm.expect(validateMessage(jsonData.message)).to.eql(true);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "66589730-3ef4-419e-8e52-f7c2fd54ffc3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Add comment to requirement id - Invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f5bea272-43b9-4b89-b591-aa8f5a874bf2",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 401) {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 401\", function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message value contains 'Invalid access token'\", function() {",
													"        pm.expect(jsonData.error_description).to.include(\"Invalid access token\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "78a445a2-88cc-46f8-81fc-ad395621dc34",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}000"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"content\": \"{{commentContent1}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Add comment to requirement pid - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "59c0a7c3-676c-4108-818a-800e9b2f651f",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response data has links property\", function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created property\", function () {",
													"        pm.expect(jsonData.created).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has userId property\", function () {",
													"        pm.expect(jsonData.userId).to.eql(pm.environment.get(\"siteAdminId\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has id property\", function () {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains content: \" + jsonData.content, function () {",
													"        pm.expect(jsonData.content).to.eql(pm.environment.get(\"commentContent1\"));",
													"    });",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "396c112b-2da0-475d-98e5-848df4017bb9",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"commentContent1\", \"Comment 1 of Requirement 1 by pid\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"content\": \"{{commentContent1}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqPId1}}/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqPId1}}",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Add comment to requirement pid - Invalid requirement pid",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b972bcb-b89d-41f2-905d-80679e3f644c",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(400); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response data has message contains 'Wrong format for artifact id!'\", function () {",
													"        pm.expect(jsonData.message).to.eql(\"Wrong format for artifact id!\");",
													"    });",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "90342082-6919-4604-8bac-05cdb25d284c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"content\": \"Comment 100\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/aw{{newReqPId1}}/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"aw{{newReqPId1}}",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Add comment to requirement pid - Not exist requirement PId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e5ad51a-c77a-494f-8e33-efa9200e2750",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(404); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response data has message contains 'Object with Id or Key is not found'\", function () {",
													"        pm.expect(jsonData.message).to.include(\"is not found\");",
													"    });",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9d6f4248-8b15-4193-aef5-3629a7e5e0c9",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"content\": \"Comment 100\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqPId1}}1234/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqPId1}}1234",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Add comment to requirement pid - The empty request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e7ec6df8-5d96-4470-99cc-5ce803ee3c50",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response body has message contains: \" + jsonData.message, function() {",
													"        pm.expect(jsonData.message).to.eql(\"content may not be blank\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bc790fce-86b7-41e5-a4a0-d66c8474cff4",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Add comment to requirement pid - Blank value in content property",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "26847987-3978-41f1-98bb-7fba510ee3fe",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response body has message contains: \" + jsonData.message, function() {",
													"        pm.expect(jsonData.message).to.eql(\"content may not be blank\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b6d6e4ef-5fe7-4910-bb14-63efa6e047c2",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"content\": \"\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqPId1}}/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqPId1}}",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Add comment to requirement pid - Missing body",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23e2eb64-72b1-4f3a-bc9e-e58ab3428d24",
												"exec": [
													"const RESPONSE_CODE = 400;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"const EXPECTED_MSGS = [",
													"    \"Required request body is missing\",",
													"    \"Required request body content is missing\"];",
													"    ",
													"function validateMessage(actualMessage){",
													"    let result = false;",
													"    for(const msg of EXPECTED_MSGS) {",
													"        result = actualMessage.indexOf(msg) > -1;",
													"        if(result){",
													"            console.log(`Actual message is: ${actualMessage}`);",
													"            return result;",
													"        }",
													"    }",
													"    return result;",
													"}",
													"",
													"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"if (result) {",
													"    const jsonData = pm.response.json();",
													"    pm.test(`Response body has 'message' property value in following: '${EXPECTED_MSGS.toString()}'`, () => {",
													"        pm.expect(validateMessage(jsonData.message)).to.eql(true);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "698c7ca0-255a-4fea-85f3-3f61ed11c760",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqPId1}}/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqPId1}}",
												"comments"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete Module 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c03028a1-c9d3-474f-8d65-28d45b2f4363",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"newModuleId1\");",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "068aacb2-ff72-488a-8e73-a87f13ec0f69",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{newModuleId1}}?force=true",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{newModuleId1}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f8a7b7d-1d83-486e-8151-fe312432acbe",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"projectEndDate\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "240a54c9-9c3c-4dd7-8aa8-7fc2329e284e",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a8db65e5-cad9-4920-a9e7-989bcba15559",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "41e01e8f-de19-477d-b016-451920268bf9",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.environment.unset(\"siteAdminId\");",
													"    pm.environment.unset(\"userId\");",
													" ",
													"    pm.environment.unset(\"fieldIdReqStatus\");",
													"    pm.environment.unset(\"fieldIdReqStatusNew\");",
													"    pm.environment.unset(\"fieldIdReqStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdReqStatusReadyForBaseline\");",
													"    pm.environment.unset(\"fieldIdReqStatusBaselined\");",
													"    pm.environment.unset(\"fieldIdReqPriority\");",
													"    pm.environment.unset(\"fieldIdReqPriorityMusthave\");",
													"    pm.environment.unset(\"fieldIdReqPriorityShouldhave\");",
													"    pm.environment.unset(\"fieldIdReqPriorityNicetoHave\");",
													"    pm.environment.unset(\"fieldIdReqType\");",
													"    pm.environment.unset(\"fieldIdReqTypeFunctional\");",
													"    pm.environment.unset(\"fieldIdReqTypeNonfunctional\");",
													"    pm.environment.unset(\"fieldIdReqAssignedTo\");",
													"    pm.environment.unset(\"fieldIdReqAssignedToAPIUser1\");",
													"    pm.environment.unset(\"fieldIdReqAssignedToSiteAdminUser\");",
													"    pm.environment.unset(\"fieldIdReqDescription\");",
													"    ",
													"    pm.environment.unset(\"newModuleId1\");",
													"    pm.environment.unset(\"reqName\");",
													"    pm.environment.unset(\"reqDescription\");",
													"    pm.environment.unset(\"newReqId1\");",
													"    pm.environment.unset(\"newReqPId1\");",
													"    pm.environment.unset(\"commentContent1\");",
													"    ",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"tokenType\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"    ",
													"    pm.environment.unset(\"username1\");",
													"    pm.environment.unset(\"firstName1\");",
													"    pm.environment.unset(\"lastName1\");",
													"    pm.environment.unset(\"email1\");",
													"    ",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9e3aae20-8427-4e4c-b084-d7c67f48358b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4619f4fd-7864-46e1-af46-606d58b5b38f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dc35e8c3-af18-4888-9539-5aea840005c8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "9a012ec6-665e-4195-b99a-e6cdf7916121",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get a comment of a requirement",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "51be4335-5f82-466e-9dc4-b29cda401f6f",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code + \" -  Login\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Get user id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c947123-3fb8-4971-9883-e0f4f88d437b",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Response data contains data of apiuser1@qas.com\", function() {",
													"        pm.expect(jsonData.items[0].username).to.eql(pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"        pm.expect(pm.response.text()).to.include(\"email\");",
													"        pm.expect(jsonData.items[0].first_name).to.eql(\"API\");",
													"        pm.expect(jsonData.items[0].last_name).to.eql(\"User 1\");",
													"        pm.expect(pm.response.text()).to.include(\"status\");",
													"        pm.expect(pm.response.text()).to.include(\"timezone_offset\");",
													"        pm.expect(pm.response.text()).to.include(\"country_name\");",
													"    });",
													"    ",
													"    pm.environment.set(\"userId\", jsonData.items[0].id);",
													"",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1a5d5302-b004-4876-9603-d7477f3156aa",
												"exec": [
													"pm.environment.set(\"username1\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"pm.environment.set(\"firstName1\", \"API\");",
													"pm.environment.set(\"lastName1\", \"User 1\");",
													"pm.environment.set(\"email1\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/users/search?username={{username1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"users",
												"search"
											],
											"query": [
												{
													"key": "username",
													"value": "{{username1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d7daaf3-c955-4122-9d46-7ca483bf8fc3",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.test(\"Response data contains all properties of project data\", function(){",
													"        pm.expect(pm.response.text()).to.include(\"id\");",
													"        pm.expect(jsonData.name).to.eql(\"qTest API - Postman\");",
													"        pm.expect(jsonData.description).to.eql(\"Description of qTest API - Postman\");",
													"        pm.expect(pm.response.text()).to.include(\"status_id\");",
													"        pm.expect(pm.response.text()).to.include(\"start_date\");",
													"        pm.expect(pm.response.text()).to.include(\"end_date\");",
													"        pm.expect(pm.response.text()).to.include(\"sample\");",
													"        pm.expect(pm.response.text()).to.include(\"defect_tracking_systems\");",
													"        pm.expect(pm.response.text()).to.include(\"x_explorer_access_level\");",
													"        pm.expect(pm.response.text()).to.include(\"date_format\");",
													"        pm.expect(jsonData.automation.toString()).to.eql(\"true\");",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate\", pm.environment.get(\"startDate\"));",
													"    pm.environment.set(\"projectEndDate\", pm.environment.get(\"endDate\"));",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d44c8e39-8bbc-4d5a-9cb7-72d42bf00bc7",
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\", \"{{prefixApiUser}}apiuser1@qas.com\"\n  ],\n  \"automation\": true\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get site admin id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3f8c570-1183-4d4e-9b52-314fd92af095",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Response data contains site admin user property\", function() {",
													"        pm.expect(jsonData.items[0].username).to.eql(pm.environment.get(\"username\"));",
													"        pm.expect(pm.response.text()).to.include(\"email\");",
													"        pm.expect(jsonData.items[0].first_name).to.eql(pm.environment.get(\"firstName\"));",
													"        pm.expect(jsonData.items[0].last_name).to.eql(pm.environment.get(\"lastName\"));",
													"        pm.expect(pm.response.text()).to.include(\"status\");",
													"        pm.expect(pm.response.text()).to.include(\"timezone_offset\");",
													"        pm.expect(pm.response.text()).to.include(\"country_name\");",
													"    });",
													"    ",
													"    pm.environment.set(\"siteAdminId\", jsonData.items[0].id);",
													"",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"username\": \"{{username}}\",\r\n  \"first_name\": \"{{firstName}}\",\r\n  \"last_name\": \"{{lastName}}\",\r\n  \"email\": \"{{username}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/users/search?username={{username}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"users",
												"search"
											],
											"query": [
												{
													"key": "username",
													"value": "{{username}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create Module 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7258d253-788d-4187-9298-eff9ea397734",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Repsonse body has correct module info of \" + jsonData.name, function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(\"Module 1\");",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.not.eql(null);",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 1\");",
													"    });",
													"    ",
													"    pm.environment.set(\"newModuleId1\", jsonData.id);",
													"    ",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Module 1\",\r\n  \"description\": \"Description of Module 1\",\r\n  \"shared\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get requirement fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "74239a99-31f2-4485-ac1a-650cfeb4cbce",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdReq\";",
													"    var jsonData = pm.response.json();",
													"    var fieldValueId;",
													"    var siteAdminFullName = pm.environment.get(\"firstName\") + \" \" + pm.environment.get(\"lastName\");",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                if (field.label === \"Assigned To\") {",
													"                    if(item.label === \"API User 1\"){",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"APIUser1\";",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                    }",
													"                    else if (item.label === siteAdminFullName) {",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"SiteAdminUser\";",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                    }",
													"                } else {",
													"                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                    pm.environment.set(fieldValueId, item.value);",
													"                }",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/requirements/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"requirements",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create a requirement",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec9d0a05-4324-40ef-9ad6-8d4bc9621065",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement info of \" + pm.environment.get(\"reqName\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[API User 1]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToAPIUser1\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    pm.environment.set(\"newReqId1\", jsonData.id);",
													"    pm.environment.set(\"newReqPId1\", jsonData.pid);",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a093e973-4622-4598-a927-32987be31114",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 1\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToAPIUser1}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription}}\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Add a comment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fdd67285-34b8-44d0-9d2e-5727ab662d87",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"commentId1\", jsonData.id);",
													"    pm.environment.set(\"commentInfo1\", jsonData);",
													"    ",
													"    pm.test(\"Response data has links property\", function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created property\", function () {",
													"        pm.expect(jsonData.created).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has userId property\", function () {",
													"        pm.expect(jsonData.userId).to.eql(pm.environment.get(\"siteAdminId\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has id property\", function () {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains content: \" + jsonData.content, function () {",
													"        pm.expect(jsonData.content).to.eql(pm.environment.get(\"commentContent1\"));",
													"    });",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d3c1c39e-3b85-4c0e-a7f2-cb93bb0b718d",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"commentContent1\", \"Comment 1 of Requirement 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"content\": \"{{commentContent1}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"comments"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Get comment of requirement by id - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c925e3a0-6481-4cc9-b6b1-e3c76d58761a",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(200); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var commentInfo1 = pm.environment.get(\"commentInfo1\");",
													"    ",
													"    pm.test(\"Response data has links property\", function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created property\", function () {",
													"        pm.expect(jsonData.created).to.eql(commentInfo1.created);",
													"    });",
													"    ",
													"    pm.test(\"Response data has userId property\", function () {",
													"        pm.expect(jsonData.userId).to.eql(commentInfo1.userId);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id property\", function () {",
													"        pm.expect(jsonData.id).to.eql(commentInfo1.id);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains content: \" + jsonData.content, function () {",
													"        pm.expect(jsonData.content).to.eql(pm.environment.get(\"commentContent1\"));",
													"    });",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "076717df-92c4-48e0-af03-ea199526f0a1",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/comments/{{commentId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"comments",
												"{{commentId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Get comment of requirement - Not exist projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d51d022-f89e-4c97-ba99-3bbb6c451975",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message 'Project not found'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Project not found\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "679e786b-62fb-4ea5-9740-a123381256bd",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}123/requirements/{{newReqId1}}/comments/{{commentId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}123",
												"requirements",
												"{{newReqId1}}",
												"comments",
												"{{commentId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get comment of requirement - Invalid projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ceca2e68-c512-40f4-944f-1595f1d95b7f",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message 'For input string'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"For input string\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4dcf7697-9476-487c-9161-a886f2bcc683",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}abcd/requirements/{{newReqId1}}/comments/{{commentId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}abcd",
												"requirements",
												"{{newReqId1}}",
												"comments",
												"{{commentId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Get comment of requirement - Not exist requirement Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "727ff0e7-24ae-4254-9ac2-9de937b14cb4",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'is not found!\", function() {",
													"        pm.expect(jsonData.message).to.include(\"is not found!\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4fea9081-0465-4824-9e4d-155a3e115bb6",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}123/comments/{{commentId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}123",
												"comments",
												"{{commentId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get comment of requirement - Invalid requirement Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f17723d7-5463-43f6-bf7b-83e9e055c79f",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'Wrong format for artifact id!': \", function() {",
													"        pm.expect(jsonData.message).to.eql(\"Wrong format for artifact id!\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cdf88b6b-ee58-4bba-8964-e69b6b2b11e2",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}abcd/comments/{{commentId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}abcd",
												"comments",
												"{{commentId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Get comment of requirement - Not exist comment Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6f62017-cd6a-4df5-9934-07bf43148045",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message 'Comment not found!'\", function() {",
													"        pm.expect(jsonData.message).to.eql(\"Comment not found!\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "978e08c4-b898-4799-bb67-f7630b276417",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/comments/{{commentId1}}123",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"comments",
												"{{commentId1}}123"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get comment of requirement - Invalid comment Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "69c0add4-2160-44ae-bae0-fd3009d0a257",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'Failed to convert value of type'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Failed to convert value of type\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ad3fe652-82fe-489f-ae03-8799400cc48c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/comments/{{commentId1}}abc",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"comments",
												"{{commentId1}}abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Get comment of requirement - Invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15a22683-8f15-44b4-8a1b-888a8368fb2b",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 401) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 401\", function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has error 'Invalid access token'\", function() {",
													"        pm.expect(jsonData.error_description).to.include(\"Invalid access token\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a3aa363d-c9ed-471f-af70-66a6c20fe962",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}223"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/comments/{{commentId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"comments",
												"{{commentId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Get comment of requirement by pid - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d292acd3-66dd-4e76-a7f4-925befd905d1",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(200); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var commentInfo1 = pm.environment.get(\"commentInfo1\");",
													"    ",
													"    pm.test(\"Response data has links property\", function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created property\", function () {",
													"        pm.expect(jsonData.created).to.eql(commentInfo1.created);",
													"    });",
													"    ",
													"    pm.test(\"Response data has userId property\", function () {",
													"        pm.expect(jsonData.userId).to.eql(commentInfo1.userId);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id property\", function () {",
													"        pm.expect(jsonData.id).to.eql(commentInfo1.id);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains content: \" + jsonData.content, function () {",
													"        pm.expect(jsonData.content).to.eql(pm.environment.get(\"commentContent1\"));",
													"    });",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6872ae94-c335-460b-b56f-0f7ab909a751",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqPId1}}/comments/{{commentId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqPId1}}",
												"comments",
												"{{commentId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Get comment of requirement by pid - Not exist projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d57a18c-0dc8-466f-aa9d-a455f29849c1",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message 'Project not found'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Project not found\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9bcf8451-aff9-4404-8fb5-ebf1d1b380af",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}123/requirements/{{newReqPId1}}/comments/{{commentId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}123",
												"requirements",
												"{{newReqPId1}}",
												"comments",
												"{{commentId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get comment of requirement by pid - Invalid projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78326580-9174-491d-bbc8-ab7b18f04117",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message 'For input string'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"For input string\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "72528e72-e001-45c4-9b2a-4a5e8e7ef0bd",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}abcd/requirements/{{newReqPId1}}/comments/{{commentId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}abcd",
												"requirements",
												"{{newReqPId1}}",
												"comments",
												"{{commentId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Get comment of requirement by pid - Not exist requirement Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9457e553-d7b2-488b-a170-e4bc8f554e1e",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'is not found!\", function() {",
													"        pm.expect(jsonData.message).to.include(\"is not found!\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7e207d77-4d07-4a40-a71d-3568a459a902",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqPId1}}123/comments/{{commentId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqPId1}}123",
												"comments",
												"{{commentId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get comment of requirement by pid - Invalid requirement Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "45e3b157-e09e-4422-abbc-92668e822f9b",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'Wrong format for artifact id!': \", function() {",
													"        pm.expect(jsonData.message).to.eql(\"Wrong format for artifact id!\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2d6bca1b-6dd4-45e5-8900-485801332ee7",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqPId1}}abcd/comments/{{commentId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqPId1}}abcd",
												"comments",
												"{{commentId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Get comment of requirement by pid - Not exist comment Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "060f2968-e2ba-4ae5-9464-32beca1abcc8",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message 'Comment not found!'\", function() {",
													"        pm.expect(jsonData.message).to.eql(\"Comment not found!\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "04528b13-a2ef-4a0e-a6e4-811a20cf7b0e",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqPId1}}/comments/{{commentId1}}123",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqPId1}}",
												"comments",
												"{{commentId1}}123"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get comment of requirement by pid - Invalid comment Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86d42bba-efd1-4bf2-8a1a-ccf499356082",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'Failed to convert value of type'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Failed to convert value of type\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "14183a95-fad9-4b6c-b545-c284110d7e1f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqPId1}}/comments/{{commentId1}}abc",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqPId1}}",
												"comments",
												"{{commentId1}}abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Get comment of requirement by pid - Invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ecf708c6-ab24-4ed5-9bd5-fe10e1241ad0",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 401) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 401\", function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has error 'Invalid access token'\", function() {",
													"        pm.expect(jsonData.error_description).to.include(\"Invalid access token\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e8d1d363-d44d-4d63-a767-1caaf2010262",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}223"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqPId1}}/comments/{{commentId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqPId1}}",
												"comments",
												"{{commentId1}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ec7831ae-fb63-4e73-9f57-eea4fd682722",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9871d588-6f5b-4950-b69e-261249fe74fa",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete Module 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9962eec3-ca59-42ff-bd1b-b1d6ee629659",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"newModuleId1\");",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5ed6f907-353a-49a1-bd9f-08a27613e223",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{newModuleId1}}?force=true",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{newModuleId1}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bec11e16-9be5-4e40-ac8e-db2bd63baa96",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"projectEndDate\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "99bc2227-a3e9-4da5-81fc-3ebc24b5ce02",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9b07745b-61d2-43d6-b1ff-6ac0930ab0e8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "65f69023-1016-437b-bc81-28916a9f70ec",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.environment.unset(\"siteAdminId\");",
													"    pm.environment.unset(\"userId\");",
													" ",
													"    pm.environment.unset(\"fieldIdReqStatus\");",
													"    pm.environment.unset(\"fieldIdReqStatusNew\");",
													"    pm.environment.unset(\"fieldIdReqStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdReqStatusReadyForBaseline\");",
													"    pm.environment.unset(\"fieldIdReqStatusBaselined\");",
													"    pm.environment.unset(\"fieldIdReqPriority\");",
													"    pm.environment.unset(\"fieldIdReqPriorityMusthave\");",
													"    pm.environment.unset(\"fieldIdReqPriorityShouldhave\");",
													"    pm.environment.unset(\"fieldIdReqPriorityNicetoHave\");",
													"    pm.environment.unset(\"fieldIdReqType\");",
													"    pm.environment.unset(\"fieldIdReqTypeFunctional\");",
													"    pm.environment.unset(\"fieldIdReqTypeNonfunctional\");",
													"    pm.environment.unset(\"fieldIdReqAssignedTo\");",
													"    pm.environment.unset(\"fieldIdReqAssignedToAPIUser1\");",
													"    pm.environment.unset(\"fieldIdReqAssignedToSiteAdminUser\");",
													"    pm.environment.unset(\"fieldIdReqDescription\");",
													"    ",
													"    pm.environment.unset(\"newModuleId1\");",
													"    pm.environment.unset(\"reqName\");",
													"    pm.environment.unset(\"reqDescription\");",
													"    pm.environment.unset(\"newReqId1\");",
													"    pm.environment.unset(\"newReqPId1\");",
													"    pm.environment.unset(\"commentContent1\");",
													"    pm.environment.unset(\"commentInfo1\");",
													"    pm.environment.unset(\"commentId1\");",
													"    ",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"tokenType\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"    ",
													"    pm.environment.unset(\"username1\");",
													"    pm.environment.unset(\"firstName1\");",
													"    pm.environment.unset(\"lastName1\");",
													"    pm.environment.unset(\"email1\");",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "82292cd5-2aaa-4263-bad9-b573793e5b99",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9b86678c-8b19-4f49-8bd1-163568f82573",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "de9568fc-33a0-47f5-800e-e316f6d0b2e8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cd73e73f-c630-4e3b-b3cb-55d999b30ec4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get all comment of a requirement",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9605ac47-3e20-40f9-802d-1843cc8978a2",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code + \" -  Login\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"   //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Get user id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fe7258e7-2e30-4827-aaef-d7a39a38c1ef",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Response data contains data of apiuser1@qas.com\", function() {",
													"        pm.expect(jsonData.items[0].username).to.eql(pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"        pm.expect(pm.response.text()).to.include(\"email\");",
													"        pm.expect(jsonData.items[0].first_name).to.eql(\"API\");",
													"        pm.expect(jsonData.items[0].last_name).to.eql(\"User 1\");",
													"        pm.expect(pm.response.text()).to.include(\"status\");",
													"        pm.expect(pm.response.text()).to.include(\"timezone_offset\");",
													"        pm.expect(pm.response.text()).to.include(\"country_name\");",
													"    });",
													"    ",
													"    pm.environment.set(\"userId\", jsonData.items[0].id);",
													"",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "234a338a-536a-4bf0-a7ce-c01d4e5d4ccb",
												"exec": [
													"pm.environment.set(\"username1\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"pm.environment.set(\"firstName1\", \"API\");",
													"pm.environment.set(\"lastName1\", \"User 1\");",
													"pm.environment.set(\"email1\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/users/search?username={{username1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"users",
												"search"
											],
											"query": [
												{
													"key": "username",
													"value": "{{username1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56a5555a-c243-405d-9090-9c55d95b2679",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.test(\"Response data contains all properties of project data\", function(){",
													"        pm.expect(pm.response.text()).to.include(\"id\");",
													"        pm.expect(jsonData.name).to.eql(\"qTest API - Postman\");",
													"        pm.expect(jsonData.description).to.eql(\"Description of qTest API - Postman\");",
													"        pm.expect(pm.response.text()).to.include(\"status_id\");",
													"        pm.expect(pm.response.text()).to.include(\"start_date\");",
													"        pm.expect(pm.response.text()).to.include(\"end_date\");",
													"        pm.expect(pm.response.text()).to.include(\"sample\");",
													"        pm.expect(pm.response.text()).to.include(\"defect_tracking_systems\");",
													"        pm.expect(pm.response.text()).to.include(\"x_explorer_access_level\");",
													"        pm.expect(pm.response.text()).to.include(\"date_format\");",
													"        pm.expect(jsonData.automation.toString()).to.eql(\"true\");",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate\", pm.environment.get(\"startDate\"));",
													"    pm.environment.set(\"projectEndDate\", pm.environment.get(\"endDate\"));",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2a352b52-0571-4a8c-8ac2-4f3425c95009",
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\", \"{{prefixApiUser}}apiuser1@qas.com\"\n  ],\n  \"automation\": true\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create Module 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7f902ed4-364b-41c9-84cd-4815e7a21b10",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Repsonse body has correct module info of \" + jsonData.name, function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(\"Module 1\");",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.not.eql(null);",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 1\");",
													"    });",
													"    ",
													"    pm.environment.set(\"newModuleId1\", jsonData.id);",
													"    ",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Module 1\",\r\n  \"description\": \"Description of Module 1\",\r\n  \"shared\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get requirement fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "662c674d-7541-4b6e-bd5f-e21c9c054fce",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdReq\";",
													"    var jsonData = pm.response.json();",
													"    var fieldValueId;",
													"    var siteAdminFullName = pm.environment.get(\"firstName\") + \" \" + pm.environment.get(\"lastName\");",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                if (field.label === \"Assigned To\") {",
													"                    if(item.label === \"API User 1\"){",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"APIUser1\";",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                    }",
													"                    else if (item.label === siteAdminFullName) {",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"SiteAdminUser\";",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                    }",
													"                } else {",
													"                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                    pm.environment.set(fieldValueId, item.value);",
													"                }",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/requirements/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"requirements",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create Requirement 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c841ca8f-637c-441c-9265-c752aff113fe",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement info of \" + pm.environment.get(\"reqName\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[API User 1]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToAPIUser1\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    pm.environment.set(\"newReqId1\", jsonData.id);",
													"    pm.environment.set(\"newReqPId1\", jsonData.pid);",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4b604990-cef8-49a3-8d42-251155cebaad",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 1\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToAPIUser1}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription}}\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create Requirement 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9f089391-6b1d-4d92-a4c0-4176bc9818b6",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement info of \" + pm.environment.get(\"reqName\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[API User 1]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToAPIUser1\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    pm.environment.set(\"newReqId2\", jsonData.id);",
													"    pm.environment.set(\"newReqPId2\", jsonData.pid);",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1ae704e4-c75c-4c1d-a871-b31ad80a61f1",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 2\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 2\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToAPIUser1}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription}}\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Add a comment 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "691991ec-c7d4-4b3c-b9d0-572a08260806",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"commentId1\", jsonData.id);",
													"    pm.environment.set(\"commentInfo1\", jsonData);",
													"    ",
													"    pm.test(\"Response data has links property\", function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created property\", function () {",
													"        pm.expect(jsonData.created).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has userId property\", function () {",
													"        pm.expect(jsonData.userId).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id property\", function () {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains content: \" + jsonData.content, function () {",
													"        pm.expect(jsonData.content).to.eql(pm.environment.get(\"commentContent1\"));",
													"    });",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c6634677-bf56-4627-904e-3e09fd0a8fb2",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"commentContent1\", \"Comment 1 of Requirement 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"content\": \"{{commentContent1}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Add a comment 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "394cff38-0da2-48ca-99dd-3828056431d2",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"commentId2\", jsonData.id);",
													"    pm.environment.set(\"commentInfo2\", jsonData);",
													"    ",
													"    pm.test(\"Response data has links property\", function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created property\", function () {",
													"        pm.expect(jsonData.created).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has userId property\", function () {",
													"        pm.expect(jsonData.userId).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id property\", function () {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains content: \" + jsonData.content, function () {",
													"        pm.expect(jsonData.content).to.eql(pm.environment.get(\"commentContent2\"));",
													"    });",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "60b1c441-7b94-4eb1-98a5-2d5c0c70e194",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"commentContent2\", \"Comment 2 of Requirement 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"content\": \"{{commentContent2}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"comments"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Get all comment of requirement by id - Success with requirement that are some comments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48eed5b6-f4ee-40e7-93f6-3868d8ae9647",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Response status \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has links property\", function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has page property\", function() {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has page_size property\", function() {",
													"        pm.expect(jsonData.page_size).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has total property\", function() {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    var commentInfo1 = pm.environment.get(\"commentInfo1\");",
													"    var commentInfo2 = pm.environment.get(\"commentInfo2\");",
													"    var commentInfo;",
													"    jsonData.items.forEach(function(comment, index) {",
													"        if (comment.id === commentInfo1.id) {",
													"            commentInfo = commentInfo1;",
													"        } else if (comment.id === commentInfo2.id) {",
													"            commentInfo = commentInfo2;",
													"        }",
													"        pm.test(\"Response data contains \" + commentInfo.content, function() {",
													"            pm.expect(comment.links).to.not.eql(null);",
													"            pm.expect(comment.created).to.eql(commentInfo.created);",
													"            pm.expect(comment.userId).to.eql(commentInfo.userId);",
													"            pm.expect(comment.id).to.eql(commentInfo.id);",
													"            pm.expect(comment.content).to.eql(commentInfo.content);",
													"        });",
													"    });",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1b095546-dbe1-432b-995f-fd7a2af8fb61",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Get all comment of requirement by id - With requirement that is no any comments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aacce4eb-4302-4516-9f6e-faa1e6d3ce87",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Response status \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has links property\", function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has page property\", function() {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has page_size property\", function() {",
													"        pm.expect(jsonData.page_size).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has total property\", function() {",
													"        pm.expect(jsonData.total).to.eql(0);",
													"    });",
													"",
													"    pm.test(\"Repsonse body is an empty array\", function() {",
													"        pm.expect(jsonData.items.length).to.eql(0);",
													"    });",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ce237389-5963-49f3-8e5f-f9f64772e973",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId2}}/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId2}}",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Get all comment of requirement by id - Not exist projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e058b8d6-86bb-439b-b610-d24edb58e97b",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message 'Project not found'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Project not found\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2b43c1a1-2834-4881-9899-e442f0aee011",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}123/requirements/{{newReqId1}}/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}123",
												"requirements",
												"{{newReqId1}}",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get all comment of requirement by id - Invalid projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6099e19-9c33-48c6-93e6-24938380c68e",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message 'For input string'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"For input string\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2f593be1-9860-44b4-9b70-f84de6eec519",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}abcd/requirements/{{newReqId1}}/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}abcd",
												"requirements",
												"{{newReqId1}}",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Get all comment of requirement by id - Not exist requirement Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "21cf9f4a-e74a-4af2-97fe-db64a7ea16ec",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'is not found!\", function() {",
													"        pm.expect(jsonData.message).to.include(\"is not found!\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cf0e8b13-212f-4cae-ae95-a9c89dfc382e",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}123/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}123",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get all comment of requirement by id - Invalid requirement Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fbc9a3d1-fb67-4c9d-9ce1-ec4989e5e1d8",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'Wrong format for artifact id!': \", function() {",
													"        pm.expect(jsonData.message).to.eql(\"Wrong format for artifact id!\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "57bf06a4-f519-40bb-adf2-f647254de5ea",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}abcd/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}abcd",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Get all comment of requirement by id - Invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "abc8bafa-96fa-423a-a518-6e77cc03a7f7",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 401) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 401\", function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has error 'Invalid access token'\", function() {",
													"        pm.expect(jsonData.error_description).to.include(\"Invalid access token\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "22d97d88-c14c-4902-86ba-54f95114dec9",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}223"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Get all comment of requirement by pid - Success with requirement that are some comments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "63777b1a-ad1e-40da-9261-d5c74b454f10",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Response status \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has links property\", function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has page property\", function() {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has page_size property\", function() {",
													"        pm.expect(jsonData.page_size).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has total property\", function() {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    var commentInfo1 = pm.environment.get(\"commentInfo1\");",
													"    var commentInfo2 = pm.environment.get(\"commentInfo2\");",
													"    var commentInfo;",
													"    jsonData.items.forEach(function(comment, index) {",
													"        if (comment.id === commentInfo1.id) {",
													"            commentInfo = commentInfo1;",
													"        } else if (comment.id === commentInfo2.id) {",
													"            commentInfo = commentInfo2;",
													"        }",
													"        pm.test(\"Response data contains \" + commentInfo.content, function() {",
													"            pm.expect(comment.links).to.not.eql(null);",
													"            pm.expect(comment.created).to.eql(commentInfo.created);",
													"            pm.expect(comment.userId).to.eql(commentInfo.userId);",
													"            pm.expect(comment.id).to.eql(commentInfo.id);",
													"            pm.expect(comment.content).to.eql(commentInfo.content);",
													"        });",
													"    });",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bdf38448-3c34-4ae8-87a0-00055abf9562",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqPId1}}/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqPId1}}",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Get all comment of requirement by pid - With requirement pid that is no any comments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9e9d46dd-0f96-4b4a-be56-77288076cc8b",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Response status \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has links property\", function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has page property\", function() {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has page_size property\", function() {",
													"        pm.expect(jsonData.page_size).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has total property\", function() {",
													"        pm.expect(jsonData.total).to.eql(0);",
													"    });",
													"",
													"    pm.test(\"Repsonse body is an empty array\", function() {",
													"        pm.expect(jsonData.items.length).to.eql(0);",
													"    });",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5f0f2032-5936-4863-8cae-c119636cf266",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqPId2}}/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqPId2}}",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Get all comment of requirement by pid - Not exist projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a0c25d03-cc20-40ef-ad1f-3e610b63a9a4",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message 'Project not found'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Project not found\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c85f3f27-ba86-4769-a180-2961ca6bfb7d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}123/requirements/{{newReqPId1}}/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}123",
												"requirements",
												"{{newReqPId1}}",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get all comment of requirement by pid - Invalid projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "41e761c8-c747-45a3-8f9a-17557b075c73",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message 'For input string'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"For input string\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1ba33f17-d7ff-4561-97b1-3c4a53ce1134",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}abcd/requirements/{{newReqPId1}}/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}abcd",
												"requirements",
												"{{newReqPId1}}",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Get all comment of requirement by pid - Not exist requirement PId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "57b02b9a-d87d-4f10-bb99-c465a46e20b3",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'is not found!\", function() {",
													"        pm.expect(jsonData.message).to.include(\"is not found!\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5e56fe4a-3fee-4b61-8aa2-b6ac54d2510b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqPId1}}123/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqPId1}}123",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get all comment of requirement by pid - Invalid requirement PId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "409ba933-8424-4e26-97f1-500a718c2647",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'Wrong format for artifact id!': \", function() {",
													"        pm.expect(jsonData.message).to.eql(\"Wrong format for artifact id!\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "69f9a8ae-3985-440c-979c-bd82dd065085",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqPId1}}abcd/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqPId1}}abcd",
												"comments"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "449e3234-0f35-43bc-b462-716b93765faa",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7e681a35-6e7c-4863-acb0-37311255d29e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete Module 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d40fcd99-6bbb-471a-bf5a-75c5411601f5",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"newModuleId1\");",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "83fa61e9-8c9f-4c9b-90eb-adce6904b8f9",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{newModuleId1}}?force=true",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{newModuleId1}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "817b3c17-bf6a-40e2-81fd-37aa02396147",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"projectEndDate\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a52a0ea0-c321-4986-8194-a93aa354686b",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b1856d62-5978-4895-b891-874506f4de6a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b6bd9ffc-1a76-45f6-a8c2-c937e8271a0c",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.environment.unset(\"siteAdminId\");",
													"    pm.environment.unset(\"userId\");",
													" ",
													"    pm.environment.unset(\"fieldIdReqStatus\");",
													"    pm.environment.unset(\"fieldIdReqStatusNew\");",
													"    pm.environment.unset(\"fieldIdReqStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdReqStatusReadyForBaseline\");",
													"    pm.environment.unset(\"fieldIdReqStatusBaselined\");",
													"    pm.environment.unset(\"fieldIdReqPriority\");",
													"    pm.environment.unset(\"fieldIdReqPriorityMusthave\");",
													"    pm.environment.unset(\"fieldIdReqPriorityShouldhave\");",
													"    pm.environment.unset(\"fieldIdReqPriorityNicetoHave\");",
													"    pm.environment.unset(\"fieldIdReqType\");",
													"    pm.environment.unset(\"fieldIdReqTypeFunctional\");",
													"    pm.environment.unset(\"fieldIdReqTypeNonfunctional\");",
													"    pm.environment.unset(\"fieldIdReqAssignedTo\");",
													"    pm.environment.unset(\"fieldIdReqAssignedToAPIUser1\");",
													"    pm.environment.unset(\"fieldIdReqAssignedToSiteAdminUser\");",
													"    pm.environment.unset(\"fieldIdReqDescription\");",
													"    ",
													"    pm.environment.unset(\"newModuleId1\");",
													"    pm.environment.unset(\"reqName\");",
													"    pm.environment.unset(\"reqDescription\");",
													"    pm.environment.unset(\"newReqId1\");",
													"    pm.environment.unset(\"newReqPId1\");",
													"    pm.environment.unset(\"commentContent1\");",
													"    pm.environment.unset(\"commentInfo1\");",
													"    pm.environment.unset(\"commentId1\");",
													"    pm.environment.unset(\"commentContent2\");",
													"    pm.environment.unset(\"commentInfo2\");",
													"    pm.environment.unset(\"commentId2\");",
													"    pm.environment.unset(\"newReqId2\");",
													"    pm.environment.unset(\"newReqPId2\");",
													"    ",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"tokenType\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"    ",
													"    pm.environment.unset(\"username1\");",
													"    pm.environment.unset(\"firstName1\");",
													"    pm.environment.unset(\"lastName1\");",
													"    pm.environment.unset(\"email1\");",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c49d2fb6-445a-4833-856c-a7294b036237",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "635de599-e964-4431-8213-78df8737aa50",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bae67e10-3fc2-4f33-aa9f-1789bf021ec0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bae44bc5-4eee-42e5-aa48-ca3502404d31",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update a comment of a requirement",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d065855-112d-444d-aad6-0a8191a75420",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code + \" -  Login\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"   ",
													"   //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Get user id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c39875e-24a3-483d-ae9f-8a556e7ff090",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Response data contains data of apiuser1@qas.com\", function() {",
													"        pm.expect(jsonData.items[0].username).to.eql(pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"        pm.expect(pm.response.text()).to.include(\"email\");",
													"        pm.expect(jsonData.items[0].first_name).to.eql(\"API\");",
													"        pm.expect(jsonData.items[0].last_name).to.eql(\"User 1\");",
													"        pm.expect(pm.response.text()).to.include(\"status\");",
													"        pm.expect(pm.response.text()).to.include(\"timezone_offset\");",
													"        pm.expect(pm.response.text()).to.include(\"country_name\");",
													"    });",
													"    ",
													"    pm.environment.set(\"userId\", jsonData.items[0].id);",
													"",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "68322cab-0f99-4eb1-87e4-fcc80ebb3469",
												"exec": [
													"pm.environment.set(\"username1\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"pm.environment.set(\"firstName1\", \"API\");",
													"pm.environment.set(\"lastName1\", \"User 1\");",
													"pm.environment.set(\"email1\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/users/search?username={{username1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"users",
												"search"
											],
											"query": [
												{
													"key": "username",
													"value": "{{username1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e0a366f4-9398-4db2-81bf-2c72cfaef3fd",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.test(\"Response data contains all properties of project data\", function(){",
													"        pm.expect(pm.response.text()).to.include(\"id\");",
													"        pm.expect(jsonData.name).to.eql(\"qTest API - Postman\");",
													"        pm.expect(jsonData.description).to.eql(\"Description of qTest API - Postman\");",
													"        pm.expect(pm.response.text()).to.include(\"status_id\");",
													"        pm.expect(pm.response.text()).to.include(\"start_date\");",
													"        pm.expect(pm.response.text()).to.include(\"end_date\");",
													"        pm.expect(pm.response.text()).to.include(\"sample\");",
													"        pm.expect(pm.response.text()).to.include(\"defect_tracking_systems\");",
													"        pm.expect(pm.response.text()).to.include(\"x_explorer_access_level\");",
													"        pm.expect(pm.response.text()).to.include(\"date_format\");",
													"        pm.expect(jsonData.automation.toString()).to.eql(\"true\");",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate\", pm.environment.get(\"startDate\"));",
													"    pm.environment.set(\"projectEndDate\", pm.environment.get(\"endDate\"));",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "49263178-6ef0-41aa-aea3-d4ab447ac5bf",
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\", \"{{prefixApiUser}}apiuser1@qas.com\"\n  ],\n  \"automation\": true\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create Module 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8760855a-94be-4c3f-82e7-5c9873b0076e",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Repsonse body has correct module info of \" + jsonData.name, function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(\"Module 1\");",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.not.eql(null);",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 1\");",
													"    });",
													"    ",
													"    pm.environment.set(\"newModuleId1\", jsonData.id);",
													"    ",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Module 1\",\r\n  \"description\": \"Description of Module 1\",\r\n  \"shared\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get requirement fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf7b82f2-4f29-43a7-8371-fe6f3fe75576",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdReq\";",
													"    var jsonData = pm.response.json();",
													"    var fieldValueId;",
													"    var siteAdminFullName = pm.environment.get(\"firstName\") + \" \" + pm.environment.get(\"lastName\");",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                if (field.label === \"Assigned To\") {",
													"                    if(item.label === \"API User 1\"){",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"APIUser1\";",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                    }",
													"                    else if (item.label === siteAdminFullName) {",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"SiteAdminUser\";",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                    }",
													"                } else {",
													"                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                    pm.environment.set(fieldValueId, item.value);",
													"                }",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/requirements/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"requirements",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create Requirement 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fda85e86-f58e-4a9f-b507-0e95273aa24d",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement info of \" + pm.environment.get(\"reqName\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[API User 1]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToAPIUser1\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    pm.environment.set(\"newReqId1\", jsonData.id);",
													"    pm.environment.set(\"newReqPId1\", jsonData.pid);",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "99a89877-73a2-477b-9fe0-eb3ab0ad9942",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 1\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToAPIUser1}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription}}\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Add a comment 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c158058b-28de-46fd-bdf6-226286893314",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"commentId1\", jsonData.id);",
													"    pm.environment.set(\"commentInfo1\", jsonData);",
													"    ",
													"    pm.test(\"Response data has links property\", function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created property\", function () {",
													"        pm.expect(jsonData.created).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has userId property\", function () {",
													"        pm.expect(jsonData.userId).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id property\", function () {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains content: \" + jsonData.content, function () {",
													"        pm.expect(jsonData.content).to.eql(pm.environment.get(\"commentContent1\"));",
													"    });",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4e2076c9-5ff8-4c10-91d2-5250b7c2e808",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"commentContent1\", \"Comment 1 of Requirement 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"content\": \"{{commentContent1}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"comments"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Update comment of requirement by id - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1f767d3a-e99c-46cb-91db-117dd5371820",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(200); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var commentInfo1 = pm.environment.get(\"commentInfo1\");",
													"    ",
													"    pm.test(\"Response data has links property\", function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created property\", function () {",
													"        pm.expect(jsonData.created).to.eql(commentInfo1.created);",
													"    });",
													"    ",
													"    pm.test(\"Response data has userId property\", function () {",
													"        pm.expect(jsonData.userId).to.eql(commentInfo1.userId);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id property\", function () {",
													"        pm.expect(jsonData.id).to.eql(commentInfo1.id);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains content: \" + jsonData.content, function () {",
													"        pm.expect(jsonData.content).to.eql(pm.environment.get(\"commentContent1\"));",
													"    });",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3075bc17-21cb-4895-bdff-1744f00724c3",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"commentContent1\", \"This comment is updated with id\");"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"content\": \"{{commentContent1}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/comments/{{commentId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"comments",
												"{{commentId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update comment of requirement by id - No property content",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1db70bf2-5b98-4921-acba-bf9b56bce646",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has message property contains 'content may not be blank'\", function() {",
													"        pm.expect(jsonData.message).to.eql(\"content may not be blank\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6eb7055c-502e-41c3-a8c4-1d5ba658eb88",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/comments/{{commentId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"comments",
												"{{commentId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update comment of requirement by id - Property content has empty value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0db65056-4186-4cc9-be27-fb14703f1c56",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has message property contains 'content may not be blank'\", function() {",
													"        pm.expect(jsonData.message).to.eql(\"content may not be blank\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "06c5ef87-a840-417a-85f6-7ab7f9fd03ba",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"content\": \"\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/comments/{{commentId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"comments",
												"{{commentId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update comment of requirement by id - Invalid requirement Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f2176cf4-013a-4d90-8aba-98da26e47a8c",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has message property contains 'Wrong format for artifact id!'\", function() {",
													"        pm.expect(jsonData.message).to.eql(\"Wrong format for artifact id!\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4dfb2fa6-b684-4762-a3b7-347208b93be1",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"content\": \"Comment 100\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}abcd/comments/{{commentId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}abcd",
												"comments",
												"{{commentId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Update comment of requirement by id - Not exist requirement Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd34b20c-3b7f-480c-936e-7625acb08a21",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has message property contains 'is not found!'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"is not found!\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a4fb4d39-6baf-456e-bab9-53b5d93927c7",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"content\": \"Comment 100\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}1234/comments/{{commentId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}1234",
												"comments",
												"{{commentId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Update comment of requirement by id - Not exist comment Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "26e8c47f-8503-413c-bc10-65d8322285d7",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has message property contains 'Comment not found!'\", function() {",
													"        pm.expect(jsonData.message).to.eql(\"Comment not found!\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a51c1a69-5e3d-46b1-a4ca-b45e56036245",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"content\": \"Comment 100\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/comments/{{commentId1}}1234",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"comments",
												"{{commentId1}}1234"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update comment of requirement by id - Invalid comment Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc11d300-6270-44a9-8dac-014303a1a705",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has message property contains 'Failed to convert value of type'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Failed to convert value of type\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "58f4811a-1d10-44c1-aff6-504a9d1bc02a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"content\": \"Comment 100\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/comments/{{commentId1}}abcd",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"comments",
												"{{commentId1}}abcd"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Update comment of requirement by id - Not exist projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "522b64c9-9c7b-420f-8996-9b23cc1383c0",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message 'Project not found'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Project not found\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"content\": \"Comment 100\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/0/requirements/{{newReqId1}}/comments/{{commentId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"0",
												"requirements",
												"{{newReqId1}}",
												"comments",
												"{{commentId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update comment of requirement by id - Invalid project Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3645166-b800-4c6e-91ba-9f6dc615a8b7",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'For input string'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"For input string\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"content\": \"Comment 100\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}abcd/requirements/{{newReqId1}}/comments/{{commentId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}abcd",
												"requirements",
												"{{newReqId1}}",
												"comments",
												"{{commentId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update comment of requirement by id - Missing request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15fcaa22-2949-4c69-8c90-d8944cef4789",
												"exec": [
													"const RESPONSE_CODE = 400;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"const EXPECTED_MSGS = [",
													"    \"Required request body is missing\",",
													"    \"Required request body content is missing\"];",
													"    ",
													"function validateMessage(actualMessage){",
													"    let result = false;",
													"    for(const msg of EXPECTED_MSGS) {",
													"        result = actualMessage.indexOf(msg) > -1;",
													"        if(result){",
													"            console.log(`Actual message is: ${actualMessage}`);",
													"            return result;",
													"        }",
													"    }",
													"    return result;",
													"}",
													"",
													"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"if (result) {",
													"    const jsonData = pm.response.json();",
													"    pm.test(`Response body has 'message' property value in following: '${EXPECTED_MSGS.toString()}'`, () => {",
													"        pm.expect(validateMessage(jsonData.message)).to.eql(true);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4dd8a7b0-a25a-405c-9cfd-05284964e04c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/comments/{{commentId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"comments",
												"{{commentId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Update comment of requirement by id - Invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ea91bd7-62ee-427e-bc29-3baac880ec85",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 401) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"",
													"    pm.test(\"Has 'error' in response body - error\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"error\");",
													"    });",
													"",
													"    pm.test(\"Has 'error_description' in response body - error_description: 'Invalid access token'\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"error_description\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} 1111{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"content\": \"Comment 100\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/comments/{{commentId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"comments",
												"{{commentId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Update comment of requirement by pid - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "864e4489-036d-4a0f-ac44-93fcfe4423a8",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(200); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    var commentInfo1 = pm.environment.get(\"commentInfo1\");",
													"    ",
													"    pm.test(\"Response data has links property\", function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created property\", function () {",
													"        pm.expect(jsonData.created).to.eql(commentInfo1.created);",
													"    });",
													"    ",
													"    pm.test(\"Response data has userId property\", function () {",
													"        pm.expect(jsonData.userId).to.eql(commentInfo1.userId);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id property\", function () {",
													"        pm.expect(jsonData.id).to.eql(commentInfo1.id);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains content: \" + jsonData.content, function () {",
													"        pm.expect(jsonData.content).to.eql(pm.environment.get(\"commentContent1\"));",
													"    });",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9de2082d-103f-4236-bcd0-a9f4fc8668ed",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"commentContent1\", \"This comment is updated with pid\");"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"content\": \"{{commentContent1}}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqPId1}}/comments/{{commentId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqPId1}}",
												"comments",
												"{{commentId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update comment of requirement by pid - No property content",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5534e5ec-a65f-412a-a3e2-69d44482e0de",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has message property contains 'content may not be blank'\", function() {",
													"        pm.expect(jsonData.message).to.eql(\"content may not be blank\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a4543568-9698-48ce-b036-b2c65201b40f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqPId1}}/comments/{{commentId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqPId1}}",
												"comments",
												"{{commentId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update comment of requirement by pid - Property content has empty value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f32f322d-cc56-4ea5-a125-12a42fcf7b57",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has message property contains 'content may not be blank'\", function() {",
													"        pm.expect(jsonData.message).to.eql(\"content may not be blank\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "98bfd053-f827-450b-9d5b-e630e3c6082f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"content\": \"\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqPId1}}/comments/{{commentId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqPId1}}",
												"comments",
												"{{commentId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update comment of requirement by pid - Invalid requirement Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba19f347-cae9-4414-8bdf-5b859ae1f089",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has message property contains 'Wrong format for artifact id!'\", function() {",
													"        pm.expect(jsonData.message).to.eql(\"Wrong format for artifact id!\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "eb2b1e1d-898c-4549-9691-d0fc93a41be8",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"content\": \"Comment 100\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqPId1}}abcd/comments/{{commentId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqPId1}}abcd",
												"comments",
												"{{commentId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Update comment of requirement by pid - Not exist requirement Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dfb01ced-2d51-442e-bc6a-6f465f0855b4",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has message property contains 'is not found!'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"is not found!\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "53bfb677-28cc-4ade-82e8-7882cc03e201",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"content\": \"Comment 100\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqPId1}}1234/comments/{{commentId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqPId1}}1234",
												"comments",
												"{{commentId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Update comment of requirement by pid - Not exist comment Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c59efc4a-1e2f-4936-afe9-1cb1d82d589b",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has message property contains 'Comment not found!'\", function() {",
													"        pm.expect(jsonData.message).to.eql(\"Comment not found!\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7ee0b9f1-4e55-44e7-aded-b2c88409a4f3",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"content\": \"Comment 100\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqPId1}}/comments/{{commentId1}}1234",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqPId1}}",
												"comments",
												"{{commentId1}}1234"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update comment of requirement by pid - Invalid comment Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7f9ebb96-9f8a-4543-9063-77f41e486956",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has message property contains 'Failed to convert value of type'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Failed to convert value of type\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e8b29512-ef21-4728-b35b-f8bcb21cf8bb",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"content\": \"Comment 100\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/comments/{{commentId1}}abcd",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"comments",
												"{{commentId1}}abcd"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Update comment of requirement by pid - Not exist projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e47c5d3f-0b44-4bf9-9ca5-50160349c5cb",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message 'Project not found'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Project not found\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"content\": \"Comment 100\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/0/requirements/{{newReqPId1}}/comments/{{commentId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"0",
												"requirements",
												"{{newReqPId1}}",
												"comments",
												"{{commentId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update comment of requirement by pid - Invalid project Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a21c68e6-c625-4a93-996a-c75f97ec0f6f",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'For input string'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"For input string\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"content\": \"Comment 100\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}abcd/requirements/{{newReqPId1}}/comments/{{commentId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}abcd",
												"requirements",
												"{{newReqPId1}}",
												"comments",
												"{{commentId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update comment of requirement by pid - Missing request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ccade09-0f7e-4afd-9c63-91281141abb8",
												"exec": [
													"const RESPONSE_CODE = 400;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"const EXPECTED_MSGS = [",
													"    \"Required request body is missing\",",
													"    \"Required request body content is missing\"];",
													"    ",
													"function validateMessage(actualMessage){",
													"    let result = false;",
													"    for(const msg of EXPECTED_MSGS) {",
													"        result = actualMessage.indexOf(msg) > -1;",
													"        if(result){",
													"            console.log(`Actual message is: ${actualMessage}`);",
													"            return result;",
													"        }",
													"    }",
													"    return result;",
													"}",
													"",
													"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"if (result) {",
													"    const jsonData = pm.response.json();",
													"    pm.test(`Response body has 'message' property value in following: '${EXPECTED_MSGS.toString()}'`, () => {",
													"        pm.expect(validateMessage(jsonData.message)).to.eql(true);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "59f4f5a2-031b-48dd-8ea6-b89e5076e099",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqPId1}}/comments/{{commentId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqPId1}}",
												"comments",
												"{{commentId1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete Module 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e8093b3-0510-455c-8928-7ceee29ed553",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"newModuleId1\");",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0a9dcba5-424f-4fb5-a90d-e041bb3dbf7f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{newModuleId1}}?force=true",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{newModuleId1}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d1938fa5-6089-48ca-a512-95333dd8b3c1",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"projectEndDate\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "94623ed9-de70-4408-b986-fce9dcd51b34",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e7a5966e-233a-4a79-ad25-4a4077780ce6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9102e452-f852-4b1d-ac37-5c3090e48a2c",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.environment.unset(\"siteAdminId\");",
													"    pm.environment.unset(\"userId\");",
													" ",
													"    pm.environment.unset(\"fieldIdReqStatus\");",
													"    pm.environment.unset(\"fieldIdReqStatusNew\");",
													"    pm.environment.unset(\"fieldIdReqStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdReqStatusReadyForBaseline\");",
													"    pm.environment.unset(\"fieldIdReqStatusBaselined\");",
													"    pm.environment.unset(\"fieldIdReqPriority\");",
													"    pm.environment.unset(\"fieldIdReqPriorityMusthave\");",
													"    pm.environment.unset(\"fieldIdReqPriorityShouldhave\");",
													"    pm.environment.unset(\"fieldIdReqPriorityNicetoHave\");",
													"    pm.environment.unset(\"fieldIdReqType\");",
													"    pm.environment.unset(\"fieldIdReqTypeFunctional\");",
													"    pm.environment.unset(\"fieldIdReqTypeNonfunctional\");",
													"    pm.environment.unset(\"fieldIdReqAssignedTo\");",
													"    pm.environment.unset(\"fieldIdReqAssignedToAPIUser1\");",
													"    pm.environment.unset(\"fieldIdReqAssignedToSiteAdminUser\");",
													"    pm.environment.unset(\"fieldIdReqDescription\");",
													"    ",
													"    pm.environment.unset(\"newModuleId1\");",
													"    pm.environment.unset(\"reqName\");",
													"    pm.environment.unset(\"reqDescription\");",
													"    pm.environment.unset(\"newReqId1\");",
													"    pm.environment.unset(\"newReqPId1\");",
													"    pm.environment.unset(\"commentContent1\");",
													"    pm.environment.unset(\"commentInfo1\");",
													"    pm.environment.unset(\"commentId1\");",
													"    ",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"tokenType\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"    ",
													"    pm.environment.unset(\"username1\");",
													"    pm.environment.unset(\"firstName1\");",
													"    pm.environment.unset(\"lastName1\");",
													"    pm.environment.unset(\"email1\");",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bf522293-f215-44e5-8dec-4fdbc7e81713",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7f6268ce-929d-4353-88c4-543c83e70de2",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete a comment of requirement",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "428b717a-8b88-4faa-a23b-7e923eddcc92",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code + \" -  Login\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"   ",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Get user id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d238fe5-7526-49e1-b3d1-3a6bcae9d754",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Response data contains data of apiuser1@qas.com\", function() {",
													"        pm.expect(jsonData.items[0].username).to.eql(pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"        pm.expect(pm.response.text()).to.include(\"email\");",
													"        pm.expect(jsonData.items[0].first_name).to.eql(\"API\");",
													"        pm.expect(jsonData.items[0].last_name).to.eql(\"User 1\");",
													"        pm.expect(pm.response.text()).to.include(\"status\");",
													"        pm.expect(pm.response.text()).to.include(\"timezone_offset\");",
													"        pm.expect(pm.response.text()).to.include(\"country_name\");",
													"    });",
													"    ",
													"    pm.environment.set(\"userId\", jsonData.items[0].id);",
													"",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9bd7b839-0d96-4c5d-bc61-de1126bd2de2",
												"exec": [
													"pm.environment.set(\"username1\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"pm.environment.set(\"firstName1\", \"API\");",
													"pm.environment.set(\"lastName1\", \"User 1\");",
													"pm.environment.set(\"email1\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/users/search?username={{username1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"users",
												"search"
											],
											"query": [
												{
													"key": "username",
													"value": "{{username1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e709096-1345-45ba-a036-49b1588558a7",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.test(\"Response data contains all properties of project data\", function(){",
													"        pm.expect(pm.response.text()).to.include(\"id\");",
													"        pm.expect(jsonData.name).to.eql(\"qTest API - Postman\");",
													"        pm.expect(jsonData.description).to.eql(\"Description of qTest API - Postman\");",
													"        pm.expect(pm.response.text()).to.include(\"status_id\");",
													"        pm.expect(pm.response.text()).to.include(\"start_date\");",
													"        pm.expect(pm.response.text()).to.include(\"end_date\");",
													"        pm.expect(pm.response.text()).to.include(\"sample\");",
													"        pm.expect(pm.response.text()).to.include(\"defect_tracking_systems\");",
													"        pm.expect(pm.response.text()).to.include(\"x_explorer_access_level\");",
													"        pm.expect(pm.response.text()).to.include(\"date_format\");",
													"        pm.expect(jsonData.automation.toString()).to.eql(\"true\");",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate\", pm.environment.get(\"startDate\"));",
													"    pm.environment.set(\"projectEndDate\", pm.environment.get(\"endDate\"));",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6160fce9-b6fa-4f4e-9e82-bc02b9d85072",
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\", \"{{prefixApiUser}}apiuser1@qas.com\"\n  ],\n  \"automation\": true\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create Module 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c16be0c-df86-4703-8db5-e7636ea6def7",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Repsonse body has correct module info of \" + jsonData.name, function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(\"Module 1\");",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.not.eql(null);",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 1\");",
													"    });",
													"    ",
													"    pm.environment.set(\"newModuleId1\", jsonData.id);",
													"    ",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Module 1\",\r\n  \"description\": \"Description of Module 1\",\r\n  \"shared\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get requirement fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ffaabc0d-5fb5-4ae8-b32c-b47d419fff92",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdReq\";",
													"    var jsonData = pm.response.json();",
													"    var fieldValueId;",
													"    var siteAdminFullName = pm.environment.get(\"firstName\") + \" \" + pm.environment.get(\"lastName\");",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                if (field.label === \"Assigned To\") {",
													"                    if(item.label === \"API User 1\"){",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"APIUser1\";",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                    }",
													"                    else if (item.label === siteAdminFullName) {",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"SiteAdminUser\";",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                    }",
													"                } else {",
													"                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                    pm.environment.set(fieldValueId, item.value);",
													"                }",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/requirements/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"requirements",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create Requirement 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3fc921ea-9ce2-4008-9fd5-3cd1777a7b94",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement info of \" + pm.environment.get(\"reqName\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[API User 1]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToAPIUser1\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    pm.environment.set(\"newReqId1\", jsonData.id);",
													"    pm.environment.set(\"newReqPId1\", jsonData.pid);",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8ea53655-ced5-4437-861f-419a47d6da32",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 1\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToAPIUser1}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription}}\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Add a comment 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3b286de-3187-445b-b37a-69cfa66f489c",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"commentId1\", jsonData.id);",
													"    pm.environment.set(\"commentInfo1\", jsonData);",
													"    ",
													"    pm.test(\"Response data has links property\", function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created property\", function () {",
													"        pm.expect(jsonData.created).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has userId property\", function () {",
													"        pm.expect(jsonData.userId).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id property\", function () {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains content: \" + jsonData.content, function () {",
													"        pm.expect(jsonData.content).to.eql(pm.environment.get(\"commentContent1\"));",
													"    });",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6d853a33-efb1-4f1a-a6b0-7be58e74c34a",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"commentContent1\", \"Comment 1 of Requirement 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"content\": \"{{commentContent1}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Add a comment 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4632ea51-f8ab-4a8c-b6a4-444da219effa",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"commentId2\", jsonData.id);",
													"    pm.environment.set(\"commentInfo2\", jsonData);",
													"    ",
													"    pm.test(\"Response data has links property\", function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created property\", function () {",
													"        pm.expect(jsonData.created).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has userId property\", function () {",
													"        pm.expect(jsonData.userId).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id property\", function () {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains content: \" + jsonData.content, function () {",
													"        pm.expect(jsonData.content).to.eql(pm.environment.get(\"commentContent2\"));",
													"    });",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "60cae8d9-13d7-462f-ab93-7bef55747f7d",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"commentContent2\", \"Comment 2 of Requirement 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"content\": \"{{commentContent2}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Add a comment 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0dc5a544-626c-4844-8c11-3c4f373c0eaf",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"commentId3\", jsonData.id);",
													"    pm.environment.set(\"commentInfo3\", jsonData);",
													"    ",
													"    pm.test(\"Response data has links property\", function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created property\", function () {",
													"        pm.expect(jsonData.created).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has userId property\", function () {",
													"        pm.expect(jsonData.userId).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id property\", function () {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains content: \" + jsonData.content, function () {",
													"        pm.expect(jsonData.content).to.eql(pm.environment.get(\"commentContent3\"));",
													"    });",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f809213e-5cdc-49de-8099-e9a89600d998",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"commentContent3\", \"Comment 3 of Requirement 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"content\": \"{{commentContent3}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"comments"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Delete comment of requirement by id - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cee46ffa-b0a8-4fdc-858f-47a7e6e26866",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "50a9cc7d-0905-4de3-93b2-a826464ddfd9",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/comments/{{commentId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"comments",
												"{{commentId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Delete comment of requirement by id - Not exist project Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3dab5e7c-51c9-4e8b-b5a0-f7750a3dbb87",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"    ",
													"    pm.test(\"Response body has message contains 'Project not found'\", function() {",
													"       pm.expect(jsonData.message).to.include(\"Project not found\"); ",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4cdd435a-bdc3-4778-9f48-768dd769d937",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}1234/requirements/{{newReqId1}}/comments/{{commentId3}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}1234",
												"requirements",
												"{{newReqId1}}",
												"comments",
												"{{commentId3}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Delete comment of requirement by id - Invalid project Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a0855f37-0e80-481f-9e2f-63f3f1751681",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"    ",
													"    pm.test(\"Response body has message contains 'For input string'\", function() {",
													"       pm.expect(jsonData.message).to.include(\"For input string\"); ",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a4fa898a-88f0-4e53-8a6e-f9ae9b91933c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}abcd/requirements/{{newReqId1}}/comments/{{commentId3}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}abcd",
												"requirements",
												"{{newReqId1}}",
												"comments",
												"{{commentId3}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Delete comment of requirement by id - Not exist requirement Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2757471-cd28-4749-9e6c-0acafab80b5d",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has json property 'message' contains 'is not found!'\", function() {",
													"        var jsonData = pm.response.json();",
													"        pm.expect(jsonData.message).to.include(\"is not found!\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "88f4f77b-5187-4ec3-829d-3a7489e44ac0",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/1/comments/{{commentId3}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"1",
												"comments",
												"{{commentId3}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Delete comment of requirement by id - Invalid requirement Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e000d147-9eb0-4152-87cc-dc207792a1ae",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response body has message contains 'Wrong format for artifact id!'\", function() {",
													"        pm.expect(jsonData.message).to.eql(\"Wrong format for artifact id!\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b3393aa4-eefc-412a-85ca-a4c6e83aba51",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/a21/comments/{{commentId3}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"a21",
												"comments",
												"{{commentId3}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Delete comment of requirement by id - Not exist comment Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aae431c6-bcd7-4e92-ae01-378cb47194bc",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has json property 'message' contains 'Comment not found!'\", function() {",
													"        var jsonData = pm.response.json();",
													"        pm.expect(jsonData.message).to.eql(\"Comment not found!\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "85e516ab-a6e5-4456-a3c9-5093b26387e2",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/comments/{{commentId3}}123",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"comments",
												"{{commentId3}}123"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Delete comment of requirement by id - Invalid comment Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "53a0c7ce-df17-48e0-b033-682602809913",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has json property 'message' contains 'Failed to convert value of type'\", function() {",
													"        var jsonData = pm.response.json();",
													"        pm.expect(jsonData.message).to.include(\"Failed to convert value of type\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2a7003ab-b66e-4430-83f4-5a70f3ee4d87",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/comments/{{commentId3}}abcd",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"comments",
												"{{commentId3}}abcd"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Delete comment of requirement by id - Invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "752b5f95-e1ea-4e6b-8f8a-e3b39fe8aa0b",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 401) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"",
													"    pm.test(\"Has 'error' in response body - error: \" + jsonData.error, function() {",
													"        pm.expect(pm.response.text()).to.include(\"error\");",
													"    })",
													"",
													"    pm.test(\"Has 'error_description' in response body - error_description: 'Invalid access token'\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"error_description\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} 1111{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/comments/{{commentId3}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"comments",
												"{{commentId3}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Delete comment of requirement by pid - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ce28f610-8984-43db-97aa-3c92b5e64656",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1b72bd9c-9b92-4507-9eda-4fa379e1b58a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqPId1}}/comments/{{commentId2}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqPId1}}",
												"comments",
												"{{commentId2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Delete comment of requirement by pid - Not exist project Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92e3c96f-07c7-49a0-aed9-52c8b5f06ca8",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"    ",
													"    pm.test(\"Response body has message contains 'Project not found'\", function() {",
													"       pm.expect(jsonData.message).to.include(\"Project not found\"); ",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "73ce1df3-9cab-4daf-9012-ce1aec64fef3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}1234/requirements/{{newReqPId1}}/comments/{{commentId3}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}1234",
												"requirements",
												"{{newReqPId1}}",
												"comments",
												"{{commentId3}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Delete comment of requirement by pid - Invalid project Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9fd05ce6-f332-4984-a88f-1ed81db13f8c",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"    ",
													"    pm.test(\"Response body has message contains 'For input string'\", function() {",
													"       pm.expect(jsonData.message).to.include(\"For input string\"); ",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c64bb797-6895-458c-be26-c69d417af69a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}abcd/requirements/{{newReqPId1}}/comments/{{commentId3}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}abcd",
												"requirements",
												"{{newReqPId1}}",
												"comments",
												"{{commentId3}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Delete comment of requirement by pid - Not exist comment Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1579b587-af84-4806-b80c-f50f0bd9dac2",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has json property 'message' contains 'Comment not found!'\", function() {",
													"        var jsonData = pm.response.json();",
													"        pm.expect(jsonData.message).to.eql(\"Comment not found!\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "abb20ae1-af31-4f9e-bf3d-5dc3812d5674",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqPId1}}/comments/{{commentId3}}123",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqPId1}}",
												"comments",
												"{{commentId3}}123"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Delete comment of requirement by pid - Invalid comment Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b992993c-0069-4338-b37d-79b6ea9f37be",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has json property 'message' contains 'Failed to convert value of type'\", function() {",
													"        var jsonData = pm.response.json();",
													"        pm.expect(jsonData.message).to.include(\"Failed to convert value of type\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0f1c3bd5-5ef5-42ed-8110-b274109277ed",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqPId1}}/comments/{{commentId3}}abcd",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqPId1}}",
												"comments",
												"{{commentId3}}abcd"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete Module 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2796f738-7c84-4753-b39f-9cb717258e29",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"newModuleId1\");",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "54c85751-c799-4580-ac23-4d523d1403fd",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{newModuleId1}}?force=true",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{newModuleId1}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e54fc1b6-c781-4b4a-a337-8a57e660a50e",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"projectEndDate\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2fa7e4b2-e9e8-4da8-8f8b-26641fc1dacb",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2991afc7-a90f-4948-92ba-35d5b3fa6dba",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "41cf58d2-f84b-4726-992c-4647f8c8968e",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.environment.unset(\"siteAdminId\");",
													"    pm.environment.unset(\"userId\");",
													" ",
													"    pm.environment.unset(\"fieldIdReqStatus\");",
													"    pm.environment.unset(\"fieldIdReqStatusNew\");",
													"    pm.environment.unset(\"fieldIdReqStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdReqStatusReadyForBaseline\");",
													"    pm.environment.unset(\"fieldIdReqStatusBaselined\");",
													"    pm.environment.unset(\"fieldIdReqPriority\");",
													"    pm.environment.unset(\"fieldIdReqPriorityMusthave\");",
													"    pm.environment.unset(\"fieldIdReqPriorityShouldhave\");",
													"    pm.environment.unset(\"fieldIdReqPriorityNicetoHave\");",
													"    pm.environment.unset(\"fieldIdReqType\");",
													"    pm.environment.unset(\"fieldIdReqTypeFunctional\");",
													"    pm.environment.unset(\"fieldIdReqTypeNonfunctional\");",
													"    pm.environment.unset(\"fieldIdReqAssignedTo\");",
													"    pm.environment.unset(\"fieldIdReqAssignedToAPIUser1\");",
													"    pm.environment.unset(\"fieldIdReqAssignedToSiteAdminUser\");",
													"    pm.environment.unset(\"fieldIdReqDescription\");",
													"    ",
													"    pm.environment.unset(\"newModuleId1\");",
													"    pm.environment.unset(\"reqName\");",
													"    pm.environment.unset(\"reqDescription\");",
													"    pm.environment.unset(\"newReqId1\");",
													"    pm.environment.unset(\"newReqPId1\");",
													"    pm.environment.unset(\"commentContent1\");",
													"    pm.environment.unset(\"commentInfo1\");",
													"    pm.environment.unset(\"commentId1\");",
													"    pm.environment.unset(\"commentContent2\");",
													"    pm.environment.unset(\"commentInfo2\");",
													"    pm.environment.unset(\"commentId2\");",
													"    pm.environment.unset(\"commentContent3\");",
													"    pm.environment.unset(\"commentInfo3\");",
													"    pm.environment.unset(\"commentId3\");",
													"    ",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"tokenType\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"    ",
													"    pm.environment.unset(\"username1\");",
													"    pm.environment.unset(\"firstName1\");",
													"    pm.environment.unset(\"lastName1\");",
													"    pm.environment.unset(\"email1\");",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d9fbfa3b-e57b-4c63-b4c0-f9a32d296cdc",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3f265e3e-06af-4264-a035-daa8518debd6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4803caf0-0177-4414-a8a1-f0dc705eabd2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "54a289ab-b01a-43d4-884b-0ede21209b24",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get requirement tracability matrix report",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a79c5dd4-7357-42c2-b214-e2222d6692a3",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code + \" -  Login\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Get user id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1de5291c-c422-4b42-96ba-6b0ff0161a49",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Response data contains data of apiuser1@qas.com\", function() {",
													"        pm.expect(jsonData.items[0].username).to.eql(pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"        pm.expect(pm.response.text()).to.include(\"email\");",
													"        pm.expect(jsonData.items[0].first_name).to.eql(\"API\");",
													"        pm.expect(jsonData.items[0].last_name).to.eql(\"User 1\");",
													"        pm.expect(pm.response.text()).to.include(\"status\");",
													"        pm.expect(pm.response.text()).to.include(\"timezone_offset\");",
													"        pm.expect(pm.response.text()).to.include(\"country_name\");",
													"    });",
													"    ",
													"    pm.environment.set(\"userId\", jsonData.items[0].id);",
													"",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6ee5b2c7-9e90-4733-a34c-2a847a347f81",
												"exec": [
													"pm.environment.set(\"username1\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"pm.environment.set(\"firstName1\", \"API\");",
													"pm.environment.set(\"lastName1\", \"User 1\");",
													"pm.environment.set(\"email1\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/users/search?username={{username1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"users",
												"search"
											],
											"query": [
												{
													"key": "username",
													"value": "{{username1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "034d7e9e-65bd-4aae-9e28-740e75be7690",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.test(\"Response data contains all properties of project data\", function(){",
													"        pm.expect(pm.response.text()).to.include(\"id\");",
													"        pm.expect(jsonData.name).to.eql(\"qTest API - Postman\");",
													"        pm.expect(jsonData.description).to.eql(\"Description of qTest API - Postman\");",
													"        pm.expect(pm.response.text()).to.include(\"status_id\");",
													"        pm.expect(pm.response.text()).to.include(\"start_date\");",
													"        pm.expect(pm.response.text()).to.include(\"end_date\");",
													"        pm.expect(pm.response.text()).to.include(\"sample\");",
													"        pm.expect(pm.response.text()).to.include(\"defect_tracking_systems\");",
													"        pm.expect(pm.response.text()).to.include(\"x_explorer_access_level\");",
													"        pm.expect(pm.response.text()).to.include(\"date_format\");",
													"        pm.expect(jsonData.automation.toString()).to.eql(\"true\");",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate\", pm.environment.get(\"startDate\"));",
													"    pm.environment.set(\"projectEndDate\", pm.environment.get(\"endDate\"));",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "10afc4e1-6db6-4666-a9ef-adf6cd784b74",
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\", \"{{prefixApiUser}}apiuser1@qas.com\"\n  ],\n  \"automation\": true\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create Module 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "213d5f12-508f-44f4-9af7-da087c28affc",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Repsonse body has correct module info of \" + jsonData.name, function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(\"Module 1\");",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.not.eql(null);",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 1\");",
													"    });",
													"    ",
													"    pm.environment.set(\"newModuleId1\", jsonData.id);",
													"    pm.environment.set(\"moduleInfo1\", jsonData);",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Module 1\",\r\n  \"description\": \"Description of Module 1\",\r\n  \"shared\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create Module 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "85bc2039-56e3-4e11-ae6e-74ca129c1017",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Repsonse body has correct module info of \" + jsonData.name, function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(\"Module 2\");",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.not.eql(null);",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 2\");",
													"    });",
													"    ",
													"    pm.environment.set(\"newModuleId2\", jsonData.id);",
													"    pm.environment.set(\"moduleInfo2\", jsonData);",
													"    ",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Module 2\",\r\n  \"description\": \"Description of Module 2\",\r\n  \"shared\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create Module 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44d297bc-cc09-4e97-8df7-4442c90d053e",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, function () {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Repsonse body has correct module info of \" + jsonData.name, function () {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(\"Module 3\");",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.not.eql(null);",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 3\");",
													"    });",
													"    ",
													"    pm.environment.set(\"newModuleId3\", jsonData.id);",
													"    pm.environment.set(\"moduleInfo3\", jsonData);",
													"    ",
													"} else {",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"Module 3\",\r\n  \"description\": \"Description of Module 3\",\r\n  \"shared\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get requirement fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "63309411-5f2c-4e37-9b5b-312b71ab96fd",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdReq\";",
													"    var jsonData = pm.response.json();",
													"    var fieldValueId;",
													"    var siteAdminFullName = pm.environment.get(\"firstName\") + \" \" + pm.environment.get(\"lastName\");",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                if (field.label === \"Assigned To\") {",
													"                    if(item.label === \"API User 1\"){",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"APIUser1\";",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                    }",
													"                    else if (item.label === siteAdminFullName) {",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"SiteAdminUser\";",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                    }",
													"                } else {",
													"                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                    pm.environment.set(fieldValueId, item.value);",
													"                }",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/requirements/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"requirements",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create requirement 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c62ad669-b3e5-408c-a7d2-72eec87a783d",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement info of \" + pm.environment.get(\"reqName\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[API User 1]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToAPIUser1\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    pm.environment.set(\"reqInfo1\", jsonData);",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2787de00-7255-4a1f-82eb-42843e2538ea",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 1\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToAPIUser1}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription}}\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create requirement 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95087e9d-a89c-4f5e-8859-785483d5a232",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement info of \" + pm.environment.get(\"reqName\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[API User 1]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToAPIUser1\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    pm.environment.set(\"reqInfo2\", jsonData);",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1c333a3a-ff5b-456f-8e25-d43b1221d610",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 2\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 2\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToAPIUser1}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription}}\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create requirement 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a52fad18-9983-40b1-844e-3b0b31498286",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement info of \" + pm.environment.get(\"reqName\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[API User 1]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToAPIUser1\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    pm.environment.set(\"reqInfo3\", jsonData);",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bf7fc048-fba2-4b38-85c5-131d23cfb843",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 3\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 3\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToAPIUser1}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription}}\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create requirement 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b008d9b6-870c-49ef-ad54-4c5529082930",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement info of \" + pm.environment.get(\"reqName\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId2\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[API User 1]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToAPIUser1\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    pm.environment.set(\"reqInfo4\", jsonData);",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "217bf393-5610-40ad-a554-a7036fe76a13",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 4\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 4\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToAPIUser1}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription}}\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId2}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId2}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create requirement 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87c7470a-fd9d-41eb-9ba1-96d746977b20",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct requirement info of \" + pm.environment.get(\"reqName\"), function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId2\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to property \", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"[API User 1]\");",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToAPIUser1\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    pm.environment.set(\"reqInfo5\", jsonData);",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bfc215b5-74e0-45cd-8037-60f2701c6e1c",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 5\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 5\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n\t\"properties\": [\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqStatus}}\",\n\t    \t\"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqPriority}}\",\n\t    \t\"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqType}}\",\n\t    \t\"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqAssignedTo}}\",\n\t    \t\"field_value\": \"[{{fieldIdReqAssignedToAPIUser1}}]\"\n\t\t},\n\t\t{\n\t    \t\"field_id\": \"{{fieldIdReqDescription}}\",\n\t    \t\"field_value\": \"{{reqDescription}}\"\n\t\t}\n\t]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId2}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId2}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Get requirement tracability matrix report - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ae685f8-d433-4352-b80b-0d09ad65724a",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    var moduleInfo1 = pm.environment.get(\"moduleInfo1\");",
													"    var moduleInfo2 = pm.environment.get(\"moduleInfo2\");",
													"    var moduleInfo3 = pm.environment.get(\"moduleInfo3\");",
													"    var moduleInfo, totalReq;",
													"    var hasModule3 = false;",
													"",
													"    var reqInfo1 = pm.environment.get(\"reqInfo1\");",
													"    var reqInfo2 = pm.environment.get(\"reqInfo2\");",
													"    var reqInfo3 = pm.environment.get(\"reqInfo3\");",
													"    var reqInfo4 = pm.environment.get(\"reqInfo4\");",
													"    var reqInfo5 = pm.environment.get(\"reqInfo5\");",
													"    var reqInfo;",
													"",
													"    jsonData.forEach(function(module, index) {",
													"        if (module.id === moduleInfo1.id) {",
													"            moduleInfo = moduleInfo1;",
													"            totalReq = 3;",
													"        } else if (module.id === moduleInfo2.id) {",
													"            moduleInfo = moduleInfo2;",
													"            totalReq = 2",
													"        } else if (module.id === moduleInfo3.id) {",
													"            moduleInfo = moduleInfo3;",
													"            hasModule3 = true;",
													"        }",
													"",
													"        pm.test(\"Response data contains \" + moduleInfo.name, function() {",
													"            pm.expect(module.id).to.eql(moduleInfo.id);",
													"            pm.expect(module.name).to.eql(moduleInfo.name);",
													"            pm.expect(module.order).to.not.eql(null);",
													"        });",
													"",
													"        pm.test(\"Response data of \" + moduleInfo.name + \" contains children property\", function() {",
													"            pm.expect(module.children.length).to.eql(0);",
													"        });",
													"",
													"        pm.test(\"Response data of \" + moduleInfo.name + \" has \" + module.requirements.length + \" requirements property\", function() {",
													"            pm.expect(module.requirements.length).to.eql(totalReq);",
													"        });",
													"",
													"        module.requirements.forEach(function(requirement) {",
													"            if (requirement.id === reqInfo1.pid) {",
													"                reqInfo = reqInfo1;",
													"            } else if (requirement.id === reqInfo2.pid) {",
													"                reqInfo = reqInfo2;",
													"            } else if (requirement.id === reqInfo3.pid) {",
													"                reqInfo = reqInfo3;",
													"            } else if (requirement.id === reqInfo4.pid) {",
													"                reqInfo = reqInfo4;",
													"            } else if (requirement.id === reqInfo5.pid) {",
													"                reqInfo = reqInfo5;",
													"            }",
													"",
													"            pm.test(\"Response data contains requirement : \" + requirement.name, function() {",
													"                pm.expect(requirement.name).to.eql(reqInfo.name);",
													"                pm.expect(requirement.id).to.eql(reqInfo.pid);",
													"            });",
													"        });",
													"    });",
													"    pm.test(`Response data ${hasModule3 ? ' contains ' : ' does not contain empty ' + ' Module 3'}`, () => {",
													"    });",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "96b5c8b9-8ce2-4d2e-8a50-1e00e4142100",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/trace-matrix-report",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"trace-matrix-report"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Get requirement tracability matrix report - Success with page and size",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "848e1df5-c280-40ec-8f09-9b56a80732b2",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    var moduleInfo1 = pm.environment.get(\"moduleInfo1\");",
													"    var moduleInfo2 = pm.environment.get(\"moduleInfo2\");",
													"    var moduleInfo3 = pm.environment.get(\"moduleInfo3\");",
													"    var moduleInfo, totalReq;",
													"    var hasModule3 = false;",
													"    ",
													"    var reqInfo1 = pm.environment.get(\"reqInfo1\");",
													"    var reqInfo2 = pm.environment.get(\"reqInfo2\");",
													"    var reqInfo3 = pm.environment.get(\"reqInfo3\");",
													"    var reqInfo4 = pm.environment.get(\"reqInfo4\");",
													"    var reqInfo5 = pm.environment.get(\"reqInfo5\");",
													"    var reqInfo;",
													"",
													"    jsonData.forEach(function(module, index) {",
													"        if (module.id === moduleInfo1.id) {",
													"            moduleInfo = moduleInfo1;",
													"            totalReq = 1;",
													"        } else if (module.id === moduleInfo2.id) {",
													"            moduleInfo = moduleInfo2;",
													"            totalReq = 1",
													"        } else if (module.id === moduleInfo3.id) {",
													"            moduleInfo = moduleInfo3;",
													"            hasModule3 = true;",
													"        }",
													"",
													"        pm.test(\"Response data contains \" + moduleInfo.name, function() {",
													"            pm.expect(module.id).to.eql(moduleInfo.id);",
													"            pm.expect(module.name).to.eql(moduleInfo.name);",
													"            pm.expect(module.order).to.not.eql(null);",
													"        });",
													"",
													"        pm.test(\"Response data of \" + moduleInfo.name + \" contains children property\", function() {",
													"            pm.expect(module.children.length).to.eql(0);",
													"        });",
													"",
													"        pm.test(\"Response data of \" + moduleInfo.name + \" has \" + module.requirements.length + \" requirements property\", function() {",
													"            pm.expect(module.requirements.length).to.eql(totalReq);",
													"        });",
													"",
													"        module.requirements.forEach(function(requirement) {",
													"            if (requirement.id === reqInfo1.pid) {",
													"                reqInfo = reqInfo1;",
													"            } else if (requirement.id === reqInfo2.pid) {",
													"                reqInfo = reqInfo2;",
													"            } else if (requirement.id === reqInfo3.pid) {",
													"                reqInfo = reqInfo3;",
													"            } else if (requirement.id === reqInfo4.pid) {",
													"                reqInfo = reqInfo4;",
													"            } else if (requirement.id === reqInfo5.pid) {",
													"                reqInfo = reqInfo5;",
													"            }",
													"",
													"            pm.test(\"Response data contains requirement : \" + requirement.name, function() {",
													"                pm.expect(requirement.name).to.eql(reqInfo.name);",
													"                pm.expect(requirement.id).to.eql(reqInfo.pid);",
													"            });",
													"        });",
													"    });",
													"    pm.test(`Response data ${hasModule3 ? ' contains ' : ' does not contain empty ' + ' Module 3'}`, () => {});",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "eb0ded68-8bfb-42fb-a428-fcb2b00cb212",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/trace-matrix-report?page=2&size=2",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"trace-matrix-report"
											],
											"query": [
												{
													"key": "page",
													"value": "2"
												},
												{
													"key": "size",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get requirement tracability matrix report - Page less than 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a1f00f5-973c-43cb-a2a8-087b50fbcdab",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message 'Page index must not be less than zero!'\", function() {",
													"        pm.expect(jsonData.message).to.eql(\"Page index must not be less than zero!\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "60c62e04-4fc0-4c73-b49e-1783dfaf31d8",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/trace-matrix-report?page=-1&size=2",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"trace-matrix-report"
											],
											"query": [
												{
													"key": "page",
													"value": "-1"
												},
												{
													"key": "size",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get requirement tracability matrix report - Invalid page",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "463e3cff-74c1-4458-a43a-0bf2bbe853a3",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message 'Failed to convert value of type'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Failed to convert value of type\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a7ce04b8-575b-4e99-adcd-0884743651cc",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/trace-matrix-report?page=abc&size=2",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"trace-matrix-report"
											],
											"query": [
												{
													"key": "page",
													"value": "abc"
												},
												{
													"key": "size",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get requirement tracability matrix report - Invalid size",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "09624338-e659-4300-b9ee-3704e0acac99",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message 'Failed to convert value of type'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Failed to convert value of type\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "598bc3f6-ae40-4064-9e5b-17a4b4e6a778",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/trace-matrix-report?page=1&size=abc",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"trace-matrix-report"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "size",
													"value": "abc"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Get requirement tracability matrix report - Size is greater than 1000",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bee3b807-aa2b-4520-884f-1525fd43185e",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    var moduleInfo1 = pm.environment.get(\"moduleInfo1\");",
													"    var moduleInfo2 = pm.environment.get(\"moduleInfo2\");",
													"    var moduleInfo3 = pm.environment.get(\"moduleInfo3\");",
													"    var moduleInfo, totalReq;",
													"    var hasModule3 = false;",
													"",
													"    var reqInfo1 = pm.environment.get(\"reqInfo1\");",
													"    var reqInfo2 = pm.environment.get(\"reqInfo2\");",
													"    var reqInfo3 = pm.environment.get(\"reqInfo3\");",
													"    var reqInfo4 = pm.environment.get(\"reqInfo4\");",
													"    var reqInfo5 = pm.environment.get(\"reqInfo5\");",
													"    var reqInfo;",
													"",
													"    jsonData.forEach(function(module, index) {",
													"        if (module.id === moduleInfo1.id) {",
													"            moduleInfo = moduleInfo1;",
													"            totalReq = 3;",
													"        } else if (module.id === moduleInfo2.id) {",
													"            moduleInfo = moduleInfo2;",
													"            totalReq = 2",
													"        } else if (module.id === moduleInfo3.id) {",
													"            moduleInfo = moduleInfo3;",
													"            hasModule3 = true;",
													"        }",
													"",
													"        pm.test(\"Response data contains \" + moduleInfo.name, function() {",
													"            pm.expect(module.id).to.eql(moduleInfo.id);",
													"            pm.expect(module.name).to.eql(moduleInfo.name);",
													"            pm.expect(module.order).to.not.eql(null);",
													"        });",
													"",
													"        pm.test(\"Response data of \" + moduleInfo.name + \" contains children property\", function() {",
													"            pm.expect(module.children.length).to.eql(0);",
													"        });",
													"",
													"        pm.test(\"Response data of \" + moduleInfo.name + \" has \" + module.requirements.length + \" requirements property\", function() {",
													"            pm.expect(module.requirements.length).to.eql(totalReq);",
													"        });",
													"",
													"        module.requirements.forEach(function(requirement) {",
													"            if (requirement.id === reqInfo1.pid) {",
													"                reqInfo = reqInfo1;",
													"            } else if (requirement.id === reqInfo2.pid) {",
													"                reqInfo = reqInfo2;",
													"            } else if (requirement.id === reqInfo3.pid) {",
													"                reqInfo = reqInfo3;",
													"            } else if (requirement.id === reqInfo4.pid) {",
													"                reqInfo = reqInfo4;",
													"            } else if (requirement.id === reqInfo5.pid) {",
													"                reqInfo = reqInfo5;",
													"            }",
													"",
													"            pm.test(\"Response data contains requirement : \" + requirement.name, function() {",
													"                pm.expect(requirement.name).to.eql(reqInfo.name);",
													"                pm.expect(requirement.id).to.eql(reqInfo.pid);",
													"            });",
													"        });",
													"    });",
													"    pm.test(`Response data ${hasModule3 ? ' contains ' : ' does not contain empty ' + ' Module 3'}`, () => {",
													"    });",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "eeae21ac-1613-4424-b96a-9a3cc07f1479",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/trace-matrix-report?page=1&size=1001",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"trace-matrix-report"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "size",
													"value": "1001"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Get requirement tracability matrix report - Size is less than 0",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87f6d1ca-0a34-40d7-85c3-0cfb933d552d",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    var moduleInfo1 = pm.environment.get(\"moduleInfo1\");",
													"    var moduleInfo2 = pm.environment.get(\"moduleInfo2\");",
													"    var moduleInfo3 = pm.environment.get(\"moduleInfo3\");",
													"    var moduleInfo, totalReq;",
													"    var hasModule3 = false;",
													"",
													"    var reqInfo1 = pm.environment.get(\"reqInfo1\");",
													"    var reqInfo2 = pm.environment.get(\"reqInfo2\");",
													"    var reqInfo3 = pm.environment.get(\"reqInfo3\");",
													"    var reqInfo4 = pm.environment.get(\"reqInfo4\");",
													"    var reqInfo5 = pm.environment.get(\"reqInfo5\");",
													"    var reqInfo;",
													"",
													"    jsonData.forEach(function(module, index) {",
													"        if (module.id === moduleInfo1.id) {",
													"            moduleInfo = moduleInfo1;",
													"            totalReq = 3;",
													"        } else if (module.id === moduleInfo2.id) {",
													"            moduleInfo = moduleInfo2;",
													"            totalReq = 2",
													"        } else if (module.id === moduleInfo3.id) {",
													"            moduleInfo = moduleInfo3;",
													"            hasModule3 = true;",
													"        }",
													"",
													"        pm.test(\"Response data contains \" + moduleInfo.name, function() {",
													"            pm.expect(module.id).to.eql(moduleInfo.id);",
													"            pm.expect(module.name).to.eql(moduleInfo.name);",
													"            pm.expect(module.order).to.not.eql(null);",
													"        });",
													"",
													"        pm.test(\"Response data of \" + moduleInfo.name + \" contains children property\", function() {",
													"            pm.expect(module.children.length).to.eql(0);",
													"        });",
													"",
													"        pm.test(\"Response data of \" + moduleInfo.name + \" has \" + module.requirements.length + \" requirements property\", function() {",
													"            pm.expect(module.requirements.length).to.eql(totalReq);",
													"        });",
													"",
													"        module.requirements.forEach(function(requirement) {",
													"            if (requirement.id === reqInfo1.pid) {",
													"                reqInfo = reqInfo1;",
													"            } else if (requirement.id === reqInfo2.pid) {",
													"                reqInfo = reqInfo2;",
													"            } else if (requirement.id === reqInfo3.pid) {",
													"                reqInfo = reqInfo3;",
													"            } else if (requirement.id === reqInfo4.pid) {",
													"                reqInfo = reqInfo4;",
													"            } else if (requirement.id === reqInfo5.pid) {",
													"                reqInfo = reqInfo5;",
													"            }",
													"",
													"            pm.test(\"Response data contains requirement : \" + requirement.name, function() {",
													"                pm.expect(requirement.name).to.eql(reqInfo.name);",
													"                pm.expect(requirement.id).to.eql(reqInfo.pid);",
													"            });",
													"        });",
													"    });",
													"    pm.test(`Response data ${hasModule3 ? ' contains ' : ' does not contain empty ' + ' Module 3'}`, () => {",
													"    });",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "55841b99-a079-4c75-b3ef-e47575a5b084",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/trace-matrix-report?page=1&size=-10",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"trace-matrix-report"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "size",
													"value": "-10"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Get requirement tracability matrix report - Not exist projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e26b2922-aa68-4225-b669-621becc89bd2",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message 'Project not found'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Project not found\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "18bb8115-aa65-407d-b7b9-dbfb9a7322f3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}123/requirements/trace-matrix-report",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}123",
												"requirements",
												"trace-matrix-report"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get requirement tracability matrix report - Invalid projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b28f6dce-c78f-433d-a099-ff2c75a2c40f",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message 'For input string'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"For input string\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ae038006-1c75-4d37-b4fb-714528c852d8",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}abcd/requirements/trace-matrix-report",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}abcd",
												"requirements",
												"trace-matrix-report"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Get requirement tracability matrix report - Invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a0c8758c-a7f1-4fac-bbd5-8870b88f61dd",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 401) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 401\", function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has error 'Invalid access token'\", function() {",
													"        pm.expect(jsonData.error_description).to.include(\"Invalid access token\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "82068a9a-af5a-47a9-82e2-995bb5136aae",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}223"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/trace-matrix-report",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"trace-matrix-report"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete Module 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f593597a-98a9-4176-b0b5-95414b79cb5a",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"newModuleId1\");",
													"    pm.environment.unset(\"newModuleId3\");",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f4f6d827-45f5-4e84-ba94-c545c10453b6",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{newModuleId1}}?force=true",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{newModuleId1}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete Module 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a4c7577-094a-4b56-9c78-b51794fa20d6",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"newModuleId2\");",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a2d45017-e047-4d6e-bde0-b8fe31bf2df5",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules/{{newModuleId2}}?force=true",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules",
												"{{newModuleId2}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b621db0-8a5b-4775-8979-25631f14537c",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"projectEndDate\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "87588953-1d9f-4dca-bb26-3c1ae2823678",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											],
											"options": {
												"urlencoded": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "774d87c4-e38a-477f-a54e-237f2d6a88bb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "10b4684b-ca1c-4351-9254-600686260533",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.environment.unset(\"siteAdminId\");",
													"    pm.environment.unset(\"userId\");",
													" ",
													"    pm.environment.unset(\"fieldIdReqStatus\");",
													"    pm.environment.unset(\"fieldIdReqStatusNew\");",
													"    pm.environment.unset(\"fieldIdReqStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdReqStatusReadyForBaseline\");",
													"    pm.environment.unset(\"fieldIdReqStatusBaselined\");",
													"    pm.environment.unset(\"fieldIdReqPriority\");",
													"    pm.environment.unset(\"fieldIdReqPriorityMusthave\");",
													"    pm.environment.unset(\"fieldIdReqPriorityShouldhave\");",
													"    pm.environment.unset(\"fieldIdReqPriorityNicetoHave\");",
													"    pm.environment.unset(\"fieldIdReqType\");",
													"    pm.environment.unset(\"fieldIdReqTypeFunctional\");",
													"    pm.environment.unset(\"fieldIdReqTypeNonfunctional\");",
													"    pm.environment.unset(\"fieldIdReqAssignedTo\");",
													"    pm.environment.unset(\"fieldIdReqAssignedToAPIUser1\");",
													"    pm.environment.unset(\"fieldIdReqAssignedToSiteAdminUser\");",
													"    pm.environment.unset(\"fieldIdReqDescription\");",
													"    ",
													"    pm.environment.unset(\"newModuleId1\");",
													"    pm.environment.unset(\"moduleInfo1\");",
													"    pm.environment.unset(\"newModuleId2\");",
													"    pm.environment.unset(\"moduleInfo2\");",
													"    pm.environment.unset(\"newModuleId3\");",
													"    pm.environment.unset(\"moduleInfo3\");",
													"    pm.environment.unset(\"reqName\");",
													"    pm.environment.unset(\"reqDescription\");",
													"    pm.environment.unset(\"reqInfo1\");",
													"    pm.environment.unset(\"reqInfo2\");",
													"    pm.environment.unset(\"reqInfo3\");",
													"    pm.environment.unset(\"reqInfo4\");",
													"    pm.environment.unset(\"reqInfo5\");",
													"    ",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"tokenType\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"    ",
													"    pm.environment.unset(\"username1\");",
													"    pm.environment.unset(\"firstName1\");",
													"    pm.environment.unset(\"lastName1\");",
													"    pm.environment.unset(\"email1\");",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5b0d8478-61c2-4d53-b37b-9ebc55260b24",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5c164b61-572d-4cda-9505-013016ce24df",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dc390258-15fa-4f86-b232-d2eb9e031e30",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c2325b48-be2c-4f69-ae90-c96be306f81f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "11b29e0f-1fd9-4b0d-9e0d-1764991b722c",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fab5ee56-6620-4608-96ec-cb7d71b50c24",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "a647c2aa-6551-4f38-bcc2-08fd54e37c1b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "cc876f06-45e6-4246-9dfe-8c57dce9268a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}