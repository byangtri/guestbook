{
	"info": {
		"_postman_id": "18cae496-87ec-49b3-8273-ad739a07c8d0",
		"name": "User profile & Update custom fields",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User Profile",
			"item": [
				{
					"name": "Gets available Profiles",
					"item": [
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Get available profiles - Success",
									"item": [
										{
											"name": "Precondition",
											"item": [
												{
													"name": "200 - Precondition - Login - Success",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "c7581572-d14b-45db-90aa-dd418595512a",
																"type": "text/javascript",
																"exec": [
																	"const RESPONSE_CODE = 200;",
																	"const result = pm.response.code === RESPONSE_CODE;",
																	"",
																	"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																	"    pm.response.to.have.status(RESPONSE_CODE);",
																	"});",
																	"",
																	"if (result) {",
																	"    let jsonData = pm.response.json();",
																	"    pm.environment.set(\"accessToken\", jsonData.access_token);",
																	"    pm.environment.set(\"tokenType\", jsonData.token_type);",
																	"",
																	"    // Create login cookie of user",
																	"    const rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
																	"    const base64 = CryptoJS.enc.Base64.stringify(rawStr);",
																	"    pm.environment.set(\"qtestUserCookie\", `UserContextToken=${base64}`);",
																	"}"
																]
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "33837566-9c09-4f54-95e4-30d7ff40fb99",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic dGFtdG1uZ3V5ZW46"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "grant_type",
																	"value": "password",
																	"type": "text"
																},
																{
																	"key": "username",
																	"value": "{{username}}",
																	"type": "text"
																},
																{
																	"key": "password",
																	"value": "{{password}}",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{qtestUrl}}/oauth/token",
															"host": [
																"{{qtestUrl}}"
															],
															"path": [
																"oauth",
																"token"
															]
														}
													},
													"response": []
												},
												{
													"name": "201 - Precondition - Create User Profile",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "d5c0ca00-138d-400b-91fb-4499bafd1fe6",
																"exec": [
																	"const RESPONSE_CODE = 201;",
																	"const result = pm.response.code === RESPONSE_CODE;",
																	"",
																	"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																	"    pm.response.to.have.status(RESPONSE_CODE);",
																	"});",
																	"",
																	"if (result) {",
																	"    let jsonData = pm.response.json();",
																	"    pm.environment.set(\"userProfileId\", jsonData.id);",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "b608723f-eb56-41a7-a368-b5b7a3f6da33",
																"exec": [
																	"// Random generator function",
																	"function getRandomInt(min, max) {",
																	"    min = Math.ceil(min);",
																	"    max = Math.floor(max);",
																	"    return Math.floor(Math.random() * (max - min)) + min;",
																	"}",
																	"",
																	"// generator csrf token",
																	"var base64object = function(input) {",
																	" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));",
																	" var base64 = CryptoJS.enc.Base64.stringify(inputWords);",
																	" return base64;",
																	"};",
																	"let uuid = require('uuid');",
																	"let token = uuid.v4() + \"QAS\" + base64object(Date.now());",
																	"pm.environment.set(\"csrfToken\", token);",
																	"",
																	"// Function to add 0 before datetime value if it is less than 10",
																	"Number.prototype.padLeft = function(base, chr) {",
																	"    var len = (String(base || 10).length - String(this).length) + 1;",
																	"    return len > 0 ? new Array(len).join(chr || '0') + this : this;",
																	"};",
																	"",
																	"// Generate dynamic string for ProfileName",
																	"let uniqueString = new Date(),",
																	"    uniqueStringFormat = [(uniqueString.getMonth() + 1).padLeft(),",
																	"        uniqueString.getDate().padLeft(),",
																	"        uniqueString.getFullYear(),",
																	"    ].join('') + '-' + [uniqueString.getHours().padLeft(),",
																	"        uniqueString.getMinutes().padLeft(),",
																	"        uniqueString.getSeconds().padLeft(),",
																	"        uniqueString.getMilliseconds().padLeft()",
																	"    ].join('');",
																	"",
																	"const profileName = \"ATUserProfile\";",
																	"pm.environment.set(\"userProfileName\", `${profileName}${uniqueStringFormat}`);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x-www-form-urlencoded"
															},
															{
																"key": "X-CSRF-Token",
																"value": "{{csrfToken}}"
															},
															{
																"key": "Cookie",
																"value": "{{qtestUserCookie}}"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "name",
																	"value": "{{userProfileName}}",
																	"type": "text"
																},
																{
																	"key": "dojo.preventCache",
																	"value": "{{csrfToken}}",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{qtestUrl}}/admin/profile/userprofile",
															"host": [
																"{{qtestUrl}}"
															],
															"path": [
																"admin",
																"profile",
																"userprofile"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Main",
											"item": [
												{
													"name": "200 - Get available profiles - User",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "092e3c83-2168-40b3-8b1c-7ca191848345",
																"type": "text/javascript",
																"exec": [
																	"// Initialize expected test data for verification",
																	"const expectedResponseCode = 200;",
																	"const result = pm.response.code === expectedResponseCode;",
																	"const expectedIsReadOnly = false;",
																	"const expectedIsAdmin = false;",
																	"const expectedUserProfileName = pm.environment.get(\"userProfileName\");",
																	"const expectedUserProfileId = pm.environment.get(\"userProfileId\");",
																	"const expectedAdminProfileName = pm.environment.get(\"adminProfileName\");",
																	"let expectedAdminProfile = null;",
																	"let expectedUserProfile = null;",
																	"",
																	"",
																	"// Implementation function Looking for an json item from json item list by expected key and value",
																	"function searchJSONItemFromList(jsonList, expectedKey, expectedValue) {",
																	"    for (let i = 0; i < jsonList.length; i++) {",
																	"        if (jsonList[i][expectedKey] == expectedValue) {",
																	"            return jsonList[i];",
																	"        }",
																	"    }",
																	"    return null;",
																	"}",
																	"",
																	"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																	"    pm.response.to.have.status(expectedResponseCode);",
																	"});",
																	"",
																	"if (result) {",
																	"    // Get data from JSON response",
																	"    const jsonData = pm.response.json();",
																	"    const returnedUserProfiles = jsonData.user_profiles;",
																	"",
																	"    // Looking for the new added Admin Profile in the returned user_profiles list by name",
																	"    expectedAdminProfile = searchJSONItemFromList(returnedUserProfiles, \"name\", expectedAdminProfileName);",
																	"",
																	"    // Looking for the new added User Profile in the returned user_profiles list by name",
																	"    expectedUserProfile = searchJSONItemFromList(returnedUserProfiles, \"name\", expectedUserProfileName);",
																	"",
																	"    // Verify that the created User Profile in precondition should be returned correctly in user_profiles",
																	"    pm.test(\"'id' is returned correctly\", () => {",
																	"        pm.expect(expectedUserProfile.id).to.eql(expectedUserProfileId);",
																	"    });",
																	"",
																	"    pm.test(\"'is_readonly' is returned correctly\", () => {",
																	"        pm.expect(expectedUserProfile.is_readonly).to.eql(expectedIsReadOnly);",
																	"    });",
																	"",
																	"    pm.test(\"'is_admin' is returned correctly\", () => {",
																	"        pm.expect(expectedUserProfile.is_admin).to.eql(expectedIsAdmin);",
																	"    });",
																	"",
																	"    // Verify that total_user_profiles should be displayed correctly",
																	"    pm.test(\"'total_user_profiles' is returned correctly\", () => {",
																	"        pm.expect(jsonData.total_user_profiles).to.eql(returnedUserProfiles.length);",
																	"    });",
																	"",
																	"    // Verify that total_admin_profiles should be displayed correctly",
																	"    pm.test(\"'total_admin_profiles' is returned correctly\", () => {",
																	"        pm.expect(jsonData.total_admin_profiles).to.eql(0);",
																	"    });",
																	"",
																	"    // Verify that the created Admin Profile in precondition should NOT be returned in user_profiles",
																	"    pm.test(\"Admin profile is not returned in user_profiles list\", () => {",
																	"        pm.expect(expectedAdminProfile).to.eql(null);",
																	"    });",
																	"",
																	"    // Verify that there should NOT be any item in admin_profiles",
																	"    pm.test(\"There is not any returned admin_profiles item\", () => {",
																	"        pm.expect(jsonData.admin_profiles.length).to.eql(0);",
																	"    });",
																	"    ",
																	"}"
																]
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "9eededb6-9a00-467d-9104-847271fdb22b",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Authorization",
																"value": "{{tokenType}} {{accessToken}}"
															}
														],
														"url": {
															"raw": "{{qtestUrl}}/api/v3/user-profiles?type=user",
															"host": [
																"{{qtestUrl}}"
															],
															"path": [
																"api",
																"v3",
																"user-profiles"
															],
															"query": [
																{
																	"key": "type",
																	"value": "user"
																}
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Cleanup",
											"item": [
												{
													"name": "200 - Cleanup - Delete User Profile",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "9c39fd69-706c-466e-ac71-c8c2d4e84e31",
																"exec": [
																	"// generator csrf token\r",
																	"var base64object = function(input) {\r",
																	" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
																	" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
																	" return base64;\r",
																	"};\r",
																	"let uuid = require('uuid');\r",
																	"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
																	"pm.environment.set(\"csrfToken\", token);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "48b96282-d721-4c90-b0c3-5ee10ef2489c",
																"exec": [
																	"const RESPONSE_CODE = 200;",
																	"const result = pm.response.code === RESPONSE_CODE;",
																	"",
																	"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																	"    pm.response.to.have.status(RESPONSE_CODE);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x-www-form-urlencoded"
															},
															{
																"key": "X-CSRF-Token",
																"value": "{{csrfToken}}"
															},
															{
																"key": "Cookie",
																"value": "{{qtestUserCookie}}"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "dojo.preventCache",
																	"value": "{{csrfToken}}",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{qtestUrl}}/admin/profile/userprofile/{{userProfileId}}?dojo.preventCache={{csrfToken}}",
															"host": [
																"{{qtestUrl}}"
															],
															"path": [
																"admin",
																"profile",
																"userprofile",
																"{{userProfileId}}"
															],
															"query": [
																{
																	"key": "dojo.preventCache",
																	"value": "{{csrfToken}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "200 - Cleanup - Logout  - Success",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "cfdaa10d-4918-4cbf-939c-264678192ae2",
																"type": "text/javascript",
																"exec": [
																	"const RESPONSE_CODE = 200;",
																	"const result = pm.response.code === RESPONSE_CODE;",
																	"",
																	"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																	"    pm.response.to.have.status(RESPONSE_CODE);",
																	"});",
																	"",
																	"// Clean up environment variable",
																	"pm.environment.unset(\"accessToken\");",
																	"pm.environment.unset(\"tokenType\");",
																	"pm.environment.unset(\"qtestUserCookie\");",
																	"pm.environment.unset(\"csrfToken\");",
																	"pm.environment.unset(\"userProfileName\");",
																	"pm.environment.unset(\"userProfileId\");",
																	"pm.environment.unset(\"adminProfileName\");",
																	"pm.environment.unset(\"adminProfileId\");",
																	"pm.environment.unset(\"administratorProfileId\");"
																]
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "3eb7cde2-be2b-4bf0-a459-f3bbd1c284bd",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "{{tokenType}} {{accessToken}}"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{qtestUrl}}/oauth/revoke",
															"host": [
																"{{qtestUrl}}"
															],
															"path": [
																"oauth",
																"revoke"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0b92802b-d8d4-4b2b-92ee-d1047cf3512c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "87a54b64-17a7-439a-859c-7eb63dd31e7d",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "403 - Get available profiles - No permission",
									"item": [
										{
											"name": "Precondition",
											"item": [
												{
													"name": "200 - Precondition - Login - Success",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "5a521505-fef9-4c65-95b7-6c92d78c2adb",
																"type": "text/javascript",
																"exec": [
																	"const RESPONSE_CODE = 200;",
																	"const result = pm.response.code === RESPONSE_CODE;",
																	"",
																	"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																	"    pm.response.to.have.status(RESPONSE_CODE);",
																	"});",
																	"",
																	"if (result) {",
																	"    let jsonData = pm.response.json();",
																	"    pm.environment.set(\"accessToken\", jsonData.access_token);",
																	"    pm.environment.set(\"tokenType\", jsonData.token_type);",
																	"}"
																]
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic dGFtdG1uZ3V5ZW46"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "grant_type",
																	"value": "password",
																	"type": "text"
																},
																{
																	"key": "username",
																	"value": "{{username}}",
																	"type": "text"
																},
																{
																	"key": "password",
																	"value": "{{password}}",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{qtestUrl}}/oauth/token",
															"host": [
																"{{qtestUrl}}"
															],
															"path": [
																"oauth",
																"token"
															]
														}
													},
													"response": []
												},
												{
													"name": "201 - Precondition - Get user id",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "059efca0-f3f6-4bb4-ad90-94240f5d3b4e",
																"exec": [
																	"if (pm.response.code === 200) {",
																	"    //get response body",
																	"    var jsonData = pm.response.json();",
																	"    //assert status",
																	"    pm.test(\"Response status: \" + pm.response.code, function() {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"    pm.test(\"Response data contains data of apiuser4@qas.com\", function() {",
																	"        pm.expect(jsonData.items[0].username).to.eql(pm.environment.get(\"prefixApiUser\")+ \"apiuser4@qas.com\");",
																	"        pm.expect(pm.response.text()).to.include(\"email\");",
																	"        pm.expect(jsonData.items[0].first_name).to.eql(\"API\");",
																	"        pm.expect(jsonData.items[0].last_name).to.eql(\"User 4\");",
																	"        pm.expect(pm.response.text()).to.include(\"status\");",
																	"        pm.expect(pm.response.text()).to.include(\"timezone_offset\");",
																	"        pm.expect(pm.response.text()).to.include(\"country_name\");",
																	"    });",
																	"    ",
																	"    pm.environment.set(\"userId\", jsonData.items[0].id);",
																	"",
																	"} else {",
																	"    //other mark failed",
																	"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
																	"        pm.response.to.have.status(201);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "cdb813a4-7850-4407-97b8-97cace3e3a5c",
																"exec": [
																	"pm.environment.set(\"username1\", pm.environment.get(\"prefixApiUser\")+ \"apiuser4@qas.com\");",
																	"pm.environment.set(\"firstName1\", \"API\");",
																	"pm.environment.set(\"lastName1\", \"User 4\");",
																	"pm.environment.set(\"email1\", pm.environment.get(\"prefixApiUser\")+\"apiuser4@qas.com\");"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "Authorization",
																"value": "{{tokenType}} {{accessToken}}"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{qtestUrl}}/api/v3/users/search?username={{username1}}",
															"host": [
																"{{qtestUrl}}"
															],
															"path": [
																"api",
																"v3",
																"users",
																"search"
															],
															"query": [
																{
																	"key": "username",
																	"value": "{{username1}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "200 - Precondition - Login - Success",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "157242ab-b455-4f6d-af45-cb2c0e81b74b",
																"exec": [
																	"const RESPONSE_CODE = 200;",
																	"const result = pm.response.code === RESPONSE_CODE;",
																	"",
																	"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																	"    pm.response.to.have.status(RESPONSE_CODE);",
																	"});",
																	"",
																	"if (result) {",
																	"    let jsonData = pm.response.json();",
																	"    pm.environment.set(\"accessToken\", jsonData.access_token);",
																	"    pm.environment.set(\"tokenType\", jsonData.token_type);",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "8a6a5639-121d-4913-9d5c-d04eab19d0a9",
																"exec": [
																	"// Login to system by account without permission to View User Profiles permissions",
																	"pm.environment.set(\"noPermissionUsername\",pm.environment.get(\"prefixApiUser\")+\"apiuser4@qas.com\");",
																	"pm.environment.set(\"noPermissionPassword\",\"{{password}}\");"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic dGFtdG1uZ3V5ZW46"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "grant_type",
																	"value": "password",
																	"type": "text"
																},
																{
																	"key": "username",
																	"value": "{{noPermissionUsername}}",
																	"type": "text"
																},
																{
																	"key": "password",
																	"value": "{{noPermissionPassword}}",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{qtestUrl}}/oauth/token",
															"host": [
																"{{qtestUrl}}"
															],
															"path": [
																"oauth",
																"token"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Main",
											"item": [
												{
													"name": "403 - Get available profiles - No permission",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "9d111b87-b6ca-4fe0-a1cb-689d16bd2c7f",
																"type": "text/javascript",
																"exec": [
																	"// Initialize expected test data for verification",
																	"const expectedResponseCode = 403;",
																	"const result = pm.response.code === expectedResponseCode;",
																	"const expectedMessage = \"You do not have permission to get profiles\";",
																	"",
																	"// Implementation function Looking for an json item from json item list by expected key and value",
																	"function searchJSONItemFromList(jsonList, expectedKey, expectedValue) {",
																	"    for (let i = 0; i < jsonList.length; i++) {",
																	"        if (jsonList[i][expectedKey] == expectedValue) {",
																	"            return jsonList[i];",
																	"        }",
																	"    }",
																	"    return null;",
																	"}",
																	"",
																	"// Verify the status code should be returned correctly",
																	"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																	"    pm.response.to.have.status(expectedResponseCode);",
																	"});",
																	"",
																	"if (result) {",
																	"    // Get data from JSON response",
																	"    const jsonData = pm.response.json();",
																	"",
																	"    // Verify that error message should be returned correctly",
																	"    pm.test(\"Error message 'do not have permission to get profiles' is displayed correctly\", () => {",
																	"        pm.expect(jsonData.message).to.eql(expectedMessage);",
																	"    });",
																	"}"
																]
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "3bb66389-25d9-4b60-a66d-222681d6bca1",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Authorization",
																"value": "{{tokenType}} {{accessToken}}"
															}
														],
														"url": {
															"raw": "{{qtestUrl}}/api/v3/user-profiles",
															"host": [
																"{{qtestUrl}}"
															],
															"path": [
																"api",
																"v3",
																"user-profiles"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Cleanup",
											"item": [
												{
													"name": "200 - Cleanup - Logout  - Success",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "042ca076-8b38-4812-8529-c47ee247250d",
																"type": "text/javascript",
																"exec": [
																	"const RESPONSE_CODE = 200;",
																	"const result = pm.response.code === RESPONSE_CODE;",
																	"",
																	"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																	"    pm.response.to.have.status(RESPONSE_CODE);",
																	"});",
																	"",
																	"// Clean up environment variable",
																	"pm.environment.unset(\"accessToken\");",
																	"pm.environment.unset(\"tokenType\");",
																	"pm.environment.unset(\"qtestUserCookie\");",
																	"pm.environment.unset(\"noPermissionUsername\");",
																	"pm.environment.unset(\"noPermissionPassword\");",
																	"pm.environment.unset(\"userId\");"
																]
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "67a78029-21a6-4d60-a020-9573ac6c7f64",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "{{tokenType}} {{accessToken}}"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{qtestUrl}}/oauth/revoke",
															"host": [
																"{{qtestUrl}}"
															],
															"path": [
																"oauth",
																"revoke"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4285d640-9787-42c5-ab2f-40509af47cba",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "199f293a-b9fd-433e-8be3-9d029db840fb",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Gets current User's Profiles in different Projects",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eb90256b-a99d-41f7-a5ab-1c4b610d53ee",
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"",
													"    // Create login cookie of user",
													"    const rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    const base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", `UserContextToken=${base64}`);",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "578a64a2-f862-43ff-a80b-a28c91bfd922",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Get user id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88ba7cf6-d89a-4dde-ab49-2a96a9eb50fe",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Response data contains data of apiuser1@qas.com\", function() {",
													"        pm.expect(jsonData.items[0].username).to.eql(pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"        pm.expect(pm.response.text()).to.include(\"email\");",
													"        pm.expect(jsonData.items[0].first_name).to.eql(\"API\");",
													"        pm.expect(jsonData.items[0].last_name).to.eql(\"User 1\");",
													"        pm.expect(pm.response.text()).to.include(\"status\");",
													"        pm.expect(pm.response.text()).to.include(\"timezone_offset\");",
													"        pm.expect(pm.response.text()).to.include(\"country_name\");",
													"    });",
													"    ",
													"    pm.environment.set(\"userId\", jsonData.items[0].id);",
													"",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a02e526c-b578-41fd-bc7a-9628176a837d",
												"exec": [
													"// Inititalize Json body for api user 1. To be reused as baseline when verifying in test script",
													"let apiuser1 = {",
													"    \"username\": pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\",",
													"    \"first_name\": \"API\",",
													"    \"last_name\": \"User 1\",",
													"    \"email\": pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\",",
													"    \"password\": \"{{password}}\"",
													"};",
													"",
													"pm.environment.set(\"apiuser1\",JSON.stringify(apiuser1));",
													"pm.environment.set(\"username1\",JSON.parse(pm.environment.get(\"apiuser1\")).username);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/users/search?username={{username1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"users",
												"search"
											],
											"query": [
												{
													"key": "username",
													"value": "{{username1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bdd0d7e4-15dd-4840-ae89-f0417729506c",
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 201;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"   //get response body",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"projectId1\", jsonData.id);",
													"    ",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2205b58f-47b8-4468-b2a8-5d26ff77ac10",
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set(\"startDate\", startDate.toISOString());",
													"pm.environment.set(\"endDate\", endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\"\n  ],\n  \"automation\": true\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project - Not Assign Current user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "62652147-f4ce-4553-b979-673d074f7dfa",
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 201;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"   //get response body",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"projectId2\", jsonData.id);",
													"    ",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "838baaef-02b1-4be8-8dc1-7b21b7075f19",
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set(\"startDate\", startDate.toISOString());",
													"pm.environment.set(\"endDate\", endDate.toISOString());",
													"pm.environment.set(\"assignedUser\",JSON.parse(pm.environment.get(\"apiuser1\")).username);",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{assignedUser}}\"\n  ],\n  \"automation\": true\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get site admin id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b8e6a8ad-49f1-4f47-8ed1-83d957cb0632",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.set(\"siteAdminId\", jsonData.items[0].id);",
													"",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"username\": \"{{username}}\",\r\n  \"first_name\": \"{{firstName}}\",\r\n  \"last_name\": \"{{lastName}}\",\r\n  \"email\": \"{{username}}\",\r\n  \"password\": \"{{password}}\"\r\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/users/search?username={{username}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"users",
												"search"
											],
											"query": [
												{
													"key": "username",
													"value": "{{username}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Get current User's Profiles in different Projects - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "21b02686-831a-44dc-a604-8b630f5a1a34",
												"exec": [
													"// Initialize test data for verification",
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"const userId = pm.environment.get(\"siteAdminId\");",
													"const projectId = pm.environment.get(\"projectId1\");",
													"const expectedProfilePermission = {",
													"    \"release\": {",
													"        \"create\": true,",
													"        \"edit\": true,",
													"        \"delete\": true,",
													"        \"view\": true",
													"    },",
													"    \"build\": {",
													"        \"create\": true,",
													"        \"edit\": true,",
													"        \"delete\": true,",
													"        \"view\": true",
													"    },",
													"    \"module\": {",
													"        \"create\": true,",
													"        \"edit\": true,",
													"        \"delete\": true,",
													"        \"view\": true",
													"    },",
													"    \"requirement\": {",
													"        \"create\": true,",
													"        \"edit\": true,",
													"        \"delete\": true,",
													"        \"view\": true,",
													"        \"edit_assignment\": true,",
													"        \"export\": true,",
													"        \"import\": true",
													"    },",
													"    \"test_case\": {",
													"        \"create\": true,",
													"        \"edit\": true,",
													"        \"delete\": true,",
													"        \"view\": true,",
													"        \"edit_assignment\": true,",
													"        \"export\": true,",
													"        \"import\": true,",
													"        \"approve\": true",
													"    },",
													"    \"test_cycle\": {",
													"        \"create\": true,",
													"        \"edit\": true,",
													"        \"delete\": true,",
													"        \"view\": true",
													"    },",
													"    \"test_suite\": {",
													"        \"create\": true,",
													"        \"edit\": true,",
													"        \"delete\": true,",
													"        \"view\": true",
													"    },",
													"    \"test_run\": {",
													"        \"create\": true,",
													"        \"edit\": true,",
													"        \"delete\": true,",
													"        \"view\": true,",
													"        \"execute\": true,",
													"        \"export\": true,",
													"        \"edit_assignment\": true,",
													"        \"modify_test_logs_by_others\": true,",
													"        \"modify_test_logs_by_self\": true,",
													"    },",
													"    \"defect\": {",
													"        \"create\": true,",
													"        \"edit\": true,",
													"        \"delete\": false,",
													"        \"view\": true,",
													"        \"export\": true",
													"    },",
													"    \"report\": {",
													"        \"view_report\": true",
													"    },",
													"    \"qmap\": {",
													"        \"view\": true,",
													"        \"modify_map\": true,",
													"        \"regenerate_map\": true,",
													"        \"rename_application\": true,",
													"        \"remove_restore_application\": true,",
													"        \"create_private_map_layout\": true",
													"    },",
													"    \"project_setting\": {",
													"        \"manage\": true",
													"    },",
													"    \"session\": {",
													"        \"create\": true,",
													"        \"edit\": true,",
													"        \"delete\": true,",
													"        \"view\": true",
													"    },",
													"    \"project\": {",
													"        \"admin\": true",
													"    },",
													"    \"schedule\": {",
													"        \"create\": true,",
													"        \"edit\": true,",
													"        \"delete\": true,",
													"        \"view\": true",
													"    }",
													"}",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value",
													"function searchJSONItemFromList(jsonList, expectedKey, expectedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            return jsonList[i];",
													"        }",
													"    }",
													"    return null;",
													"}",
													"",
													"",
													"// Verify the returned status code should be 200",
													"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"",
													"    const jsonData = pm.response.json();",
													"    const expectedProfile = searchJSONItemFromList(jsonData, \"project_id\", projectId);",
													"    const returnedUserId = expectedProfile.user_id;",
													"    let returnedProfilePermission = expectedProfile;",
													"    delete returnedProfilePermission.user_id;",
													"    delete returnedProfilePermission.project_id;",
													"    const notAssignedProjectId = pm.environment.get(\"projectId2\");",
													"    let notAssignedProject = null;",
													"    notAssignedProject = searchJSONItemFromList(jsonData, \"project_id\", notAssignedProjectId);",
													"",
													"    // Verify that user_id should be returned correctly in JSON response",
													"    pm.test(\"'user_id' is returned correctly\", () => {",
													"        pm.expect(returnedUserId).to.eql(userId);",
													"    });",
													"    console.log(returnedProfilePermission);",
													"    console.log(expectedProfilePermission);",
													"    // Verify that user's profile permission should be returned correctly in JSON response",
													"    pm.test(\"Profile permission is returned correctly\", () => {",
													"        pm.expect(returnedProfilePermission).to.eql(expectedProfilePermission);",
													"    });",
													"",
													"    // Verify that the project which current user does not belong to should NOT be returned in JSON response",
													"    pm.test(\"The project which current user does not belong to is NOT returned in JSON response\", () => {",
													"        pm.expect(notAssignedProject).to.eql(null);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/user-profiles/current",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"user-profiles",
												"current"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75d5f12e-8d56-4099-a14e-5b7be6cd8641",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "463f1dfc-0469-451b-aef8-84a3a57c91fc",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId1}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project - Not Assign Current User",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5b80debf-31e6-4a0a-8aac-45e5fcd16592",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4bf021ab-caad-43f3-95ea-393266991cc7",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId2}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout  - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "adb25d7a-a31e-435f-8bbc-66f715d0e9c5",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"",
													"const result = pm.response.code === RESPONSE_CODE;",
													"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"// Clean up environment variables",
													"pm.environment.unset(\"accessToken\");",
													"pm.environment.unset(\"tokenType\");",
													"pm.environment.unset(\"qtestUserCookie\");",
													"pm.environment.unset(\"csrfToken\");",
													"pm.environment.unset(\"startDate\");",
													"pm.environment.unset(\"endDate\");",
													"pm.environment.unset(\"projectId1\");",
													"pm.environment.unset(\"assignedUser\");",
													"pm.environment.unset(\"projectId2\");",
													"pm.environment.unset(\"apiuser1\");",
													"pm.environment.unset(\"userId\");",
													"pm.environment.unset(\"siteAdminId\");",
													"pm.environment.unset(\"username1\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c1f1f2f8-720b-449b-a7c7-bfbb3a056781",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Assigns multiple Users to a Profile in a Project",
					"item": [
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Assigns multiple Users to a Profile in a Project - Success",
									"item": [
										{
											"name": "Precondition",
											"item": [
												{
													"name": "200 - Precondition - Login - Success",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "c3302328-0e39-4526-84a6-7e9d5c8d75b5",
																"type": "text/javascript",
																"exec": [
																	"const RESPONSE_CODE = 200;",
																	"const result = pm.response.code === RESPONSE_CODE;",
																	"",
																	"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																	"    pm.response.to.have.status(RESPONSE_CODE);",
																	"});",
																	"",
																	"if (result) {",
																	"    let jsonData = pm.response.json();",
																	"    pm.environment.set(\"accessToken\", jsonData.access_token);",
																	"    pm.environment.set(\"tokenType\", jsonData.token_type);",
																	"",
																	"    // Create login cookie of user",
																	"    const rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
																	"    const base64 = CryptoJS.enc.Base64.stringify(rawStr);",
																	"    pm.environment.set(\"qtestUserCookie\", `UserContextToken=${base64}`);",
																	"}"
																]
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "e13f0217-0ad2-4aef-8441-eeca85d7abec",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic dGFtdG1uZ3V5ZW46"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "grant_type",
																	"value": "password",
																	"type": "text"
																},
																{
																	"key": "username",
																	"value": "{{username}}",
																	"type": "text"
																},
																{
																	"key": "password",
																	"value": "{{password}}",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{qtestUrl}}/oauth/token",
															"host": [
																"{{qtestUrl}}"
															],
															"path": [
																"oauth",
																"token"
															]
														}
													},
													"response": []
												},
												{
													"name": "201 - Precondition - Get user id",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "48df9174-0403-4cfd-bda3-43f2545bed12",
																"exec": [
																	"if (pm.response.code === 200) {",
																	"    //get response body",
																	"    var jsonData = pm.response.json();",
																	"    //assert status",
																	"    pm.test(\"Response status: \" + pm.response.code, function() {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"    pm.test(\"Response data contains data of apiuser1@qas.com\", function() {",
																	"        pm.expect(jsonData.items[0].username).to.eql(pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
																	"        pm.expect(pm.response.text()).to.include(\"email\");",
																	"        pm.expect(jsonData.items[0].first_name).to.eql(\"API\");",
																	"        pm.expect(jsonData.items[0].last_name).to.eql(\"User 1\");",
																	"        pm.expect(pm.response.text()).to.include(\"status\");",
																	"        pm.expect(pm.response.text()).to.include(\"timezone_offset\");",
																	"        pm.expect(pm.response.text()).to.include(\"country_name\");",
																	"    });",
																	"    ",
																	"    pm.environment.set(\"userId\", jsonData.items[0].id);",
																	"",
																	"} else {",
																	"    //other mark failed",
																	"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
																	"        pm.response.to.have.status(201);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "1169261b-125f-401b-8962-09f5f67efc31",
																"exec": [
																	"// Inititalize Json body for api user 1. To be reused as baseline when verifying in test script",
																	"let apiuser1 = {",
																	"    \"username\": pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\",",
																	"    \"first_name\": \"API\",",
																	"    \"last_name\": \"User 1\",",
																	"    \"email\": pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\",",
																	"    \"password\": \"{{password}}\"",
																	"};",
																	"",
																	"pm.environment.set(\"apiuser1\",JSON.stringify(apiuser1));",
																	"pm.environment.set(\"username1\",JSON.parse(pm.environment.get(\"apiuser1\")).username);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "Authorization",
																"value": "{{tokenType}} {{accessToken}}"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{qtestUrl}}/api/v3/users/search?username={{username1}}",
															"host": [
																"{{qtestUrl}}"
															],
															"path": [
																"api",
																"v3",
																"users",
																"search"
															],
															"query": [
																{
																	"key": "username",
																	"value": "{{username1}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "201 - Precondition - Create project and assign the invited user",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "01b64d3a-bc4d-4088-a717-6e8b3bcdb8ed",
																"type": "text/javascript",
																"exec": [
																	"const RESPONSE_CODE = 201;",
																	"const result = pm.response.code === RESPONSE_CODE;",
																	"",
																	"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																	"    pm.response.to.have.status(RESPONSE_CODE);",
																	"});",
																	"",
																	"",
																	"if (result) {",
																	"   //get response body",
																	"    let jsonData = pm.response.json();",
																	"    pm.environment.set(\"projectId1\", jsonData.id);",
																	"}",
																	""
																]
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "50eb64a5-031b-437f-979b-be17a0977d1e",
																"type": "text/javascript",
																"exec": [
																	"var startDate = new Date();",
																	"var endDate = new Date();",
																	"endDate.setDate(startDate.getDate() + 365);",
																	"",
																	"// Function to add 0 before datetime value if it is less than 10",
																	"Number.prototype.padLeft = function(base, chr) {",
																	"    var len = (String(base || 10).length - String(this).length) + 1;",
																	"    return len > 0 ? new Array(len).join(chr || '0') + this : this;",
																	"};",
																	"",
																	"// Generate dynamic string for ProfileName",
																	"let uniqueString = new Date(),",
																	"    uniqueStringFormat = [(uniqueString.getMonth() + 1).padLeft(),",
																	"        uniqueString.getDate().padLeft(),",
																	"        uniqueString.getFullYear(),",
																	"    ].join('') + '-' + [uniqueString.getHours().padLeft(),",
																	"        uniqueString.getMinutes().padLeft(),",
																	"        uniqueString.getSeconds().padLeft(),",
																	"        uniqueString.getMilliseconds().padLeft()",
																	"    ].join('');",
																	"",
																	"const projectName = \"qTest API - Postman\";",
																	"pm.environment.set(\"projectName\", `${projectName}${uniqueStringFormat}`);",
																	"",
																	"pm.environment.set(\"startDate\", startDate.toISOString());",
																	"pm.environment.set(\"endDate\", endDate.toISOString());",
																	"pm.environment.set(\"assignedUser\",JSON.parse(pm.environment.get(\"apiuser1\")).username);",
																	""
																]
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "{{tokenType}} {{accessToken}}"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"name\": \"{{projectName}}\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n     \"{{username}}\", \"{{assignedUser}}\"\n  ],\n  \"automation\": true\n}"
														},
														"url": {
															"raw": "{{qtestUrl}}/api/v3/projects",
															"host": [
																"{{qtestUrl}}"
															],
															"path": [
																"api",
																"v3",
																"projects"
															]
														}
													},
													"response": []
												},
												{
													"name": "201 - Precondition - Create User Profile",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "fb633d1b-99cd-45da-8757-cf0e8ff5ab66",
																"exec": [
																	"const RESPONSE_CODE = 201;",
																	"const result = pm.response.code === RESPONSE_CODE;",
																	"",
																	"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																	"    pm.response.to.have.status(RESPONSE_CODE);",
																	"});",
																	"",
																	"if (result) {",
																	"    let jsonData = pm.response.json();",
																	"    pm.environment.set(\"userProfileId\", jsonData.id);",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "c1d66755-e44e-4a7c-9dbf-12b8628b80a6",
																"exec": [
																	"// Random generator function",
																	"function getRandomInt(min, max) {",
																	"    min = Math.ceil(min);",
																	"    max = Math.floor(max);",
																	"    return Math.floor(Math.random() * (max - min)) + min;",
																	"}",
																	"",
																	"// Generate the random value",
																	"// generator csrf token",
																	"var base64object = function(input) {",
																	" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));",
																	" var base64 = CryptoJS.enc.Base64.stringify(inputWords);",
																	" return base64;",
																	"};",
																	"let uuid = require('uuid');",
																	"let token = uuid.v4() + \"QAS\" + base64object(Date.now());",
																	"pm.environment.set(\"csrfToken\", token);",
																	"",
																	"// Function to add 0 before datetime value if it is less than 10",
																	"Number.prototype.padLeft = function(base, chr) {",
																	"    var len = (String(base || 10).length - String(this).length) + 1;",
																	"    return len > 0 ? new Array(len).join(chr || '0') + this : this;",
																	"};",
																	"",
																	"// Generate dynamic string for ProfileName",
																	"let uniqueString = new Date(),",
																	"    uniqueStringFormat = [(uniqueString.getMonth() + 1).padLeft(),",
																	"        uniqueString.getDate().padLeft(),",
																	"        uniqueString.getFullYear(),",
																	"    ].join('') + '-' + [uniqueString.getHours().padLeft(),",
																	"        uniqueString.getMinutes().padLeft(),",
																	"        uniqueString.getSeconds().padLeft(),",
																	"        uniqueString.getMilliseconds().padLeft()",
																	"    ].join('');",
																	"",
																	"const profileName = \"ATUserProfile\";",
																	"pm.environment.set(\"userProfileName\", `${profileName}${uniqueStringFormat}`);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x-www-form-urlencoded"
															},
															{
																"key": "X-CSRF-Token",
																"value": "{{csrfToken}}"
															},
															{
																"key": "Cookie",
																"value": "{{qtestUserCookie}}"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "name",
																	"value": "{{userProfileName}}",
																	"type": "text"
																},
																{
																	"key": "dojo.preventCache",
																	"value": "{{csrfToken}}",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{qtestUrl}}/admin/profile/userprofile",
															"host": [
																"{{qtestUrl}}"
															],
															"path": [
																"admin",
																"profile",
																"userprofile"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Main",
											"item": [
												{
													"name": "200 - Assigns multiple Users to a Profile in a Project - Success",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "8f893727-17a6-4592-ac0f-7cc97ecd6e6d",
																"exec": [
																	"// Initialize expected test data for verification",
																	"const expectedResponseCode = 200;",
																	"const result = pm.response.code === expectedResponseCode;",
																	"const apiUserData = JSON.parse(pm.environment.get(\"apiuser1\"));",
																	"const expectedUserId = pm.environment.get(\"userId\");",
																	"const expectedUserName = apiUserData.username;",
																	"const expectedFirstName = apiUserData.first_name;",
																	"const expectedLastName = apiUserData.last_name;",
																	"const expectedStatus = 1;",
																	"const expectedAvatar = `${pm.environment.get(\"qtestUrl\")}/api/v3/users/${expectedUserId}/avatar`;",
																	"const expectedTimzezoneOffset = \"00\";",
																	"const expectedCountryName = \"St. Barthélemy\";",
																	"const expectedLinksRel = \"self\";",
																	"const expectedLinksHref = `${pm.environment.get(\"qtestUrl\")}/api/v3/users/${expectedUserId}`;",
																	"",
																	"",
																	"// Verify the status code should be returned correctly",
																	"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																	"    pm.response.to.have.status(expectedResponseCode);",
																	"});",
																	"",
																	"if (result) {",
																	"    const jsonData = pm.response.json();",
																	"",
																	"    jsonData.forEach(function(element) {",
																	"        // Verify that assigned user information should be returned correctly in JSON response",
																	"        // Verify id",
																	"        pm.test(\"User 'id' is returned correctly\", () => {",
																	"            pm.expect(element.id).to.eql(expectedUserId);",
																	"        });",
																	"",
																	"        // Verify username",
																	"        pm.test(\"'username' is returned correctly\", () => {",
																	"            pm.expect(element.username).to.eql(expectedUserName);",
																	"        });",
																	"",
																	"        // Verify first_name",
																	"        pm.test(\"'first_name' is returned correctly\", () => {",
																	"            pm.expect(element.first_name).to.eql(expectedFirstName);",
																	"        });",
																	"",
																	"        // Verify last_name",
																	"        pm.test(\"'last_name' is returned correctly\", () => {",
																	"            pm.expect(element.last_name).to.eql(expectedLastName);",
																	"        });",
																	"",
																	"        // Verify status",
																	"        const returnedStatus = element.status;",
																	"        pm.test(\"'status' is returned correctly\", () => {",
																	"            pm.expect(returnedStatus).to.eql(expectedStatus);",
																	"        });",
																	"",
																	"        // Verify avatar",
																	"        pm.test(\"'avatar' is returned correctly\", () => {",
																	"            pm.expect(element.avatar).to.eql(expectedAvatar);",
																	"        });",
																	"",
																	"        // Verify timezone_offset",
																	"        pm.test(\"'timezone_offset' is returned correctly\", () => {",
																	"            pm.expect(element.timezone_offset).to.include(expectedTimzezoneOffset);",
																	"        });",
																	"",
																	"        // Verify country_name",
																	"        pm.test(\"'country_name' is returned correctly\", () => {",
																	"            pm.expect(element.country_name).to.eql(expectedCountryName);",
																	"        });",
																	"",
																	"        // Verify links/rel",
																	"        pm.test(\"'links/rel' is returned correctly\", () => {",
																	"            pm.expect(element.links[0].rel).to.eql(expectedLinksRel);",
																	"        });",
																	"",
																	"        // Verify links/href",
																	"        pm.test(\"'links/href' is returned correctly\", () => {",
																	"            pm.expect(element.links[0].href).to.eql(expectedLinksHref);",
																	"        });",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "{{tokenType}} {{accessToken}}"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"userProfileId\": {{userProfileId}},\r\n  \"userIds\": [\r\n    {{userId}}\r\n  ]\r\n}"
														},
														"url": {
															"raw": "{{qtestUrl}}/api/v3/user-profiles/{{projectId1}}/batch-assign-users",
															"host": [
																"{{qtestUrl}}"
															],
															"path": [
																"api",
																"v3",
																"user-profiles",
																"{{projectId1}}",
																"batch-assign-users"
															]
														}
													},
													"response": []
												},
												{
													"name": "200 - Assigns multiple Users to a profile - Get profiles of User 1",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "95824939-88ee-4881-8e67-5f850198614f",
																"exec": [
																	"// Initialize expected test data for verification",
																	"const expectedResponseCode = 200;",
																	"const result = pm.response.code === expectedResponseCode;",
																	"// Verify the status code should be returned correctly",
																	"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																	"    pm.response.to.have.status(expectedResponseCode);",
																	"});",
																	"",
																	"if (result) {",
																	"    // Get data from JSON response",
																	"    const jsonData = pm.response.json();",
																	"    var isFound = false;",
																	"    var i;",
																	"    for(i=0; i< jsonData.result.assignedGroup.length; i++){",
																	"        if(jsonData.result.assignedGroup[i] === pm.environment.get(\"userProfileName\")){",
																	"            if(jsonData.result.assignedProj[i] === pm.environment.get(\"projectName\")){",
																	"                isFound = true;",
																	"                break;",
																	"            }",
																	"        }",
																	"    }",
																	"    ",
																	"    pm.test(`User ${pm.environment.get(\"assignedUser\")} is ${isFound ? 'assigned into project' : 'not assigned into project'}`, () => {",
																	"        pm.expect(isFound).to.eql(true);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "6175745a-6b26-401e-89e7-e9ffda068b00",
																"exec": [
																	"// generator csrf token\r",
																	"var base64object = function(input) {\r",
																	" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
																	" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
																	" return base64;\r",
																	"};\r",
																	"let uuid = require('uuid');\r",
																	"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
																	"pm.environment.set(\"csrfToken\", token);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "{{tokenType}} {{accessToken}}"
															},
															{
																"key": "Content-Type",
																"value": "application/x-www-form-urlencoded"
															},
															{
																"key": "X-CSRF-Token",
																"value": "{{csrfToken}}"
															},
															{
																"key": "Cookie",
																"value": "{{qtestUserCookie}}"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "dojo.preventCache",
																	"value": "{{csrfToken}}",
																	"type": "text"
																},
																{
																	"key": "id",
																	"value": "{{userId}}",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{qtestUrl}}/admin/user/user-details.json",
															"host": [
																"{{qtestUrl}}"
															],
															"path": [
																"admin",
																"user",
																"user-details.json"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Cleanup",
											"item": [
												{
													"name": "200 - Cleanup - Remove user from profile",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "fc08dd0d-725f-43de-94ad-e7066532f07e",
																"exec": [
																	"const RESPONSE_CODE = 200;",
																	"const RESPONSE_STATUS = true;",
																	"const result = pm.response.code === RESPONSE_CODE;",
																	"",
																	"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																	"    pm.response.to.have.status(RESPONSE_CODE);",
																	"});",
																	"",
																	"// Verify status should be returned as TRUE",
																	"if (result) {",
																	"    let jsonData = pm.response.json();",
																	"    let jsonStatus = jsonData.status;",
																	"    pm.test(\"Status of JSON response data is returned as TRUE\", () => {",
																	"        pm.expect(jsonStatus).to.eql(RESPONSE_STATUS);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "85756c98-4790-41dd-bce3-e14852ed2a1c",
																"exec": [
																	"// generator csrf token",
																	"var base64object = function(input) {",
																	" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));",
																	" var base64 = CryptoJS.enc.Base64.stringify(inputWords);",
																	" return base64;",
																	"};",
																	"let uuid = require('uuid');",
																	"let token = uuid.v4() + \"QAS\" + base64object(Date.now());",
																	"pm.environment.set(\"csrfToken\", token);",
																	"",
																	"// Function to add 0 before datetime value if it is less than 10",
																	"Number.prototype.padLeft = function(base, chr) {",
																	"    var len = (String(base || 10).length - String(this).length) + 1;",
																	"    return len > 0 ? new Array(len).join(chr || '0') + this : this;",
																	"};"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x-www-form-urlencoded"
															},
															{
																"key": "X-CSRF-Token",
																"value": "{{csrfToken}}"
															},
															{
																"key": "Cookie",
																"value": "{{qtestUserCookie}}"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "profiles",
																	"value": "[{\"userProfileId\":null,\"adminProfileId\":null,\"authTypeId\":null,\"externalUserName\":\"\",\"id\":\"{{userId}}\"}]",
																	"type": "text"
																},
																{
																	"key": "dojo.preventCache",
																	"value": "{{csrfToken}}",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{qtestUrl}}/admin/profile/profile/user",
															"host": [
																"{{qtestUrl}}"
															],
															"path": [
																"admin",
																"profile",
																"profile",
																"user"
															]
														}
													},
													"response": []
												},
												{
													"name": "200 - Cleanup - Delete project",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "96d52cfb-034d-42bb-b9a3-8db8128d0574",
																"exec": [
																	"const RESPONSE_CODE = 200;",
																	"const result = pm.response.code === RESPONSE_CODE;",
																	"",
																	"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																	"    pm.response.to.have.status(RESPONSE_CODE);",
																	"});",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "e17c0efa-d111-49f5-b7f5-1298879c42fe",
																"exec": [
																	"// generator csrf token\r",
																	"var base64object = function(input) {\r",
																	" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
																	" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
																	" return base64;\r",
																	"};\r",
																	"let uuid = require('uuid');\r",
																	"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
																	"pm.environment.set(\"csrfToken\", token);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Cookie",
																"value": "{{qtestUserCookie}}"
															},
															{
																"key": "X-CSRF-Token",
																"value": "{{csrfToken}}"
															},
															{
																"key": "Content-Type",
																"value": "application/x-www-form-urlencoded"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "id",
																	"value": "{{projectId1}}",
																	"type": "text"
																},
																{
																	"key": "dojo.preventCache",
																	"value": "{{csrfToken}}",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{qtestUrl}}/admin/proj/delete-project",
															"host": [
																"{{qtestUrl}}"
															],
															"path": [
																"admin",
																"proj",
																"delete-project"
															]
														}
													},
													"response": []
												},
												{
													"name": "200 - Cleanup - Delete User Profile",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "bcb536ca-124a-4a8c-b262-4fc1580fc6ca",
																"exec": [
																	"// generator csrf token\r",
																	"var base64object = function(input) {\r",
																	" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
																	" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
																	" return base64;\r",
																	"};\r",
																	"let uuid = require('uuid');\r",
																	"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
																	"pm.environment.set(\"csrfToken\", token);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "20d2879c-bfd0-45c4-a4ca-8358c49de57b",
																"exec": [
																	"const RESPONSE_CODE = 200;",
																	"const result = pm.response.code === RESPONSE_CODE;",
																	"",
																	"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																	"    pm.response.to.have.status(RESPONSE_CODE);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x-www-form-urlencoded"
															},
															{
																"key": "X-CSRF-Token",
																"value": "{{csrfToken}}"
															},
															{
																"key": "Cookie",
																"value": "{{qtestUserCookie}}"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "dojo.preventCache",
																	"value": "{{csrfToken}}",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{qtestUrl}}/admin/profile/userprofile/{{userProfileId}}?dojo.preventCache={{csrfToken}}",
															"host": [
																"{{qtestUrl}}"
															],
															"path": [
																"admin",
																"profile",
																"userprofile",
																"{{userProfileId}}"
															],
															"query": [
																{
																	"key": "dojo.preventCache",
																	"value": "{{csrfToken}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "200 - Cleanup - Logout  - Success",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "d726d129-963b-4893-a81d-aa85a3429870",
																"exec": [
																	"const RESPONSE_CODE = 200;",
																	"const result = pm.response.code === RESPONSE_CODE;",
																	"",
																	"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																	"    pm.response.to.have.status(RESPONSE_CODE);",
																	"});",
																	"",
																	"// Clean up environment variables",
																	"pm.environment.unset(\"accessToken\");",
																	"pm.environment.unset(\"tokenType\");",
																	"pm.environment.unset(\"qtestUserCookie\");",
																	"pm.environment.unset(\"csrfToken\");",
																	"pm.environment.unset(\"startDate\");",
																	"pm.environment.unset(\"endDate\");",
																	"pm.environment.unset(\"projectId1\");",
																	"pm.environment.unset(\"userProfileName\");",
																	"pm.environment.unset(\"userProfileId\");",
																	"pm.environment.unset(\"apiuser1\");",
																	"pm.environment.unset(\"assignedUser\");",
																	"pm.environment.unset(\"projectName\");",
																	"pm.environment.unset(\"userId\");",
																	"",
																	"pm.environment.unset(\"username1\");"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "f89dff2d-d624-48b2-81f9-3605e33d2e3d",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "{{tokenType}} {{accessToken}}"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{qtestUrl}}/oauth/revoke",
															"host": [
																"{{qtestUrl}}"
															],
															"path": [
																"oauth",
																"revoke"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "400 - Assigns multiple Users to a Profile in a Project - No Permission",
									"item": [
										{
											"name": "Precondition",
											"item": [
												{
													"name": "200 - Precondition - Login - Success",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "74b78084-5d17-4ddf-a563-935b1e4fa404",
																"type": "text/javascript",
																"exec": [
																	"const RESPONSE_CODE = 200;",
																	"const result = pm.response.code === RESPONSE_CODE;",
																	"",
																	"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																	"    pm.response.to.have.status(RESPONSE_CODE);",
																	"});",
																	"",
																	"if (result) {",
																	"    let jsonData = pm.response.json();",
																	"    pm.environment.set(\"accessToken\", jsonData.access_token);",
																	"    pm.environment.set(\"tokenType\", jsonData.token_type);",
																	"",
																	"    // Create login cookie of user",
																	"    const rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
																	"    const base64 = CryptoJS.enc.Base64.stringify(rawStr);",
																	"    pm.environment.set(\"qtestUserCookie\", `UserContextToken=${base64}`);",
																	"}"
																]
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "e83640eb-2add-493a-bb13-669f184048ab",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "Basic dGFtdG1uZ3V5ZW46"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "grant_type",
																	"value": "password",
																	"type": "text"
																},
																{
																	"key": "username",
																	"value": "{{username}}",
																	"type": "text"
																},
																{
																	"key": "password",
																	"value": "{{password}}",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{qtestUrl}}/oauth/token",
															"host": [
																"{{qtestUrl}}"
															],
															"path": [
																"oauth",
																"token"
															]
														}
													},
													"response": []
												},
												{
													"name": "201 - Precondition - Get user id",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "fc1411d7-5935-4d39-aabf-b22a31df1484",
																"exec": [
																	"if (pm.response.code === 200) {",
																	"    //get response body",
																	"    var jsonData = pm.response.json();",
																	"    //assert status",
																	"    pm.test(\"Response status: \" + pm.response.code, function() {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"    pm.test(\"Response data contains data of apiuser1@qas.com\", function() {",
																	"        pm.expect(jsonData.items[0].username).to.eql(pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
																	"        pm.expect(pm.response.text()).to.include(\"email\");",
																	"        pm.expect(jsonData.items[0].first_name).to.eql(\"API\");",
																	"        pm.expect(jsonData.items[0].last_name).to.eql(\"User 1\");",
																	"        pm.expect(pm.response.text()).to.include(\"status\");",
																	"        pm.expect(pm.response.text()).to.include(\"timezone_offset\");",
																	"        pm.expect(pm.response.text()).to.include(\"country_name\");",
																	"    });",
																	"    ",
																	"    pm.environment.set(\"userId\", jsonData.items[0].id);",
																	"",
																	"} else {",
																	"    //other mark failed",
																	"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
																	"        pm.response.to.have.status(201);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "e8352ec0-8cab-40f3-8543-ecd09899f847",
																"exec": [
																	"// Inititalize Json body for api user 1. To be reused as baseline when verifying in test script",
																	"let apiuser1 = {",
																	"    \"username\": pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\",",
																	"    \"first_name\": \"API\",",
																	"    \"last_name\": \"User 1\",",
																	"    \"email\": pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\",",
																	"    \"password\": \"{{password}}\"",
																	"};",
																	"",
																	"pm.environment.set(\"apiuser1\",JSON.stringify(apiuser1));",
																	"pm.environment.set(\"username1\",JSON.parse(pm.environment.get(\"apiuser1\")).username);"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "Authorization",
																"value": "{{tokenType}} {{accessToken}}"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{qtestUrl}}/api/v3/users/search?username={{username1}}",
															"host": [
																"{{qtestUrl}}"
															],
															"path": [
																"api",
																"v3",
																"users",
																"search"
															],
															"query": [
																{
																	"key": "username",
																	"value": "{{username1}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "201 - Precondition - Create project and assign the invited user",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "7a0751ae-6177-4ef2-aa01-6b464122ce3c",
																"type": "text/javascript",
																"exec": [
																	"const RESPONSE_CODE = 201;",
																	"const result = pm.response.code === RESPONSE_CODE;",
																	"",
																	"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																	"    pm.response.to.have.status(RESPONSE_CODE);",
																	"});",
																	"",
																	"",
																	"if (result) {",
																	"   //get response body",
																	"    let jsonData = pm.response.json();",
																	"    pm.environment.set(\"projectId1\", jsonData.id);",
																	"}",
																	""
																]
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "58e878a2-0728-410e-9e0d-4f5f3938c9bf",
																"type": "text/javascript",
																"exec": [
																	"var startDate = new Date();",
																	"var endDate = new Date();",
																	"endDate.setDate(startDate.getDate() + 365);",
																	"",
																	"// Function to add 0 before datetime value if it is less than 10",
																	"Number.prototype.padLeft = function(base, chr) {",
																	"    var len = (String(base || 10).length - String(this).length) + 1;",
																	"    return len > 0 ? new Array(len).join(chr || '0') + this : this;",
																	"};",
																	"",
																	"// Generate dynamic string for ProfileName",
																	"let uniqueString = new Date(),",
																	"    uniqueStringFormat = [(uniqueString.getMonth() + 1).padLeft(),",
																	"        uniqueString.getDate().padLeft(),",
																	"        uniqueString.getFullYear(),",
																	"    ].join('') + '-' + [uniqueString.getHours().padLeft(),",
																	"        uniqueString.getMinutes().padLeft(),",
																	"        uniqueString.getSeconds().padLeft(),",
																	"        uniqueString.getMilliseconds().padLeft()",
																	"    ].join('');",
																	"",
																	"const projectName = \"qTest API - Postman\";",
																	"pm.environment.set(\"projectName\", `${projectName}${uniqueStringFormat}`);",
																	"",
																	"pm.environment.set(\"startDate\", startDate.toISOString());",
																	"pm.environment.set(\"endDate\", endDate.toISOString());",
																	"pm.environment.set(\"assignedUser\",JSON.parse(pm.environment.get(\"apiuser1\")).username);",
																	""
																]
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "{{tokenType}} {{accessToken}}"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"name\": \"{{projectName}}\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{assignedUser}}\"\n  ],\n  \"automation\": true\n}"
														},
														"url": {
															"raw": "{{qtestUrl}}/api/v3/projects",
															"host": [
																"{{qtestUrl}}"
															],
															"path": [
																"api",
																"v3",
																"projects"
															]
														}
													},
													"response": []
												},
												{
													"name": "201 - Precondition - Create User Profile",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "a3447373-d535-48e9-9213-829a99de904a",
																"exec": [
																	"const RESPONSE_CODE = 201;",
																	"const result = pm.response.code === RESPONSE_CODE;",
																	"",
																	"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																	"    pm.response.to.have.status(RESPONSE_CODE);",
																	"});",
																	"",
																	"if (result) {",
																	"    let jsonData = pm.response.json();",
																	"    pm.environment.set(\"userProfileId\", jsonData.id);",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "0327f2d8-18a9-459b-82bd-356f8800d5ea",
																"exec": [
																	"// Random generator function",
																	"function getRandomInt(min, max) {",
																	"    min = Math.ceil(min);",
																	"    max = Math.floor(max);",
																	"    return Math.floor(Math.random() * (max - min)) + min;",
																	"}",
																	"",
																	"// generator csrf token",
																	"var base64object = function(input) {",
																	" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));",
																	" var base64 = CryptoJS.enc.Base64.stringify(inputWords);",
																	" return base64;",
																	"};",
																	"let uuid = require('uuid');",
																	"let token = uuid.v4() + \"QAS\" + base64object(Date.now());",
																	"pm.environment.set(\"csrfToken\", token);",
																	"",
																	"// Function to add 0 before datetime value if it is less than 10",
																	"Number.prototype.padLeft = function(base, chr) {",
																	"    var len = (String(base || 10).length - String(this).length) + 1;",
																	"    return len > 0 ? new Array(len).join(chr || '0') + this : this;",
																	"};",
																	"",
																	"// Generate dynamic string for ProfileName",
																	"let uniqueString = new Date(),",
																	"    uniqueStringFormat = [(uniqueString.getMonth() + 1).padLeft(),",
																	"        uniqueString.getDate().padLeft(),",
																	"        uniqueString.getFullYear(),",
																	"    ].join('') + '-' + [uniqueString.getHours().padLeft(),",
																	"        uniqueString.getMinutes().padLeft(),",
																	"        uniqueString.getSeconds().padLeft(),",
																	"        uniqueString.getMilliseconds().padLeft()",
																	"    ].join('');",
																	"",
																	"const profileName = \"ATUserProfile\";",
																	"pm.environment.set(\"userProfileName\", `${profileName}${uniqueStringFormat}`);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x-www-form-urlencoded"
															},
															{
																"key": "X-CSRF-Token",
																"value": "{{csrfToken}}"
															},
															{
																"key": "Cookie",
																"value": "{{qtestUserCookie}}"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "name",
																	"value": "{{userProfileName}}",
																	"type": "text"
																},
																{
																	"key": "dojo.preventCache",
																	"value": "{{csrfToken}}",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{qtestUrl}}/admin/profile/userprofile",
															"host": [
																"{{qtestUrl}}"
															],
															"path": [
																"admin",
																"profile",
																"userprofile"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Main",
											"item": [
												{
													"name": "400 - Assigns multiple Users to a Profile in a Project - Reassign User 1 into project that has already assigned project",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "ac8512ed-fb08-444d-995f-549a5a09e962",
																"type": "text/javascript",
																"exec": [
																	"// Initialize expected test data for verification",
																	"const expectedResponseCode = 400;",
																	"const result = pm.response.code === expectedResponseCode;",
																	"const expectedMessage = 'Access is denied';",
																	"",
																	"",
																	"// Verify the status code should be returned correctly",
																	"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																	"    pm.response.to.have.status(expectedResponseCode);",
																	"});",
																	"",
																	"if (result) {",
																	"    const jsonData = pm.response.json();",
																	"    ",
																	"    // Verify that error message should be returned correctly",
																	"    pm.test(\"Error message 'Access is denied' displays in message property\", () => {",
																	"        pm.expect(jsonData.message).to.eql(expectedMessage);",
																	"    });",
																	"}"
																]
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "{{tokenType}} {{accessToken}}"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n  \"userProfileId\": {{userProfileId}},\r\n  \"userIds\": [\r\n    {{userId}}\r\n  ]\r\n}"
														},
														"url": {
															"raw": "{{qtestUrl}}/api/v3/user-profiles/{{projectId1}}/batch-assign-users",
															"host": [
																"{{qtestUrl}}"
															],
															"path": [
																"api",
																"v3",
																"user-profiles",
																"{{projectId1}}",
																"batch-assign-users"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Cleanup",
											"item": [
												{
													"name": "200 - Cleanup - Remove user from profile",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "87695867-49ee-412d-9660-e5e6df6459af",
																"exec": [
																	"const RESPONSE_CODE = 200;",
																	"const RESPONSE_STATUS = true;",
																	"const result = pm.response.code === RESPONSE_CODE;",
																	"",
																	"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																	"    pm.response.to.have.status(RESPONSE_CODE);",
																	"});",
																	"",
																	"// Verify status should be returned as TRUE",
																	"if (result) {",
																	"    let jsonData = pm.response.json();",
																	"    let jsonStatus = jsonData.status;",
																	"    pm.test(\"Status of JSON response data is returned correctly\", () => {",
																	"        pm.expect(jsonStatus).to.eql(RESPONSE_STATUS);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "d9665dfe-c69d-4f39-9d85-a2af9752e115",
																"exec": [
																	"// generator csrf token\r",
																	"var base64object = function(input) {\r",
																	" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
																	" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
																	" return base64;\r",
																	"};\r",
																	"let uuid = require('uuid');\r",
																	"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
																	"pm.environment.set(\"csrfToken\", token);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x-www-form-urlencoded"
															},
															{
																"key": "X-CSRF-Token",
																"value": "{{csrfToken}}"
															},
															{
																"key": "Cookie",
																"value": "{{qtestUserCookie}}"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "profiles",
																	"value": "[{\"userProfileId\":null,\"adminProfileId\":null,\"authTypeId\":null,\"externalUserName\":\"\",\"id\":\"{{userId}}\"}]",
																	"type": "text"
																},
																{
																	"key": "dojo.preventCache",
																	"value": "{{csrfToken}}",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{qtestUrl}}/admin/profile/profile/user",
															"host": [
																"{{qtestUrl}}"
															],
															"path": [
																"admin",
																"profile",
																"profile",
																"user"
															]
														}
													},
													"response": []
												},
												{
													"name": "200 - Cleanup - Delete project",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "4ab40257-6b7b-4624-8c2e-45f29e15e2d9",
																"exec": [
																	"const RESPONSE_CODE = 200;",
																	"const result = pm.response.code === RESPONSE_CODE;",
																	"",
																	"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																	"    pm.response.to.have.status(RESPONSE_CODE);",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "af253545-f5a3-47f4-ae5a-9ca3aea15a14",
																"exec": [
																	"// generator csrf token\r",
																	"var base64object = function(input) {\r",
																	" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
																	" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
																	" return base64;\r",
																	"};\r",
																	"let uuid = require('uuid');\r",
																	"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
																	"pm.environment.set(\"csrfToken\", token);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Cookie",
																"value": "{{qtestUserCookie}}"
															},
															{
																"key": "X-CSRF-Token",
																"value": "{{csrfToken}}"
															},
															{
																"key": "Content-Type",
																"value": "application/x-www-form-urlencoded"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "id",
																	"value": "{{projectId1}}",
																	"type": "text"
																},
																{
																	"key": "dojo.preventCache",
																	"value": "{{csrfToken}}",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{qtestUrl}}/admin/proj/delete-project",
															"host": [
																"{{qtestUrl}}"
															],
															"path": [
																"admin",
																"proj",
																"delete-project"
															]
														}
													},
													"response": []
												},
												{
													"name": "200 - Cleanup - Delete User Profile",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "82184688-9610-41dc-9c27-8a39a84f92fd",
																"exec": [
																	"// generator csrf token\r",
																	"var base64object = function(input) {\r",
																	" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
																	" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
																	" return base64;\r",
																	"};\r",
																	"let uuid = require('uuid');\r",
																	"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
																	"pm.environment.set(\"csrfToken\", token);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "02d7b25e-5e87-47db-979a-0d1c8b3c7166",
																"exec": [
																	"const RESPONSE_CODE = 200;",
																	"const result = pm.response.code === RESPONSE_CODE;",
																	"",
																	"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																	"    pm.response.to.have.status(RESPONSE_CODE);",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/x-www-form-urlencoded"
															},
															{
																"key": "X-CSRF-Token",
																"value": "{{csrfToken}}"
															},
															{
																"key": "Cookie",
																"value": "{{qtestUserCookie}}"
															}
														],
														"body": {
															"mode": "urlencoded",
															"urlencoded": [
																{
																	"key": "dojo.preventCache",
																	"value": "{{csrfToken}}",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{qtestUrl}}/admin/profile/userprofile/{{userProfileId}}?dojo.preventCache={{csrfToken}}",
															"host": [
																"{{qtestUrl}}"
															],
															"path": [
																"admin",
																"profile",
																"userprofile",
																"{{userProfileId}}"
															],
															"query": [
																{
																	"key": "dojo.preventCache",
																	"value": "{{csrfToken}}"
																}
															]
														}
													},
													"response": []
												},
												{
													"name": "200 - Cleanup - Logout  - Success",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "255c42ef-dbfb-4bbb-80e8-7c09cd1b638f",
																"exec": [
																	"const RESPONSE_CODE = 200;",
																	"const result = pm.response.code === RESPONSE_CODE;",
																	"",
																	"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																	"    pm.response.to.have.status(RESPONSE_CODE);",
																	"});",
																	"",
																	"// Clean up environment variables",
																	"pm.environment.unset(\"accessToken\");",
																	"pm.environment.unset(\"tokenType\");",
																	"pm.environment.unset(\"qtestUserCookie\");",
																	"pm.environment.unset(\"csrfToken\");",
																	"pm.environment.unset(\"startDate\");",
																	"pm.environment.unset(\"endDate\");",
																	"pm.environment.unset(\"projectId1\");",
																	"pm.environment.unset(\"userProfileName\");",
																	"pm.environment.unset(\"userProfileId\");",
																	"pm.environment.unset(pm.environment.get(\"prefixApiUser\")+ \"apiuser1\");",
																	"pm.environment.unset(\"assignedUser\");",
																	"pm.environment.unset(\"projectName\");",
																	"pm.environment.unset(\"userId\");",
																	"pm.environment.unset(\"username1\");",
																	"",
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "ee52c8ea-f20a-4d8c-9918-48a876700d99",
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Authorization",
																"value": "{{tokenType}} {{accessToken}}"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "{{qtestUrl}}/oauth/revoke",
															"host": [
																"{{qtestUrl}}"
															],
															"path": [
																"oauth",
																"revoke"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Update custom fields",
			"item": [
				{
					"name": "Precondition",
					"item": [
						{
							"name": "200 - Precondition - Login success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fd5bcf2-be3c-4598-9468-509a5204b2e9",
										"type": "text/javascript",
										"exec": [
											"const RESPONSE_CODE = 200;",
											"",
											"const result = pm.response.code === RESPONSE_CODE;",
											"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
											"    pm.response.to.have.status(RESPONSE_CODE);",
											"});",
											"",
											"if (result) {",
											"    const jsonData = pm.response.json();",
											"    pm.environment.set('accessToken', jsonData.access_token);",
											"    pm.environment.set('tokenType', jsonData.token_type);",
											"",
											"    // Create login cookie of user",
											"    const rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
											"    const base64 = CryptoJS.enc.Base64.stringify(rawStr);",
											"    pm.environment.set('qtestUserCookie', 'UserContextToken=' + base64);",
											"",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e6a529b0-8239-4a09-9903-e46a56532c92",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic dGFtdG1uZ3V5ZW46"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{qtestUrl}}/oauth/token",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"oauth",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "201 - Precondition - Create project - Success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "03290f07-8686-479a-9e3e-5ae347bc465d",
										"exec": [
											"if (pm.response.code === 201) {",
											"   //get response body",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.test(\"Response code: \" + pm.response.code, function(){",
											"        pm.response.to.have.status(201);",
											"    });",
											"    pm.test(\"Response data has project id\", function(){",
											"        pm.expect(pm.response.text()).to.include(\"id\");",
											"    });",
											"    pm.test(\"Response data contains project name property\", function(){",
											"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"projectName\"));",
											"    });",
											"    pm.test(\"Response data contains project's description\", function(){",
											"        pm.expect(jsonData.description).to.eql(\"Description of qTest API - Postman\");",
											"    });",
											"    pm.test(\"Response data contains status id\" , function(){",
											"        pm.expect(pm.response.text()).to.include(\"status_id\");",
											"    });",
											"    pm.test(\"Response data contains start date\" , function(){",
											"        pm.expect(pm.response.text()).to.include(\"start_date\");",
											"    });",
											"    pm.test(\"Response data contains end date\" , function(){",
											"        pm.expect(pm.response.text()).to.include(\"end_date\");",
											"    });",
											"    pm.test(\"Response data contains sample: \" + jsonData.sample , function(){",
											"        pm.expect(pm.response.text()).to.include(\"sample\");",
											"    });",
											"    pm.test(\"Response data contains defect_tracking_systems\" , function(){",
											"        pm.expect(pm.response.text()).to.include(\"defect_tracking_systems\");",
											"    });",
											"    pm.test(\"Response data contains x_explorer_access_level\" , function(){",
											"        pm.expect(pm.response.text()).to.include(\"x_explorer_access_level\");",
											"    });",
											"    pm.test(\"Response data contains date_format: \" + jsonData.date_format , function(){",
											"        pm.expect(pm.response.text()).to.include(\"date_format\");",
											"    });",
											"    pm.test(\"Response data contains automation: \" + jsonData.automation, function(){",
											"        pm.expect(jsonData.automation.toString()).to.eql(\"true\");",
											"    });",
											"    pm.environment.set(\"projectId\", jsonData.id);",
											"    pm.environment.set(\"projectStartDate\", pm.environment.get(\"startDate\"));",
											"    pm.environment.set(\"projectEndDate\", pm.environment.get(\"endDate\"));",
											"    ",
											"    pm.environment.unset(\"startDate\");",
											"    pm.environment.unset(\"endDate\");",
											"} else {",
											"    //other mark failed",
											"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
											"        pm.response.to.have.status(201);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ad1e042f-3a34-4d9e-94d1-e89a467fdcee",
										"exec": [
											"// random generator function",
											"function getRandomInt(min, max) {",
											"    min = Math.ceil(min);",
											"    max = Math.floor(max);",
											"    return Math.floor(Math.random() * (max - min)) + min;",
											"}",
											"// generate the random value",
											"var random = getRandomInt(100 , 999);",
											"",
											"",
											"var startDate = new Date();",
											"var endDate = new Date();",
											"endDate.setDate(startDate.getDate() + 365);",
											"",
											"pm.environment.set('startDate', startDate.toISOString());",
											"pm.environment.set('endDate', endDate.toISOString());",
											"pm.environment.set(\"projectName\", \"qTest API - Postman - Update custom fields \" + random.toString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"{{projectName}}\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\", \"{{prefixApiUser}}apiuser1@qas.com\"\n  ],\n  \"automation\": true\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Precondition - Get all users in current project",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1bb4b5a7-d7b4-495d-9701-11d648ee65b9",
										"type": "text/javascript",
										"exec": [
											"const RESPONSE_CODE = 200;",
											"",
											"const result = pm.response.code === RESPONSE_CODE;",
											"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
											"    pm.response.to.have.status(RESPONSE_CODE);",
											"});",
											"",
											"if (result) {",
											"    const jsonData = pm.response.json();",
											"    pm.environment.set('resUsersList', jsonData);",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7da7bec1-0d74-4e63-94cb-a75b7fe7d60a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/users",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"users"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Main",
					"item": [
						{
							"name": "Release",
							"item": [
								{
									"name": "Precondition",
									"item": [
										{
											"name": "200 - Precondition - Login success",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7be9cdd9-8058-45d3-b81a-9201a952ce5b",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"    pm.environment.set('accessToken', jsonData.access_token);",
															"    pm.environment.set('tokenType', jsonData.token_type);",
															"",
															"    // Create login cookie of user",
															"    const rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
															"    const base64 = CryptoJS.enc.Base64.stringify(rawStr);",
															"    pm.environment.set('qtestUserCookie', 'UserContextToken=' + base64);",
															"",
															"    // Constant qtest custom fields id",
															"    pm.environment.set('cusFieldIdTextbox', 1);",
															"    pm.environment.set('cusFieldIdTextarea', 2);",
															"    pm.environment.set('cusFieldIdCombobox', 3);",
															"    pm.environment.set('cusFieldIdDatePicker', 4);",
															"    pm.environment.set('cusFieldIdUserList', 5);",
															"    pm.environment.set('cusFieldIdRichTextEditor', 6);",
															"    pm.environment.set('cusFieldIdNumber', 7);",
															"    pm.environment.set('cusFieldIdCheckbox', 8);",
															"    pm.environment.set('cusFieldIdDatetimePicker', 9);",
															"    pm.environment.set('cusFieldIdUrl', 12);",
															"    pm.environment.set('cusFieldIdMulSelCombobox', 17);",
															"",
															"    pm.environment.set('createdFieldsList', '');",
															"    pm.environment.set(\"objectType\", \"releases\");",
															"    pm.environment.set(\"createdFieldsList\", \"\");",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9d75e997-6fa2-4fc3-869b-612fdae54134",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic dGFtdG1uZ3V5ZW46"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "{{username}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{password}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{qtestUrl}}/oauth/token",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"oauth",
														"token"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Main",
									"item": [
										{
											"name": "Textbox",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field release - Textbox",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "cdb77da2-dc65-4be0-9041-dc2c4f109e00",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoTextbox', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "154102dc-f308-4189-b27a-d1caa2dd1301",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Textbox');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdTextbox'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}}\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field release - Update custom field textbox to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "c1b00804-1c48-4113-a488-a109f8b06643",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextbox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "5fd046e8-478f-43f2-9c01-fd14e591f86d",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoTextbox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field release - Update custom field textbox to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "67e928e9-023f-492d-ae18-7d93963302f9",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextbox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "e1c83e79-68f0-4587-878d-10920ac30fa8",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoTextbox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "e36d1cf0-cd20-417d-8096-dda0af850c68",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "f836f860-650d-452e-a707-a39697a4c584",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Textarea",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field release - Textarea",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "0db499a1-8972-44a1-8b95-c1dec70c20c0",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoTextarea', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "b087c10f-1904-4e83-aa1f-cd21119e1a22",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Textarea');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdTextarea'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\",\n    \"allowed_values\": [],\n    \"multiple\": false\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field release - Update custom field text area to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "82e5281e-52df-4099-b3e7-a3f41ac02754",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextarea');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "fdf1a833-d581-424d-ba6b-8b6a1d91ce2b",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoTextarea');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field release - Update custom field textarea to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "2beab8ff-8a07-4b3f-99a9-1e9820aee420",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextarea');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "ba24bc96-d0c2-47d0-9fc9-e47bef8b0aa7",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoTextarea');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "e3018c0e-bc1d-4ce1-9f1a-4111797343fd",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "26509592-8a70-4a14-b59e-d15cd45ea428",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a5fd91c7-dddf-471b-aca6-b1374f943adb",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "749f7ae8-043e-460a-af8a-3c419de19943",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Combobox",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition  - Create custom field release - Combobox",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "9751ecf3-e82b-448d-81e1-9b303871ce39",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoCombobox', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "31e42b97-b81a-4347-b752-8001704e17fc",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Combobox');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdCombobox'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"allowed_values\": []\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field release - Update custom field combobox to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "247c6ca7-0dff-414b-bc83-a00e29e63120",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoCombobox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "61f2005c-eb35-41aa-be0f-464558e22684",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoCombobox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field release - Update custom field combobox to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "c1fb9f8b-9cb9-453d-9e62-7cd3e165299f",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoCombobox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "da713b6e-39df-4497-96bb-3542d4d56763",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoCombobox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "66d2779b-7ea4-45fb-9d23-061f1fc4bf10",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "4031913d-7a61-4c7c-a00d-5c13d317e37c",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "95d047e7-681e-4c47-9f9b-98ee8f84645d",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "78ca9e1f-d708-411d-82a6-08f981f6ff0e",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Date picker",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field release - DatePicker",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "580aeff3-31ef-45de-b436-6e466dcab988",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoDatePicker', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "a5d569f2-31ac-4e45-8777-c6ada86273f2",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My DatePicker');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdDatePicker'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\"\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field release - Update custom field date picker to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "62c639b1-ebb2-48cc-a796-3e6b869499de",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoDatePicker');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "755c1a87-4d88-4a2b-a133-84d99a62491f",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoDatePicker');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field release - Update custom field date picker to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "19035042-f8f7-46e5-ae6a-0ae638c56086",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoDatePicker');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "f6d253d5-2b8e-4b0a-b8c4-eecce1869715",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoDatePicker');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "f4021727-c08a-4e13-987f-74604e4893f6",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "9cdfd810-3b25-481f-8626-289ef9ce5568",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4661aa70-f4f1-42a0-a869-e53ec2cbc665",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "39809d7c-fd3c-4a39-a26c-f85bcc51f46b",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "User list",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field release - UserList",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "5580c5d9-dced-44d9-8d32-0b12290e4dc1",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoUserList', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "0aa2d42d-f0c3-437f-a501-4307628a6f13",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My UserList');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdUserList'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field release - Update custom field user list to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "bc7ecf04-ec65-4ca2-be75-c306cf323098",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoUserList');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "f8ad4d3b-ff2b-42ab-b262-bf7a666bd1c0",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoUserList');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field release - Update custom field user list to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "eee88605-991a-4240-8efa-258d070475c1",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoUserList');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "2ed806b1-f9cc-4dc1-9911-5ff08573fb69",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoUserList');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "c6f56230-a25e-4aea-af46-ef6261b908d6",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "01163afb-c68f-4958-b928-f5bd65052900",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5da0fd5d-37b5-4063-9974-c2670efc414b",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e37a99d8-93f1-45af-adf9-38dcc49dbfb8",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Rich text editor",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field release - Rich text editor",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "d0eda556-4541-47d7-87a1-615acf4c97fb",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoRichTextEditor', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "ad548147-4e9e-4339-b3d2-ad21fc16d188",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My RichTextEditor');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdRichTextEditor'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\"\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field release - Update custom field rich text editor to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "9fb7ea91-af0e-44b6-9f8d-3f124bcad1cd",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoRichTextEditor');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "6e4efea9-7568-4c24-a827-8de033df7332",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoRichTextEditor');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field release - Update custom field rich text editor to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "1e03cdf8-7cc6-4038-87bb-4818a57da1ce",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoRichTextEditor');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "e42894c1-f57c-4911-a99e-4e6dcffc8574",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoRichTextEditor');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "d8676942-8c40-4436-a0f6-62c8923e1571",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "023c7400-d017-4ad8-97c6-024a16efad9d",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3ae867f1-4d1e-4c0e-8d1b-b6ca6f333803",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7c8e2e63-d67e-4760-9701-667c1c4c58e0",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Number",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field release - Number",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "955268b9-0f0d-4192-8211-0aab7fe14e48",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoNumber', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "0ee36353-d2c8-46bf-90d7-1350ec502ca2",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Number');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdNumber'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\"\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field release - Update custom field number to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "78c716f8-41ed-4b75-8aba-8d1b47846f62",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoNumber');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "3042e1c1-9981-499f-bea8-5077feae750f",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoNumber');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field release - Update custom field number to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "1a53942f-261e-4c19-ab8c-f45a2715f26d",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoNumber');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "d3700293-4133-49d6-af53-e248652b0c07",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoNumber');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "ce93636c-3135-4fd0-915b-b38bf8ea9396",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "004d62c2-04b8-4761-b2ed-3bd3408760c1",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d72184d3-79f9-4543-a5b2-af0076f91f84",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ac6060a4-86c4-4706-a78b-9e303c886edf",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Check box",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field release - Checkbox",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "e5ffb576-45b3-4fa1-a878-0e8bf0ab23c3",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoCheckbox', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "5b6f6364-443c-4223-ad69-8f3e99cd0d26",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Checkbox');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdCheckbox'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"allowed_values\": []\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field release - Update custom field check box to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "c29f1bf5-39f4-4a15-8c37-465817d0d2ed",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoCheckbox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "901998c2-07a2-4dc8-8db3-e6e7755cb322",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoCheckbox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field release - Update custom field check box to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "b44fdb9c-f1e9-4cca-984d-79628644fa70",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoCheckbox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "f7017387-3107-4a2e-97b5-f4e1e760260c",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoCheckbox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "18865564-b6bd-46ea-bdc6-ad6f165155ef",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "d7c806b7-e942-4ede-8617-c86094a4226c",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ef0e649e-6fbc-4613-963a-4a72000f97f0",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "809510c8-4f53-4202-b95f-44377622d241",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Datetime picker",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field Release - DateTimePicker",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "52695ac6-01a7-4dac-912d-3e182eb434c8",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoDateTimePicker', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "1998a3bc-a95d-4b3e-9292-45633bba8525",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My DatetimePicker');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdDatetimePicker'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"allowed_values\": []\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field release - Update custom field datetime picker to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "5d3a8b83-e305-4a34-bc76-736b243bc0d6",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoDateTimePicker');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "5d21df35-3c82-4156-bd38-ca98abe09782",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoDateTimePicker');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field release - Update custom field datetime picker to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "c1b7457d-8d3f-4790-bf07-1bd41328aec2",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoDateTimePicker');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "6b2e5f8c-ef08-4d53-b3d2-a2fb51263967",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoDateTimePicker');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "f164b7c0-c43c-45eb-911c-56c991572686",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "ba1e816f-5a84-45bc-b197-511690f8b6a5",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e2a8b481-3139-4615-add8-e4c080bb4b08",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1459f1fc-e875-49bb-8fcd-77ef6d446b7c",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "URL",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field release - URL",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "137538e7-c16c-421b-b74f-c278c466ce78",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoUrl', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "deeaefa3-60df-4bbe-a91e-a4ba5541b55c",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Url');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdUrl'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\"\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field release - Update custom field url to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "12db023d-b0b5-4951-bc3e-6c449588fa7d",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoUrl');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "77abeca6-43e1-4bec-8b4c-35d1789e8d3e",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoUrl');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field release - Update custom field url to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "3aedde46-d42d-4697-87f0-ea5c31bfb396",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoUrl');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "c5992ca1-e899-4dc3-a4f8-d46c64043bc6",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoUrl');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "80590841-147d-4876-b85f-a1a375d2aef4",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "1ab50c58-b0ed-403f-96ef-4d8665adb5a7",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "56987c82-8eb5-4860-b6f4-bf0e70ead825",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "bd654f0c-4474-492b-9a7c-3eaa0dada0b8",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Multiple Selection Combobox",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field release - MultipleSelectionCombobox",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "0707621d-dd89-4bfe-8ad3-19f6837d80ba",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoMulSelCombobox', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "32771437-6fb1-4259-8b2d-a0620343262f",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My MulSelCombobox');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdMulSelCombobox'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"allowed_values\": []\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field release - Update custom field multiple selection combobox to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "125c9c0b-e367-491e-bff4-2ba3a046f086",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoMulSelCombobox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "2888ec1f-07f9-442f-b7a8-f3524527bc38",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoMulSelCombobox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field release - Update custom field multiple selection combobox to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "5542289c-db00-4705-b531-7059b02aafde",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoMulSelCombobox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "1cf8a553-2fcf-4f07-88dd-7dd1e39bb694",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoMulSelCombobox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "0840cc0a-e441-4b3c-8e04-f4a454d128f0",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "9622e985-f55d-42b2-a8a9-1ab3e2bac887",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9e5e1355-be69-47ec-8f08-6e587683937a",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "02b04aa5-a460-4a34-a4fc-706254233f4f",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "200 - Update custom field release - Inactive some custom fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cb737ce6-765d-42db-99af-f29d296135de",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"    const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"    const jsonData = pm.response.json();",
															"",
															"    jsonData.forEach((fieldInfo) => {",
															"        pm.test(`Response data of custom field '${fieldInfo.label}' has property 'is_active' value is false`, () => {",
															"            pm.expect(fieldInfo.is_active).to.be.false;",
															"        })",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "efef28ae-322b-4c45-a4c8-2739a87550b5",
														"type": "text/javascript",
														"exec": [
															"const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"pm.environment.set('idTextbox', cusFieldInfoTextbox.id);",
															"pm.environment.set('idTextarea', cusFieldInfoTextarea.id);"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{idTextbox}},\n\t    \"is_active\": false\n\t},\n\t{\n\t\t\"id\": {{idTextarea}},\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "200 - Update custom field release - Active some custom fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "36e1f810-fe28-419d-8afa-c5e41fb78438",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"    const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"    const jsonData = pm.response.json();",
															"",
															"    jsonData.forEach((fieldInfo) => {",
															"        pm.test(`Response data of custom field '${fieldInfo.label}' has property 'is_active' value is true`, () => {",
															"            pm.expect(fieldInfo.is_active).to.be.true;",
															"        })",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9c547e5e-33d5-4d93-8f28-7cd8544a4cfd",
														"type": "text/javascript",
														"exec": [
															"const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"pm.environment.set('idTextbox', cusFieldInfoTextbox.id);",
															"pm.environment.set('idTextarea', cusFieldInfoTextarea.id);"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{idTextbox}},\n\t    \"is_active\": true\n\t},\n\t{\n\t\t\"id\": {{idTextarea}},\n\t    \"is_active\": true\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "200 - Update custom field release - Multiple fields with multiple statuses",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "be636950-8425-47d9-882a-04268f73f427",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"    const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"    const cusFieldInfoCombobox = pm.environment.get('cusFieldInfoCombobox');",
															"    const jsonData = pm.response.json();",
															"",
															"    jsonData.forEach((fieldInfo) => {",
															"        switch (fieldInfo.label) {",
															"            case cusFieldInfoTextbox.label:",
															"                pm.test(`Response data of custom field '${cusFieldInfoTextbox.label}' has property 'is_active' value is false`, () => {",
															"                    pm.expect(fieldInfo.is_active).to.be.false;",
															"                });",
															"                break;",
															"",
															"            case cusFieldInfoTextarea.label:",
															"                pm.test(`Response data of custom field '${cusFieldInfoTextarea.label}' has property 'is_active' value is true`, () => {",
															"                    pm.expect(fieldInfo.is_active).to.be.true;",
															"                });",
															"                break;",
															"",
															"            case cusFieldInfoCombobox.label:",
															"                pm.test(`Response data of custom field '${cusFieldInfoCombobox.label}' has property 'is_active' value is false`, () => {",
															"                    pm.expect(fieldInfo.is_active).to.be.false;",
															"                });",
															"                break;",
															"        }",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1eb0d408-55fb-40ec-910a-50c75e7cfd15",
														"type": "text/javascript",
														"exec": [
															"const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"const cusFieldInfoCombobox = pm.environment.get('cusFieldInfoCombobox');",
															"pm.environment.set('idTextbox', cusFieldInfoTextbox.id);",
															"pm.environment.set('idTextarea', cusFieldInfoTextarea.id);",
															"pm.environment.set('idCombobox', cusFieldInfoCombobox.id);"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{idTextbox}},\n\t    \"is_active\": false\n\t},\n\t{\n\t\t\"id\": {{idTextarea}},\n\t    \"is_active\": true\n\t},\n\t{\n\t\t\"id\": {{idCombobox}},\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Update custom field release - Invalid object type",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9122e050-687d-4e0e-bb99-295c36f1934b",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"    const EXPECTED_MSG = 'Unsupported object type';",
															"",
															"    pm.test(`Response data has property 'message' value contains '${EXPECTED_MSG}'`, () => {",
															"        pm.expect(jsonData.message).to.include(EXPECTED_MSG);",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "a680e5be-06a1-47ea-a5b4-2f685d7203f0",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"id\": 11111,\n        \"is_active\": true\n    }\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/invalid-{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"invalid-{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Update custom field release - Blank body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1fcd7d06-8df0-440d-ab67-e528cdf1c226",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"const result = pm.response.code === RESPONSE_CODE;",
															"const EXPECTED_MSGS = [",
															"    \"Required request body is missing\",",
															"    \"Required request body content is missing\"];",
															"    ",
															"function validateMessage(actualMessage){",
															"    let result = false;",
															"    for(const msg of EXPECTED_MSGS) {",
															"        result = actualMessage.indexOf(msg) > -1;",
															"        if(result){",
															"            console.log(`Actual message is: ${actualMessage}`);",
															"            return result;",
															"        }",
															"    }",
															"    return result;",
															"}",
															"",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"    pm.test(`Response body has 'message' property value in following: '${EXPECTED_MSGS.toString()}'`, () => {",
															"        pm.expect(validateMessage(jsonData.message)).to.eql(true);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5b6e36eb-0ee9-44aa-a8b5-dfeca77953d8",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Update custom field release - Empty json body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "55c89c03-5f7e-4efc-8041-61a51adfc37c",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextbox');",
															"    const jsonData = pm.response.json();",
															"",
															"    pm.test(`Response data contains error message: custom field does not exist`, () => {",
															"        pm.expect(pm.response.text()).to.include('does not exist');",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "37fe93c6-3362-4b20-b3f1-66ab9181e8b2",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Update custom field release - Invalid field id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b15d2352-5743-46b7-908a-a4ab7b6bbf5a",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"",
															"    pm.test(`Response data contains error message: 'custom field does not exist`, () => {",
															"        pm.expect(pm.response.text()).to.include('does not exist');",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "898268c8-0db6-4d1b-83d7-b1d32e386a32",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": 11111,\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "404 - Update custom field release - Project not found",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "669c9c69-b38a-4a10-a3b3-40e418cb8a07",
														"exec": [
															"const RESPONSE_CODE = 404;",
															"const EXPECTED_MSG = 'Project not found';",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"    pm.test(`Response body has 'message' property value '${EXPECTED_MSG}'`, () => {",
															"        pm.expect(jsonData.message).to.contains(EXPECTED_MSG);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "2a241836-8c44-42ea-8677-6644d4604494",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{cusFieldIdTextbox}},\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}11111/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}11111",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Update custom field release - Invalid project id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "99c9b68c-eb82-4e72-b1a6-ece6f7274e13",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"    const EXPECTED_MSG = `invalid-${pm.environment.get(\"projectId\")}`;",
															"",
															"    pm.test(`Response body has 'message' property contain invalid text`, () => {",
															"        pm.expect(jsonData.message).to.include(EXPECTED_MSG);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1fcd8768-f102-4c64-a884-71ed33c7f2ae",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{cusFieldIdTextbox}},\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/invalid-{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"invalid-{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Cleanup",
									"item": [
										{
											"name": "200 - Cleanup - Delete all created custom fields of release",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f3a9aaa8-0c15-43d5-9801-3cbf7132eca1",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"pm.environment.set(\"cusFieldId\",\"\");",
															"pm.environment.set('createdFieldsList', '');",
															"pm.environment.unset('cusFieldDataTypeId');",
															"pm.environment.unset('resAttributeType');",
															"pm.environment.unset('cusFieldName');",
															"pm.environment.unset('cusFieldDefaultValue');",
															"pm.environment.unset(\"cusFieldInfoTextbox\");",
															"pm.environment.unset(\"cusFieldInfoTextarea\");",
															"pm.environment.unset(\"cusFieldInfoCombobox\");",
															"pm.environment.unset(\"cusFieldInfoDatePicker\");",
															"pm.environment.unset(\"cusFieldInfoUserList\");",
															"pm.environment.unset(\"cusFieldInfoRichTextEditor\");",
															"pm.environment.unset(\"cusFieldInfoNumber\");",
															"pm.environment.unset(\"cusFieldInfoCheckbox\");",
															"pm.environment.unset(\"cusFieldInfoDateTimePicker\");",
															"pm.environment.unset(\"cusFieldInfoUrl\");",
															"pm.environment.unset(\"cusFieldInfoMulSelCombobox\");",
															"pm.environment.unset(\"jsonBody\");",
															"pm.environment.unset(\"csrfToken\");",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "2953f348-1bb8-487e-9aa3-411ead43a61d",
														"exec": [
															"// random generator function",
															"function getRandomInt(min, max) {",
															"    min = Math.ceil(min);",
															"    max = Math.floor(max);",
															"    return Math.floor(Math.random() * (max - min)) + min;",
															"}",
															"// generator csrf token",
															"var base64object = function(input) {",
															" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));",
															" var base64 = CryptoJS.enc.Base64.stringify(inputWords);",
															" return base64;",
															"};",
															"let uuid = require('uuid');",
															"let token = uuid.v4() + \"QAS\" + base64object(Date.now());",
															"pm.environment.set(\"csrfToken\", token);",
															"",
															"// delete all created custom fields",
															"let fieldIdsList = pm.environment.get('createdFieldsList');",
															"",
															"if (fieldIdsList.length > 0) {",
															"    fieldIdsList = fieldIdsList.substring(0, fieldIdsList.length - 1);",
															"    const arrFieldIds = fieldIdsList.split(',');",
															"    let jsonBody = '';",
															"    console.log(`-- Total created custom fields of Release: ${arrFieldIds.length}`);",
															"    arrFieldIds.forEach((fieldId) => {",
															"        const item = `{\"id\":${fieldId}}`;",
															"        jsonBody += item + ',';",
															"    });",
															"    jsonBody = jsonBody.substring(0, jsonBody.length - 1);",
															"    pm.environment.set('jsonBody', jsonBody);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "{{qtestUserCookie}}"
													},
													{
														"key": "X-CSRF-Token",
														"value": "{{csrfToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "customGridData",
															"value": "[{\"action\":\"DELETE\",\"items\":[{{jsonBody}}]}]",
															"type": "text"
														},
														{
															"key": "dojo.preventCache",
															"value": "{{csrfToken}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{qtestUrl}}/p/{{projectId}}/portal/customfield/updateCustomField",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"p",
														"{{projectId}}",
														"portal",
														"customfield",
														"updateCustomField"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Build",
							"item": [
								{
									"name": "Precondition",
									"item": [
										{
											"name": "200 - Precondition - Login success",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2016a573-3d34-481a-b6c1-d93594d4a05f",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"    pm.environment.set('accessToken', jsonData.access_token);",
															"    pm.environment.set('tokenType', jsonData.token_type);",
															"",
															"    // Create login cookie of user",
															"    const rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
															"    const base64 = CryptoJS.enc.Base64.stringify(rawStr);",
															"    pm.environment.set('qtestUserCookie', 'UserContextToken=' + base64);",
															"",
															"    // Constant qtest custom fields id",
															"    pm.environment.set('cusFieldIdTextbox', 1);",
															"    pm.environment.set('cusFieldIdTextarea', 2);",
															"    pm.environment.set('cusFieldIdCombobox', 3);",
															"    pm.environment.set('cusFieldIdDatePicker', 4);",
															"    pm.environment.set('cusFieldIdUserList', 5);",
															"    pm.environment.set('cusFieldIdRichTextEditor', 6);",
															"    pm.environment.set('cusFieldIdNumber', 7);",
															"    pm.environment.set('cusFieldIdCheckbox', 8);",
															"    pm.environment.set('cusFieldIdDatetimePicker', 9);",
															"    pm.environment.set('cusFieldIdUrl', 12);",
															"    pm.environment.set('cusFieldIdMulSelCombobox', 17);",
															"",
															"    pm.environment.set('createdFieldsList', '');",
															"    pm.environment.set(\"objectType\", \"builds\");",
															"    pm.environment.set(\"createdFieldsList\", \"\");",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8caeb35a-1c56-4d21-a3d8-393ba5ef7bc0",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic dGFtdG1uZ3V5ZW46"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "{{username}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{password}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{qtestUrl}}/oauth/token",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"oauth",
														"token"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Main",
									"item": [
										{
											"name": "Textbox",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field build - Textbox",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "7725732e-58db-4fa3-bc7c-de56dd45a16f",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoTextbox', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "ec4a06b1-f6d7-4009-b31e-b992946c78d5",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Textbox');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdTextbox'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}}\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field build - Update custom field textbox to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "4d5614be-2b8f-46da-aed3-168faf016ef6",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextbox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "b1cadc3e-4c5d-4703-b535-70959ce982bf",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoTextbox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field build - Update custom field textbox to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "d5e1ba8e-7556-4ba2-a84b-6d27205a8b6c",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextbox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "97a186bc-325c-4ddd-9e19-b17a9c8b725c",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoTextbox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "afcdc91d-65fb-47a1-b76d-8fa7e25d1855",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "5ccfdd2e-b37a-448b-8aec-fbd9ee9fa110",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Textarea",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field build - Textarea",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "d5e4e242-ba15-4249-b5ff-034d46e70c84",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoTextarea', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "1feef480-416d-4f17-a24f-db32a9415829",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Textarea');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdTextarea'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\",\n    \"allowed_values\": [],\n    \"multiple\": false\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field build - Update custom field text area to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "04eee261-64b9-40f1-835d-f7a714f3f3cb",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextarea');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "d2d66b8e-22de-4dc0-8af9-9c6054c739d2",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoTextarea');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field build - Update custom field textarea to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "6b4f8d2e-f8d5-4662-92b8-9379efbe0620",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextarea');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "d51e84ba-d3aa-4582-856d-6e4e017fe599",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoTextarea');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "04a2c7c2-9305-49d2-9db9-083c75de9d0d",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "66fe7ebf-1d53-4fbe-a34e-ada6a3112975",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "54b14335-6530-4c4b-a068-3f8439662d72",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "dfae3d68-eb6e-41fc-ab1e-864f6e6f7d1b",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Combobox",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition  - Create custom field build - Combobox",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "6e5f0b6d-2b17-401b-b5e0-477d6403311a",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoCombobox', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "fcb44cb8-15d3-47b4-bff2-043abdedb1df",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Combobox');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdCombobox'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"allowed_values\": []\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field build - Update custom field combobox to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "af4f1b6d-6aae-4ccc-9d19-8fcd0c85b7ed",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoCombobox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "ca75c866-00a1-4e8c-98a4-88ad248c751c",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoCombobox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field build - Update custom field combobox to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "5f8aceba-80f2-441d-9892-13ac49f0423b",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoCombobox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "9ecf613b-262f-4a87-a489-cd3a7a4d74b4",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoCombobox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "4361b841-3d3e-47bf-bb19-d8935ca4badc",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "b9f1a253-6497-4642-bdac-3ad1fadae702",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5da16ee7-ca07-47a7-9301-cdf12af7ee30",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "aa579616-7f12-4796-8fae-f356059f5e69",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Date picker",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field build - DatePicker",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "dba34519-4181-4e3f-a585-18fcf9d9880f",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoDatePicker', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "c61f24f5-97da-414c-8042-7807e0afc708",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My DatePicker');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdDatePicker'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\"\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field build - Update custom field date picker to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "c689056a-6357-42f1-ac2a-d6f8caf64e3c",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoDatePicker');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "4c299c61-0bd9-499b-b74a-7841c81975d3",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoDatePicker');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field build - Update custom field date picker to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "e2b272dc-f048-470d-8c5c-7a4a755b3a07",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoDatePicker');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "fe1ea205-e592-473f-9aa8-a958f92cb46a",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoDatePicker');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "658cd027-a93d-4aee-aa38-1372e524896d",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "6ce47913-ca7c-4e3b-af56-5370b3ec1a61",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "198542bf-7660-4637-a022-9c48099bc367",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7c56d8c4-647c-49b8-be11-3a3e1e25bfc5",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "User list",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field build - UserList",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "47f79e8d-2d61-4b3b-ae5c-9a00e25719e5",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoUserList', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "afb72139-c30b-4246-ad95-ae6fd16da01e",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My UserList');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdUserList'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field build - Update custom field user list to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "8ed0aeda-6e05-4a00-95dc-8cc068588f96",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoUserList');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "2fafecf6-36dd-45c3-834b-42b3587b97fa",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoUserList');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field build - Update custom field user list to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "9dc42291-8358-454d-add4-abf2288163a1",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoUserList');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "c06f0a9e-84d8-4233-8fcb-60532547fd43",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoUserList');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "102bbd28-eab9-4e96-b507-7ea3265d26b8",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "125b53c4-bd44-43b9-970f-f431575204e2",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "45f25a6c-40e6-4591-ba69-f1de5200dc31",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2b735bdf-b0f4-411f-9616-70cece989bb8",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Rich text editor",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field build - Rich text editor",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "1f965bc8-885d-4f26-b182-d299bceecf67",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoRichTextEditor', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "4734fe98-06a4-4934-8026-5b1ee6386d38",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My RichTextEditor');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdRichTextEditor'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\"\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field build - Update custom field rich text editor to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "5dbd443f-1ff7-411e-9875-2adba3cb7a1f",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoRichTextEditor');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "71c1f623-c8d4-44b5-a1c6-42d28c5ab8d3",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoRichTextEditor');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field build - Update custom field rich text editor to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "41527b9d-7912-4f6b-8544-0aa08cf27c60",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoRichTextEditor');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "80106074-5881-4069-9f34-fcbd2bd46291",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoRichTextEditor');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "14244fb1-f1b2-4d87-b798-4f0ace09091b",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "f518344c-e39b-44b1-a540-583e4b5b0a97",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "751b2d73-6a94-412b-8b3b-8f938c846627",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "908f4e84-884d-45c4-a5b4-2394c1391975",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Number",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field build - Number",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "3b45c6ec-1f62-4a2e-935f-aa9a273e8ba8",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoNumber', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "14942d5c-8487-4c97-aabe-cefb280a8408",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Number');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdNumber'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\"\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field build - Update custom field number to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "4b6a7b99-e87a-4c2f-8f37-17d794db8edb",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoNumber');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "1b0f409a-808a-465a-8b45-7ed3273a4c5f",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoNumber');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field build - Update custom field number to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "1b9880a8-95f5-4781-a29a-987cb6e9a3bc",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoNumber');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "21a77bf1-104f-4abf-8be3-858f874a4149",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoNumber');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "4edad916-31f6-4816-a6a6-50f23a1dbb1f",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "bebea04c-9879-4f97-bd22-25c722ac967b",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2c6073c0-9149-4d6e-8dff-dfb506e18625",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b3b9586b-8b19-47b9-9a94-0bd268aa8039",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Check box",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field build - Checkbox",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "a7d55627-114f-48a4-9430-def19152146f",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoCheckbox', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "06f49573-7b84-458d-8a89-5be13c870df5",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Checkbox');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdCheckbox'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"allowed_values\": []\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field build - Update custom field check box to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "83ebc29c-3ac5-459a-a83b-fca642ce70f9",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoCheckbox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "c6ef8658-b53d-4484-a875-63c519608d22",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoCheckbox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field build - Update custom field check box to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "14b1884b-67aa-4257-898e-eb23664ac8f0",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoCheckbox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "ff0b2444-7610-43da-9d4e-7778e3e8a28e",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoCheckbox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "c6fda6d5-0730-4376-b9f7-73fde17c23f5",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "bef92fc6-96f5-4d80-868d-eff3ade907a4",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4a0c5541-4a8f-49ba-9124-42332ff6f739",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "46ee0cd8-0b59-4f6a-b1a0-8087a9a4a60a",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Datetime picker",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field build - DateTimePicker",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "aa0587b2-789d-401c-84ee-b74e75a58677",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoDateTimePicker', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "a1661e7f-05eb-49f8-934c-6ab25627cb28",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My DatetimePicker');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdDatetimePicker'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"allowed_values\": []\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field build - Update custom field datetime picker to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "d61d9549-d6b5-47d2-8983-e441df14a61b",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoDateTimePicker');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "3bae47fe-86e2-406a-8216-ee3ba1638745",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoDateTimePicker');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field build - Update custom field datetime picker to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "a6cf058f-446a-440c-8dd7-c94716f02b88",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoDateTimePicker');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "bdac2c29-6e88-4571-8a30-ad7536928b71",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoDateTimePicker');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "f52db0f2-bd46-4ee7-9309-0f93800b0bb2",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "b0d9d05d-157b-4745-8798-b806f9148398",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "06b8f346-b7a1-4f32-8895-6302cbe30d7d",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b22aefde-9b73-4f23-9f81-ebdfe7155d36",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "URL",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field build - URL",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "35442744-b727-44fa-9253-3e87292d9602",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoUrl', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "384f9250-6c50-44c7-bae2-8d4bab6c14b4",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Url');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdUrl'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\"\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field build - Update custom field url to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "35ca8557-836e-402e-9143-cf740ffaf7ff",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoUrl');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "5c4f5a0d-804e-4669-8195-8464e54c39ce",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoUrl');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field build - Update custom field url to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "1577d822-dbe1-49d2-ab72-a437d9d1b68b",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoUrl');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "b3ebc697-95e4-4339-9322-5fc9733c8c85",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoUrl');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "982fee6a-3def-4669-9bd2-fadf624e2ebf",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "cc77a280-72fc-4a18-9dd8-ce04d6d8216e",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "bacfe333-bf49-46b0-8d2e-5fc50052f22a",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f3b9361e-34be-47c1-a2f0-3ada71c69904",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Multiple Selection Combobox",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field build - MultipleSelectionCombobox",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "2632d77b-3c80-4903-8029-9d918298612f",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoMulSelCombobox', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "a20cdddb-4e61-4dbf-82a2-d54b709f30a6",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My MulSelCombobox');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdMulSelCombobox'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"allowed_values\": []\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field build - Update custom field multiple selection combobox to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "b506f3d6-c1e5-466f-bc6a-01229ad79a35",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoMulSelCombobox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "ec2d12cf-9cad-48b6-aa3f-98436d6ea213",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoMulSelCombobox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field build - Update custom field multiple selection combobox to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "6f98bd3d-dd69-4ea7-b3e5-4232e266b5e4",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoMulSelCombobox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "0b5260d9-00df-44fd-8362-6feef5c1d007",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoMulSelCombobox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "894efdfb-7889-489b-9bfb-b1ae80b6ffec",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "959e89be-44ea-4efd-a36c-3dd56758f83a",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "641fe2b6-1cbe-4f05-b78f-4b97fbce2c81",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7c2d5721-4ec4-41e9-ae47-72f13bd4bbfa",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "200 - Update custom field build - Inactive some custom fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d583d7f0-1a75-4a24-b2b5-e9099020638a",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"    const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"    const jsonData = pm.response.json();",
															"",
															"    jsonData.forEach((fieldInfo) => {",
															"        pm.test(`Response data of custom field '${fieldInfo.label}' has property 'is_active' value is false`, () => {",
															"            pm.expect(fieldInfo.is_active).to.be.false;",
															"        })",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e00f38c0-5bed-4eed-bee2-2007b126b644",
														"type": "text/javascript",
														"exec": [
															"const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"pm.environment.set('idTextbox', cusFieldInfoTextbox.id);",
															"pm.environment.set('idTextarea', cusFieldInfoTextarea.id);"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{idTextbox}},\n\t    \"is_active\": false\n\t},\n\t{\n\t\t\"id\": {{idTextarea}},\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "200 - Update custom field build - Active some custom fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "600f1774-58d1-4823-b838-d01d5702ca4e",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"    const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"    const jsonData = pm.response.json();",
															"",
															"    jsonData.forEach((fieldInfo) => {",
															"        pm.test(`Response data of custom field '${fieldInfo.label}' has property 'is_active' value is true`, () => {",
															"            pm.expect(fieldInfo.is_active).to.be.true;",
															"        })",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "baa00572-e3cb-475f-bd9c-4627911384b7",
														"type": "text/javascript",
														"exec": [
															"const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"pm.environment.set('idTextbox', cusFieldInfoTextbox.id);",
															"pm.environment.set('idTextarea', cusFieldInfoTextarea.id);"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{idTextbox}},\n\t    \"is_active\": true\n\t},\n\t{\n\t\t\"id\": {{idTextarea}},\n\t    \"is_active\": true\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "200 - Update custom field build - Multiple fields with multiple statuses",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "609fbbdf-d2af-4d76-aab9-378edaf0f9e8",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"    const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"    const cusFieldInfoCombobox = pm.environment.get('cusFieldInfoCombobox');",
															"    const jsonData = pm.response.json();",
															"",
															"    jsonData.forEach((fieldInfo) => {",
															"        switch (fieldInfo.label) {",
															"            case cusFieldInfoTextbox.label:",
															"                pm.test(`Response data of custom field '${cusFieldInfoTextbox.label}' has property 'is_active' value is false`, () => {",
															"                    pm.expect(fieldInfo.is_active).to.be.false;",
															"                });",
															"                break;",
															"",
															"            case cusFieldInfoTextarea.label:",
															"                pm.test(`Response data of custom field '${cusFieldInfoTextarea.label}' has property 'is_active' value is true`, () => {",
															"                    pm.expect(fieldInfo.is_active).to.be.true;",
															"                });",
															"                break;",
															"",
															"            case cusFieldInfoCombobox.label:",
															"                pm.test(`Response data of custom field '${cusFieldInfoCombobox.label}' has property 'is_active' value is false`, () => {",
															"                    pm.expect(fieldInfo.is_active).to.be.false;",
															"                });",
															"                break;",
															"        }",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0ebf89ce-1974-4a96-8b40-2cea28c64eb0",
														"type": "text/javascript",
														"exec": [
															"const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"const cusFieldInfoCombobox = pm.environment.get('cusFieldInfoCombobox');",
															"pm.environment.set('idTextbox', cusFieldInfoTextbox.id);",
															"pm.environment.set('idTextarea', cusFieldInfoTextarea.id);",
															"pm.environment.set('idCombobox', cusFieldInfoCombobox.id);"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{idTextbox}},\n\t    \"is_active\": false\n\t},\n\t{\n\t\t\"id\": {{idTextarea}},\n\t    \"is_active\": true\n\t},\n\t{\n\t\t\"id\": {{idCombobox}},\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Update custom field build - Invalid object type",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "821f1f29-0b09-4f6b-adc7-ea9944b79ae1",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"    const EXPECTED_MSG = 'Unsupported object type';",
															"",
															"    pm.test(`Response data has property 'message' value contains '${EXPECTED_MSG}'`, () => {",
															"        pm.expect(jsonData.message).to.include(EXPECTED_MSG);",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "74ea8290-997d-4045-9c09-edb2195892af",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"id\": 11111,\n        \"is_active\": true\n    }\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/invalid-{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"invalid-{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Update custom field build - Blank body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "deb35119-7d02-4751-8f62-4e952ae4020e",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"const result = pm.response.code === RESPONSE_CODE;",
															"const EXPECTED_MSGS = [",
															"    \"Required request body is missing\",",
															"    \"Required request body content is missing\"];",
															"    ",
															"function validateMessage(actualMessage){",
															"    let result = false;",
															"    for(const msg of EXPECTED_MSGS) {",
															"        result = actualMessage.indexOf(msg) > -1;",
															"        if(result){",
															"            console.log(`Actual message is: ${actualMessage}`);",
															"            return result;",
															"        }",
															"    }",
															"    return result;",
															"}",
															"",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"    pm.test(`Response body has 'message' property value in following: '${EXPECTED_MSGS.toString()}'`, () => {",
															"        pm.expect(validateMessage(jsonData.message)).to.eql(true);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "7facecb8-9b53-4edf-b90e-2002ab848046",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Update custom field build - Empty json body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0d537c6a-da1d-466f-b2af-8b7d59297579",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextbox');",
															"    const jsonData = pm.response.json();",
															"",
															"    pm.test(`Response data contains error message: custom field does not exist`, () => {",
															"        pm.expect(pm.response.text()).to.include('does not exist');",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "bbbf1d41-e90f-4211-b228-cbc7eb5680a0",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Update custom field build - Invalid field id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d9f1f323-8f0c-40d4-95d8-682115161553",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"",
															"    pm.test(`Response data contains error message: 'custom field does not exist`, () => {",
															"        pm.expect(pm.response.text()).to.include('does not exist');",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "a34d998d-1012-4e15-a3e0-be804ab88f16",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": 11111,\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "404 - Update custom field build - Project not found",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4ff78a1a-ca97-4c49-a225-1e5d09bf258c",
														"exec": [
															"const RESPONSE_CODE = 404;\r",
															"const EXPECTED_MSG = 'Project not found';\r",
															"const result = pm.response.code === RESPONSE_CODE;\r",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {\r",
															"    pm.response.to.have.status(RESPONSE_CODE);\r",
															"});\r",
															"\r",
															"if (result) {\r",
															"    const jsonData = pm.response.json();\r",
															"    pm.test(`Response body has 'message' property value '${EXPECTED_MSG}'`, () => {\r",
															"        pm.expect(jsonData.message).to.contains(EXPECTED_MSG);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "ba6bd38b-59fd-4100-8d6e-7d6f1be537ff",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{cusFieldIdTextbox}},\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}11111/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}11111",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Update custom field build - Invalid project id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f79962b2-4268-4229-8457-947b5abe1101",
														"exec": [
															"const RESPONSE_CODE = 400;\r",
															"\r",
															"const result = pm.response.code === RESPONSE_CODE;\r",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {\r",
															"    pm.response.to.have.status(RESPONSE_CODE);\r",
															"});\r",
															"\r",
															"if (result) {\r",
															"    const jsonData = pm.response.json();\r",
															"    const EXPECTED_MSG = `invalid-${pm.environment.get(\"projectId\")}`;\r",
															"\r",
															"    pm.test(`Response body has 'message' property contain invalid text`, () => {\r",
															"        pm.expect(jsonData.message).to.include(EXPECTED_MSG);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "dd3ea05c-9b2a-4a70-ba9d-343866ccb716",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{cusFieldIdTextbox}},\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/invalid-{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"invalid-{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Cleanup",
									"item": [
										{
											"name": "200 - Cleanup - Delete all created custom fields of build",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6ef88161-9508-4130-a52e-1cc863a69da1",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"pm.environment.set(\"cusFieldId\",\"\");",
															"pm.environment.set('createdFieldsList', '');",
															"pm.environment.unset('cusFieldDataTypeId');",
															"pm.environment.unset('resAttributeType');",
															"pm.environment.unset('cusFieldName');",
															"pm.environment.unset('cusFieldDefaultValue');",
															"pm.environment.unset(\"cusFieldInfoTextbox\");",
															"pm.environment.unset(\"cusFieldInfoTextarea\");",
															"pm.environment.unset(\"cusFieldInfoCombobox\");",
															"pm.environment.unset(\"cusFieldInfoDatePicker\");",
															"pm.environment.unset(\"cusFieldInfoUserList\");",
															"pm.environment.unset(\"cusFieldInfoRichTextEditor\");",
															"pm.environment.unset(\"cusFieldInfoNumber\");",
															"pm.environment.unset(\"cusFieldInfoCheckbox\");",
															"pm.environment.unset(\"cusFieldInfoDateTimePicker\");",
															"pm.environment.unset(\"cusFieldInfoUrl\");",
															"pm.environment.unset(\"cusFieldInfoMulSelCombobox\");",
															"pm.environment.unset(\"jsonBody\");",
															"pm.environment.unset(\"csrfToken\");",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "315e6349-e544-443e-9293-02b8ed0d5e37",
														"exec": [
															"// random generator function",
															"function getRandomInt(min, max) {",
															"    min = Math.ceil(min);",
															"    max = Math.floor(max);",
															"    return Math.floor(Math.random() * (max - min)) + min;",
															"}",
															"// generate the random value",
															"// generator csrf token",
															"var base64object = function(input) {",
															" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));",
															" var base64 = CryptoJS.enc.Base64.stringify(inputWords);",
															" return base64;",
															"};",
															"let uuid = require('uuid');",
															"let token = uuid.v4() + \"QAS\" + base64object(Date.now());",
															"pm.environment.set(\"csrfToken\", token);",
															"",
															"// delete all created custom fields",
															"let fieldIdsList = pm.environment.get('createdFieldsList');",
															"",
															"if (fieldIdsList.length > 0) {",
															"    fieldIdsList = fieldIdsList.substring(0, fieldIdsList.length - 1);",
															"    const arrFieldIds = fieldIdsList.split(',');",
															"    let jsonBody = '';",
															"    console.log(`-- Total created custom fields of build: ${arrFieldIds.length}`);",
															"    arrFieldIds.forEach((fieldId) => {",
															"        const item = `{\"id\":${fieldId}}`;",
															"        jsonBody += item + ',';",
															"    });",
															"    jsonBody = jsonBody.substring(0, jsonBody.length - 1);",
															"    pm.environment.set('jsonBody', jsonBody);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "{{qtestUserCookie}}"
													},
													{
														"key": "X-CSRF-Token",
														"value": "{{csrfToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "customGridData",
															"value": "[{\"action\":\"DELETE\",\"items\":[{{jsonBody}}]}]",
															"type": "text"
														},
														{
															"key": "dojo.preventCache",
															"value": "{{csrfToken}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{qtestUrl}}/p/{{projectId}}/portal/customfield/updateCustomField",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"p",
														"{{projectId}}",
														"portal",
														"customfield",
														"updateCustomField"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Requirement",
							"item": [
								{
									"name": "Precondition",
									"item": [
										{
											"name": "200 - Precondition - Login success",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bce7699e-1cc6-40d7-b53a-f629a0952cde",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"    pm.environment.set('accessToken', jsonData.access_token);",
															"    pm.environment.set('tokenType', jsonData.token_type);",
															"",
															"    // Create login cookie of user",
															"    const rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
															"    const base64 = CryptoJS.enc.Base64.stringify(rawStr);",
															"    pm.environment.set('qtestUserCookie', 'UserContextToken=' + base64);",
															"",
															"    // Constant qtest custom fields id",
															"    pm.environment.set('cusFieldIdTextbox', 1);",
															"    pm.environment.set('cusFieldIdTextarea', 2);",
															"    pm.environment.set('cusFieldIdCombobox', 3);",
															"    pm.environment.set('cusFieldIdDatePicker', 4);",
															"    pm.environment.set('cusFieldIdUserList', 5);",
															"    pm.environment.set('cusFieldIdRichTextEditor', 6);",
															"    pm.environment.set('cusFieldIdNumber', 7);",
															"    pm.environment.set('cusFieldIdCheckbox', 8);",
															"    pm.environment.set('cusFieldIdDatetimePicker', 9);",
															"    pm.environment.set('cusFieldIdUrl', 12);",
															"    pm.environment.set('cusFieldIdMulSelCombobox', 17);",
															"",
															"    pm.environment.set('createdFieldsList', '');",
															"    pm.environment.set(\"objectType\", \"requirements\");",
															"    pm.environment.set(\"createdFieldsList\", \"\");",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3207e41c-28eb-4929-bc8b-aeb18d72cb21",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic dGFtdG1uZ3V5ZW46"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "{{username}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{password}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{qtestUrl}}/oauth/token",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"oauth",
														"token"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Main",
									"item": [
										{
											"name": "Textbox",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field requirement - Textbox",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "b4311612-587b-44ec-be8f-8e7bdf989e06",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoTextbox', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "78e9fd84-2f74-4d86-bccc-fdf2b0bdf0ec",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Textbox');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdTextbox'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}}\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field requirement - Update custom field textbox to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "9d021f4f-a3a5-4a72-b862-2c8205ec0691",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextbox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "f6d64b6d-fbfe-4e8b-bbf1-0b24063b6b9e",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoTextbox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field requirement - Update custom field textbox to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "bd0b11cf-a8d4-4868-9120-76bbbd3815b7",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextbox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "0523efb1-3afe-42fd-8f57-0eb3878cf4fd",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoTextbox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "41ffb73f-b830-46ed-b939-eb916763e299",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "db428e22-8b96-4123-bd60-dbaae86347ee",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Textarea",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field requirement - Textarea",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "58ae069a-dc12-4451-8127-4434d6dfc736",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoTextarea', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "53683e51-f9f4-4047-9187-54f5d02bd0d9",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Textarea');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdTextarea'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\",\n    \"allowed_values\": [],\n    \"multiple\": false\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field requirement - Update custom field text area to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "08df3216-f258-42ae-94db-a1fa62676597",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextarea');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "57567e57-fef3-4119-b400-e42e130be50c",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoTextarea');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field requirement - Update custom field textarea to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "92adb49f-d371-4606-bffb-e0a1db863771",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextarea');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "700667ea-b8a0-4386-9756-d067e5292e6a",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoTextarea');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "196dcec8-7a59-4348-84f6-a423fa25088d",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "74f22d3e-9dd5-4471-a1e8-f4183a688420",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7c642b14-6199-4a78-9040-01777c15595a",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1794071e-d5fc-4189-970d-3db57ba8793b",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Combobox",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition  - Create custom field requirement - Combobox",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "4796e8b0-7b54-466d-9b0e-098d1fbc1e85",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoCombobox', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "845b4674-f1b0-419f-9812-94f19d0e8476",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Combobox');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdCombobox'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"allowed_values\": []\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field requirement - Update custom field combobox to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "1542345d-0c27-47af-a0e4-7e92d45b37b8",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoCombobox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "06ff31a1-6d5c-4c5b-b31a-1a0af6d709ae",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoCombobox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field requirement - Update custom field combobox to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "33f228e9-a3b5-4fc5-9af3-a0bca0f142a1",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoCombobox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "2e0ff465-332c-4085-8a84-481593b82a1f",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoCombobox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "9735e18c-e6eb-4237-8325-d7b8bb451997",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "2572f8ca-63d0-4192-8d01-5c6455374468",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ee18a370-46a6-4430-a2bf-969dad2b151e",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "99a41d7d-a3b4-4d02-98fb-055d96a762bc",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Date picker",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field requirement - DatePicker",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "9a0537d6-65d0-4e8c-9f70-50da6f5845c7",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoDatePicker', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "33381123-ffc7-42a4-b204-91b1ed4127b6",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My DatePicker');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdDatePicker'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\"\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field requirement - Update custom field date picker to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "4eb328cb-c6fe-41e3-8927-4f4f7047f667",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoDatePicker');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "3077bb5d-7003-424d-ab35-8f9d3e1ad831",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoDatePicker');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field requirement - Update custom field date picker to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "2e64f1c4-3412-45cf-99b7-d8fa834a27ce",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoDatePicker');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "d325cd68-8ea5-47c5-ae61-55ed4a73f0ea",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoDatePicker');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "c5fdbff4-e1e3-4bb6-8e00-8a17ccfcca75",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "5d529705-df70-4377-abd7-d4bae148038b",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "77c091e5-3915-4e6e-a9d6-8151e0ab666e",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "389734da-e40c-46b6-a357-4d774334a882",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "User list",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field requirement - UserList",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "1d7666d1-98a6-40c4-a5d6-04a4141bb78c",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoUserList', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "c5a0b86e-b358-4933-a2b7-d86050660df4",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My UserList');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdUserList'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field requirement - Update custom field user list to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "0d381c4f-0679-4a6f-a018-437e0758c873",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoUserList');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "a7608df0-cea4-48a8-937d-0ea4e44f53a3",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoUserList');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field requirement - Update custom field user list to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "aca8813d-4288-4072-baa7-476524bc8e17",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoUserList');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "33c27bbb-67dc-4caa-9ae2-7d98157dcdd5",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoUserList');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "37bb1b79-4096-4a7d-9fe2-0ba24ad1a29f",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "bc3349d8-354f-48ac-b02b-3ba52a068a84",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2e6e2be9-a9df-4582-a516-543b00b374ca",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ee9d782c-86ea-40f1-8134-30ab1912774c",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Rich text editor",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field requirement - Rich text editor",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "0f02cb63-9b92-4bae-8c7a-22cbe30e74a0",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoRichTextEditor', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "229ee392-d652-4a95-91f5-03a76fd352fa",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My RichTextEditor');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdRichTextEditor'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\"\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field requirement - Update custom field rich text editor to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "cf88245b-78ee-4513-8747-40b0d360df03",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoRichTextEditor');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "b774f36e-1d20-4af1-8187-2456e0a76047",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoRichTextEditor');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field requirement - Update custom field rich text editor to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "21339565-de44-40b9-a1f9-53c44d3d590a",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoRichTextEditor');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "7abe5bed-6fd6-4bba-85e6-2c382fe15806",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoRichTextEditor');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "debadb17-e35f-47ef-9493-9266171c7716",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "291871ff-76ce-4ad4-8a73-7863ac5f37af",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "01c6e7f4-9c95-4dec-bebf-46afca6c8818",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2cd65133-f870-4871-9c3b-f876ae417a4a",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Number",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field requirement - Number",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "132e9c65-3dba-4fda-a9f8-dbc940b27d7e",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoNumber', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "8a8c5925-1a89-4dd8-948a-ee47ebe13e3c",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Number');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdNumber'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\"\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field requirement - Update custom field number to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "1543dfe7-699b-4ae0-bb4a-81ed14ec8b7f",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoNumber');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "7a4c2ba4-1284-4b74-9a69-34e08ea8b636",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoNumber');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field requirement - Update custom field number to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "f95e73d1-5d7d-4b77-b407-68049a45c4dd",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoNumber');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "71fdb59c-c2ba-4831-911d-d99141f63578",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoNumber');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "583b17e0-94db-4fef-bdae-f464cc680728",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "e1a7f7a9-e38a-4608-8862-737b3441951c",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "58996b95-eeb0-46a6-9efe-d240a9fcb6f0",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1d308205-84fb-40fe-b818-1f2edadcf55f",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Check box",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field requirement - Checkbox",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "329465d8-6a65-4492-a27f-39ebc30994ee",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoCheckbox', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "45cc798e-c6da-4e21-846a-c7a7d4246336",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Checkbox');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdCheckbox'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"allowed_values\": []\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field requirement - Update custom field check box to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "7f78b168-570e-4ae9-85ed-f11520f0b190",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoCheckbox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "ceb4b8ab-6e2a-4bd9-863a-251ae4c3bcab",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoCheckbox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field requirement - Update custom field check box to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "fcca7866-de2e-40f8-ba63-6688ac3fca44",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoCheckbox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "ee316e09-9854-49f6-bd23-3cb5f5ad7bd2",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoCheckbox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "15b3d976-abb3-4fc4-b484-65fa1a63c9b7",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "97518500-ca35-40db-84ab-02b7755610d4",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "eaa0665a-7f49-4141-9978-4f9cccfa4c76",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "311df779-ed13-4a98-b664-e4bc09123f1f",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Datetime picker",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field requirement - DateTimePicker",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "e5d412ca-23ef-4548-8f4f-c90f40070187",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoDateTimePicker', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "3d40bc5e-984d-4d0e-b8e5-0a2673650eff",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My DatetimePicker');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdDatetimePicker'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"allowed_values\": []\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field requirement - Update custom field datetime picker to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "17fce03c-6563-4e64-ae91-0d62a82e7344",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoDateTimePicker');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "e61eef8e-b9a5-47c8-bef2-f08d57a10aa9",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoDateTimePicker');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field requirement - Update custom field datetime picker to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "b841dd1a-48dd-4713-a2d9-ec40c35d3dd4",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoDateTimePicker');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "e5512b96-f366-41a7-8799-e576cd948c1c",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoDateTimePicker');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "10665936-8af2-4aec-9698-c3cf6322e262",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "5281a1f8-1e66-442b-be9d-1b2362dfb8de",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9a137be6-e605-40b2-9418-a715cd33f63f",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a0064f0b-faba-4048-8570-87c9d63c98d0",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "URL",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field requirement - URL",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "59d0a4b4-b2af-4afd-bdf0-201d352453f6",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoUrl', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "f50109ff-5b71-42fe-94df-dd1d9ddedd04",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Url');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdUrl'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\"\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field requirement - Update custom field url to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "268b731b-f3e4-4e87-849a-744f2e205576",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoUrl');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "27f9b5c8-1df3-4333-88fa-c4f6ec9284a9",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoUrl');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field requirement - Update custom field url to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "87959077-bb1f-4dc7-a7e6-d7361c77b943",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoUrl');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "2cf96f89-45bd-47b4-9a44-38a98df2c49d",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoUrl');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "7272bcae-361b-43ee-aead-e3246cef4107",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "d5848418-8b88-4f47-a545-2f6e00bcf968",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2bce6aee-cec5-44c0-acb5-4ce150d72503",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "13c314df-e84f-4b15-a3ba-181bb6746961",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Multiple Selection Combobox",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field requirement - MultipleSelectionCombobox",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "86ce1270-846a-4dbd-a1af-8c658353f4e7",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoMulSelCombobox', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "a35279f4-bf47-4582-b695-502aba2dc3df",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My MulSelCombobox');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdMulSelCombobox'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"allowed_values\": []\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field requirement - Update custom field multiple selection combobox to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "e88b385a-0f24-46bc-a13a-bc39d443a710",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoMulSelCombobox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "af7cca4b-5d36-49c7-8098-34f1335f935e",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoMulSelCombobox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field requirement - Update custom field multiple selection combobox to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "d64885b8-1e53-4e99-9fe1-26646b1509b2",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoMulSelCombobox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "f24bf2cd-e578-442b-b04f-37632e9b3739",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoMulSelCombobox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "bb670655-ed0b-41af-9330-115d80e52fd5",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "d3afc91c-fa20-4575-95bc-6709b4340b1b",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0a9c2d0d-8df1-4eb9-a27e-b9c7c700640a",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b5b83717-f71e-4103-ad11-faf1dec28c9a",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "200 - Update custom field requirement - Inactive some custom fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4374ef8e-632b-4717-8546-4efa6d04614d",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"    const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"    const jsonData = pm.response.json();",
															"",
															"    jsonData.forEach((fieldInfo) => {",
															"        pm.test(`Response data of custom field '${fieldInfo.label}' has property 'is_active' value is false`, () => {",
															"            pm.expect(fieldInfo.is_active).to.be.false;",
															"        })",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "2ef4be5d-a9be-4171-ba8e-0f5f9317c6c3",
														"type": "text/javascript",
														"exec": [
															"const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"pm.environment.set('idTextbox', cusFieldInfoTextbox.id);",
															"pm.environment.set('idTextarea', cusFieldInfoTextarea.id);"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{idTextbox}},\n\t    \"is_active\": false\n\t},\n\t{\n\t\t\"id\": {{idTextarea}},\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "200 - Update custom field requirement - Active some custom fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "585ce334-0864-48cb-be87-6f508a5462cb",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"    const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"    const jsonData = pm.response.json();",
															"",
															"    jsonData.forEach((fieldInfo) => {",
															"        pm.test(`Response data of custom field '${fieldInfo.label}' has property 'is_active' value is true`, () => {",
															"            pm.expect(fieldInfo.is_active).to.be.true;",
															"        })",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "a3a54891-2096-4888-8922-5475b304cc23",
														"type": "text/javascript",
														"exec": [
															"const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"pm.environment.set('idTextbox', cusFieldInfoTextbox.id);",
															"pm.environment.set('idTextarea', cusFieldInfoTextarea.id);"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{idTextbox}},\n\t    \"is_active\": true\n\t},\n\t{\n\t\t\"id\": {{idTextarea}},\n\t    \"is_active\": true\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "200 - Update custom field requirement - Multiple fields with multiple statuses",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f0e4cc57-1797-4135-aa78-7aa3e28babd5",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"    const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"    const cusFieldInfoCombobox = pm.environment.get('cusFieldInfoCombobox');",
															"    const jsonData = pm.response.json();",
															"",
															"    jsonData.forEach((fieldInfo) => {",
															"        switch (fieldInfo.label) {",
															"            case cusFieldInfoTextbox.label:",
															"                pm.test(`Response data of custom field '${cusFieldInfoTextbox.label}' has property 'is_active' value is false`, () => {",
															"                    pm.expect(fieldInfo.is_active).to.be.false;",
															"                });",
															"                break;",
															"",
															"            case cusFieldInfoTextarea.label:",
															"                pm.test(`Response data of custom field '${cusFieldInfoTextarea.label}' has property 'is_active' value is true`, () => {",
															"                    pm.expect(fieldInfo.is_active).to.be.true;",
															"                });",
															"                break;",
															"",
															"            case cusFieldInfoCombobox.label:",
															"                pm.test(`Response data of custom field '${cusFieldInfoCombobox.label}' has property 'is_active' value is false`, () => {",
															"                    pm.expect(fieldInfo.is_active).to.be.false;",
															"                });",
															"                break;",
															"        }",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "ade55f86-06d4-40df-9e13-649f99a75eaf",
														"type": "text/javascript",
														"exec": [
															"const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"const cusFieldInfoCombobox = pm.environment.get('cusFieldInfoCombobox');",
															"pm.environment.set('idTextbox', cusFieldInfoTextbox.id);",
															"pm.environment.set('idTextarea', cusFieldInfoTextarea.id);",
															"pm.environment.set('idCombobox', cusFieldInfoCombobox.id);"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{idTextbox}},\n\t    \"is_active\": false\n\t},\n\t{\n\t\t\"id\": {{idTextarea}},\n\t    \"is_active\": true\n\t},\n\t{\n\t\t\"id\": {{idCombobox}},\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Update custom field requirement - Invalid object type",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cd91e3e8-8026-4a8c-b6aa-9a23a9a8db15",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"    const EXPECTED_MSG = 'Unsupported object type';",
															"",
															"    pm.test(`Response data has property 'message' value contains '${EXPECTED_MSG}'`, () => {",
															"        pm.expect(jsonData.message).to.include(EXPECTED_MSG);",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e4cf2ca9-b53e-46df-abc1-ef0df77d030c",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"id\": 11111,\n        \"is_active\": true\n    }\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/invalid-{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"invalid-{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Update custom field requirement - Blank body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3e429849-ef50-45f9-af07-518abaa02599",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"const result = pm.response.code === RESPONSE_CODE;",
															"const EXPECTED_MSGS = [",
															"    \"Required request body is missing\",",
															"    \"Required request body content is missing\"];",
															"    ",
															"function validateMessage(actualMessage){",
															"    let result = false;",
															"    for(const msg of EXPECTED_MSGS) {",
															"        result = actualMessage.indexOf(msg) > -1;",
															"        if(result){",
															"            console.log(`Actual message is: ${actualMessage}`);",
															"            return result;",
															"        }",
															"    }",
															"    return result;",
															"}",
															"",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"    pm.test(`Response body has 'message' property value in following: '${EXPECTED_MSGS.toString()}'`, () => {",
															"        pm.expect(validateMessage(jsonData.message)).to.eql(true);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5a488eb8-2bea-49aa-82bf-17c4ead1198f",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Update custom field requirement - Empty json body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8f4e125a-f229-40ca-8b88-e97d85ff456a",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextbox');",
															"    const jsonData = pm.response.json();",
															"",
															"    pm.test(`Response data contains error message: custom field does not exist`, () => {",
															"        pm.expect(pm.response.text()).to.include('does not exist');",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9818d9a1-38cb-4741-ad95-640d6b0adb27",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Update custom field requirement - Invalid field id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c3c9a529-6bd9-47de-ba23-b21502c8a671",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"",
															"    pm.test(`Response data contains error message: 'custom field does not exist`, () => {",
															"        pm.expect(pm.response.text()).to.include('does not exist');",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "fdeac67f-598b-4996-9356-3df12c7eb503",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": 11111,\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "404 - Update custom field requirement - Project not found",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ec764742-9f75-4dc4-804c-14401a89fd81",
														"exec": [
															"const RESPONSE_CODE = 404;\r",
															"const EXPECTED_MSG = 'Project not found';\r",
															"const result = pm.response.code === RESPONSE_CODE;\r",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {\r",
															"    pm.response.to.have.status(RESPONSE_CODE);\r",
															"});\r",
															"\r",
															"if (result) {\r",
															"    const jsonData = pm.response.json();\r",
															"    pm.test(`Response body has 'message' property value '${EXPECTED_MSG}'`, () => {\r",
															"        pm.expect(jsonData.message).to.contains(EXPECTED_MSG);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5728e6fc-52ea-4a01-ae1c-67716b0a7e55",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{cusFieldIdTextbox}},\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}11111/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}11111",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Update custom field requirement - Invalid project id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "444b2716-0455-4ccb-834c-d01cd41d8250",
														"exec": [
															"const RESPONSE_CODE = 400;\r",
															"\r",
															"const result = pm.response.code === RESPONSE_CODE;\r",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {\r",
															"    pm.response.to.have.status(RESPONSE_CODE);\r",
															"});\r",
															"\r",
															"if (result) {\r",
															"    const jsonData = pm.response.json();\r",
															"    const EXPECTED_MSG = `invalid-${pm.environment.get(\"projectId\")}`;\r",
															"\r",
															"    pm.test(`Response body has 'message' property contain invalid text`, () => {\r",
															"        pm.expect(jsonData.message).to.include(EXPECTED_MSG);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f370c5d3-9cb4-4024-abf3-c74b883fc638",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{cusFieldIdTextbox}},\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/invalid-{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"invalid-{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Cleanup",
									"item": [
										{
											"name": "200 - Cleanup - Delete all created custom fields of requirement",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "326708ef-be2d-49d7-9294-f8bf0f8ad49a",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"pm.environment.set(\"cusFieldId\",\"\");",
															"pm.environment.set('createdFieldsList', '');",
															"pm.environment.unset('cusFieldDataTypeId');",
															"pm.environment.unset('resAttributeType');",
															"pm.environment.unset('cusFieldName');",
															"pm.environment.unset('cusFieldDefaultValue');",
															"pm.environment.unset(\"cusFieldInfoTextbox\");",
															"pm.environment.unset(\"cusFieldInfoTextarea\");",
															"pm.environment.unset(\"cusFieldInfoCombobox\");",
															"pm.environment.unset(\"cusFieldInfoDatePicker\");",
															"pm.environment.unset(\"cusFieldInfoUserList\");",
															"pm.environment.unset(\"cusFieldInfoRichTextEditor\");",
															"pm.environment.unset(\"cusFieldInfoNumber\");",
															"pm.environment.unset(\"cusFieldInfoCheckbox\");",
															"pm.environment.unset(\"cusFieldInfoDateTimePicker\");",
															"pm.environment.unset(\"cusFieldInfoUrl\");",
															"pm.environment.unset(\"cusFieldInfoMulSelCombobox\");",
															"pm.environment.unset(\"jsonBody\");",
															"pm.environment.unset(\"csrfToken\");",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5d7d8f96-003c-4bf4-9bee-cb451f937c5d",
														"exec": [
															"// generator csrf token",
															"var base64object = function(input) {",
															" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));",
															" var base64 = CryptoJS.enc.Base64.stringify(inputWords);",
															" return base64;",
															"};",
															"let uuid = require('uuid');",
															"let token = uuid.v4() + \"QAS\" + base64object(Date.now());",
															"pm.environment.set(\"csrfToken\", token);",
															"// delete all created custom fields",
															"let fieldIdsList = pm.environment.get('createdFieldsList');",
															"",
															"if (fieldIdsList.length > 0) {",
															"    fieldIdsList = fieldIdsList.substring(0, fieldIdsList.length - 1);",
															"    const arrFieldIds = fieldIdsList.split(',');",
															"    let jsonBody = '';",
															"    console.log(`-- Total created custom fields of requirement: ${arrFieldIds.length}`);",
															"    arrFieldIds.forEach((fieldId) => {",
															"        const item = `{\"id\":${fieldId}}`;",
															"        jsonBody += item + ',';",
															"    });",
															"    jsonBody = jsonBody.substring(0, jsonBody.length - 1);",
															"    pm.environment.set('jsonBody', jsonBody);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "{{qtestUserCookie}}"
													},
													{
														"key": "X-CSRF-Token",
														"value": "{{csrfToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "customGridData",
															"value": "[{\"action\":\"DELETE\",\"items\":[{{jsonBody}}]}]",
															"type": "text"
														},
														{
															"key": "dojo.preventCache",
															"value": "{{csrfToken}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{qtestUrl}}/p/{{projectId}}/portal/customfield/updateCustomField",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"p",
														"{{projectId}}",
														"portal",
														"customfield",
														"updateCustomField"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Test Case",
							"item": [
								{
									"name": "Precondition",
									"item": [
										{
											"name": "200 - Precondition - Login success",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "cb514f37-5e98-4fd7-a708-29c86eae616a",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"    pm.environment.set('accessToken', jsonData.access_token);",
															"    pm.environment.set('tokenType', jsonData.token_type);",
															"",
															"    // Create login cookie of user",
															"    const rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
															"    const base64 = CryptoJS.enc.Base64.stringify(rawStr);",
															"    pm.environment.set('qtestUserCookie', 'UserContextToken=' + base64);",
															"",
															"    // Constant qtest custom fields id",
															"    pm.environment.set('cusFieldIdTextbox', 1);",
															"    pm.environment.set('cusFieldIdTextarea', 2);",
															"    pm.environment.set('cusFieldIdCombobox', 3);",
															"    pm.environment.set('cusFieldIdDatePicker', 4);",
															"    pm.environment.set('cusFieldIdUserList', 5);",
															"    pm.environment.set('cusFieldIdRichTextEditor', 6);",
															"    pm.environment.set('cusFieldIdNumber', 7);",
															"    pm.environment.set('cusFieldIdCheckbox', 8);",
															"    pm.environment.set('cusFieldIdDatetimePicker', 9);",
															"    pm.environment.set('cusFieldIdUrl', 12);",
															"    pm.environment.set('cusFieldIdMulSelCombobox', 17);",
															"",
															"    pm.environment.set('createdFieldsList', '');",
															"    pm.environment.set(\"objectType\", \"test-cases\");",
															"    pm.environment.set(\"createdFieldsList\", \"\");",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "2fad2603-5a5d-4216-b653-1e3d2727d6f8",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic dGFtdG1uZ3V5ZW46"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "{{username}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{password}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{qtestUrl}}/oauth/token",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"oauth",
														"token"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Main",
									"item": [
										{
											"name": "Textbox",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field test case - Textbox",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "d4ccf5ab-5281-402b-9291-ded2808ca9c8",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoTextbox', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "a886a0a3-e123-4d1a-a0c5-f8503af787f3",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Textbox');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdTextbox'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}}\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field test case - Update custom field textbox to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "c00dea6e-0135-4847-becc-141568315863",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextbox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "9eb4bc3e-8be2-4311-9313-3f9ba49c1d28",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoTextbox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field test case - Update custom field textbox to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "7b914d61-c3c2-42e2-8508-80c364e840ae",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextbox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "96338142-6f54-45ae-83e4-516987b4806e",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoTextbox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "12512956-5c90-4d48-9533-ec50e82ad2b1",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "8923e231-6a7f-45b0-a019-ef9c13c7d3aa",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Textarea",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field test case - Textarea",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "3f19c726-f08d-46b5-98ee-b5a4efa73354",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoTextarea', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "dc250d79-c9aa-4c6a-9a96-408ac42a75ab",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Textarea');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdTextarea'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\",\n    \"allowed_values\": [],\n    \"multiple\": false\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field test case - Update custom field text area to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "28f0c821-d1f4-4ad1-8a59-580f6017fd64",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextarea');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "e56f93fd-ab5f-4b8c-b7e4-83864850345a",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoTextarea');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field test case - Update custom field textarea to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "69918211-a691-4d0a-a696-c03046f25d32",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextarea');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "385f2d10-9101-41e5-b720-8fc05eac011b",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoTextarea');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "9431105e-faaa-4213-b068-bb6135d95901",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "4585848c-65f4-476c-a6fd-6a64af93401f",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ec114e5b-0386-4f44-96f3-2451ab7feef5",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3120aaec-98ee-46b0-bb49-c5076849e79d",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Combobox",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition  - Create custom field test case - Combobox",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "c6563af5-0375-4e99-938f-8a659611ae1f",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoCombobox', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "03552349-508a-47c9-8a1f-0e7b9da23b8e",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Combobox');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdCombobox'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"allowed_values\": []\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field test case - Update custom field combobox to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "8e94ac93-2f4c-431b-808b-0a5df005ba21",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoCombobox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "03310ba5-22be-40b9-93b6-f9d99036ad20",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoCombobox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field test case - Update custom field combobox to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "e19c0307-f63e-4917-ab5d-9dfc489329b3",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoCombobox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "47d248f3-5993-493f-829d-3b3bdca14382",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoCombobox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "30eb8e3b-5753-47b2-882e-9e18a3d473f8",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "c9f44b5c-7e3f-4de8-b9da-5371432d9dbf",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b8135649-8b6d-4a85-85b4-bc5b474e3bcc",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "dc8a1229-703e-4146-8672-4da5decb58fb",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Date picker",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field test case - DatePicker",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "b0daaf50-6030-401f-ac3d-41e34eb1ea0c",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoDatePicker', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "252c41a3-b74f-436a-8b72-aee43c4d3d6f",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My DatePicker');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdDatePicker'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\"\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field test case - Update custom field date picker to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "3373eac1-df3b-4526-9968-7ee3c89a262c",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoDatePicker');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "6fec2090-0223-4f8c-a86e-71391918097d",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoDatePicker');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field test case - Update custom field date picker to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "37ad3e15-2962-4480-8d9f-eeb87ae8cbdb",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoDatePicker');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "41ac0573-cead-447c-9a18-6d54372adf09",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoDatePicker');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "3dc023bf-b390-4fab-93b7-2f534210b234",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "73b27240-585f-4ac9-ab0b-35c0bd322917",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "925306a7-a4af-4a8b-8ac9-db027880103a",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e09a232f-94a7-4d57-835a-a63fdcb01a21",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "User list",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field test case - UserList",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "d87c0f03-09b6-4b53-910a-77e0dbb17918",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoUserList', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "f84079bb-18e7-4cd9-8153-61df2fde333d",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My UserList');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdUserList'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field test case - Update custom field user list to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "ac8e3c7a-e5dc-48c1-94c5-c57405853368",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoUserList');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "321c2d92-e57a-4854-b74f-bc822674b743",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoUserList');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field test case - Update custom field user list to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "44cf2c4d-61fc-48d1-bf4c-963e38df8e73",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoUserList');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "55e62772-f26f-485c-b43f-1df7cdf994be",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoUserList');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "22b4abbe-fe9a-424a-aa8c-9042d2e453b3",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "d7f9efa1-5546-4ca5-ae51-e54136feb21f",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "88325594-8102-434d-8494-928bb5b358de",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "47953181-6d12-4794-b675-af475f1dc1c2",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Rich text editor",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field test case - Rich text editor",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "e1c2c27d-d285-4179-b9e6-41a6a62759c8",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoRichTextEditor', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "dbfbef99-9bfa-490a-8cfc-b0bb5c9b67a9",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My RichTextEditor');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdRichTextEditor'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\"\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field test case - Update custom field rich text editor to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "c9d84e9a-dd59-4672-978d-e274895dddb4",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoRichTextEditor');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "60137e72-0722-4182-a97d-cc62fcda5250",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoRichTextEditor');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field test case - Update custom field rich text editor to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "e480445a-a677-444d-b351-6a7f589c768d",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoRichTextEditor');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "5f556239-c71f-444b-981e-283113f8bb1b",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoRichTextEditor');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "3e4be9e3-ba15-4122-bad3-9c61038013ff",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "ba060c4b-08c8-43fe-90af-084e573dae36",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e85336ef-9eab-4e78-bc40-b4d5046332e5",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "d53f4f1d-b618-47e6-9e14-5c1b981d60e4",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Number",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field test case - Number",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "6f2d95c4-fbeb-480c-8f6f-84f262755b4f",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoNumber', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "7e89b163-c485-400a-8cbc-9d112c6e9fa3",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Number');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdNumber'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\"\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field test case - Update custom field number to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "f7a676f5-5ab2-4455-9682-c0c48969fc4a",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoNumber');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "329ead93-f878-41ea-bc7f-9b545c1d17d1",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoNumber');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field test case - Update custom field number to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "9d968f2d-8139-4ea0-9004-199cd1b00d5c",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoNumber');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "efdca4c0-6372-4cfb-800f-79ecdb212c89",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoNumber');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "de9b8191-68ae-465f-8e9b-98bd214f9101",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "00e4d168-8d69-4996-a748-9bf3fcdad147",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3ab123f3-3969-41e0-aac3-ee3cc436804f",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f9949e01-8740-40bd-8fd1-73b314088cfd",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Check box",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field test case - Checkbox",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "83c5c2cb-6fcf-44c9-be3a-e0ae94be6815",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoCheckbox', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "dff7b3b4-1a44-4288-ad19-d6ca9a46acd2",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Checkbox');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdCheckbox'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"allowed_values\": []\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field test case - Update custom field check box to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "a9c04b46-1c76-4f14-b9dd-2dfae88a1053",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoCheckbox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "24277542-3f04-4903-a1b2-e421af3140e3",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoCheckbox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field test case - Update custom field check box to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "62abb41d-2ca7-4b1f-a47d-c6841ba44856",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoCheckbox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "7d010fc2-56c6-45db-bf32-30b0df096eaa",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoCheckbox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "64079651-c1a9-4416-8c08-f5dc19427744",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "b80cd597-fd5d-45be-9282-869f7e59c841",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ffb0a830-a6a9-4c6b-9758-fd5da24aaee2",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "aa27c838-b4bf-4c21-8b9d-6d98b0ee964a",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Datetime picker",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field test case - DateTimePicker",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "45cc4303-5958-42af-949b-7a7c9868289e",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoDateTimePicker', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "80cad3e4-372c-49c2-b331-5d3bbfdb5800",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My DatetimePicker');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdDatetimePicker'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"allowed_values\": []\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field test case - Update custom field datetime picker to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "34ef7f2b-a0a4-439c-9889-de0481913591",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoDateTimePicker');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "98d8fee7-6b25-41de-95eb-f5365cc98270",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoDateTimePicker');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field test case - Update custom field datetime picker to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "799cd1c8-93c8-4fa6-af46-330060583575",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoDateTimePicker');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "97b4ccb5-2616-4ae7-ada7-08587b28a9f9",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoDateTimePicker');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "12cd2a6c-56c1-4328-bfd2-8e5960711a40",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "a1a21909-6bb8-4b98-ac86-e598250adcb0",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d7f01817-b335-4c97-9d44-183188602390",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "264a848e-e8ea-4dfa-9d08-ac141178edd1",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "URL",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field test case - URL",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "60ce4f1d-c48c-492a-8f7f-223d9f9c635f",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoUrl', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "e3bd8a9f-02a3-471c-b1be-4f81484a56f3",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Url');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdUrl'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\"\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field test case - Update custom field url to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "a95dfa0a-974d-43a2-a834-8d1a72c57439",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoUrl');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "e6cd9a3e-fe0e-48b8-b1fb-98c76a001564",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoUrl');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field test case - Update custom field url to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "f83f839d-2e64-4c09-9b51-2bf576e98b07",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoUrl');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "e1a19f07-e6e4-4caa-bad0-f1ef4f8b3a84",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoUrl');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "aeb3a4eb-f6c8-4990-ae89-c2cca8456448",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "949cf20b-9851-47d9-a91b-50c72530ae24",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4db0fd41-5f6f-4148-b752-d93f43e1a6e8",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "d76fe378-dd7f-450b-9b9c-83d83ea81b16",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Multiple Selection Combobox",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field test case - MultipleSelectionCombobox",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "e0600741-bf2c-4e9e-bb0d-afec15ce02bd",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoMulSelCombobox', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "dc39b524-7e83-4b9d-8024-38b766c9572d",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My MulSelCombobox');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdMulSelCombobox'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"allowed_values\": []\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field test case - Update custom field multiple selection combobox to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "ad3216e8-3bed-4597-8d7d-90ca3192aad9",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoMulSelCombobox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "92d7cc20-5bfb-4324-8366-3fa371b66aba",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoMulSelCombobox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field test case - Update custom field multiple selection combobox to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "21616892-edad-4595-a46d-730d5ed12c8e",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoMulSelCombobox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "c517ceb1-4d92-4e83-b320-8dc854739176",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoMulSelCombobox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "e95bf912-26a5-4bcb-9133-eecc39639fa5",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "7902d4c1-f8b7-40cb-af6e-2f3573995a8f",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7252be9a-ee74-49dd-834e-3b2b1cd44977",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1cbe2a2a-3f77-4e0e-afa6-b9b0ae95347a",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "200 - Update custom field test case - Inactive some custom fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "60ea1db4-551f-4695-9fad-f05bf9b70f6c",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"    const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"    const jsonData = pm.response.json();",
															"",
															"    jsonData.forEach((fieldInfo) => {",
															"        pm.test(`Response data of custom field '${fieldInfo.label}' has property 'is_active' value is false`, () => {",
															"            pm.expect(fieldInfo.is_active).to.be.false;",
															"        })",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "cae153bb-b112-44af-a68d-ce1a82fc845e",
														"type": "text/javascript",
														"exec": [
															"const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"pm.environment.set('idTextbox', cusFieldInfoTextbox.id);",
															"pm.environment.set('idTextarea', cusFieldInfoTextarea.id);"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{idTextbox}},\n\t    \"is_active\": false\n\t},\n\t{\n\t\t\"id\": {{idTextarea}},\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "200 - Update custom field test case - Active some custom fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e4045afb-a428-4b04-95f1-e92b4ec27899",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"    const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"    const jsonData = pm.response.json();",
															"",
															"    jsonData.forEach((fieldInfo) => {",
															"        pm.test(`Response data of custom field '${fieldInfo.label}' has property 'is_active' value is true`, () => {",
															"            pm.expect(fieldInfo.is_active).to.be.true;",
															"        })",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "41127314-4e26-4d06-b357-3905ea6146a2",
														"type": "text/javascript",
														"exec": [
															"const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"pm.environment.set('idTextbox', cusFieldInfoTextbox.id);",
															"pm.environment.set('idTextarea', cusFieldInfoTextarea.id);"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{idTextbox}},\n\t    \"is_active\": true\n\t},\n\t{\n\t\t\"id\": {{idTextarea}},\n\t    \"is_active\": true\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "200 - Update custom field test case - Multiple fields with multiple statuses",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2ab1d8dc-dfa7-4b08-9423-ce88248456ef",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"    const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"    const cusFieldInfoCombobox = pm.environment.get('cusFieldInfoCombobox');",
															"    const jsonData = pm.response.json();",
															"",
															"    jsonData.forEach((fieldInfo) => {",
															"        switch (fieldInfo.label) {",
															"            case cusFieldInfoTextbox.label:",
															"                pm.test(`Response data of custom field '${cusFieldInfoTextbox.label}' has property 'is_active' value is false`, () => {",
															"                    pm.expect(fieldInfo.is_active).to.be.false;",
															"                });",
															"                break;",
															"",
															"            case cusFieldInfoTextarea.label:",
															"                pm.test(`Response data of custom field '${cusFieldInfoTextarea.label}' has property 'is_active' value is true`, () => {",
															"                    pm.expect(fieldInfo.is_active).to.be.true;",
															"                });",
															"                break;",
															"",
															"            case cusFieldInfoCombobox.label:",
															"                pm.test(`Response data of custom field '${cusFieldInfoCombobox.label}' has property 'is_active' value is false`, () => {",
															"                    pm.expect(fieldInfo.is_active).to.be.false;",
															"                });",
															"                break;",
															"        }",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f91937b9-ee3d-44dd-9028-c22dbb79cefe",
														"type": "text/javascript",
														"exec": [
															"const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"const cusFieldInfoCombobox = pm.environment.get('cusFieldInfoCombobox');",
															"pm.environment.set('idTextbox', cusFieldInfoTextbox.id);",
															"pm.environment.set('idTextarea', cusFieldInfoTextarea.id);",
															"pm.environment.set('idCombobox', cusFieldInfoCombobox.id);"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{idTextbox}},\n\t    \"is_active\": false\n\t},\n\t{\n\t\t\"id\": {{idTextarea}},\n\t    \"is_active\": true\n\t},\n\t{\n\t\t\"id\": {{idCombobox}},\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Update custom field test case - Invalid object type",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6fd4474d-d05d-4f2c-ac16-728aa7d415b3",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"    const EXPECTED_MSG = 'Unsupported object type';",
															"",
															"    pm.test(`Response data has property 'message' value contains '${EXPECTED_MSG}'`, () => {",
															"        pm.expect(jsonData.message).to.include(EXPECTED_MSG);",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "608f9202-3ceb-4b44-8afe-16ddcc81cf22",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"id\": 11111,\n        \"is_active\": true\n    }\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/invalid-{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"invalid-{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Update custom field test case - Blank body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "dcac4c12-2bcf-49f5-94dc-b1c6456e53c0",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"const result = pm.response.code === RESPONSE_CODE;",
															"const EXPECTED_MSGS = [",
															"    \"Required request body is missing\",",
															"    \"Required request body content is missing\"];",
															"    ",
															"function validateMessage(actualMessage){",
															"    let result = false;",
															"    for(const msg of EXPECTED_MSGS) {",
															"        result = actualMessage.indexOf(msg) > -1;",
															"        if(result){",
															"            console.log(`Actual message is: ${actualMessage}`);",
															"            return result;",
															"        }",
															"    }",
															"    return result;",
															"}",
															"",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"    pm.test(`Response body has 'message' property value in following: '${EXPECTED_MSGS.toString()}'`, () => {",
															"        pm.expect(validateMessage(jsonData.message)).to.eql(true);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4bde0df5-3021-4474-a489-9f999531f98a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Update custom field test case - Empty json body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1070b5b1-7d4b-4783-9956-2bd5a7e5880a",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextbox');",
															"    const jsonData = pm.response.json();",
															"",
															"    pm.test(`Response data contains error message: custom field does not exist`, () => {",
															"        pm.expect(pm.response.text()).to.include('does not exist');",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "ddb2bea0-d4df-43d9-8c65-f6d1f4695eed",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Update custom field test case - Invalid field id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "da833331-bd82-40a5-a988-accd9363ab1c",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"",
															"    pm.test(`Response data contains error message: 'custom field does not exist`, () => {",
															"        pm.expect(pm.response.text()).to.include('does not exist');",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "aa7a2c66-5ff4-41bb-bb4e-54410d8f691d",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": 11111,\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "404 - Update custom field test case - Project not found",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c8571f2a-55a4-41cf-babc-fbf08a1199dd",
														"exec": [
															"const RESPONSE_CODE = 404;",
															"const EXPECTED_MSG = 'Project not found';",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"    pm.test(`Response body has 'message' property value '${EXPECTED_MSG}'`, () => {",
															"        pm.expect(jsonData.message).to.contains(EXPECTED_MSG);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b4fa5ee3-b334-42dc-acd0-19f3f4e2c8bd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{cusFieldIdTextbox}},\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}11111/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}11111",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "404 - Update custom field test case - Invalid project id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f78d909c-23e1-42e0-84c5-df777e077d6c",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"    const EXPECTED_MSG = `invalid-${pm.environment.get(\"projectId\")}`;",
															"",
															"    pm.test(`Response body has 'message' property contain invalid text`, () => {",
															"        pm.expect(jsonData.message).to.include(EXPECTED_MSG);",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8fd2f5a0-070b-40e4-8a59-77a1d739b47a",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{cusFieldIdTextbox}},\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/invalid-{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"invalid-{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Cleanup",
									"item": [
										{
											"name": "200 - Cleanup - Delete all created custom fields of test case",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5857d15a-afd9-483f-b255-a5125d27a9e1",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"pm.environment.set(\"cusFieldId\",\"\");",
															"pm.environment.set('createdFieldsList', '');",
															"pm.environment.unset('cusFieldDataTypeId');",
															"pm.environment.unset('resAttributeType');",
															"pm.environment.unset('cusFieldName');",
															"pm.environment.unset('cusFieldDefaultValue');",
															"pm.environment.unset(\"cusFieldInfoTextbox\");",
															"pm.environment.unset(\"cusFieldInfoTextarea\");",
															"pm.environment.unset(\"cusFieldInfoCombobox\");",
															"pm.environment.unset(\"cusFieldInfoDatePicker\");",
															"pm.environment.unset(\"cusFieldInfoUserList\");",
															"pm.environment.unset(\"cusFieldInfoRichTextEditor\");",
															"pm.environment.unset(\"cusFieldInfoNumber\");",
															"pm.environment.unset(\"cusFieldInfoCheckbox\");",
															"pm.environment.unset(\"cusFieldInfoDateTimePicker\");",
															"pm.environment.unset(\"cusFieldInfoUrl\");",
															"pm.environment.unset(\"cusFieldInfoMulSelCombobox\");",
															"pm.environment.unset(\"jsonBody\");",
															"pm.environment.unset(\"csrfToken\");",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1e36d99a-e168-4926-91a0-dc7075855154",
														"exec": [
															"// generator csrf token",
															"var base64object = function(input) {",
															" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));",
															" var base64 = CryptoJS.enc.Base64.stringify(inputWords);",
															" return base64;",
															"};",
															"let uuid = require('uuid');",
															"let token = uuid.v4() + \"QAS\" + base64object(Date.now());",
															"pm.environment.set(\"csrfToken\", token);",
															"",
															"// delete all created custom fields",
															"let fieldIdsList = pm.environment.get('createdFieldsList');",
															"",
															"if (fieldIdsList.length > 0) {",
															"    fieldIdsList = fieldIdsList.substring(0, fieldIdsList.length - 1);",
															"    const arrFieldIds = fieldIdsList.split(',');",
															"    let jsonBody = '';",
															"    console.log(`-- Total created custom fields of test case: ${arrFieldIds.length}`);",
															"    arrFieldIds.forEach((fieldId) => {",
															"        const item = `{\"id\":${fieldId}}`;",
															"        jsonBody += item + ',';",
															"    });",
															"    jsonBody = jsonBody.substring(0, jsonBody.length - 1);",
															"    pm.environment.set('jsonBody', jsonBody);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "{{qtestUserCookie}}"
													},
													{
														"key": "X-CSRF-Token",
														"value": "{{csrfToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "customGridData",
															"value": "[{\"action\":\"DELETE\",\"items\":[{{jsonBody}}]}]",
															"type": "text"
														},
														{
															"key": "dojo.preventCache",
															"value": "{{csrfToken}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{qtestUrl}}/p/{{projectId}}/portal/customfield/updateCustomField",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"p",
														"{{projectId}}",
														"portal",
														"customfield",
														"updateCustomField"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Test Suite",
							"item": [
								{
									"name": "Precondition",
									"item": [
										{
											"name": "200 - Precondition - Login success",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8817ccd4-c170-4603-acbc-a155eb60bcd8",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"    pm.environment.set('accessToken', jsonData.access_token);",
															"    pm.environment.set('tokenType', jsonData.token_type);",
															"",
															"    // Create login cookie of user",
															"    const rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
															"    const base64 = CryptoJS.enc.Base64.stringify(rawStr);",
															"    pm.environment.set('qtestUserCookie', 'UserContextToken=' + base64);",
															"",
															"    // Constant qtest custom fields id",
															"    pm.environment.set('cusFieldIdTextbox', 1);",
															"    pm.environment.set('cusFieldIdTextarea', 2);",
															"    pm.environment.set('cusFieldIdCombobox', 3);",
															"    pm.environment.set('cusFieldIdDatePicker', 4);",
															"    pm.environment.set('cusFieldIdUserList', 5);",
															"    pm.environment.set('cusFieldIdRichTextEditor', 6);",
															"    pm.environment.set('cusFieldIdNumber', 7);",
															"    pm.environment.set('cusFieldIdCheckbox', 8);",
															"    pm.environment.set('cusFieldIdDatetimePicker', 9);",
															"    pm.environment.set('cusFieldIdUrl', 12);",
															"    pm.environment.set('cusFieldIdMulSelCombobox', 17);",
															"",
															"    pm.environment.set('createdFieldsList', '');",
															"    pm.environment.set(\"objectType\", \"test-suites\");",
															"    pm.environment.set(\"createdFieldsList\", \"\");",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "479d32d1-52ee-4187-90b4-7a381853e8bb",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic dGFtdG1uZ3V5ZW46"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "{{username}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{password}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{qtestUrl}}/oauth/token",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"oauth",
														"token"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Main",
									"item": [
										{
											"name": "Textbox",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field test suite - Textbox",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "4b4e4b8e-ac20-47b5-93fd-c2c26d29b3e5",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoTextbox', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "b4d1ed07-e227-4dae-999f-d93854d75776",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Textbox');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdTextbox'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}}\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field test suite - Update custom field textbox to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "b8546c34-16ef-4946-a3cf-39f99eb1af0a",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextbox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "87a11cda-b58a-4fd4-8d39-3cbb316ebba3",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoTextbox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field test suite - Update custom field textbox to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "2284fa6b-b1dd-4c93-a259-19dcf3fee51e",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextbox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "4e60de63-e75e-4d8d-8a15-20b97ac8daa1",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoTextbox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "f7be2a9c-7fda-4e5c-9b16-57f7c22c15c6",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "bd6f3e2a-e423-4a8c-9e8d-9ef95efd18c3",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Textarea",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field test suite - Textarea",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "56fe7c50-3ca0-492f-a1a7-e045947700cd",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoTextarea', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "c8884b31-b76d-4b7f-9a7c-5e7f4367d41d",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Textarea');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdTextarea'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\",\n    \"allowed_values\": [],\n    \"multiple\": false\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field test suite - Update custom field text area to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "e70a8f9d-0614-46c5-926c-542476974165",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextarea');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "3413d4c9-8a63-4ce7-bc4a-72879300c2f8",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoTextarea');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field test suite - Update custom field textarea to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "22fd75a9-b0d8-426a-a794-64331ff71973",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextarea');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "ddab8297-e1ca-4481-b06d-12725382429e",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoTextarea');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "978894b4-515d-40bb-82b9-bd145a763ac4",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "ae878b53-e0c7-40c5-a00a-bbe5ec4822c3",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "8234f4b8-9db3-47a9-bfcb-9ed76ffcdfa4",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "cba2811e-97b2-4cf4-b7ad-a61bc4ad8770",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Combobox",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition  - Create custom field test suite - Combobox",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "d39ea7b8-9ea9-489b-be79-72a30d03c35b",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoCombobox', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "7fe7c143-06f1-4ca3-add5-d43153780e97",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Combobox');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdCombobox'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"allowed_values\": []\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field test suite - Update custom field combobox to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "c8052eea-9567-4057-ac41-a600a9e6a194",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoCombobox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "87710a64-7cbe-40c0-ae01-b54264e51fd2",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoCombobox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field test suite - Update custom field combobox to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "839404ed-a2f4-40ee-ae96-7eb4153389be",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoCombobox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "ef673e94-b7d8-4204-acbd-61c2aef25608",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoCombobox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "950feb55-c75a-42a3-a790-73aa248f9d16",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "f2b8b729-56e9-4e08-ba55-7b6febc25ef1",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c6633160-e591-4100-b365-f88a3d83eb44",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "928bc4e0-ad35-481b-a1e0-d250c0aabfc1",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Date picker",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field test suite - DatePicker",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "0750f708-14ca-47e1-9ba5-b95832bb87cf",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoDatePicker', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "4040b028-f430-4f40-a664-f4cf7b58fbf2",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My DatePicker');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdDatePicker'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\"\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field test suite - Update custom field date picker to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "b64d7435-97fa-4adb-8996-98fea182c100",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoDatePicker');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "07e62b85-5be2-45e5-a07c-3e2002095469",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoDatePicker');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field test suite - Update custom field date picker to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "7bcd5414-ad2a-47a4-948f-af782e7422cb",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoDatePicker');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "d893351a-2642-4ac9-b7f2-c87cfa5f624f",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoDatePicker');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "894637d1-b96d-4bdf-968a-aabbce403d72",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "502e12cf-5f3e-4a1e-85e0-0a063536dcdc",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0fa5b43c-b714-4777-8c3c-3843fd7f16e0",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4a827413-ac60-4696-b272-6991c1aacbfb",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "User list",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field test suite - UserList",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "d9468bd8-33f3-446d-be83-1c79c75b23bb",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoUserList', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "558ba0be-9966-468a-bcba-213adc96d15f",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My UserList');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdUserList'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field test suite - Update custom field user list to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "afc5c19d-1e6a-47d4-9e50-37c1d28c882c",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoUserList');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "2ebff3ee-e899-4bc8-9441-9977ebcea79f",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoUserList');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field test suite - Update custom field user list to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "4e6a77e6-d7db-470d-994f-9221ac039d6f",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoUserList');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "f5fd6af5-98ee-4fd4-976c-f09e11637499",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoUserList');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "02c50821-79b9-41ec-b64a-8543b8cc7e09",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "d3bc4614-dd26-4cab-915d-e4849b75cc90",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d78b3649-505c-4c08-8e71-bfd1f034a73b",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "0857a939-95ca-45cc-9c96-d545630ec763",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Rich text editor",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field test suite - Rich text editor",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "d1326b88-0bf8-414d-960b-40ba67b9e50d",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoRichTextEditor', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "e1ffc413-13e4-4b15-95ba-bec9c1a8e794",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My RichTextEditor');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdRichTextEditor'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\"\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field test suite - Update custom field rich text editor to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "b2da01a8-4344-4b44-a9a2-c5e6672cd303",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoRichTextEditor');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "f647360f-7ca6-408a-9ed0-38dd405e02c4",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoRichTextEditor');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field test suite - Update custom field rich text editor to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "5edba768-bea8-4ecc-bad6-7a635d8a7ba4",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoRichTextEditor');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "306959dd-926e-47a1-9d81-831325792546",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoRichTextEditor');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "ee264f7a-411d-4a02-854c-1564b6de4197",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "60102535-6276-4029-9174-0af5a7bb3ce2",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "89e3aba9-7e5a-424e-b2eb-285b93e68ca1",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c180ce8d-b947-43ab-a77a-49349a4488cd",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Number",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field test suite - Number",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "9e458957-8fc0-44b8-8a34-9d12afe03c15",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoNumber', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "07540609-d7c3-4690-9cbd-c66bc086e69b",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Number');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdNumber'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\"\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field test suite - Update custom field number to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "b98a3121-7f22-40e3-9022-7700a46db8cc",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoNumber');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "77ad7146-0f51-4d1a-b882-9d1caaf61d0e",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoNumber');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field test suite - Update custom field number to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "5d92491a-2d8a-4311-8811-c1f730bc7be2",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoNumber');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "0c1672fe-eb36-485e-8d1e-1414497dcf33",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoNumber');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "4301134e-e097-4fb6-8fc4-2d5aa4dcab5c",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "ed4b27b4-c7cc-4f3e-9a36-034bb35cdf4a",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "af7debbb-5f7d-4215-8d18-b5cd472187dc",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "875038e1-d8de-4b39-ab54-018884038553",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Check box",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field test suite - Checkbox",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "afba9698-17a7-41b3-8d7a-c81abafaaf92",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoCheckbox', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "c0a92c5c-f210-40c1-8084-cba33a2cb0d3",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Checkbox');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdCheckbox'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"allowed_values\": []\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field test suite - Update custom field check box to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "a222b856-128c-4f6e-b16e-76b73b8d984c",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoCheckbox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "6a71a387-673c-404b-a51b-5fab71a4c981",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoCheckbox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field test suite - Update custom field check box to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "4710031d-8278-4e27-9e4b-cb68f5ac44fc",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoCheckbox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "9f9c47b7-dcc4-444f-80d5-24edd0b84515",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoCheckbox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "a65d3b12-e644-4307-b14f-712077b16603",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "8efc8d53-bb0b-4b1d-90d6-a96b5736a5f0",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a643c53b-6034-4ed5-aeff-aa538e08d65a",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "58fedae6-670f-459a-a7b2-15bcdc1e3c33",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Datetime picker",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field test suite - DateTimePicker",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "dc2d6bd0-08cc-4455-853c-155f08b50494",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoDateTimePicker', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "d729bc6f-072a-4431-b564-0b17aec0e5ef",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My DatetimePicker');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdDatetimePicker'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"allowed_values\": []\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field test suite - Update custom field datetime picker to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "c2c7c4cd-b370-49d4-84ca-39d6968e46bb",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoDateTimePicker');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "9cb58f0e-7782-4436-b50d-647bb4be79f5",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoDateTimePicker');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field test suite - Update custom field datetime picker to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "e8ff092f-8870-47f4-a7fd-61e0149f0820",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoDateTimePicker');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "7a67d0c3-0287-4311-af63-14ca50af965b",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoDateTimePicker');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "5d6b2640-4bc0-4d1b-892a-cd1e02ac6227",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "47a39e83-e118-4bb2-912a-c0b92a58a1d9",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e66b8a33-b3a2-4535-92a6-3f1033f5c9b0",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "36cd9c46-6e32-4f78-8944-c3a4dbf1418a",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "URL",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field test suite - URL",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "17fc1903-71bc-45e5-a8ad-372f93c620d2",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoUrl', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "08efcd45-7ab2-4722-b431-ea41be13104a",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Url');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdUrl'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\"\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field test suite - Update custom field url to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "0b072d27-9322-45ea-88e6-f506bcd27866",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoUrl');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "fc0e0dbb-5546-4e5d-84f5-d8a90df90b9a",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoUrl');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field test suite - Update custom field url to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "4ad91093-5d81-40ce-ab62-81bda158d193",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoUrl');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "87c6ba7c-12c6-4cb4-bc28-1cd196791e8d",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoUrl');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "f5f5743a-f4a5-42f0-b05d-de4e71438452",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "43f3265a-c7ce-4304-ab8a-adaea1eaad27",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "8d820f40-080b-4471-8fc4-3a2329205c82",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b0712870-84fe-44d0-8f53-f359c762d1d5",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Multiple Selection Combobox",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field test suite - MultipleSelectionCombobox",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "27bb3ff5-79ef-4062-8fef-deeb89942994",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoMulSelCombobox', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "50322eec-c1bb-4cf2-96b7-94d74a9de1db",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My MulSelCombobox');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdMulSelCombobox'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"allowed_values\": []\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field test suite - Update custom field multiple selection combobox to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "60513ac1-f43d-4004-978c-51e5cd5b177d",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoMulSelCombobox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "7a9de295-84b4-4cf0-81f2-f7b1a4512f6a",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoMulSelCombobox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field test suite - Update custom field multiple selection combobox to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "16d812eb-8690-4190-8775-ad7c7fcfe788",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoMulSelCombobox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "17e84999-1719-486a-9d1e-6c86a7935633",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoMulSelCombobox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "ac667ff5-32f3-4cb9-91c5-2ec6b5c349c1",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "795e237b-b00a-46c6-8152-e209d8e3f2eb",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0bf2fb3c-55fd-41b3-a816-e5cc69afe86d",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "8a160371-0ed1-4cc0-8319-b085b0fcad80",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "200 - Update custom field test suite - Inactive some custom fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4501a312-22d5-45cc-acb9-43beab3c06cc",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"    const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"    const jsonData = pm.response.json();",
															"",
															"    jsonData.forEach((fieldInfo) => {",
															"        pm.test(`Response data of custom field '${fieldInfo.label}' has property 'is_active' value is false`, () => {",
															"            pm.expect(fieldInfo.is_active).to.be.false;",
															"        })",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "35a366b5-17e1-43cd-ae29-3f592f7d7c64",
														"type": "text/javascript",
														"exec": [
															"const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"pm.environment.set('idTextbox', cusFieldInfoTextbox.id);",
															"pm.environment.set('idTextarea', cusFieldInfoTextarea.id);"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{idTextbox}},\n\t    \"is_active\": false\n\t},\n\t{\n\t\t\"id\": {{idTextarea}},\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "200 - Update custom field test suite - Active some custom fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "027ffea2-320e-4f28-84b6-f7532af945ec",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"    const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"    const jsonData = pm.response.json();",
															"",
															"    jsonData.forEach((fieldInfo) => {",
															"        pm.test(`Response data of custom field '${fieldInfo.label}' has property 'is_active' value is true`, () => {",
															"            pm.expect(fieldInfo.is_active).to.be.true;",
															"        })",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "397a3e9d-7c7b-4281-b85e-1a9e97fc46e3",
														"type": "text/javascript",
														"exec": [
															"const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"pm.environment.set('idTextbox', cusFieldInfoTextbox.id);",
															"pm.environment.set('idTextarea', cusFieldInfoTextarea.id);"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{idTextbox}},\n\t    \"is_active\": true\n\t},\n\t{\n\t\t\"id\": {{idTextarea}},\n\t    \"is_active\": true\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "200 - Update custom field test suite - Multiple fields with multiple statuses",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7588c39f-95d6-4841-951b-30761be5bbaa",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"    const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"    const cusFieldInfoCombobox = pm.environment.get('cusFieldInfoCombobox');",
															"    const jsonData = pm.response.json();",
															"",
															"    jsonData.forEach((fieldInfo) => {",
															"        switch (fieldInfo.label) {",
															"            case cusFieldInfoTextbox.label:",
															"                pm.test(`Response data of custom field '${cusFieldInfoTextbox.label}' has property 'is_active' value is false`, () => {",
															"                    pm.expect(fieldInfo.is_active).to.be.false;",
															"                });",
															"                break;",
															"",
															"            case cusFieldInfoTextarea.label:",
															"                pm.test(`Response data of custom field '${cusFieldInfoTextarea.label}' has property 'is_active' value is true`, () => {",
															"                    pm.expect(fieldInfo.is_active).to.be.true;",
															"                });",
															"                break;",
															"",
															"            case cusFieldInfoCombobox.label:",
															"                pm.test(`Response data of custom field '${cusFieldInfoCombobox.label}' has property 'is_active' value is false`, () => {",
															"                    pm.expect(fieldInfo.is_active).to.be.false;",
															"                });",
															"                break;",
															"        }",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "83265584-0147-4238-bbf2-962ebe825b1f",
														"type": "text/javascript",
														"exec": [
															"const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"const cusFieldInfoCombobox = pm.environment.get('cusFieldInfoCombobox');",
															"pm.environment.set('idTextbox', cusFieldInfoTextbox.id);",
															"pm.environment.set('idTextarea', cusFieldInfoTextarea.id);",
															"pm.environment.set('idCombobox', cusFieldInfoCombobox.id);"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{idTextbox}},\n\t    \"is_active\": false\n\t},\n\t{\n\t\t\"id\": {{idTextarea}},\n\t    \"is_active\": true\n\t},\n\t{\n\t\t\"id\": {{idCombobox}},\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Update custom field test suite - Invalid object type",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "14c5f92b-14fe-4b97-b34e-53877d39fde9",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"    const EXPECTED_MSG = 'Unsupported object type';",
															"",
															"    pm.test(`Response data has property 'message' value contains '${EXPECTED_MSG}'`, () => {",
															"        pm.expect(jsonData.message).to.include(EXPECTED_MSG);",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8937d146-e28d-472d-b98e-6f94553118d1",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"id\": 11111,\n        \"is_active\": true\n    }\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/invalid-{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"invalid-{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Update custom field test suite - Blank body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3f86ca57-4f7b-46be-92a3-5bb1cb166b8c",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"const result = pm.response.code === RESPONSE_CODE;",
															"const EXPECTED_MSGS = [",
															"    \"Required request body is missing\",",
															"    \"Required request body content is missing\"];",
															"    ",
															"function validateMessage(actualMessage){",
															"    let result = false;",
															"    for(const msg of EXPECTED_MSGS) {",
															"        result = actualMessage.indexOf(msg) > -1;",
															"        if(result){",
															"            console.log(`Actual message is: ${actualMessage}`);",
															"            return result;",
															"        }",
															"    }",
															"    return result;",
															"}",
															"",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"    pm.test(`Response body has 'message' property value in following: '${EXPECTED_MSGS.toString()}'`, () => {",
															"        pm.expect(validateMessage(jsonData.message)).to.eql(true);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3e0fd8f1-8cf9-4795-99be-39e1616bbff5",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Update custom field test suite - Empty json body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "97dc02b2-1ae9-4779-990c-767aeb99f2c3",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextbox');",
															"    const jsonData = pm.response.json();",
															"",
															"    pm.test(`Response data contains error message: custom field does not exist`, () => {",
															"        pm.expect(pm.response.text()).to.include('does not exist');",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8b911baa-b220-4006-8055-d105ba8ee145",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Update custom field test suite - Invalid field id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "16943c68-74c4-409a-9ebf-cc13f2aee94f",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"",
															"    pm.test(`Response data contains error message: 'custom field does not exist`, () => {",
															"        pm.expect(pm.response.text()).to.include('does not exist');",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "034d4110-7bd6-4755-9da8-5b0852f3005c",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": 11111,\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "404 - Update custom field test suite - Project not found",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0bd6c5f7-0e07-4bcf-8435-bdfa6581fa74",
														"exec": [
															"const RESPONSE_CODE = 404;",
															"const EXPECTED_MSG = 'Project not found';",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"    pm.test(`Response body has 'message' property value '${EXPECTED_MSG}'`, () => {",
															"        pm.expect(jsonData.message).to.contains(EXPECTED_MSG);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "f5e71660-2cdf-41f5-b669-4071c9d81fc0",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{cusFieldIdTextbox}},\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}11111/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}11111",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "404 - Update custom field test suite - Invalid project id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d9b72a47-e934-4f23-beb7-583fd85a23aa",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"    const EXPECTED_MSG = `invalid-${pm.environment.get(\"projectId\")}`;",
															"",
															"    pm.test(`Response body has 'message' property contain invalid text`, () => {",
															"        pm.expect(jsonData.message).to.include(EXPECTED_MSG);",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "00a046b4-2574-43da-b9b8-da8c9cc93486",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{cusFieldIdTextbox}},\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/invalid-{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"invalid-{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Cleanup",
									"item": [
										{
											"name": "200 - Cleanup - Delete all created custom fields of test suite",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4635e9d6-5965-4c7a-932f-a1ee838558d5",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"pm.environment.set(\"cusFieldId\",\"\");",
															"pm.environment.set('createdFieldsList', '');",
															"pm.environment.unset('cusFieldDataTypeId');",
															"pm.environment.unset('resAttributeType');",
															"pm.environment.unset('cusFieldName');",
															"pm.environment.unset('cusFieldDefaultValue');",
															"pm.environment.unset(\"cusFieldInfoTextbox\");",
															"pm.environment.unset(\"cusFieldInfoTextarea\");",
															"pm.environment.unset(\"cusFieldInfoCombobox\");",
															"pm.environment.unset(\"cusFieldInfoDatePicker\");",
															"pm.environment.unset(\"cusFieldInfoUserList\");",
															"pm.environment.unset(\"cusFieldInfoRichTextEditor\");",
															"pm.environment.unset(\"cusFieldInfoNumber\");",
															"pm.environment.unset(\"cusFieldInfoCheckbox\");",
															"pm.environment.unset(\"cusFieldInfoDateTimePicker\");",
															"pm.environment.unset(\"cusFieldInfoUrl\");",
															"pm.environment.unset(\"cusFieldInfoMulSelCombobox\");",
															"pm.environment.unset(\"jsonBody\");",
															"pm.environment.unset(\"csrfToken\");",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e2b2d717-4795-4688-a5ef-14d5608ccd5a",
														"exec": [
															"// generator csrf token",
															"var base64object = function(input) {",
															" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));",
															" var base64 = CryptoJS.enc.Base64.stringify(inputWords);",
															" return base64;",
															"};",
															"let uuid = require('uuid');",
															"let token = uuid.v4() + \"QAS\" + base64object(Date.now());",
															"pm.environment.set(\"csrfToken\", token);",
															"",
															"// delete all created custom fields",
															"let fieldIdsList = pm.environment.get('createdFieldsList');",
															"",
															"if (fieldIdsList.length > 0) {",
															"    fieldIdsList = fieldIdsList.substring(0, fieldIdsList.length - 1);",
															"    const arrFieldIds = fieldIdsList.split(',');",
															"    let jsonBody = '';",
															"    console.log(`-- Total created custom fields of test suite: ${arrFieldIds.length}`);",
															"    arrFieldIds.forEach((fieldId) => {",
															"        const item = `{\"id\":${fieldId}}`;",
															"        jsonBody += item + ',';",
															"    });",
															"    jsonBody = jsonBody.substring(0, jsonBody.length - 1);",
															"    pm.environment.set('jsonBody', jsonBody);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "{{qtestUserCookie}}"
													},
													{
														"key": "X-CSRF-Token",
														"value": "{{csrfToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "customGridData",
															"value": "[{\"action\":\"DELETE\",\"items\":[{{jsonBody}}]}]",
															"type": "text"
														},
														{
															"key": "dojo.preventCache",
															"value": "{{csrfToken}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{qtestUrl}}/p/{{projectId}}/portal/customfield/updateCustomField",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"p",
														"{{projectId}}",
														"portal",
														"customfield",
														"updateCustomField"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Test Run",
							"item": [
								{
									"name": "Precondition",
									"item": [
										{
											"name": "200 - Precondition - Login success",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "928994f7-96d1-45c5-9cc3-9929238b09a9",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"    pm.environment.set('accessToken', jsonData.access_token);",
															"    pm.environment.set('tokenType', jsonData.token_type);",
															"",
															"    // Create login cookie of user",
															"    const rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
															"    const base64 = CryptoJS.enc.Base64.stringify(rawStr);",
															"    pm.environment.set('qtestUserCookie', 'UserContextToken=' + base64);",
															"",
															"    // Constant qtest custom fields id",
															"    pm.environment.set('cusFieldIdTextbox', 1);",
															"    pm.environment.set('cusFieldIdTextarea', 2);",
															"    pm.environment.set('cusFieldIdCombobox', 3);",
															"    pm.environment.set('cusFieldIdDatePicker', 4);",
															"    pm.environment.set('cusFieldIdUserList', 5);",
															"    pm.environment.set('cusFieldIdRichTextEditor', 6);",
															"    pm.environment.set('cusFieldIdNumber', 7);",
															"    pm.environment.set('cusFieldIdCheckbox', 8);",
															"    pm.environment.set('cusFieldIdDatetimePicker', 9);",
															"    pm.environment.set('cusFieldIdUrl', 12);",
															"    pm.environment.set('cusFieldIdMulSelCombobox', 17);",
															"",
															"    pm.environment.set('createdFieldsList', '');",
															"    pm.environment.set(\"objectType\", \"test-runs\");",
															"    pm.environment.set(\"createdFieldsList\", \"\");",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "200a7b05-a9b3-4df4-8eb2-0b501e0c3463",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic dGFtdG1uZ3V5ZW46"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "{{username}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{password}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{qtestUrl}}/oauth/token",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"oauth",
														"token"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Main",
									"item": [
										{
											"name": "Textbox",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field test run - Textbox",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "6f557e52-1125-48ac-abb3-5beeb4c0846f",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoTextbox', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "678ad034-fd32-4190-801e-4fdecfa8b1fd",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Textbox');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdTextbox'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}}\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field test run - Update custom field textbox to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "0cb25b1d-c1d7-4de5-ac2b-b548abfe0661",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextbox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "6919d0ca-8006-449d-a6ec-0ac205006da8",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoTextbox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field test run - Update custom field textbox to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "0b4d155c-e8b9-4b13-bc49-27530d23d498",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextbox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "2d2c16db-1443-46dd-b025-36c1fbfc33ef",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoTextbox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "cbe256d4-7e37-4810-ad37-1a2538aac6fa",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "d5da7eeb-021c-4dd1-ae83-d033a5dcfecd",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Textarea",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field test run - Textarea",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "b6f7b038-f0a9-444a-9b85-b4eb70f4085e",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoTextarea', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "8dda9cc4-4617-437f-b056-c40e0638651e",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Textarea');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdTextarea'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\",\n    \"allowed_values\": [],\n    \"multiple\": false\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field test run - Update custom field text area to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "c5520e7f-452e-4968-af53-d287e2f1bc4d",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextarea');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "66d088c6-bdf2-4e9a-9f61-0fc621b63742",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoTextarea');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field test run - Update custom field textarea to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "73e098e7-90fd-4dc3-80a4-a518ed89814a",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextarea');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "ec3be2e0-5d3c-41d1-95fe-cec0cce90b75",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoTextarea');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "cb618fd7-c624-4b66-aeea-5e3802ce2198",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "f83dce50-8c82-456d-8582-ed7b63261dc1",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4616471b-a4a0-4159-b46f-32f0a2b3776a",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f7ab3108-8c56-4339-9ccc-78d68440bda1",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Combobox",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition  - Create custom field test run - Combobox",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "b67315fa-facb-4f93-8d75-164b62dec0b5",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoCombobox', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "f943eff3-be8d-41de-963b-056ddf16c87b",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Combobox');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdCombobox'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"allowed_values\": []\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field test run - Update custom field combobox to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "cdd8f500-12f0-4a0d-8424-30c27ee6df79",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoCombobox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "3616ff19-fc25-49ba-a06f-5742ab916cc3",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoCombobox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field test run - Update custom field combobox to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "978cb6ae-7ec3-45e7-864d-a63edc181d2a",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoCombobox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "2765e53a-81c9-474f-91a5-1d8b784f5fe7",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoCombobox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1ea206d6-f52f-4f81-8624-233b99802bcb",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "12cffa25-b6ff-4dc9-92ac-d8f10ce39bde",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "59b0ed9a-5b7a-4dde-996f-54390da6635f",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e0f22438-6785-448c-abcf-068af4844840",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Date picker",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field test run - DatePicker",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "0e958239-d929-4d0c-84c0-a22d9ee48bfd",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoDatePicker', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "bf906526-3a6d-40ea-9fda-89347c8869f4",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My DatePicker');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdDatePicker'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\"\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field test run - Update custom field date picker to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "4a51f7e0-fe9d-4c02-8bcc-2af0ae7fcf46",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoDatePicker');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "575061b7-863e-466a-9a49-d95a82502a1f",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoDatePicker');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field test run - Update custom field date picker to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "d1ba2f1c-285b-479c-bf3c-d07a7fd65186",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoDatePicker');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "c7167c39-6296-4ecc-a5cf-505cb5e99815",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoDatePicker');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "6421920a-5a82-4cf0-a925-1c2f44a5d44b",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "d969c795-2149-44a2-92bc-a8d8dd3584aa",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5323abfa-4714-46a3-9f24-a8e186df1fd4",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b1b9447f-5b9e-4b15-99db-590348a2e01e",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "User list",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field test run - UserList",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "fe3de1be-7d77-4b5f-a9a4-39ffb79f7abe",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoUserList', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "e0285cc7-0501-4956-9942-25b19fe78578",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My UserList');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdUserList'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field test run - Update custom field user list to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "94ed7a3c-3daa-4b43-ad04-a640c19dfacd",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoUserList');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "ade74028-3db8-443e-a934-be19b277d792",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoUserList');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field test run - Update custom field user list to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "bda7674b-7af6-46c3-8530-426c59824729",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoUserList');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "1346d516-14c9-41d5-be40-84be017d4051",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoUserList');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "6b216a0b-b588-4b4c-b452-ceb7f12a41e4",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "92129245-c8d2-4739-91e4-ffc1f6cb3f98",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0e5bd485-f3fb-4cfb-ad6a-61dc4e31b401",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "05d92de9-436d-440d-bfae-9ee09cc83dbe",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Rich text editor",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field test run - Rich text editor",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "c7c5ceb6-310f-4b35-87b1-08a954ba2e7a",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoRichTextEditor', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "fbe8aa0c-0163-4530-8206-0118a6442aef",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My RichTextEditor');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdRichTextEditor'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\"\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field test run - Update custom field rich text editor to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "c8c14011-b827-4c93-9556-293c8c0f5a6f",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoRichTextEditor');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "e7baa725-e098-45db-bbe6-2485e6aba3ae",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoRichTextEditor');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field test run - Update custom field rich text editor to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "ac577bfb-e1a7-45ad-8227-7f496eafc628",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoRichTextEditor');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "c840f97f-7a49-4084-baf7-608a840ad1e1",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoRichTextEditor');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "4f223110-4fac-4029-afdc-cf26d3318f94",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "c2b9c1d3-42a7-4e20-b54b-3e6f41eae074",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0d6ec8fb-3e2c-4af5-a7c7-2475ef061e3d",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "21477de8-cf69-43c5-ad9b-65b83fc633a1",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Number",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field test run - Number",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "5982d0ca-ce53-4ebd-9bc6-18e9face6c8e",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoNumber', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "e0a82ffc-fd2f-4f1e-a429-471cfffcf794",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Number');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdNumber'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\"\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field test run - Update custom field number to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "85c8b739-8659-4348-8503-aadcad0d36e3",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoNumber');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "15b0eeef-1bca-4a53-a97a-bfd9264c5861",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoNumber');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field test run - Update custom field number to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "d6992b07-0ba2-4638-a4aa-07d3a6e5aa27",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoNumber');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "c63a865a-6d19-43cb-80d8-932fc75ccf9c",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoNumber');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "a1e0b28b-54d2-4d90-9c1a-9626cbab3862",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "41d6b261-1011-4bbf-bdfa-2b28bc30ae85",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "8681ab64-0b72-42ab-8338-8830b2579887",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "645017a0-2437-45e7-9c52-74984870283e",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Check box",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field test run - Checkbox",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "a2d67118-36cd-4070-a191-92b5c3e38e0d",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoCheckbox', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "9800f6e9-2e64-4587-8cc0-d8bec2bb16c3",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Checkbox');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdCheckbox'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"allowed_values\": []\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field test run - Update custom field check box to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "b0145045-651b-4cbd-8c50-2ef834358662",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoCheckbox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "edad6c5b-5270-4163-90df-ed894cc93584",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoCheckbox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field test run - Update custom field check box to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "9952190a-0389-4f18-8c46-194c43c5e31e",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoCheckbox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "4d5c3e31-b6b1-41af-9b1f-ae4c126db7b9",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoCheckbox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "b8ae1d27-4e30-42aa-af5d-1341f7c19cc5",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "fc580ba4-9b67-4f4e-8a61-342b710a7500",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "385464af-2820-46ca-9784-709590c796c9",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6d31a788-02b8-4f8e-92d2-e75f5e5b1017",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Datetime picker",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field test run - DateTimePicker",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "9869b45f-c22c-4d78-8e9e-f9b4f0aa7c98",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoDateTimePicker', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "f0aefc13-1176-41aa-bde6-cd16e2bf7c5a",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My DatetimePicker');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdDatetimePicker'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"allowed_values\": []\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field test run - Update custom field datetime picker to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "64aa2852-7bcd-44b1-9ac1-f4a4d1a93463",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoDateTimePicker');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "afaeaad5-3da0-43e7-9787-c59e9121098d",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoDateTimePicker');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field test run - Update custom field datetime picker to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "118a80a5-dcb9-4041-bdbd-dfbea9143912",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoDateTimePicker');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "a1995dd7-283d-42c1-90dd-55f77597f285",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoDateTimePicker');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "4ea263ed-fd84-4d3b-a147-0671e6ef9474",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "c668f8f0-d416-422d-94b5-cc125ccc618b",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e7b54663-5873-420a-8507-32d32e44d637",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f81442e7-2b70-4b13-9930-13c3934c5fa5",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "URL",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field test run - URL",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "606bb891-104f-4d5a-8670-842e85440770",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoUrl', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "ce4753ee-0e49-4cd4-9987-a24ac31fd2a7",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Url');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdUrl'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\"\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field test run - Update custom field url to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "f8f61019-2dc2-4507-bfa1-2d824520277b",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoUrl');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "3692a932-81cc-4026-aaa4-1f7b152d6131",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoUrl');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field test run - Update custom field url to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "dcc72e1f-cdb2-42d8-a971-59e612a63892",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoUrl');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "2d5dd241-4228-409a-96e7-633b4115454e",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoUrl');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "a8e4100d-362c-4428-b698-f46291386054",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "add29ae3-d268-453e-af73-9e5e1cbb98a4",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3223c3b7-6d0d-434a-9ceb-3923333772eb",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b8c1c686-8df6-4eb9-b7c1-40c345b4d922",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Multiple Selection Combobox",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field test run - MultipleSelectionCombobox",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "47027907-6efa-4e50-a902-436d58fa64e1",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoMulSelCombobox', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "63d9e9f8-d5b7-42c9-948d-d375002a4ce0",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My MulSelCombobox');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdMulSelCombobox'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"allowed_values\": []\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field test run - Update custom field multiple selection combobox to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "78deb580-5259-4699-9410-cf9ceff2cfbe",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoMulSelCombobox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "a34bca4c-5113-4f88-815b-fe18dde324be",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoMulSelCombobox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field test run - Update custom field multiple selection combobox to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "2903bdd2-08fb-42d4-b7c6-15715d4fc957",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoMulSelCombobox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "f37ecb1d-7552-41a7-bc7c-f410cdda322b",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoMulSelCombobox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "bbf5831f-dc8a-41d7-bd09-1d52a6d6d454",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "1f81f715-9edc-46eb-95c6-f88e0822ac0f",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f3df59eb-7c45-496b-92d1-5e387e526c9b",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7965a027-21b6-426a-9193-1e2f5dd2a7b3",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "200 - Update custom field test run - Inactive some custom fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "236451c3-baab-4743-997e-cbf13784db0e",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"    const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"    const jsonData = pm.response.json();",
															"",
															"    jsonData.forEach((fieldInfo) => {",
															"        pm.test(`Response data of custom field '${fieldInfo.label}' has property 'is_active' value is false`, () => {",
															"            pm.expect(fieldInfo.is_active).to.be.false;",
															"        })",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "385e41c3-2f05-4a5c-88d9-48ed8da0c259",
														"type": "text/javascript",
														"exec": [
															"const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"pm.environment.set('idTextbox', cusFieldInfoTextbox.id);",
															"pm.environment.set('idTextarea', cusFieldInfoTextarea.id);"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{idTextbox}},\n\t    \"is_active\": false\n\t},\n\t{\n\t\t\"id\": {{idTextarea}},\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "200 - Update custom field test run - Active some custom fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8515d7df-47fe-461a-8024-8bf08b352cf5",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"    const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"    const jsonData = pm.response.json();",
															"",
															"    jsonData.forEach((fieldInfo) => {",
															"        pm.test(`Response data of custom field '${fieldInfo.label}' has property 'is_active' value is true`, () => {",
															"            pm.expect(fieldInfo.is_active).to.be.true;",
															"        })",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "a40edd07-6718-40f6-b094-c42bb07cc452",
														"type": "text/javascript",
														"exec": [
															"const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"pm.environment.set('idTextbox', cusFieldInfoTextbox.id);",
															"pm.environment.set('idTextarea', cusFieldInfoTextarea.id);"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{idTextbox}},\n\t    \"is_active\": true\n\t},\n\t{\n\t\t\"id\": {{idTextarea}},\n\t    \"is_active\": true\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "200 - Update custom field test run - Multiple fields with multiple statuses",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "877e31fd-8eba-4f32-9918-704396a37568",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"    const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"    const cusFieldInfoCombobox = pm.environment.get('cusFieldInfoCombobox');",
															"    const jsonData = pm.response.json();",
															"",
															"    jsonData.forEach((fieldInfo) => {",
															"        switch (fieldInfo.label) {",
															"            case cusFieldInfoTextbox.label:",
															"                pm.test(`Response data of custom field '${cusFieldInfoTextbox.label}' has property 'is_active' value is false`, () => {",
															"                    pm.expect(fieldInfo.is_active).to.be.false;",
															"                });",
															"                break;",
															"",
															"            case cusFieldInfoTextarea.label:",
															"                pm.test(`Response data of custom field '${cusFieldInfoTextarea.label}' has property 'is_active' value is true`, () => {",
															"                    pm.expect(fieldInfo.is_active).to.be.true;",
															"                });",
															"                break;",
															"",
															"            case cusFieldInfoCombobox.label:",
															"                pm.test(`Response data of custom field '${cusFieldInfoCombobox.label}' has property 'is_active' value is false`, () => {",
															"                    pm.expect(fieldInfo.is_active).to.be.false;",
															"                });",
															"                break;",
															"        }",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d100dcba-eacd-4b68-9091-67dda1a62210",
														"type": "text/javascript",
														"exec": [
															"const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"const cusFieldInfoCombobox = pm.environment.get('cusFieldInfoCombobox');",
															"pm.environment.set('idTextbox', cusFieldInfoTextbox.id);",
															"pm.environment.set('idTextarea', cusFieldInfoTextarea.id);",
															"pm.environment.set('idCombobox', cusFieldInfoCombobox.id);"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{idTextbox}},\n\t    \"is_active\": false\n\t},\n\t{\n\t\t\"id\": {{idTextarea}},\n\t    \"is_active\": true\n\t},\n\t{\n\t\t\"id\": {{idCombobox}},\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Update custom field test run - Invalid object type",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "196480c6-645c-4780-bbe9-fe98b9357ba7",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"    const EXPECTED_MSG = 'Unsupported object type';",
															"",
															"    pm.test(`Response data has property 'message' value contains '${EXPECTED_MSG}'`, () => {",
															"        pm.expect(jsonData.message).to.include(EXPECTED_MSG);",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "a0e37b2f-24c1-4255-ac4d-25e5ab5ef2fc",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"id\": 11111,\n        \"is_active\": true\n    }\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/invalid-{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"invalid-{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Update custom field test run - Blank body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5a2474f0-8f1d-4c1c-8347-0da06630ca6f",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"const result = pm.response.code === RESPONSE_CODE;",
															"const EXPECTED_MSGS = [",
															"    \"Required request body is missing\",",
															"    \"Required request body content is missing\"];",
															"    ",
															"function validateMessage(actualMessage){",
															"    let result = false;",
															"    for(const msg of EXPECTED_MSGS) {",
															"        result = actualMessage.indexOf(msg) > -1;",
															"        if(result){",
															"            console.log(`Actual message is: ${actualMessage}`);",
															"            return result;",
															"        }",
															"    }",
															"    return result;",
															"}",
															"",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"    pm.test(`Response body has 'message' property value in following: '${EXPECTED_MSGS.toString()}'`, () => {",
															"        pm.expect(validateMessage(jsonData.message)).to.eql(true);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5ac376d9-4ad3-4594-8ef4-f1cb5ffbca9e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Update custom field test run - Empty json body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "404a3e49-669e-4352-a15a-73628b203712",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextbox');",
															"    const jsonData = pm.response.json();",
															"",
															"    pm.test(`Response data contains error message: custom field does not exist`, () => {",
															"        pm.expect(pm.response.text()).to.include('does not exist');",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c5f29063-1b5e-4244-8229-3e9dd1dfab28",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Update custom field test run - Invalid field id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e4a0079c-8597-4eec-8921-499779516687",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"",
															"    pm.test(`Response data contains error message: 'custom field does not exist`, () => {",
															"        pm.expect(pm.response.text()).to.include('does not exist');",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3f390ae1-dbba-4436-b53a-65f8503296a0",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": 11111,\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "404 - Update custom field test run - Project not found",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2f41c7f2-675c-4374-9ee9-1dc01d4c35d3",
														"exec": [
															"const RESPONSE_CODE = 404;",
															"const EXPECTED_MSG = 'Project not found';",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"    pm.test(`Response body has 'message' property value '${EXPECTED_MSG}'`, () => {",
															"        pm.expect(jsonData.message).to.contains(EXPECTED_MSG);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9c4a96d5-8898-45e9-8070-c58db48c88ab",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{cusFieldIdTextbox}},\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}11111/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}11111",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "404 - Update custom field test run - Invalid project id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b02b9c6f-e571-430b-a51f-79a9726b86a2",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"    const EXPECTED_MSG = `invalid-${pm.environment.get(\"projectId\")}`;",
															"",
															"    pm.test(`Response body has 'message' property contain invalid text`, () => {",
															"        pm.expect(jsonData.message).to.include(EXPECTED_MSG);",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5e2b7ec4-054a-47a0-bdf3-e8783a69e18b",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{cusFieldIdTextbox}},\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/invalid-{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"invalid-{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Cleanup",
									"item": [
										{
											"name": "200 - Cleanup - Delete all created custom fields of test run",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3cbfb830-58eb-4df3-86b0-68bd885dfbda",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"pm.environment.set(\"cusFieldId\",\"\");",
															"pm.environment.set('createdFieldsList', '');",
															"pm.environment.unset('cusFieldDataTypeId');",
															"pm.environment.unset('resAttributeType');",
															"pm.environment.unset('cusFieldName');",
															"pm.environment.unset('cusFieldDefaultValue');",
															"pm.environment.unset(\"cusFieldInfoTextbox\");",
															"pm.environment.unset(\"cusFieldInfoTextarea\");",
															"pm.environment.unset(\"cusFieldInfoCombobox\");",
															"pm.environment.unset(\"cusFieldInfoDatePicker\");",
															"pm.environment.unset(\"cusFieldInfoUserList\");",
															"pm.environment.unset(\"cusFieldInfoRichTextEditor\");",
															"pm.environment.unset(\"cusFieldInfoNumber\");",
															"pm.environment.unset(\"cusFieldInfoCheckbox\");",
															"pm.environment.unset(\"cusFieldInfoDateTimePicker\");",
															"pm.environment.unset(\"cusFieldInfoUrl\");",
															"pm.environment.unset(\"cusFieldInfoMulSelCombobox\");",
															"pm.environment.unset(\"jsonBody\");",
															"pm.environment.unset(\"csrfToken\");",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "ead1af1f-da78-4d03-b024-55f124e96586",
														"exec": [
															"// generator csrf token",
															"var base64object = function(input) {",
															" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));",
															" var base64 = CryptoJS.enc.Base64.stringify(inputWords);",
															" return base64;",
															"};",
															"let uuid = require('uuid');",
															"let token = uuid.v4() + \"QAS\" + base64object(Date.now());",
															"pm.environment.set(\"csrfToken\", token);",
															"",
															"// delete all created custom fields",
															"let fieldIdsList = pm.environment.get('createdFieldsList');",
															"",
															"if (fieldIdsList.length > 0) {",
															"    fieldIdsList = fieldIdsList.substring(0, fieldIdsList.length - 1);",
															"    const arrFieldIds = fieldIdsList.split(',');",
															"    let jsonBody = '';",
															"    console.log(`-- Total created custom fields of test run: ${arrFieldIds.length}`);",
															"    arrFieldIds.forEach((fieldId) => {",
															"        const item = `{\"id\":${fieldId}}`;",
															"        jsonBody += item + ',';",
															"    });",
															"    jsonBody = jsonBody.substring(0, jsonBody.length - 1);",
															"    pm.environment.set('jsonBody', jsonBody);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "{{qtestUserCookie}}"
													},
													{
														"key": "X-CSRF-Token",
														"value": "{{csrfToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "customGridData",
															"value": "[{\"action\":\"DELETE\",\"items\":[{{jsonBody}}]}]",
															"type": "text"
														},
														{
															"key": "dojo.preventCache",
															"value": "{{csrfToken}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{qtestUrl}}/p/{{projectId}}/portal/customfield/updateCustomField",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"p",
														"{{projectId}}",
														"portal",
														"customfield",
														"updateCustomField"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Defect",
							"item": [
								{
									"name": "Precondition",
									"item": [
										{
											"name": "200 - Precondition - Login success",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ab4cf4b2-d761-4a2a-a23f-1cbca01daeb6",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"    pm.environment.set('accessToken', jsonData.access_token);",
															"    pm.environment.set('tokenType', jsonData.token_type);",
															"",
															"    // Create login cookie of user",
															"    const rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
															"    const base64 = CryptoJS.enc.Base64.stringify(rawStr);",
															"    pm.environment.set('qtestUserCookie', 'UserContextToken=' + base64);",
															"",
															"    // Constant qtest custom fields id",
															"    pm.environment.set('cusFieldIdTextbox', 1);",
															"    pm.environment.set('cusFieldIdTextarea', 2);",
															"    pm.environment.set('cusFieldIdCombobox', 3);",
															"    pm.environment.set('cusFieldIdDatePicker', 4);",
															"    pm.environment.set('cusFieldIdUserList', 5);",
															"    pm.environment.set('cusFieldIdRichTextEditor', 6);",
															"    pm.environment.set('cusFieldIdNumber', 7);",
															"    pm.environment.set('cusFieldIdCheckbox', 8);",
															"    pm.environment.set('cusFieldIdDatetimePicker', 9);",
															"    pm.environment.set('cusFieldIdUrl', 12);",
															"    pm.environment.set('cusFieldIdMulSelCombobox', 17);",
															"",
															"    pm.environment.set('createdFieldsList', '');",
															"    pm.environment.set(\"objectType\", \"defects\");",
															"    pm.environment.set(\"createdFieldsList\", \"\");",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4ecf3638-aa48-4a34-90bd-68a1f82cae47",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic dGFtdG1uZ3V5ZW46"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "grant_type",
															"value": "password",
															"type": "text"
														},
														{
															"key": "username",
															"value": "{{username}}",
															"type": "text"
														},
														{
															"key": "password",
															"value": "{{password}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{qtestUrl}}/oauth/token",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"oauth",
														"token"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Main",
									"item": [
										{
											"name": "Textbox",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field defect - Textbox",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "fba81e98-734d-4906-a533-f469ea9b0f70",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoTextbox', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "7c886743-d53e-40d3-8a1c-dbbbfab1a749",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Textbox');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdTextbox'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}}\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field defect - Update custom field textbox to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "1b8ff5be-3bc4-4a2d-929b-558eb334bf9d",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextbox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "2a6a3120-ae0a-4a82-a287-bf0672a2bc88",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoTextbox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field defect - Update custom field textbox to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "2d7d7be7-3151-450a-8904-825cfe433b75",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextbox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "96f88c3d-8d41-4694-9275-362fd666f35b",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoTextbox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "a051d382-1ac3-46af-9d65-d76f937c6de1",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "6c0619ac-70aa-4d60-a926-933d05568ea6",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Textarea",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field defect - Textarea",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "79373f8f-5212-4b8a-912d-90d77fc0eac9",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoTextarea', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "dabb3a1c-0c85-4217-9c04-466b7a2765cc",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Textarea');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdTextarea'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\",\n    \"allowed_values\": [],\n    \"multiple\": false\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field defect - Update custom field text area to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "c61a0161-7f83-4e47-b8d6-3de28f421d1d",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextarea');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "60107bc7-7c02-4125-ab11-d844586f1045",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoTextarea');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field defect - Update custom field textarea to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "b19708c1-91f6-4108-82d7-da823ef0937a",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextarea');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "f48d6a91-8cb4-475e-93f6-823fd6c30df3",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoTextarea');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "ef631768-4561-47ee-8930-4b594640ed35",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "43890cd2-7833-4fe6-847d-bd0309a6ae9b",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7a894280-cedc-4fd8-a79b-52fa58735a81",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a2370add-a02a-4494-87de-9c155115c29e",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Combobox",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition  - Create custom field defect - Combobox",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "317c951d-0a22-4910-8b39-ad14f2ec00b2",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoCombobox', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "676a9504-ced5-4af2-aa6f-d6de99b68274",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Combobox');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdCombobox'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"allowed_values\": []\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field defect - Update custom field combobox to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "f7a494fd-b923-4b9c-863e-aada27d54f93",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoCombobox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "3afa56d5-329b-45db-9886-0f8fe044c04b",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoCombobox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field defect - Update custom field combobox to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "17bb6d1a-5782-4b5f-9450-16cb69cc3c13",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoCombobox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "a5e09ddd-5a3d-444d-9ed2-d66526898828",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoCombobox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "684875b8-57c4-4e7e-825f-c4a024d9eba2",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "3708e619-11cf-4572-a087-405a3f244cab",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "08c2bde0-036b-4fac-8c08-a1f2068d6626",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "42caf556-af27-4c3c-91d0-6da2c9e0d76b",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Date picker",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field defect - DatePicker",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "aa7730b0-2e5c-405f-a9ef-6392663b74bc",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoDatePicker', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "15202ac0-d513-43da-b40a-d773e3e71b9c",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My DatePicker');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdDatePicker'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\"\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field defect - Update custom field date picker to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "ae51bd82-7beb-4164-bdab-867a5397f35d",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoDatePicker');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "e9ebdfd1-2fc9-4263-9afb-ddb8b9d62083",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoDatePicker');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field defect - Update custom field date picker to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "f5e68fb2-2f02-4e9b-90a8-e36f1315c301",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoDatePicker');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "335b3a99-57e4-4cf4-b170-3e037c13ef4d",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoDatePicker');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "052fb366-d6b0-4ccb-820c-2ca8db753a59",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "580cec67-373e-454e-a5ba-e87ca833d364",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "8ca83d80-b4db-4eee-95b4-b3d19a20bcbd",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "414d5fbe-3709-4f81-899a-2ef69e6f1250",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "User list",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field defect - UserList",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "7256215d-08a6-46bc-a413-d71983fa6cf3",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoUserList', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "ee097c2e-ea1b-4324-b02b-a16d987ad304",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My UserList');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdUserList'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field defect - Update custom field user list to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "882f597d-f1e5-4c17-970c-ad723bdd2f7d",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoUserList');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "195ec7c6-4bad-4b7f-a35d-5fe7c84139ae",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoUserList');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field defect - Update custom field user list to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "f4ddae38-e362-4024-954b-4d19e08b338e",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoUserList');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "ee7841f1-122e-4296-bcf2-a2f406d7dc7f",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoUserList');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "e859f682-878a-4984-afba-e5510975d812",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "b7e12247-d900-43c4-af1e-0bb9496c7791",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5f57d1eb-77af-4663-a86a-c862a9266359",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "0487736c-0a5e-4844-93fd-a6da78bb422c",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Rich text editor",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field defect - Rich text editor",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "e7714604-3f68-41d7-9ca3-4b43d51c1456",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoRichTextEditor', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "4b141fa4-6d87-420a-8190-0d877b6eb17b",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My RichTextEditor');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdRichTextEditor'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\"\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field defect - Update custom field rich text editor to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "072676cb-4b11-444b-80c8-04dd0ccc34a2",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoRichTextEditor');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "8ca506a9-2dfe-4e2a-9721-041edddac0ea",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoRichTextEditor');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field defect - Update custom field rich text editor to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "e1774dd4-3e16-4265-8489-691a75086ab9",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoRichTextEditor');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "77ca403d-cffa-4e12-9cdd-81a588b07ff5",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoRichTextEditor');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "6bbf0c6f-b11e-4f63-ba63-727a2f44a1f0",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "cce4cd25-f44e-4720-a3ae-27aecf776c39",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ddbcff0a-6703-4ada-a799-550ab43e9dac",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4b8811b2-5f35-4ff4-9080-d30172e69480",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Number",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field defect - Number",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "d7ec71f5-6b02-4f58-bf5f-c16af82e06c6",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoNumber', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "488a7a54-917c-4689-915c-70e6dccbe8e8",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Number');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdNumber'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\"\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field defect - Update custom field number to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "ee42d1b9-9444-4c96-b03c-28dfc139b1b7",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoNumber');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "5acd6d09-cd07-48dd-ad60-025687bdfbc9",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoNumber');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field defect - Update custom field number to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "ac656250-92f9-4291-8dec-c235d3903062",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoNumber');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "6d3f7ae5-8c54-4341-88d8-7b916a6d87e2",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoNumber');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "694ea518-a664-4013-9bec-ac0593d61f83",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "e383726e-13da-48ae-b557-60683920d06d",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4afb0657-70de-4715-87bc-e7c764ebcd45",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "0f63bd13-dff3-44b7-b0b6-8336f62649d7",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Check box",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field defect - Checkbox",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "5c248904-1cfa-46dc-96f2-5eb3b6a9918b",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoCheckbox', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "99720234-31bb-48cf-bf9f-00f5e52128d1",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Checkbox');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdCheckbox'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"allowed_values\": []\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field defect - Update custom field check box to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "99d39b0d-c841-40b1-84be-80c4825e7047",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoCheckbox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "d99890fa-10d0-40a4-a005-420c8f5f9d4a",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoCheckbox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field defect - Update custom field check box to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "c7033d05-e2eb-4a04-985c-deb43c94ba78",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoCheckbox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "88caac48-5870-4ac8-b422-3b2af18c706d",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoCheckbox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "472e62cb-d702-48b4-bdb6-daff070dc418",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "92a2509c-8132-4692-bbc8-f4365a760122",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9dc840d6-dbfa-4821-a02f-25cd49dd787d",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "0301f1df-ba34-4357-8a5b-6123cfbd2969",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Datetime picker",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field defect - DateTimePicker",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "68d9f21e-b0d5-47d1-8a60-fef1fdac78eb",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoDateTimePicker', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "356ed3a5-ec14-4d0b-ace3-2db079e39c95",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My DatetimePicker');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdDatetimePicker'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"allowed_values\": []\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field defect - Update custom field datetime picker to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "c43072f1-6b74-4232-b7bb-07272290c355",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoDateTimePicker');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "4662e2bf-f927-455a-8786-a5205a1885af",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoDateTimePicker');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field defect - Update custom field datetime picker to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "7c12bcaf-c107-4c97-8aba-ba09ccd25e60",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoDateTimePicker');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "3f222698-96d0-4b08-8b78-291dfe63fc06",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoDateTimePicker');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "789fb1f8-ad6f-4588-b834-a2f0f07ca920",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "02a6061e-c72a-458c-8f83-fff942438869",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0eb01f51-1c08-4b10-bce0-b097f55b021a",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "89be533e-0abd-4b02-920a-d0f07adb3cc8",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "URL",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field defect - URL",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "e9eb3424-dd18-4f25-bea4-b92caaf6d1a5",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoUrl', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "cdb3b6e2-b906-4bca-8b2a-357eaafef5ed",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My Url');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdUrl'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"default_value\": \"\"\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field defect - Update custom field url to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "ead70521-9867-44f4-bc1d-d95204ec3ea6",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoUrl');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "acc1e875-de34-4aa6-ac0f-22842a209f5f",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoUrl');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field defect - Update custom field url to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "5d87df2c-b719-4938-b3d2-5bb53d94e60f",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoUrl');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "6ea07fd8-9a89-46b6-b757-a5481a977623",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoUrl');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "0cc259f7-f971-4a80-b6a9-57212316a3d5",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "1048e4de-95a0-44b1-9417-5ecdecb185bc",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c0506bc0-ee38-4fe3-8dc4-32778e3fec01",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f3f2fe8e-cf6b-4b4a-8477-28765cc62d6f",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Multiple Selection Combobox",
											"item": [
												{
													"name": "Precondition",
													"item": [
														{
															"name": "201 - Precondition - Create custom field defect - MultipleSelectionCombobox",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "239c23b1-a4c7-404e-994e-0a6fa8f5b06b",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 201;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const jsonData = pm.response.json();",
																			"",
																			"    pm.environment.set('cusFieldInfoMulSelCombobox', jsonData);",
																			"    // Add created field id to a field id array list",
																			"    let fieldIdList = pm.environment.get('createdFieldsList');",
																			"    fieldIdList = fieldIdList + jsonData.id + \",\";",
																			"    pm.environment.set('createdFieldsList', fieldIdList);",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "ac5f6aaa-7e1d-4735-8bb5-b3a3dd6e6eb4",
																		"type": "text/javascript",
																		"exec": [
																			"pm.environment.set('cusFieldName', 'My MulSelCombobox');",
																			"pm.environment.set('cusFieldDataTypeId', pm.environment.get('cusFieldIdMulSelCombobox'));"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"label\": \"{{cusFieldName}}\",\n    \"data_type\": {{cusFieldDataTypeId}},\n    \"required\": false,\n    \"searchable\": false,\n    \"allowed_values\": []\n}"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/fields",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"fields"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Main",
													"item": [
														{
															"name": "200 - Update custom field defect - Update custom field multiple selection combobox to inactive",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "8413dd65-f6dd-4d4f-8432-87d828c0d812",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoMulSelCombobox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is false`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.false;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "7b26b5c3-7e60-4c55-b726-02cee97058fa",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoMulSelCombobox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": false\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														},
														{
															"name": "200 - Update custom field defect - Update custom field multiple selection combobox to active",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"id": "a06e3ccf-613c-4499-a0b0-ea01732893c0",
																		"type": "text/javascript",
																		"exec": [
																			"const RESPONSE_CODE = 200;",
																			"",
																			"const result = pm.response.code === RESPONSE_CODE;",
																			"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
																			"    pm.response.to.have.status(RESPONSE_CODE);",
																			"});",
																			"",
																			"if (result) {",
																			"    const cusFieldInfo = pm.environment.get('cusFieldInfoMulSelCombobox');",
																			"    const jsonData = pm.response.json()[0];",
																			"",
																			"    pm.test(`Response data has property 'links' array value > 0`, () => {",
																			"        pm.expect(jsonData.links.length).to.above(0);",
																			"    });",
																			"    pm.test(`Response data has property 'id' number value`, () => {",
																			"        pm.expect(jsonData.id).to.eql(cusFieldInfo.id);",
																			"    });",
																			"    pm.test(`Response data has property 'attribute_type' value is '${cusFieldInfo.attribute_type}'`, () => {",
																			"        pm.expect(jsonData.attribute_type).to.eql(cusFieldInfo.attribute_type);",
																			"    });",
																			"    pm.test(`Response data has property 'label' value is '${cusFieldInfo.label}'`, () => {",
																			"        pm.expect(jsonData.label).to.eql(cusFieldInfo.label);",
																			"    });",
																			"    pm.test(`Response data has property 'required' value is ${cusFieldInfo.required}`, () => {",
																			"        pm.expect(jsonData.required).to.eql(cusFieldInfo.required);",
																			"    });",
																			"    pm.test(`Response data has property 'data_type' value is ${cusFieldInfo.data_type}`, () => {",
																			"        pm.expect(jsonData.data_type).to.eql(cusFieldInfo.data_type);",
																			"    });",
																			"    pm.test(`Response data has property 'searchable' value is ${cusFieldInfo.searchable}`, () => {",
																			"        pm.expect(jsonData.searchable).to.eql(cusFieldInfo.searchable);",
																			"    });",
																			"    pm.test(`Response data has property 'system_field' value is ${cusFieldInfo.system_field}`, () => {",
																			"        pm.expect(jsonData.system_field).to.eql(cusFieldInfo.system_field);",
																			"    });",
																			"    pm.test(`Response data has property 'is_active' value is true`, () => {",
																			"        pm.expect(jsonData.is_active).to.be.true;",
																			"    });",
																			"}"
																		]
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"id": "fe6d2742-6e6d-467e-95e3-93d7dcde40d1",
																		"type": "text/javascript",
																		"exec": [
																			"const jsonData = pm.environment.get('cusFieldInfoMulSelCombobox');",
																			"pm.environment.set('cusFieldId', jsonData.id);"
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Authorization",
																		"value": "{{tokenType}} {{accessToken}}"
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n\t{\n\t\t\"id\": {{cusFieldId}},\n\t    \"is_active\": true\n\t}\n]"
																},
																"url": {
																	"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
																	"host": [
																		"{{qtestUrl}}"
																	],
																	"path": [
																		"api",
																		"v3",
																		"projects",
																		"{{projectId}}",
																		"settings",
																		"{{objectType}}",
																		"custom-fields",
																		"active"
																	]
																}
															},
															"response": []
														}
													],
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "6f42f59f-2267-4d60-b8fe-b727536b5f18",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "4d69acca-a815-4778-b4c0-2a232d4f5971",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "35569528-52be-447e-9801-cbf49261b850",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f8abfa31-4ca4-48db-bdec-7945a0296cca",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "200 - Update custom field defect - Inactive some custom fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "19d2d041-7472-4426-8e31-88a79fe57486",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"    const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"    const jsonData = pm.response.json();",
															"",
															"    jsonData.forEach((fieldInfo) => {",
															"        pm.test(`Response data of custom field '${fieldInfo.label}' has property 'is_active' value is false`, () => {",
															"            pm.expect(fieldInfo.is_active).to.be.false;",
															"        })",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "edb4bd1f-97c2-42da-a036-5a6ce13ac537",
														"type": "text/javascript",
														"exec": [
															"const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"pm.environment.set('idTextbox', cusFieldInfoTextbox.id);",
															"pm.environment.set('idTextarea', cusFieldInfoTextarea.id);"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{idTextbox}},\n\t    \"is_active\": false\n\t},\n\t{\n\t\t\"id\": {{idTextarea}},\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "200 - Update custom field defect - Active some custom fields",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "93e33b6a-7bae-43cd-bbb0-7e9533d015ca",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"    const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"    const jsonData = pm.response.json();",
															"",
															"    jsonData.forEach((fieldInfo) => {",
															"        pm.test(`Response data of custom field '${fieldInfo.label}' has property 'is_active' value is true`, () => {",
															"            pm.expect(fieldInfo.is_active).to.be.true;",
															"        })",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "57bdf0ac-11ff-4842-add9-253186c8d66c",
														"type": "text/javascript",
														"exec": [
															"const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"pm.environment.set('idTextbox', cusFieldInfoTextbox.id);",
															"pm.environment.set('idTextarea', cusFieldInfoTextarea.id);"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{idTextbox}},\n\t    \"is_active\": true\n\t},\n\t{\n\t\t\"id\": {{idTextarea}},\n\t    \"is_active\": true\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "200 - Update custom field defect - Multiple fields with multiple statuses",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "76987998-b1fe-4f3c-8511-1462830f33f4",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"    const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"    const cusFieldInfoCombobox = pm.environment.get('cusFieldInfoCombobox');",
															"    const jsonData = pm.response.json();",
															"",
															"    jsonData.forEach((fieldInfo) => {",
															"        switch (fieldInfo.label) {",
															"            case cusFieldInfoTextbox.label:",
															"                pm.test(`Response data of custom field '${cusFieldInfoTextbox.label}' has property 'is_active' value is false`, () => {",
															"                    pm.expect(fieldInfo.is_active).to.be.false;",
															"                });",
															"                break;",
															"",
															"            case cusFieldInfoTextarea.label:",
															"                pm.test(`Response data of custom field '${cusFieldInfoTextarea.label}' has property 'is_active' value is true`, () => {",
															"                    pm.expect(fieldInfo.is_active).to.be.true;",
															"                });",
															"                break;",
															"",
															"            case cusFieldInfoCombobox.label:",
															"                pm.test(`Response data of custom field '${cusFieldInfoCombobox.label}' has property 'is_active' value is false`, () => {",
															"                    pm.expect(fieldInfo.is_active).to.be.false;",
															"                });",
															"                break;",
															"        }",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "cfb8985c-a2f1-48ce-a8c5-29774f68e741",
														"type": "text/javascript",
														"exec": [
															"const cusFieldInfoTextbox = pm.environment.get('cusFieldInfoTextbox');",
															"const cusFieldInfoTextarea = pm.environment.get('cusFieldInfoTextarea');",
															"const cusFieldInfoCombobox = pm.environment.get('cusFieldInfoCombobox');",
															"pm.environment.set('idTextbox', cusFieldInfoTextbox.id);",
															"pm.environment.set('idTextarea', cusFieldInfoTextarea.id);",
															"pm.environment.set('idCombobox', cusFieldInfoCombobox.id);"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{idTextbox}},\n\t    \"is_active\": false\n\t},\n\t{\n\t\t\"id\": {{idTextarea}},\n\t    \"is_active\": true\n\t},\n\t{\n\t\t\"id\": {{idCombobox}},\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Update custom field defect - Invalid object type",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4a330e35-b64b-4386-b93d-3e1196a4ff71",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"    const EXPECTED_MSG = 'Unsupported object type';",
															"",
															"    pm.test(`Response data has property 'message' value contains '${EXPECTED_MSG}'`, () => {",
															"        pm.expect(jsonData.message).to.include(EXPECTED_MSG);",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0f5e7ced-4c74-4409-a6d0-8e6b6614aa6d",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"id\": 11111,\n        \"is_active\": true\n    }\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/invalid-{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"invalid-{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Update custom field defect - Blank body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "a2174f4b-9e3a-4996-9f1e-b5e28b42f265",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"const result = pm.response.code === RESPONSE_CODE;",
															"const EXPECTED_MSGS = [",
															"    \"Required request body is missing\",",
															"    \"Required request body content is missing\"];",
															"    ",
															"function validateMessage(actualMessage){",
															"    let result = false;",
															"    for(const msg of EXPECTED_MSGS) {",
															"        result = actualMessage.indexOf(msg) > -1;",
															"        if(result){",
															"            console.log(`Actual message is: ${actualMessage}`);",
															"            return result;",
															"        }",
															"    }",
															"    return result;",
															"}",
															"",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"    pm.test(`Response body has 'message' property value in following: '${EXPECTED_MSGS.toString()}'`, () => {",
															"        pm.expect(validateMessage(jsonData.message)).to.eql(true);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "391837d7-fc7a-4b1f-a04d-12adf222b5d0",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Update custom field defect - Empty json body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0a00ab40-4ab2-4546-810b-f251cb623f9b",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const cusFieldInfo = pm.environment.get('cusFieldInfoTextbox');",
															"    const jsonData = pm.response.json();",
															"",
															"    pm.test(`Response data contains error message: custom field does not exist`, () => {",
															"        pm.expect(pm.response.text()).to.include('does not exist');",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4e3e19e0-4b83-48ba-9757-04d83a3776eb",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "400 - Update custom field defect - Invalid field id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "87c08829-7d6c-4933-8201-147d375ca130",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"",
															"    pm.test(`Response data contains error message: 'custom field does not exist`, () => {",
															"        pm.expect(pm.response.text()).to.include('does not exist');",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c6e5e89e-9340-4879-8ef1-f81737567edd",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": 11111,\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "404 - Update custom field defect - Project not found",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9d6d5f21-bc8f-4a0f-ba5c-03b91ecc3537",
														"exec": [
															"const RESPONSE_CODE = 404;",
															"const EXPECTED_MSG = 'Project not found';",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"    pm.test(`Response body has 'message' property value '${EXPECTED_MSG}'`, () => {",
															"        pm.expect(jsonData.message).to.contains(EXPECTED_MSG);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9b66e082-aa50-47ff-8eb8-e04556f32f66",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{cusFieldIdTextbox}},\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}11111/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"{{projectId}}11111",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										},
										{
											"name": "404 - Update custom field defect - Invalid project id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f5cd5bc2-0777-41c8-a2f7-8db959d3d280",
														"type": "text/javascript",
														"exec": [
															"const RESPONSE_CODE = 400;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"",
															"if (result) {",
															"    const jsonData = pm.response.json();",
															"    const EXPECTED_MSG = `invalid-${pm.environment.get(\"projectId\")}`;",
															"",
															"    pm.test(`Response body has 'message' property contain invalid text`, () => {",
															"        pm.expect(jsonData.message).to.include(EXPECTED_MSG);",
															"    });",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0f157452-2bca-418c-acdb-7c570ef62622",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "{{tokenType}} {{accessToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n\t{\n\t\t\"id\": {{cusFieldIdTextbox}},\n\t    \"is_active\": false\n\t}\n]"
												},
												"url": {
													"raw": "{{qtestUrl}}/api/v3/projects/invalid-{{projectId}}/settings/{{objectType}}/custom-fields/active",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"api",
														"v3",
														"projects",
														"invalid-{{projectId}}",
														"settings",
														"{{objectType}}",
														"custom-fields",
														"active"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Cleanup",
									"item": [
										{
											"name": "200 - Cleanup - Delete all created custom fields of defect",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4eaf5f99-c558-412b-9377-ff76f6614e95",
														"exec": [
															"const RESPONSE_CODE = 200;",
															"",
															"const result = pm.response.code === RESPONSE_CODE;",
															"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
															"    pm.response.to.have.status(RESPONSE_CODE);",
															"});",
															"pm.environment.set(\"cusFieldId\",\"\");",
															"pm.environment.set('createdFieldsList', '');",
															"pm.environment.unset('cusFieldDataTypeId');",
															"pm.environment.unset('resAttributeType');",
															"pm.environment.unset('cusFieldName');",
															"pm.environment.unset('cusFieldDefaultValue');",
															"pm.environment.unset(\"cusFieldInfoTextbox\");",
															"pm.environment.unset(\"cusFieldInfoTextarea\");",
															"pm.environment.unset(\"cusFieldInfoCombobox\");",
															"pm.environment.unset(\"cusFieldInfoDatePicker\");",
															"pm.environment.unset(\"cusFieldInfoUserList\");",
															"pm.environment.unset(\"cusFieldInfoRichTextEditor\");",
															"pm.environment.unset(\"cusFieldInfoNumber\");",
															"pm.environment.unset(\"cusFieldInfoCheckbox\");",
															"pm.environment.unset(\"cusFieldInfoDateTimePicker\");",
															"pm.environment.unset(\"cusFieldInfoUrl\");",
															"pm.environment.unset(\"cusFieldInfoMulSelCombobox\");",
															"pm.environment.unset(\"jsonBody\");",
															"pm.environment.unset(\"csrfToken\");",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "3fad58d2-0a99-4314-bff4-1bda89017a8d",
														"exec": [
															"// generator csrf token",
															"var base64object = function(input) {",
															" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));",
															" var base64 = CryptoJS.enc.Base64.stringify(inputWords);",
															" return base64;",
															"};",
															"let uuid = require('uuid');",
															"let token = uuid.v4() + \"QAS\" + base64object(Date.now());",
															"pm.environment.set(\"csrfToken\", token);",
															"",
															"// delete all created custom fields",
															"let fieldIdsList = pm.environment.get('createdFieldsList');",
															"",
															"if (fieldIdsList.length > 0) {",
															"    fieldIdsList = fieldIdsList.substring(0, fieldIdsList.length - 1);",
															"    const arrFieldIds = fieldIdsList.split(',');",
															"    let jsonBody = '';",
															"    console.log(`-- Total created custom fields of defect: ${arrFieldIds.length}`);",
															"    arrFieldIds.forEach((fieldId) => {",
															"        const item = `{\"id\":${fieldId}}`;",
															"        jsonBody += item + ',';",
															"    });",
															"    jsonBody = jsonBody.substring(0, jsonBody.length - 1);",
															"    pm.environment.set('jsonBody', jsonBody);",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Cookie",
														"value": "{{qtestUserCookie}}"
													},
													{
														"key": "X-CSRF-Token",
														"value": "{{csrfToken}}"
													},
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "urlencoded",
													"urlencoded": [
														{
															"key": "customGridData",
															"value": "[{\"action\":\"DELETE\",\"items\":[{{jsonBody}}]}]",
															"type": "text"
														},
														{
															"key": "dojo.preventCache",
															"value": "{{csrfToken}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{qtestUrl}}/p/{{projectId}}/portal/customfield/updateCustomField",
													"host": [
														"{{qtestUrl}}"
													],
													"path": [
														"p",
														"{{projectId}}",
														"portal",
														"customfield",
														"updateCustomField"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Cleanup",
					"item": [
						{
							"name": "200 - Cleanup - Delete project",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "62723194-cd16-4961-8c83-6faf2134a452",
										"exec": [
											"const RESPONSE_CODE = 200;",
											"const result = pm.response.code === RESPONSE_CODE;",
											"",
											"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
											"    pm.response.to.have.status(RESPONSE_CODE);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7d23d3e9-7b98-4d7c-a821-c679e3d91dad",
										"exec": [
											"// generator csrf token\r",
											"var base64object = function(input) {\r",
											" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
											" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
											" return base64;\r",
											"};\r",
											"let uuid = require('uuid');\r",
											"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
											"pm.environment.set(\"csrfToken\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "{{qtestUserCookie}}"
									},
									{
										"key": "X-CSRF-Token",
										"value": "{{csrfToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "id",
											"value": "{{projectId}}",
											"type": "text"
										},
										{
											"key": "dojo.preventCache",
											"value": "{{csrfToken}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{qtestUrl}}/admin/proj/delete-project",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"admin",
										"proj",
										"delete-project"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Logout success",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4fee3aa-d3fe-4a90-8d10-29b370a4355a",
										"type": "text/javascript",
										"exec": [
											"const RESPONSE_CODE = 200;",
											"",
											"const result = pm.response.code === RESPONSE_CODE;",
											"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
											"    pm.response.to.have.status(RESPONSE_CODE);",
											"});",
											"",
											"pm.environment.unset('accessToken');",
											"pm.environment.unset('tokenType');",
											"pm.environment.unset('cusFieldIdTextbox');",
											"pm.environment.unset('cusFieldIdTextarea');",
											"pm.environment.unset('cusFieldIdCombobox');",
											"pm.environment.unset('cusFieldIdDatePicker');",
											"pm.environment.unset('cusFieldIdUserList');",
											"pm.environment.unset('cusFieldIdRichTextEditor');",
											"pm.environment.unset('cusFieldIdNumber');",
											"pm.environment.unset('cusFieldIdCheckbox');",
											"pm.environment.unset('cusFieldIdDatetimePicker');",
											"pm.environment.unset('cusFieldIdUrl');",
											"pm.environment.unset('cusFieldIdMulSelCombobox');",
											"pm.environment.unset('cusFieldName');",
											"pm.environment.unset('cusFieldDataTypeId');",
											"pm.environment.unset('cusFieldDefaultValue');",
											"pm.environment.unset('resUsersList');",
											"pm.environment.unset('resAttributeType');",
											"pm.environment.unset('cusFieldId');",
											"pm.environment.unset('jsonBody');",
											"pm.environment.unset('createdFieldsList');",
											"pm.environment.unset('qtestUserCookie');",
											"pm.environment.unset('csrfToken');",
											"pm.environment.unset('idTextbox');",
											"pm.environment.unset('idTextarea');",
											"pm.environment.unset('idCombobox');",
											"pm.environment.unset('cusFieldInfoTextbox');",
											"pm.environment.unset('cusFieldInfoTextarea');",
											"pm.environment.unset('cusFieldInfoCombobox');",
											"pm.environment.unset('cusFieldInfoDatePicker');",
											"pm.environment.unset('cusFieldInfoUserList');",
											"pm.environment.unset('cusFieldInfoRichTextEditor');",
											"pm.environment.unset('cusFieldInfoNumber');",
											"pm.environment.unset('cusFieldInfoCheckbox');",
											"pm.environment.unset('cusFieldInfoDateTimePicker');",
											"pm.environment.unset('cusFieldInfoUrl');",
											"pm.environment.unset('cusFieldInfoMulSelCombobox');",
											"pm.environment.unset(\"projectName\");",
											"pm.environment.unset(\"projectId\");",
											"pm.environment.unset(\"projectStartDate\");",
											"pm.environment.unset(\"projectEndDate\");",
											"pm.environment.unset(\"objectType\");",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3667b52e-8a06-4d5e-9b76-1c4940dbebad",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/oauth/revoke",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"oauth",
										"revoke"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "44de2c52-aab9-4ab6-8f15-c11ef60f89db",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "8dba5f13-6655-4cc3-9231-0e0b0ee04030",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}