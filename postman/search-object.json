{
	"info": {
		"_postman_id": "c94f9d3a-6eb5-46e2-a086-43e914a01373",
		"name": "Search object",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Query objects",
			"item": [
				{
					"name": "Precondition",
					"item": [
						{
							"name": "Login and Create Project",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "19c94afd-295c-4204-86d9-15464c54cdf4",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code + \" -  Login\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"    ",
													"    var CryptoJS = require(\"crypto-js\");",
													"    //Encrypt",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create Project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48a813d0-2ef3-4f43-be6d-3553fcc21bb8",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"    pm.environment.set(\"projectName\", jsonData.name);",
													"    pm.environment.set(\"projectStartDate\", jsonData.start_date);",
													"    pm.environment.set(\"projectEndDate\", jsonData.end_date);",
													"    ",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "df93e704-6ec2-4079-bd40-c1f97c7b45fb",
												"exec": [
													"// random generator function",
													"function getRandomInt(min, max) {",
													"    min = Math.ceil(min);",
													"    max = Math.floor(max);",
													"    return Math.floor(Math.random() * (max - min)) + min;",
													"}",
													"// generate the random value",
													"var random = getRandomInt(100 , 999);",
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set(\"projectName\", \"qTest API - Postman - Query objects \" + random.toString());",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{projectName}}\",\n  \"description\": \"Description of qTest API Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\"\n  ],\n  \"automation\": true\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Queries Users by Project Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d888aa0b-bc39-477e-be82-2715eee2c243",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Response data contains page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"    pm.test(\"Response data contains page size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"    pm.test(\"Response data contains total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.above(0);",
													"    });",
													"    pm.test(\"Response data contains total project: \" + jsonData.total_project, () => {",
													"        pm.expect(jsonData.total_project).to.eql(1);",
													"    });",
													"    if (jsonData.items && jsonData.items.length > 0) {",
													"        jsonData.items.forEach((item, index) => {",
													"            if (item.username === pm.environment.get(\"username\")) {",
													"                pm.test(\"Response data contains user\", () => {",
													"                    pm.expect(item.id).to.not.eql(null);",
													"                    pm.expect(item.username).to.eql(pm.environment.get(\"username\"));",
													"                    pm.expect(item.first_name).to.not.eql(null);",
													"                    pm.expect(item.last_name).to.not.eql(null);",
													"                    pm.expect(item.avatar).to.not.eql(null);",
													"                    item.assigned_projects.forEach((projectId) => {",
													"                        if (projectId === pm.environment.get(\"projectId\")) {",
													"                            return false;",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    }",
													"",
													"    pm.environment.set(\"userList\", jsonData.items);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/search/user?projectName={{projectName}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"search",
												"user"
											],
											"query": [
												{
													"key": "projectName",
													"value": "{{projectName}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Releases",
							"item": [
								{
									"name": "200 - Precondition - Get Release fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e2fccdce-7965-4d0c-9c50-bf2c7b6391e4",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdRelease\";",
													"    var jsonData = pm.response.json();",
													"    var userList = pm.environment.get(\"userList\");",
													"    pm.environment.set(\"releaseFields\", jsonData);",
													"",
													"    jsonData.forEach((field) => {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"",
													"        if (field.allowed_values) {",
													"            var fieldValueId = \"\";",
													"",
													"            field.allowed_values.forEach((item, index) => {",
													"                fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                pm.environment.set(fieldValueId, item.value);",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/releases/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"releases",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create Release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0dbd914b-6e2d-41fe-9f28-e1cc8416e194",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newReleaseId1\", jsonData.id);",
													"    pm.environment.set(\"releaseInfo1\", jsonData);",
													"    pm.environment.set(\"newReleaseName1\", jsonData.name);",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct release info\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"releaseName\"));",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.description).not.to.eql(null);",
													"        pm.expect(jsonData.note).not.to.eql(null);",
													"    });",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c4ce8123-d04f-461f-8c92-551dd5ef8f80",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"releaseName\", \"Release 1\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate\", today.toISOString());",
													"today.setDate(today.getDate() + 10);",
													"pm.environment.set(\"endDate\", today.toISOString());",
													"",
													"pm.environment.set(\"releaseDescription\", \"Description of the release\");",
													"pm.environment.set(\"releaseNote\", \"Note of the release\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{releaseName}}\",\n    \"properties\": [\n      {\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"{{releaseDescription}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"{{releaseNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create Release 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "acaa77fd-8d87-4f19-8317-b98ce473c1d7",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newReleaseId2\", jsonData.id);",
													"    pm.environment.set(\"releaseInfo2\", jsonData);",
													"    pm.environment.set(\"newReleaseName2\", jsonData.name);",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct release info\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"releaseName\"));",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.description).not.to.eql(null);",
													"        pm.expect(jsonData.note).not.to.eql(null);",
													"    });",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2d5e45e7-88d2-4007-86c9-3c0b1406b383",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"releaseName\", \"Release 2\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate\", today.toISOString());",
													"today.setDate(today.getDate() + 10);",
													"pm.environment.set(\"endDate\", today.toISOString());",
													"",
													"pm.environment.set(\"releaseDescription\", \"Description of the release\");",
													"pm.environment.set(\"releaseNote\", \"Note of the release 2\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{releaseName}}\",\n    \"properties\": [\n      {\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"{{releaseDescription}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"{{releaseNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Builds",
							"item": [
								{
									"name": "200 - Precondition - Get Build fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4774db7f-8bc2-4083-ab2d-69dc0f78794c",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdBuild\";",
													"    var jsonData = pm.response.json();",
													"    var userList = pm.environment.get(\"userList\");",
													"    pm.environment.set(\"buildFields\", jsonData);",
													"",
													"    jsonData.forEach((field) => {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"",
													"        if (field.allowed_values) {",
													"            var fieldValueId = \"\";",
													"",
													"            field.allowed_values.forEach((item, index) => {",
													"                fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                pm.environment.set(fieldValueId, item.value);",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/builds/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"builds",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create a Build",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ad570c4-2eff-456b-a0fd-6896d118769c",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newBuildId1\", jsonData.id);",
													"    pm.environment.set(\"buildInfo1\", jsonData);",
													"    pm.environment.set(\"newBuildName1\", jsonData.name);",
													"    ",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Response data has links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id\", () => {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name: \" + jsonData.name, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"buildName\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has order\", () => {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid\", () => {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date\", () => {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modify_date\", () => {",
													"        pm.expect(jsonData.last_modify_date).to.not.eql(null);",
													"    });",
													"",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has build status is 'In Progress'\", () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdBuildStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Build Date\":",
													"                pm.test(\"Repsonse data has build date\", () => {",
													"                    tmp = pm.environment.get(\"buildDate\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Build Note\":",
													"                pm.test(\"Repsonse data has build note '\" + field.field_value + \"'\", () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"buildNote\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "51e14323-250f-4add-9fca-0d5bde47039f",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"buildName\", \"Build 1\");",
													"",
													"var today = new Date();",
													"today.setDate(today.getDate() + 1);",
													"pm.environment.set(\"buildDate\", today.toISOString());",
													"pm.environment.set(\"buildNote\", \"Note of the build\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{buildName}}\",\n    \"properties\": [\n      {\n            \"field_id\": {{fieldIdBuildStatus}},\n            \"field_value\": \"{{fieldIdBuildStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ],\n    \"release\": {\n      \"id\": \"{{newReleaseId1}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Modules",
							"item": [
								{
									"name": "201 - Precondition - Create a Module",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "db108f62-ef3a-464e-b7b6-a42e4ba908ac",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, () => {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response data has correct properties\", () => {",
													"        pm.expect(jsonData.links).not.to.eql(null);",
													"        pm.expect(jsonData.id).not.to.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"newModuleName1\"));",
													"        pm.expect(jsonData.order).not.to.eql(null);",
													"        pm.expect(jsonData.pid).not.to.eql(null);",
													"        pm.expect(jsonData.created_date).not.to.eql(null);",
													"        pm.expect(jsonData.last_modified_date).not.to.eql(null);",
													"        pm.expect(jsonData.parent_id).not.to.eql(null);",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 1\");",
													"    });",
													"    ",
													"    pm.environment.set(\"newModuleId1\", jsonData.id);",
													"    ",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fbc67251-21b7-4fb2-b833-af8758a9d86a",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"newModuleName1\", \"Module 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{newModuleName1}}\",\r\n  \"description\": \"Description of Module 1\",\r\n  \"shared\": false\r\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Requirements",
							"item": [
								{
									"name": "200 - Precondition - Get requirement fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2cf15406-651b-4509-a827-32ef3efb56c6",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdReq\";",
													"    var jsonData = pm.response.json();",
													"    var userList = pm.environment.get(\"userList\");",
													"    pm.environment.set(\"requirementFields\", jsonData);",
													"",
													"    jsonData.forEach((field) => {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"",
													"        if (field.allowed_values) {",
													"            var fieldValueId = \"\";",
													"",
													"            field.allowed_values.forEach((item, index) => {",
													"",
													"                switch (field.label) {",
													"                    case \"Assigned To\":",
													"                        userList.forEach((user, userIndex) => {",
													"                            // Just save variables of users who have admin permission",
													"                            if (item.label === `${user.first_name} ${user.last_name}`) {",
													"                                if (user.username === pm.environment.get(\"username\")) {",
													"                                    // UserTest: user who directly affects to the test case",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + `UserTest`;",
													"                                    pm.environment.set(\"userTestFullName\", item.label);",
													"                                    pm.environment.set(\"userTestId\", user.id);",
													"                                } else {",
													"                                    // Other users who have admin permission",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                                }",
													"                                pm.environment.set(fieldValueId, item.value);",
													"                            }",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                        break;",
													"                }",
													"",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/requirements/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"requirements",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create requirement 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02cc4447-ed40-43fc-be9d-89a8be34e8f3",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newReqId1\", jsonData.id);",
													"    pm.environment.set(\"reqInfo1\", jsonData);",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains name: \" + jsonData.name, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName1\"));",
													"    });",
													"",
													"    pm.test(\"Response data has order property\", () => {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains parent_id property\", () => {",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to\", () => {",
													"                    pm.expect(field.field_value_name).to.eql(`[${pm.environment.get(\"userTestFullName\")}]`);",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToUserTest\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data has description: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription1\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d949359c-c1d4-46d6-b9c6-0012837919c4",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName1\", \"Requirement 1\");",
													"pm.environment.set(\"reqDescription1\", \"Description of Requirement 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName1}}\",\n  \"properties\": [\n    {\n        \"field_id\": \"{{fieldIdReqStatus}}\",\n        \"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdReqPriority}}\",\n        \"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdReqType}}\",\n        \"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdReqAssignedTo}}\",\n        \"field_value\": \"[{{fieldIdReqAssignedToUserTest}}]\"\n    },\n    {\n        \"field_id\": \"{{fieldIdReqDescription}}\",\n        \"field_value\": \"{{reqDescription1}}\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Subcribe requirement 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed037951-3c62-4578-a6eb-1eb003ad7e8e",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Subcribe requirement success without any errors\", () => {",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        ",
													"        pm.expect(jsonData.result.noSubscribers).to.eql(1);",
													"        ",
													"        pm.expect(jsonData.result.subscribers[0].userName).to.eql(pm.environment.get(\"username\"));",
													"        ",
													"        pm.expect(jsonData.result.subscribers[0].fullName).to.eql(pm.environment.get(\"userTestFullName\"));",
													"        ",
													"        pm.expect(jsonData.result.subscribers[0].id).to.eql(pm.environment.get(\"userTestId\"));",
													"    });",
													"    ",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1b3bd5b1-f636-4a72-955f-a9d7441490bc",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "objectId",
													"value": "{{newReqId1}}",
													"type": "text"
												},
												{
													"key": "userId",
													"value": "{{userTestId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/p/{{projectId}}/portal/notification/subscribe/2",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"p",
												"{{projectId}}",
												"portal",
												"notification",
												"subscribe",
												"2"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create requirement 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e2b5ccf0-f761-4922-9095-4c14a8bc6b18",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newReqId2\", jsonData.id);",
													"    pm.environment.set(\"reqInfo2\", jsonData);",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains name: \" + jsonData.name, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName2\"));",
													"    });",
													"",
													"    pm.test(\"Response data has order property\", () => {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains parent_id property\", () => {",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has property assigned to\", () => {",
													"                    pm.expect(field.field_value_name).to.eql(`[${pm.environment.get(\"userTestFullName\")}]`);",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToUserTest\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data has description: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription2\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d5d0ae53-7df9-4b5b-b89a-0569c245f578",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName2\", \"Requirement 2\");",
													"pm.environment.set(\"reqDescription2\", \"Description of Requirement 2\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName2}}\",\n  \"properties\": [\n    {\n        \"field_id\": \"{{fieldIdReqStatus}}\",\n        \"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdReqPriority}}\",\n        \"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdReqType}}\",\n        \"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdReqAssignedTo}}\",\n        \"field_value\": \"[{{fieldIdReqAssignedToUserTest}}]\"\n    },\n    {\n        \"field_id\": \"{{fieldIdReqDescription}}\",\n        \"field_value\": \"{{reqDescription2}}\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Test Cases",
							"item": [
								{
									"name": "200 - Precondition - Get Test Case fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48a997c9-4e4d-4c53-9abf-c5250819d5c3",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdTestCase\";",
													"    var jsonData = pm.response.json();",
													"    var userList = pm.environment.get(\"userList\");",
													"    pm.environment.set(\"testCaseFields\", jsonData);",
													"",
													"    jsonData.forEach((field) => {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"",
													"        if (field.allowed_values) {",
													"            var fieldValueId = \"\";",
													"",
													"            field.allowed_values.forEach((item, index) => {",
													"",
													"                switch (field.label) {",
													"                    case \"Assigned To\":",
													"                        userList.forEach((user, userIndex) => {",
													"                            // Just save variables of users who have admin permission",
													"                            if (item.label === `${user.first_name} ${user.last_name}`) {",
													"                                if (user.username === pm.environment.get(\"username\")) {",
													"                                    // UserTest: user who directly affects to the test case",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + `UserTest`;",
													"                                    pm.environment.set(\"userTestFullName\", item.label);",
													"                                    pm.environment.set(\"userTestId\", user.id);",
													"                                } else {",
													"                                    // Other users who have admin permission",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                                }",
													"                                pm.environment.set(fieldValueId, item.value);",
													"                            }",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                        break;",
													"                }",
													"",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/test-cases/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"test-cases",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create Test Case 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d8d77b5a-b6c9-44b7-956d-cad233be7f81",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newTestCaseId1\", jsonData.id);",
													"    pm.environment.set(\"testCaseInfo1\", jsonData);",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(`Response data contains name: ${jsonData.name}`, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"testCaseName1\"));",
													"    });",
													"",
													"    pm.test(\"Response data has order property\", () => {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has web_url property\", () => {",
													"        pm.expect(jsonData.web_url).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains parent_id property\", () => {",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData.test_case_version_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has version property\", () => {",
													"        pm.expect(jsonData.version).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(`Response data contains description property: ${jsonData.description}`, () => {",
													"        pm.expect(jsonData.description).to.eql(pm.environment.get(\"testCaseDescription1\"));",
													"    });",
													"    ",
													"    pm.test(`Response data contains precondition property: ${jsonData.precondition}`, () => {",
													"        pm.expect(jsonData.precondition).to.eql(pm.environment.get(\"testCasePrecondition1\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData.creator_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has agent_ids property\", () => {",
													"        pm.expect(jsonData.agent_ids).to.not.eql(null);",
													"    });",
													"",
													"    jsonData.test_steps.forEach((step, index) => {",
													"        pm.test(`Response data has test_steps[${index}] has links property`, () => {",
													"            pm.expect(step.links).to.not.eql(null);",
													"        });",
													"        ",
													"        pm.test(`Response data has test_steps[${index}] has id property`, () => {",
													"            pm.expect(step.id).to.not.eql(null);",
													"        });",
													"        ",
													"        pm.test(`Response data has test_steps[${index}] contains description property: ${step.description}`, () => {",
													"            pm.expect(step.description).to.eql(pm.environment.get(\"testStepDescription1\"));",
													"        });",
													"        ",
													"        pm.test(`Response data has test_steps[${index}] contains expected property: ${step.expected}`, () => {",
													"            pm.expect(step.expected).to.eql(pm.environment.get(\"testStepExpected1\"));",
													"        });",
													"        ",
													"        pm.test(`Response data has test_steps[${index}] has order property`, () => {",
													"            pm.expect(step.order).to.not.eql(null);",
													"        });",
													"        ",
													"        pm.test(`Response data has test_steps[${index}] has ${step.attachments.length} attachment property`, () => {",
													"            pm.expect(step.attachments).to.not.eql(null);",
													"            pm.expect(step.attachments.length).to.eql(1);",
													"            pm.expect(step.attachments.links).not.to.eql(null);",
													"        });",
													"    });",
													"",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Automation\":",
													"                pm.test(`Response data has automation: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"No\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseAutomationNo\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Automation Content\":",
													"                pm.test(\"Response data has empty automation content\", () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"",
													"            case \"Status\":",
													"                pm.test(`Repsonse data has status: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Type\":",
													"                pm.test(`Repsonse data has type: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Performance\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseTypePerformance\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(`Repsonse data has priority: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"High\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCasePriorityHigh\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(`[${pm.environment.get(\"userTestFullName\")}]`);",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdTestCaseAssignedToUserTest\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(`Repsonse data has description: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCaseDescription1\"));",
													"                });",
													"                break;",
													"",
													"            case \"Precondition\":",
													"                pm.test(`Repsonse data has precondition: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCasePrecondition1\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "496c9d88-36b5-4437-9206-dbc0636b1e7f",
												"exec": [
													"pm.environment.set(\"testCaseName1\", \"Test Case 1\");",
													"pm.environment.set(\"testCaseDescription1\", \"Description of Test Case 1\");",
													"pm.environment.set(\"testCasePrecondition1\", \"Precondition of Test Case 1\");",
													"",
													"pm.environment.set(\"testStepDescription1\", \"Description of test step 1\");",
													"pm.environment.set(\"testStepExpected1\", \"Expected of test step 1\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{testCaseName1}}\",\n    \"properties\": [\n        {\n            \"field_id\": \"{{fieldIdTestCaseAutomation}}\",\n            \"field_value\": \"{{fieldIdTestCaseAutomationNo}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseStatus}}\",\n            \"field_value\": \"{{fieldIdTestCaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseType}}\",\n            \"field_value\": \"{{fieldIdTestCaseTypePerformance}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseAssignedTo}}\",\n            \"field_value\": \"[{{fieldIdTestCaseAssignedToUserTest}}]\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseDescription}}\",\n            \"field_value\": \"{{testCaseDescription1}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCasePrecondition}}\",\n            \"field_value\": \"{{testCasePrecondition1}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCasePriority}}\",\n            \"field_value\": \"{{fieldIdTestCasePriorityHigh}}\"\n        }\n    ],\n    \"test_steps\": [\n        {\n            \"description\": \"{{testStepDescription1}}\",\n            \"expected\": \"{{testStepExpected1}}\",\n            \"attachments\": [\n              {\n          \"name\": \"sample_file_name.txt\",\n          \"content_type\": \"text/plain\",\n          \"data\": \"dGhpcyBpcyBzYW1wbGUgdGVzdA==\"\n              }\n            ]\n        }\n    ],\n    \"parent_id\": \"{{newModuleId1}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cases"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Subcribe test case 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "edb7326a-ff2f-4d72-bf44-40953e56caa7",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Subcribe requirement success without any errors\", () => {",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        ",
													"        pm.expect(jsonData.result.noSubscribers).to.eql(1);",
													"        ",
													"        pm.expect(jsonData.result.subscribers[0].userName).to.eql(pm.environment.get(\"username\"));",
													"        ",
													"        pm.expect(jsonData.result.subscribers[0].fullName).to.eql(pm.environment.get(\"userTestFullName\"));",
													"        ",
													"        pm.expect(jsonData.result.subscribers[0].id).to.eql(pm.environment.get(\"userTestId\"));",
													"    });",
													"    ",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8279a433-c214-4f4f-b4cc-7af750e03ae7",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "objectId",
													"value": "{{newTestCaseId1}}",
													"type": "text"
												},
												{
													"key": "userId",
													"value": "{{userTestId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/p/{{projectId}}/portal/notification/subscribe/1",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"p",
												"{{projectId}}",
												"portal",
												"notification",
												"subscribe",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Approve Test Case 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "014f26f6-e27e-4894-869b-cd4e2edeb127",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    var testCaseInfo = pm.environment.get(\"testCaseInfo1\");",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData.id).to.eql(testCaseInfo.id);",
													"    });",
													"",
													"    pm.test(\"Response data contains name: \" + jsonData.name, () => {",
													"        pm.expect(jsonData.name).to.eql(testCaseInfo.name);",
													"    });",
													"",
													"    pm.test(\"Response data has order property\", () => {",
													"        pm.expect(jsonData.order).to.eql(testCaseInfo.order);",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData.pid).to.eql(testCaseInfo.pid);",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData.created_date).to.eql(testCaseInfo.created_date);",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has web_url property\", () => {",
													"        pm.expect(jsonData.web_url).to.eql(testCaseInfo.web_url);",
													"    });",
													"",
													"    pm.test(\"Response data contains parent_id property\", () => {",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"    });",
													"    ",
													"    pm.test(\"Response data has version property\", () => {",
													"        var subStrings = testCaseInfo.version.split('.');",
													"        var newVersion = (parseInt(subStrings[0]) + 1).toString() + '.0';",
													"        pm.expect(jsonData.version).to.eql(newVersion);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains description property: \" + jsonData.description, () => {",
													"        pm.expect(jsonData.description).to.eql(testCaseInfo.description);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains precondition property: \" + jsonData.precondition, () => {",
													"        pm.expect(jsonData.precondition).to.eql(testCaseInfo.precondition);",
													"    });",
													"    ",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData.creator_id).to.eql(testCaseInfo.creator_id);",
													"    });",
													"    ",
													"    pm.test(\"Response data has agent_ids property\", () => {",
													"        pm.expect(jsonData.agent_ids).to.not.eql(null);",
													"    });",
													"    ",
													"    jsonData.test_steps.forEach(function(step, index) {",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has links property\", () => {",
													"            pm.expect(step.links).to.not.eql(null);",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has id property\", () => {",
													"            pm.expect(step.id).to.eql(testCaseInfo.test_steps[index].id);",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] contains description property: \" + step.description, () => {",
													"            pm.expect(step.description).to.eql(pm.environment.get(\"testStepDescription1\"));",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] contains expected property: \" + step.expected, () => {",
													"            pm.expect(step.expected).to.eql(pm.environment.get(\"testStepExpected1\"));",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has order property\", () => {",
													"            pm.expect(step.order).to.eql(testCaseInfo.test_steps[index].order);",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has attachment property\", () => {",
													"            pm.expect(step.attachment).to.not.eql(null);",
													"        });",
													"    });",
													"",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Automation\":",
													"                pm.test(\"Response data has automation: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"No\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseAutomationNo\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Automation Content\":",
													"                pm.test(\"Response data has empty automation content\", () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Performance\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseTypePerformance\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"High\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCasePriorityHigh\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(`[${pm.environment.get(\"userTestFullName\")}]`);",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdTestCaseAssignedToUserTest\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(testCaseInfo.description);",
													"                });",
													"                break;",
													"",
													"            case \"Precondition\":",
													"                pm.test(\"Repsonse data contains precondition: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(testCaseInfo.precondition);",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    ",
													"    pm.environment.set(\"testCaseInfo1\", jsonData);",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ec45144b-c8b9-4a64-9ecf-3ab176e11141",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cases/{{newTestCaseId1}}/approve",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cases",
												"{{newTestCaseId1}}",
												"approve"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create Test Case automation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87a6ce0b-e08c-4984-8571-c0fc4773ca6b",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.environment.set(\"newTestCaseId2\", jsonData.id);",
													"    pm.environment.set(\"testCaseInfo2\", jsonData);",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains name: \" + jsonData.name, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"testCaseName2\"));",
													"    });",
													"",
													"    pm.test(\"Response data has order property\", () => {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has web_url property\", () => {",
													"        pm.expect(jsonData.web_url).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains parent_id property\", () => {",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData.test_case_version_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has version property\", () => {",
													"        pm.expect(jsonData.version).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains description property: \" + jsonData.description, () => {",
													"        pm.expect(jsonData.description).to.eql(pm.environment.get(\"testCaseDescription2\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data contains precondition property: \" + jsonData.precondition, () => {",
													"        pm.expect(jsonData.precondition).to.eql(pm.environment.get(\"testCasePrecondition2\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData.creator_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has agent_ids property\", () => {",
													"        pm.expect(jsonData.agent_ids).to.not.eql(null);",
													"    });",
													"",
													"    jsonData.test_steps.forEach((step, index) => {",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has links property\", () => {",
													"            pm.expect(step.links).to.not.eql(null);",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has id property\", () => {",
													"            pm.expect(step.id).to.not.eql(null);",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] contains description property: \" + step.description, () => {",
													"            pm.expect(step.description).to.eql(pm.environment.get(\"testStepDescription1\"));",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] contains expected property: \" + step.description, () => {",
													"            pm.expect(step.expected).to.eql(pm.environment.get(\"testStepExpected1\"));",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has order property\", () => {",
													"            pm.expect(step.order).to.not.eql(null);",
													"        });",
													"        ",
													"        pm.test(`Response data has test_steps[${index}] has ${step.attachments.length} attachment property`, () => {",
													"            pm.expect(step.attachments).to.not.eql(null);",
													"            pm.expect(step.attachments.length).to.eql(1);",
													"            pm.expect(step.attachments.links).not.to.eql(null);",
													"        });",
													"    });",
													"",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Automation\":",
													"                pm.test(\"Response data has automation: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Yes\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseAutomationYes\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Automation Content\":",
													"                pm.test(\"Response data has empty automation content\", () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCaseAutomationContent\"));",
													"                });",
													"                break;",
													"",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Performance\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseTypePerformance\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"High\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCasePriorityHigh\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(`[${pm.environment.get(\"userTestFullName\")}]`);",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdTestCaseAssignedToUserTest\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCaseDescription2\"));",
													"                });",
													"                break;",
													"",
													"            case \"Precondition\":",
													"                pm.test(\"Repsonse data contains precondition: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCasePrecondition2\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bb2dd6d3-0a28-4046-9298-33fe9f2972ba",
												"exec": [
													"pm.environment.set(\"testCaseName2\", \"Test Case Automation 2\");",
													"pm.environment.set(\"testCaseDescription2\", \"Description of Test Case Automation 2\");",
													"pm.environment.set(\"testCasePrecondition2\", \"Precondition of Test Case Automation 2\");",
													"",
													"pm.environment.set(\"testCaseAutomationContent\", \"Automation Content of Test Case Automation 2\");",
													"",
													"pm.environment.set(\"testStepDescription1\", \"Description of test step 1\");",
													"pm.environment.set(\"testStepExpected1\", \"Expected of test step 1\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{testCaseName2}}\",\n  \"properties\": [\n    {\n        \"field_id\": \"{{fieldIdTestCaseAutomation}}\",\n        \"field_value\": \"{{fieldIdTestCaseAutomationYes}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestCaseAutomationContent}}\",\n        \"field_value\": \"{{testCaseAutomationContent}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestCaseStatus}}\",\n        \"field_value\": \"{{fieldIdTestCaseStatusInProgress}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestCaseType}}\",\n        \"field_value\": \"{{fieldIdTestCaseTypePerformance}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestCaseAssignedTo}}\",\n        \"field_value\": \"[{{fieldIdTestCaseAssignedToUserTest}}]\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestCaseDescription}}\",\n        \"field_value\": \"{{testCaseDescription2}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestCasePrecondition}}\",\n        \"field_value\": \"{{testCasePrecondition2}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestCasePriority}}\",\n        \"field_value\": \"{{fieldIdTestCasePriorityHigh}}\"\n    }\n  ],\n  \"test_steps\": [\n    {\n      \"description\": \"{{testStepDescription1}}\",\n      \"expected\": \"{{testStepExpected1}}\",\n      \"attachments\": [\n              {\n          \"name\": \"sample_file_name.txt\",\n          \"content_type\": \"text/plain\",\n          \"data\": \"dGhpcyBpcyBzYW1wbGUgdGVzdA==\"\n              }\n            ]\n    }\n  ],\n  \"parent_id\": \"{{newModuleId1}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cases"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Approve Test Case 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "05db0b3d-cc15-438e-8e8d-c32e378d81b1",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    var testCaseInfo = pm.environment.get(\"testCaseInfo2\");",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData.id).to.eql(testCaseInfo.id);",
													"    });",
													"",
													"    pm.test(\"Response data contains name: \" + jsonData.name, () => {",
													"        pm.expect(jsonData.name).to.eql(testCaseInfo.name);",
													"    });",
													"",
													"    pm.test(\"Response data has order property\", () => {",
													"        pm.expect(jsonData.order).to.eql(testCaseInfo.order);",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData.pid).to.eql(testCaseInfo.pid);",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData.created_date).to.eql(testCaseInfo.created_date);",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has web_url property\", () => {",
													"        pm.expect(jsonData.web_url).to.eql(testCaseInfo.web_url);",
													"    });",
													"",
													"    pm.test(\"Response data contains parent_id property\", () => {",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"    });",
													"    ",
													"    pm.test(\"Response data has version property\", () => {",
													"        var subStrings = testCaseInfo.version.split('.');",
													"        var newVersion = (parseInt(subStrings[0]) + 1).toString() + '.0';",
													"        pm.expect(jsonData.version).to.eql(newVersion);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains description property: \" + jsonData.description, () => {",
													"        pm.expect(jsonData.description).to.eql(testCaseInfo.description);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains precondition property: \" + jsonData.precondition, () => {",
													"        pm.expect(jsonData.precondition).to.eql(testCaseInfo.precondition);",
													"    });",
													"    ",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData.creator_id).to.eql(testCaseInfo.creator_id);",
													"    });",
													"    ",
													"    pm.test(\"Response data has agent_ids property\", () => {",
													"        pm.expect(jsonData.agent_ids).to.not.eql(null);",
													"    });",
													"    ",
													"    jsonData.test_steps.forEach((step, index) => {",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has links property\", () => {",
													"            pm.expect(step.links).to.not.eql(null);",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has id property\", () => {",
													"            pm.expect(step.id).to.eql(testCaseInfo.test_steps[index].id);",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] contains description property: \" + step.description, () => {",
													"            pm.expect(step.description).to.eql(pm.environment.get(\"testStepDescription1\"));",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] contains expected property: \" + step.expected, () => {",
													"            pm.expect(step.expected).to.eql(pm.environment.get(\"testStepExpected1\"));",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has order property\", () => {",
													"            pm.expect(step.order).to.eql(testCaseInfo.test_steps[index].order);",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has attachment property\", () => {",
													"            pm.expect(step.attachment).to.not.eql(null);",
													"        });",
													"    });",
													"",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Automation\":",
													"                pm.test(\"Response data has automation: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Yes\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseAutomationYes\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Automation Content\":",
													"                pm.test(\"Response data has empty automation content\", () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCaseAutomationContent\"));",
													"                });",
													"                break;",
													"",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Performance\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseTypePerformance\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"High\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCasePriorityHigh\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(`[${pm.environment.get(\"userTestFullName\")}]`);",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdTestCaseAssignedToUserTest\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(testCaseInfo.description);",
													"                });",
													"                break;",
													"",
													"            case \"Precondition\":",
													"                pm.test(\"Repsonse data contains precondition: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(testCaseInfo.precondition);",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    ",
													"    pm.environment.set(\"testCaseInfo2\", jsonData);",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f838f4a1-303a-4bbd-b5fb-89b832076149",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cases/{{newTestCaseId2}}/approve",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cases",
												"{{newTestCaseId2}}",
												"approve"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create Test Case has test step that calls another test case",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "956854b5-1b0e-4e73-8289-a5d135a16e46",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newTestCaseId3\", jsonData.id);",
													"    pm.environment.set(\"testCaseInfo3\", jsonData);",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(`Response data contains name: ${jsonData.name}`, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"testCaseName3\"));",
													"    });",
													"",
													"    pm.test(\"Response data has order property\", () => {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has web_url property\", () => {",
													"        pm.expect(jsonData.web_url).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains parent_id property\", () => {",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData.test_case_version_id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has version property\", () => {",
													"        pm.expect(jsonData.version).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(`Response data contains description property: ${jsonData.description}`, () => {",
													"        pm.expect(jsonData.description).to.eql(pm.environment.get(\"testCaseDescription3\"));",
													"    });",
													"",
													"    pm.test(`Response data contains precondition property: ${jsonData.precondition}`, () => {",
													"        pm.expect(jsonData.precondition).to.eql(pm.environment.get(\"testCasePrecondition3\"));",
													"    });",
													"",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData.creator_id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has agent_ids property\", () => {",
													"        pm.expect(jsonData.agent_ids).to.not.eql(null);",
													"    });",
													"",
													"    jsonData.test_steps.forEach((step, index) => {",
													"        pm.test(`Response data has test_steps[${index}] has links property`, () => {",
													"            pm.expect(step.links).to.not.eql(null);",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] has id property`, () => {",
													"            pm.expect(step.id).to.not.eql(null);",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] has order property`, () => {",
													"            pm.expect(step.order).to.not.eql(null);",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] has ${step.attachments.length} attachment property`, () => {",
													"            pm.expect(step.attachments).to.not.eql(null);",
													"            pm.expect(step.attachments.length).to.eql(1);",
													"            pm.expect(step.attachments.links).not.to.eql(null);",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] has called_test_case property`, () => {",
													"            var testCaseInfo = pm.environment.get(\"testCaseInfo1\");",
													"",
													"            pm.expect(step.called_test_case.links).to.not.eql(null);",
													"            pm.expect(step.called_test_case.id).to.eql(pm.environment.get(\"newTestCaseId1\"));",
													"            pm.expect(step.called_test_case.name).to.eql(testCaseInfo.name);",
													"            pm.expect(step.called_test_case.order).to.eql(testCaseInfo.order);",
													"            pm.expect(step.called_test_case.pid).to.eql(testCaseInfo.pid);",
													"            pm.expect(step.called_test_case.created_date).to.eql(testCaseInfo.created_date);",
													"            pm.expect(step.called_test_case.last_modified_date).to.not.eql(null);",
													"            pm.expect(step.called_test_case.parent_id).to.eql(testCaseInfo.parent_id);",
													"            pm.expect(step.called_test_case.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"            pm.expect(step.called_test_case.description).to.eql(testCaseInfo.description);",
													"            pm.expect(step.called_test_case.precondition).to.eql(testCaseInfo.precondition);",
													"            pm.expect(step.called_test_case.creator_id).to.eql(testCaseInfo.creator_id);",
													"            pm.expect(step.called_test_case.agent_ids).to.eql(testCaseInfo.agent_ids);",
													"",
													"            step.called_test_case.properties.forEach((field) => {",
													"                switch (field.field_name) {",
													"                    case \"Automation\":",
													"                        pm.test(`Response data has automation: ${field.field_value_name}`, () => {",
													"                            pm.expect(field.field_value_name).to.eql(\"No\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseAutomationNo\").toString());",
													"                        });",
													"                        break;",
													"",
													"                    case \"Automation Content\":",
													"                        pm.test(\"Response data has empty automation content\", () => {",
													"                            pm.expect(field.field_value).to.eql(\"\");",
													"                        });",
													"                        break;",
													"",
													"                    case \"Status\":",
													"                        pm.test(`Repsonse data has status: ${field.field_value_name}`, () => {",
													"                            pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseStatusInProgress\").toString());",
													"                        });",
													"                        break;",
													"",
													"                    case \"Type\":",
													"                        pm.test(`Repsonse data has type: ${field.field_value_name}`, () => {",
													"                            pm.expect(field.field_value_name).to.eql(\"Performance\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseTypePerformance\").toString());",
													"                        });",
													"                        break;",
													"",
													"                    case \"Priority\":",
													"                        pm.test(`Repsonse data has priority: ${field.field_value_name}`, () => {",
													"                            pm.expect(field.field_value_name).to.eql(\"High\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCasePriorityHigh\").toString());",
													"                        });",
													"                        break;",
													"",
													"                    case \"Assigned To\":",
													"                        pm.test(`Repsonse data has property assigned to`, () => {",
													"                            pm.expect(field.field_value_name).to.eql(`[${pm.environment.get(\"userTestFullName\")}]`);",
													"                            pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdTestCaseAssignedToUserTest\").toString());",
													"                        });",
													"                        break;",
													"",
													"                    case \"Description\":",
													"                        pm.test(`Repsonse data has description: ${field.field_value}`, () => {",
													"                            pm.expect(field.field_value).to.eql(testCaseInfo.description);",
													"                        });",
													"                        break;",
													"",
													"                    case \"Precondition\":",
													"                        pm.test(`Repsonse data has precondition: ${field.field_value}`, () => {",
													"                            pm.expect(field.field_value).to.eql(testCaseInfo.precondition);",
													"                        });",
													"                        break;",
													"                }",
													"            });",
													"        });",
													"    });",
													"",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Automation\":",
													"                pm.test(`Response data has automation: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"No\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseAutomationNo\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Automation Content\":",
													"                pm.test(\"Response data has empty automation content\", () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"",
													"            case \"Status\":",
													"                pm.test(`Repsonse data has status: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Type\":",
													"                pm.test(`Repsonse data has type: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Performance\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseTypePerformance\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(`Repsonse data has priority: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"High\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCasePriorityHigh\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(`[${pm.environment.get(\"userTestFullName\")}]`);",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdTestCaseAssignedToUserTest\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(`Repsonse data has description: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCaseDescription3\"));",
													"                });",
													"                break;",
													"",
													"            case \"Precondition\":",
													"                pm.test(`Repsonse data has precondition: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCasePrecondition3\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "46186409-0a5d-4b0b-9375-571969c60f0f",
												"exec": [
													"pm.environment.set(\"testCaseName3\", \"Test Case 3\");",
													"pm.environment.set(\"testCaseDescription3\", \"Description of Test Case 3\");",
													"pm.environment.set(\"testCasePrecondition3\", \"Precondition of Test Case 3\");",
													"",
													"pm.environment.set(\"testStepDescription1\", \"Description of test step 1\");",
													"pm.environment.set(\"testStepExpected1\", \"Expected of test step 1\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{testCaseName3}}\",\n    \"properties\": [\n        {\n            \"field_id\": \"{{fieldIdTestCaseAutomation}}\",\n            \"field_value\": \"{{fieldIdTestCaseAutomationNo}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseStatus}}\",\n            \"field_value\": \"{{fieldIdTestCaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseType}}\",\n            \"field_value\": \"{{fieldIdTestCaseTypePerformance}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseAssignedTo}}\",\n            \"field_value\": \"[{{fieldIdTestCaseAssignedToUserTest}}]\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseDescription}}\",\n            \"field_value\": \"{{testCaseDescription3}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCasePrecondition}}\",\n            \"field_value\": \"{{testCasePrecondition3}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCasePriority}}\",\n            \"field_value\": \"{{fieldIdTestCasePriorityHigh}}\"\n        }\n    ],\n    \"test_steps\": [\n        {\n            \"description\": \"{{testStepDescription1}}\",\n            \"expected\": \"{{testStepExpected1}}\",\n            \"called_test_case_id\": \"{{newTestCaseId1}}\",\n            \"attachments\": [\n                {\n                    \"name\": \"sample_file_name.txt\",\n                    \"content_type\": \"text/plain\",\n                    \"data\": \"dGhpcyBpcyBzYW1wbGUgdGVzdA==\"\n                }\n            ]\n        }\n    ],\n    \"parent_id\": \"{{newModuleId1}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cases"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Approve Test Case 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e99a4f4-c409-4a68-bae3-ede2df49a7e9",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    var testCaseInfo = pm.environment.get(\"testCaseInfo3\");",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData.id).to.eql(testCaseInfo.id);",
													"    });",
													"",
													"    pm.test(\"Response data contains name: \" + jsonData.name, () => {",
													"        pm.expect(jsonData.name).to.eql(testCaseInfo.name);",
													"    });",
													"",
													"    pm.test(\"Response data has order property\", () => {",
													"        pm.expect(jsonData.order).to.eql(testCaseInfo.order);",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData.pid).to.eql(testCaseInfo.pid);",
													"    });",
													"",
													"    pm.test(\"Response data has web_url property\", () => {",
													"        pm.expect(jsonData.web_url).to.eql(testCaseInfo.web_url);",
													"    });",
													"",
													"    pm.test(\"Response data contains parent_id property\", () => {",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"    });",
													"",
													"    pm.test(\"Response data has version property\", () => {",
													"        var subStrings = testCaseInfo.version.split('.');",
													"        var newVersion = (parseInt(subStrings[0]) + 1).toString() + '.0';",
													"        pm.expect(jsonData.version).to.eql(newVersion);",
													"    });",
													"",
													"    pm.test(\"Response data contains description property: \" + jsonData.description, () => {",
													"        pm.expect(jsonData.description).to.eql(testCaseInfo.description);",
													"    });",
													"",
													"    pm.test(\"Response data contains precondition property: \" + jsonData.precondition, () => {",
													"        pm.expect(jsonData.precondition).to.eql(testCaseInfo.precondition);",
													"    });",
													"",
													"    pm.test(\"Response data has agent_ids property\", () => {",
													"        pm.expect(jsonData.agent_ids).to.not.eql(null);",
													"    });",
													"",
													"    jsonData.test_steps.forEach((step, index) => {",
													"        pm.test(`Response data has test_steps[${index}] has links property`, () => {",
													"            pm.expect(step.links).to.not.eql(null);",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] has id property`, () => {",
													"            pm.expect(step.id).to.not.eql(null);",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] has order property`, () => {",
													"            pm.expect(step.order).to.not.eql(null);",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] has ${step.attachments.length} attachment property`, () => {",
													"            pm.expect(step.attachments).to.not.eql(null);",
													"            pm.expect(step.attachments.length).to.eql(1);",
													"            pm.expect(step.attachments.links).not.to.eql(null);",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] has called_test_case property`, () => {",
													"            let calledTestCase = pm.environment.get(\"testCaseInfo1\");",
													"",
													"            pm.expect(step.called_test_case.links).to.not.eql(null);",
													"            pm.expect(step.called_test_case.id).to.eql(pm.environment.get(\"newTestCaseId1\"));",
													"            pm.expect(step.called_test_case.name).to.eql(calledTestCase.name);",
													"            pm.expect(step.called_test_case.order).to.eql(calledTestCase.order);",
													"            pm.expect(step.called_test_case.pid).to.eql(calledTestCase.pid);",
													"            pm.expect(step.called_test_case.created_date).to.eql(calledTestCase.created_date);",
													"            pm.expect(step.called_test_case.last_modified_date).to.not.eql(null);",
													"            pm.expect(step.called_test_case.parent_id).to.eql(calledTestCase.parent_id);",
													"            pm.expect(step.called_test_case.test_case_version_id).to.eql(calledTestCase.test_case_version_id);",
													"            pm.expect(step.called_test_case.description).to.eql(calledTestCase.description);",
													"            pm.expect(step.called_test_case.precondition).to.eql(calledTestCase.precondition);",
													"            pm.expect(step.called_test_case.creator_id).to.eql(calledTestCase.creator_id);",
													"            pm.expect(step.called_test_case.agent_ids).to.eql(calledTestCase.agent_ids);",
													"",
													"            step.called_test_case.properties.forEach((field) => {",
													"                switch (field.field_name) {",
													"                    case \"Automation\":",
													"                        pm.test(`Response data has automation: ${field.field_value_name}`, () => {",
													"                            pm.expect(field.field_value_name).to.eql(\"No\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseAutomationNo\").toString());",
													"                        });",
													"                        break;",
													"",
													"                    case \"Automation Content\":",
													"                        pm.test(\"Response data has empty automation content\", () => {",
													"                            pm.expect(field.field_value).to.eql(\"\");",
													"                        });",
													"                        break;",
													"",
													"                    case \"Status\":",
													"                        pm.test(`Repsonse data has status: ${field.field_value_name}`, () => {",
													"                            pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseStatusInProgress\").toString());",
													"                        });",
													"                        break;",
													"",
													"                    case \"Type\":",
													"                        pm.test(`Repsonse data has type: ${field.field_value_name}`, () => {",
													"                            pm.expect(field.field_value_name).to.eql(\"Performance\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseTypePerformance\").toString());",
													"                        });",
													"                        break;",
													"",
													"                    case \"Priority\":",
													"                        pm.test(`Repsonse data has priority: ${field.field_value_name}`, () => {",
													"                            pm.expect(field.field_value_name).to.eql(\"High\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCasePriorityHigh\").toString());",
													"                        });",
													"                        break;",
													"",
													"                    case \"Assigned To\":",
													"                        pm.test(`Repsonse data has property assigned to`, () => {",
													"                            pm.expect(field.field_value_name).to.eql(`[${pm.environment.get(\"userTestFullName\")}]`);",
													"                            pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdTestCaseAssignedToUserTest\").toString());",
													"                        });",
													"                        break;",
													"",
													"                    case \"Description\":",
													"                        pm.test(`Repsonse data has description: ${field.field_value}`, () => {",
													"                            pm.expect(field.field_value).to.eql(calledTestCase.description);",
													"                        });",
													"                        break;",
													"",
													"                    case \"Precondition\":",
													"                        pm.test(`Repsonse data has precondition: ${field.field_value}`, () => {",
													"                            pm.expect(field.field_value).to.eql(calledTestCase.precondition);",
													"                        });",
													"                        break;",
													"                }",
													"            });",
													"        });",
													"    });",
													"",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Automation\":",
													"                pm.test(\"Response data has automation: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"No\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseAutomationNo\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Automation Content\":",
													"                pm.test(\"Response data has empty automation content\", () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Performance\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseTypePerformance\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"High\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCasePriorityHigh\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(`[${pm.environment.get(\"userTestFullName\")}]`);",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdTestCaseAssignedToUserTest\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(testCaseInfo.description);",
													"                });",
													"                break;",
													"",
													"            case \"Precondition\":",
													"                pm.test(\"Repsonse data contains precondition: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(testCaseInfo.precondition);",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"    pm.environment.set(\"testCaseInfo3\", jsonData);",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2a2f7c1d-2f61-4ccb-840e-d9ccbb5372c4",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cases/{{newTestCaseId3}}/approve",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cases",
												"{{newTestCaseId3}}",
												"approve"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create Test Case 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76dbc3fe-ca0c-4201-a280-3743046c69aa",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.environment.set(\"newTestCaseId4\", jsonData.id);",
													"    pm.environment.set(\"testCaseInfo4\", jsonData);",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(`Response data contains name: ${jsonData.name}`, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"testCaseName4\"));",
													"    });",
													"",
													"    pm.test(\"Response data has order property\", () => {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has web_url property\", () => {",
													"        pm.expect(jsonData.web_url).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains parent_id property\", () => {",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData.test_case_version_id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has version property\", () => {",
													"        pm.expect(jsonData.version).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(`Response data contains description property: ${jsonData.description}`, () => {",
													"        pm.expect(jsonData.description).to.eql(pm.environment.get(\"testCaseDescription4\"));",
													"    });",
													"",
													"    pm.test(`Response data contains precondition property: ${jsonData.precondition}`, () => {",
													"        pm.expect(jsonData.precondition).to.eql(pm.environment.get(\"testCasePrecondition4\"));",
													"    });",
													"",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData.creator_id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has agent_ids property\", () => {",
													"        pm.expect(jsonData.agent_ids).to.not.eql(null);",
													"    });",
													"",
													"    jsonData.test_steps.forEach((step, index) => {",
													"        pm.test(`Response data has test_steps[${index}] has links property`, () => {",
													"            pm.expect(step.links).to.not.eql(null);",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] has id property`, () => {",
													"            pm.expect(step.id).to.not.eql(null);",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] contains description property: ${step.description}`, () => {",
													"            pm.expect(step.description).to.eql(pm.environment.get(\"testStepDescription1\"));",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] contains expected property: ${step.expected}`, () => {",
													"            pm.expect(step.expected).to.eql(pm.environment.get(\"testStepExpected1\"));",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] has order property`, () => {",
													"            pm.expect(step.order).to.not.eql(null);",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] has ${step.attachments.length} attachment property`, () => {",
													"            pm.expect(step.attachments).to.not.eql(null);",
													"            pm.expect(step.attachments.length).to.eql(1);",
													"            pm.expect(step.attachments.links).not.to.eql(null);",
													"        });",
													"    });",
													"",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Automation\":",
													"                pm.test(`Response data has automation: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"No\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseAutomationNo\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Automation Content\":",
													"                pm.test(\"Response data has empty automation content\", () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"",
													"            case \"Status\":",
													"                pm.test(`Repsonse data has status: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Type\":",
													"                pm.test(`Repsonse data has type: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Performance\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseTypePerformance\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(`Repsonse data has priority: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"High\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCasePriorityHigh\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(`[${pm.environment.get(\"userTestFullName\")}]`);",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdTestCaseAssignedToUserTest\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(`Repsonse data has description: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCaseDescription4\"));",
													"                });",
													"                break;",
													"",
													"            case \"Precondition\":",
													"                pm.test(`Repsonse data has precondition: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCasePrecondition4\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e16c73a1-2fa5-4627-9f30-5ff7359bf3d9",
												"exec": [
													"pm.environment.set(\"testCaseName4\", \"Test Case 4\");",
													"pm.environment.set(\"testCaseDescription4\", \"Description of Test Case 4\");",
													"pm.environment.set(\"testCasePrecondition4\", \"Precondition of Test Case 4\");",
													"",
													"pm.environment.set(\"testStepDescription1\", \"Description of test step 1\");",
													"pm.environment.set(\"testStepExpected1\", \"Expected of test step 1\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{testCaseName4}}\",\n    \"properties\": [\n        {\n            \"field_id\": \"{{fieldIdTestCaseAutomation}}\",\n            \"field_value\": \"{{fieldIdTestCaseAutomationNo}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseStatus}}\",\n            \"field_value\": \"{{fieldIdTestCaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseType}}\",\n            \"field_value\": \"{{fieldIdTestCaseTypePerformance}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseAssignedTo}}\",\n            \"field_value\": \"[{{fieldIdTestCaseAssignedToUserTest}}]\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseDescription}}\",\n            \"field_value\": \"{{testCaseDescription4}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCasePrecondition}}\",\n            \"field_value\": \"{{testCasePrecondition4}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCasePriority}}\",\n            \"field_value\": \"{{fieldIdTestCasePriorityHigh}}\"\n        }\n    ],\n    \"test_steps\": [\n        {\n            \"description\": \"{{testStepDescription1}}\",\n            \"expected\": \"{{testStepExpected1}}\",\n            \"attachments\": [\n              {\n          \"name\": \"sample_file_name.txt\",\n          \"content_type\": \"text/plain\",\n          \"data\": \"dGhpcyBpcyBzYW1wbGUgdGVzdA==\"\n              }\n            ]\n        }\n    ],\n    \"parent_id\": \"{{newModuleId1}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cases"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Preconditoin - Get test steps of test case 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f794ca6c-4845-453a-98fc-0e12845985e7",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has \" + jsonData.length + \" test steps\", () => {",
													"        pm.expect(jsonData.length).to.eql(1);",
													"    });",
													"",
													"    jsonData.forEach((step, index) => {",
													"        pm.test(\"Response data has test step \" + (index + 1).toString() + \" has links property\", () => {",
													"            pm.expect(step.links).to.not.eql(null);",
													"        });",
													"",
													"        pm.test(\"Response data has test step \" + (index + 1).toString() + \" has id property\", () => {",
													"            pm.expect(step.id).to.not.eql(null);",
													"        });",
													"",
													"        pm.test(\"Response data has test step \" + (index + 1).toString() + \" contains description: \" + step.description, () => {",
													"            pm.expect(step.description).to.not.eql(null);",
													"        });",
													"",
													"        pm.test(\"Response data has test step \" + (index + 1).toString() + \" contains expected: \" + step.expected, () => {",
													"            pm.expect(step.expected).to.not.eql(null);",
													"        });",
													"",
													"        pm.test(\"Response data has test step \" + (index + 1).toString() + \" has order property\", () => {",
													"            pm.expect(step.order).to.not.eql(null);",
													"        });",
													"",
													"        pm.test(\"Response data has test step \" + (index + 1).toString() + \" has attachment property\", () => {",
													"            pm.expect(step.attachment).to.not.eql(null);",
													"",
													"            if (step.attachment) {",
													"                pm.test(\"Response data has test step \" + (index + 1).toString() + \" has \" + step.attachment.length + \" attachment\", () => {",
													"                    pm.expect(step.attachment.length).to.eql(0);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"    pm.environment.set(\"testStepInfo1c1\", jsonData[0]);",
													"    pm.environment.set(\"newTestStepId1c1\", jsonData[0].id);",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5a6a3ab6-aa52-4ead-a9cc-5b2f57449dd5",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cases/{{newTestCaseId1}}/test-steps",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cases",
												"{{newTestCaseId1}}",
												"test-steps"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Test Cycle",
							"item": [
								{
									"name": "200 - Precondition - Create test cycle 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ead6571c-7a2c-4406-8164-1b6c7abb337b",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newCycleId1\", jsonData.id);",
													"    pm.environment.set(\"cycleInfo1\", jsonData);",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Response data has links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id\", () => {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name: \" + jsonData.name, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"newCycleName1\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has order\", () => {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid\", () => {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date\", () => {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modify_date\", () => {",
													"        pm.expect(jsonData.last_modify_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains description: \" + jsonData.description, () => {",
													"        pm.expect(jsonData.description).to.eql(pm.environment.get(\"cycleDescription\"));",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4283c275-f9a2-401f-bfa0-a417d98e3f9a",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"newCycleName1\", \"Cycle 1\");",
													"pm.environment.set(\"cycleDescription\", \"Description of Test Cycle 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{newCycleName1}}\",\n    \"description\": \"{{cycleDescription}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cycles?parentId={{newReleaseId1}}&parentType=release",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cycles"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newReleaseId1}}"
												},
												{
													"key": "parentType",
													"value": "release"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Test Suite",
							"item": [
								{
									"name": "200 - Precondition - Get test suite fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d1fc703-22ee-4ead-8a2a-24e89cc5f4a8",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdTestSuite\";",
													"    var jsonData = pm.response.json();",
													"    var userList = pm.environment.get(\"userList\");",
													"    pm.environment.set(\"testSuiteFields\", jsonData);",
													"",
													"    jsonData.forEach((field) => {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"",
													"        if (field.allowed_values) {",
													"            var fieldValueId = \"\";",
													"",
													"            field.allowed_values.forEach((item, index) => {",
													"",
													"                switch (field.label) {",
													"                    case \"Assigned To\":",
													"                        userList.forEach((user, userIndex) => {",
													"                            // Just save variables of users who have admin permission",
													"                            if (item.label === `${user.first_name} ${user.last_name}`) {",
													"                                if (user.username === pm.environment.get(\"username\")) {",
													"                                    // UserTest: user who directly affects to the test case",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + `UserTest`;",
													"                                    pm.environment.set(\"userTestFullName\", item.label);",
													"                                } else {",
													"                                    // Other users who have admin permission",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                                }",
													"                                pm.environment.set(fieldValueId, item.value);",
													"                            }",
													"                        });",
													"                        break;",
													"                    case \"Target Release/Build\":",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"Target\" + (index + 1).toString();",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                        break;",
													"                    default:",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                        break;",
													"                }",
													"",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/test-suites/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"test-suites",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create test suite 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48ec9ce3-d904-4827-bb27-6456c2c2cb21",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newTestSuiteId1\", jsonData.id);",
													"    pm.environment.set(\"testSuiteInfo1\", jsonData);",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has id\", () => {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains name: \" + jsonData.name, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"newTestSuiteName1\"));",
													"    });",
													"",
													"    pm.test(\"Response data has order\", () => {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has pid\", () => {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has created_date\", () => {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has last_modify_date\", () => {",
													"        pm.expect(jsonData.last_modify_date).to.not.eql(null);",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Planned Start Date\":",
													"                pm.test(\"Repsonse data contains Planned Start Date\", () => {",
													"                    tmp = pm.environment.get(\"startDate\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Planned End Date\":",
													"                pm.test(\"Repsonse data contains Planned End Date\", () => {",
													"                    tmp = pm.environment.get(\"endDate\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Target Release/Build\":",
													"                pm.test(\"Repsonse data has Target Release/Build property\", () => {",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestSuiteTargetReleaseBuildTarget1\").toString()",
													"                    );",
													"                });",
													"                break;",
													"",
													"            case \"Environment\":",
													"                pm.test(\"Repsonse data has Environment property\", () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has Assigned To property\", () => {",
													"                    pm.expect(field.field_value).to.eql(",
													"                        `[${pm.environment.get(\"fieldIdTestSuiteAssignedToUserTest\")}]`",
													"                    );",
													"                    pm.expect(field.field_value_name).to.eql(`[${pm.environment.get(\"userTestFullName\")}]`);",
													"                });",
													"                break;",
													"",
													"            case \"Execution Type\":",
													"                pm.test(`Repsonse data contains Execotion Type: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestSuiteExecutionTypeSmoke\").toString()",
													"                    );",
													"                    pm.expect(field.field_value_name).to.eql(\"Smoke\");",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(`Repsonse data has Description: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"suiteDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7c89cf85-8f19-40ef-9f84-cbd4f945a5f4",
												"exec": [
													"pm.environment.set(\"newTestSuiteName1\", \"Test Suite 1\");",
													"pm.environment.set(\"suiteDescription\", \"Description of Test Suite 2\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate\", today.toISOString());",
													"today.setDate(today.getDate() + 5);",
													"pm.environment.set(\"endDate\", today.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{newTestSuiteName1}}\",\n  \"properties\": [\n    {\n      \"field_id\": {{fieldIdTestSuitePlannedStartDate}},\n      \"field_value\": \"{{startDate}}\"\n      \n    },\n    {\n      \"field_id\": {{fieldIdTestSuitePlannedEndDate}},\n      \"field_value\": \"{{endDate}}\"\n      \n    },\n    {\n      \"field_id\": {{fieldIdTestSuiteAssignedTo}},\n      \"field_value\": \"[{{fieldIdTestSuiteAssignedToUserTest}}]\"\n      \n    },\n    {\n      \"field_id\": {{fieldIdTestSuiteExecutionType}},\n      \"field_value\": \"{{fieldIdTestSuiteExecutionTypeSmoke}}\"\n      \n    },\n    {\n      \"field_id\": {{fieldIdTestSuiteDescription}},\n      \"field_value\": \"{{suiteDescription}}\"\n      \n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-suites?parentId={{newCycleId1}}&parentType=test-cycle",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-suites"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newCycleId1}}"
												},
												{
													"key": "parentType",
													"value": "test-cycle"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Test Runs",
							"item": [
								{
									"name": "200 - Precondition - Get Test Run fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b99917c9-e8fc-4d25-a361-f50d236c6776",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdTestRun\";",
													"    var jsonData = pm.response.json();",
													"    var userList = pm.environment.get(\"userList\");",
													"    pm.environment.set(\"testRunFields\", jsonData);",
													"",
													"    jsonData.forEach((field) => {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"",
													"        if (field.allowed_values) {",
													"            var fieldValueId = \"\";",
													"",
													"            field.allowed_values.forEach((item, index) => {",
													"",
													"                switch (field.label) {",
													"                    case \"Assigned To\":",
													"                        userList.forEach((user, userIndex) => {",
													"                            // Just save variables of users who have admin permission",
													"                            if (item.label === `${user.first_name} ${user.last_name}`) {",
													"                                if (user.username === pm.environment.get(\"username\")) {",
													"                                    // UserTest: user who directly affects to the test case",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + `UserTest`;",
													"                                    pm.environment.set(\"userTestFullName\", item.label);",
													"                                    pm.environment.set(\"userTestId\", user.id);",
													"                                } else {",
													"                                    // Other users who have admin permission",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                                }",
													"                                pm.environment.set(fieldValueId, item.value);",
													"                            }",
													"                        });",
													"                        break;",
													"                    case \"Target Release/Build\":",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"Target\" + (index + 1).toString();",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                        break;",
													"                    default:",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                        break;",
													"                }",
													"",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/test-runs/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"test-runs",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create a test run",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f6fa3bb5-f1f3-4b05-8274-e979107fa431",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"",
													"    let jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newTestRunId1\", jsonData.id);",
													"    pm.environment.set(\"testRunInfo1\", jsonData);",
													"",
													"    pm.test(\"Status code is 201\", () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(`Response data contains name: ${jsonData.name}`, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"testRunName\"));",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData.test_case_version_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData.creator_id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has test_case property\", () => {",
													"        pm.expect(jsonData.test_case).to.not.eql(null);",
													"        pm.expect(jsonData.test_case.links).to.not.eql(null);",
													"        pm.expect(jsonData.test_case.id).to.eql(pm.environment.get(\"newTestCaseId1\"));",
													"    });",
													"",
													"    let tmp;",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Run Order\":",
													"                pm.test(`Repsonse data has run order: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"            ",
													"            case \"Environment\":",
													"                pm.test(`Repsonse data has environment: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"                ",
													"            case \"Status\":",
													"                pm.test(`Repsonse data has status: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Unexecuted\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunStatusUnexecuted\").toString()",
													"                    );",
													"                });",
													"                break;",
													"",
													"            case \"Execution Type\":",
													"                pm.test(`Repsonse data has type: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Smoke\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunExecutionTypeSmoke\").toString()",
													"                    );",
													"                });",
													"                break;",
													"                ",
													"            case \"Planned Start Date\":",
													"                pm.test(\"Repsonse data contains Planned Start Date\", () => {",
													"                    tmp = pm.environment.get(\"startDate1\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Planned End Date\":",
													"                pm.test(\"Repsonse data contains Planned End Date\", () => {",
													"                    tmp = pm.environment.get(\"endDate1\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(`Repsonse data has priority: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Medium\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunPriorityMedium\").toString()",
													"                    );",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(pm.environment.get(\"userTestFullName\"));",
													"                    pm.expect(field.field_value).to.include(",
													"                        pm.environment.get(\"fieldIdTestRunAssignedToUserTest\").toString()",
													"                    );",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8317fde4-6b08-4716-87d9-b700480970d8",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"testRunName\", \"Test Run 1\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate1\", today.toISOString());",
													"today.setDate(today.getDate() + 10);",
													"pm.environment.set(\"endDate1\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{testRunName}}\",\n  \"properties\": [\n    {\n        \"field_id\": \"{{fieldIdTestRunRunOrder}}\",\n        \"field_value\": 1\n    },\n    {\n      \"field_id\": {{fieldIdTestRunPlannedStartDate}},\n      \"field_value\": \"{{startDate1}}\"\n      \n    },\n    {\n      \"field_id\": {{fieldIdTestRunPlannedEndDate}},\n      \"field_value\": \"{{endDate1}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunExecutionType}}\",\n        \"field_value\": \"{{fieldIdTestRunExecutionTypeSmoke}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunAssignedTo}}\",\n        \"field_value\": \"{{fieldIdTestRunAssignedToUserTest}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunStatus}}\",\n        \"field_value\": \"{{fieldIdTestRunStatusPassed}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunPriority}}\",\n        \"field_value\": \"{{fieldIdTestRunPriorityMedium}}\"\n    }\n  ],\n  \"test_case\": {\n    \"id\": {{newTestCaseId1}}\n  }\n  \n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-runs",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-runs"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Subcribe test run 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c7772235-602c-4ddd-9aa3-0d7211bac952",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Subcribe requirement success without any errors\", () => {",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        ",
													"        pm.expect(jsonData.result.noSubscribers).to.eql(1);",
													"        ",
													"        pm.expect(jsonData.result.subscribers[0].userName).to.eql(pm.environment.get(\"username\"));",
													"        ",
													"        pm.expect(jsonData.result.subscribers[0].fullName).to.eql(pm.environment.get(\"userTestFullName\"));",
													"        ",
													"        pm.expect(jsonData.result.subscribers[0].id).to.eql(pm.environment.get(\"userTestId\"));",
													"    });",
													"    ",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0f14844d-4c5c-42a5-bd8e-46d0ba06a1d5",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "objectId",
													"value": "{{newTestRunId1}}",
													"type": "text"
												},
												{
													"key": "userId",
													"value": "{{userTestId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/p/{{projectId}}/portal/notification/subscribe/14",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"p",
												"{{projectId}}",
												"portal",
												"notification",
												"subscribe",
												"14"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create a test run by automation test case",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0c854865-942d-4f43-84ab-05354fda71ae",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"",
													"    let jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newTestRunId2\", jsonData.id);",
													"    pm.environment.set(\"testRunInfo2\", jsonData);",
													"",
													"    pm.test(\"Status code is 201\", () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(`Response data contains name: ${jsonData.name}`, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"testRunName\"));",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData.test_case_version_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData.creator_id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has test_case property\", () => {",
													"        pm.expect(jsonData.test_case).to.not.eql(null);",
													"        pm.expect(jsonData.test_case.links).to.not.eql(null);",
													"        pm.expect(jsonData.test_case.id).to.eql(pm.environment.get(\"newTestCaseId2\"));",
													"    });",
													"",
													"    let tmp;",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Run Order\":",
													"                pm.test(`Repsonse data has run order: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"            ",
													"            case \"Environment\":",
													"                pm.test(`Repsonse data has environment: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"                ",
													"            case \"Status\":",
													"                pm.test(`Repsonse data has status: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Unexecuted\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunStatusUnexecuted\").toString()",
													"                    );",
													"                });",
													"                break;",
													"",
													"            case \"Execution Type\":",
													"                pm.test(`Repsonse data has type: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Smoke\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunExecutionTypeSmoke\").toString()",
													"                    );",
													"                });",
													"                break;",
													"                ",
													"            case \"Planned Start Date\":",
													"                pm.test(\"Repsonse data contains Planned Start Date\", () => {",
													"                    tmp = pm.environment.get(\"startDate2\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Planned End Date\":",
													"                pm.test(\"Repsonse data contains Planned End Date\", () => {",
													"                    tmp = pm.environment.get(\"endDate2\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(`Repsonse data has priority: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Medium\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunPriorityMedium\").toString()",
													"                    );",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(pm.environment.get(\"userTestFullName\"));",
													"                    pm.expect(field.field_value).to.include(",
													"                        pm.environment.get(\"fieldIdTestRunAssignedToUserTest\").toString()",
													"                    );",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f0db4f2e-1609-4cb6-89e0-466b2b2b1824",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"testRunName\", \"Test Run 2\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate2\", today.toISOString());",
													"today.setDate(today.getDate() + 5);",
													"pm.environment.set(\"endDate2\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{testRunName}}\",\n  \"properties\": [\n    {\n        \"field_id\": \"{{fieldIdTestRunRunOrder}}\",\n        \"field_value\": 1\n    },\n    {\n      \"field_id\": {{fieldIdTestRunPlannedStartDate}},\n      \"field_value\": \"{{startDate2}}\"\n      \n    },\n    {\n      \"field_id\": {{fieldIdTestRunPlannedEndDate}},\n      \"field_value\": \"{{endDate2}}\"\n      \n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunExecutionType}}\",\n        \"field_value\": \"{{fieldIdTestRunExecutionTypeSmoke}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunAssignedTo}}\",\n        \"field_value\": \"{{fieldIdTestRunAssignedToUserTest}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunStatus}}\",\n        \"field_value\": \"{{fieldIdTestRunStatusPassed}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunPriority}}\",\n        \"field_value\": \"{{fieldIdTestRunPriorityMedium}}\"\n    }\n  ],\n  \"test_case\": {\n    \"id\": {{newTestCaseId2}}\n  }\n  \n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-runs",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-runs"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create a test run with test case has called test case",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f167a09f-bdb3-4b32-a63d-53f122c4867c",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"",
													"    let jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newTestRunId3\", jsonData.id);",
													"    pm.environment.set(\"testRunInfo3\", jsonData);",
													"",
													"    pm.test(\"Status code is 201\", () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(`Response data contains name: ${jsonData.name}`, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"testRunName\"));",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData.test_case_version_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData.creator_id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has test_case property\", () => {",
													"        pm.expect(jsonData.test_case).to.not.eql(null);",
													"        pm.expect(jsonData.test_case.links).to.not.eql(null);",
													"        pm.expect(jsonData.test_case.id).to.eql(pm.environment.get(\"newTestCaseId3\"));",
													"    });",
													"",
													"    let tmp;",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Run Order\":",
													"                pm.test(`Repsonse data has run order: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"            ",
													"            case \"Environment\":",
													"                pm.test(`Repsonse data has environment: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"                ",
													"            case \"Status\":",
													"                pm.test(`Repsonse data has status: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Unexecuted\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunStatusUnexecuted\").toString()",
													"                    );",
													"                });",
													"                break;",
													"",
													"            case \"Execution Type\":",
													"                pm.test(`Repsonse data has type: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Smoke\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunExecutionTypeSmoke\").toString()",
													"                    );",
													"                });",
													"                break;",
													"                ",
													"            case \"Planned Start Date\":",
													"                pm.test(\"Repsonse data contains Planned Start Date\", () => {",
													"                    tmp = pm.environment.get(\"startDate3\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Planned End Date\":",
													"                pm.test(\"Repsonse data contains Planned End Date\", () => {",
													"                    tmp = pm.environment.get(\"endDate3\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(`Repsonse data has priority: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Medium\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunPriorityMedium\").toString()",
													"                    );",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(pm.environment.get(\"userTestFullName\"));",
													"                    pm.expect(field.field_value).to.include(",
													"                        pm.environment.get(\"fieldIdTestRunAssignedToUserTest\").toString()",
													"                    );",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9ae17af4-d49a-417c-8d1f-499e18be2b47",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"testRunName\", \"Test Run 3\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate3\", today.toISOString());",
													"today.setDate(today.getDate() + 10);",
													"pm.environment.set(\"endDate3\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{testRunName}}\",\n  \"properties\": [\n    {\n        \"field_id\": \"{{fieldIdTestRunRunOrder}}\",\n        \"field_value\": 1\n    },\n    {\n      \"field_id\": {{fieldIdTestRunPlannedStartDate}},\n      \"field_value\": \"{{startDate3}}\"\n      \n    },\n    {\n      \"field_id\": {{fieldIdTestRunPlannedEndDate}},\n      \"field_value\": \"{{endDate3}}\"\n      \n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunExecutionType}}\",\n        \"field_value\": \"{{fieldIdTestRunExecutionTypeSmoke}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunAssignedTo}}\",\n        \"field_value\": \"{{fieldIdTestRunAssignedToUserTest}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunStatus}}\",\n        \"field_value\": \"{{fieldIdTestRunStatusPassed}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunPriority}}\",\n        \"field_value\": \"{{fieldIdTestRunPriorityMedium}}\"\n    }\n  ],\n  \"test_case\": {\n    \"id\": {{newTestCaseId3}}\n  }\n  \n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-runs",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-runs"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create a test run inside release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a23af64f-0df2-4a46-ab25-0be9369a6634",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"",
													"    let jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newTestRunId4\", jsonData.id);",
													"    pm.environment.set(\"testRunInfo4\", jsonData);",
													"",
													"    pm.test(\"Status code is 201\", () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(`Response data contains name: ${jsonData.name}`, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"testRunName\"));",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData.test_case_version_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData.creator_id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has test_case property\", () => {",
													"        pm.expect(jsonData.test_case).to.not.eql(null);",
													"        pm.expect(jsonData.test_case.links).to.not.eql(null);",
													"        pm.expect(jsonData.test_case.id).to.eql(pm.environment.get(\"newTestCaseId1\"));",
													"    });",
													"",
													"    let tmp;",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Run Order\":",
													"                pm.test(`Repsonse data has run order: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"            ",
													"            case \"Environment\":",
													"                pm.test(`Repsonse data has environment: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"                ",
													"            case \"Status\":",
													"                pm.test(`Repsonse data has status: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Unexecuted\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunStatusUnexecuted\").toString()",
													"                    );",
													"                });",
													"                break;",
													"",
													"            case \"Execution Type\":",
													"                pm.test(`Repsonse data has type: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Smoke\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunExecutionTypeSmoke\").toString()",
													"                    );",
													"                });",
													"                break;",
													"                ",
													"            case \"Planned Start Date\":",
													"                pm.test(\"Repsonse data contains Planned Start Date\", () => {",
													"                    tmp = pm.environment.get(\"startDate1\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Planned End Date\":",
													"                pm.test(\"Repsonse data contains Planned End Date\", () => {",
													"                    tmp = pm.environment.get(\"endDate1\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(`Repsonse data has priority: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Medium\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunPriorityMedium\").toString()",
													"                    );",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(pm.environment.get(\"userTestFullName\"));",
													"                    pm.expect(field.field_value).to.include(",
													"                        pm.environment.get(\"fieldIdTestRunAssignedToUserTest\").toString()",
													"                    );",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "60a8c4c7-c0a3-4422-86d4-bd99bdbc82f8",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"testRunName\", \"Test Run 4\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate1\", today.toISOString());",
													"today.setDate(today.getDate() + 5);",
													"pm.environment.set(\"endDate1\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{testRunName}}\",\n  \"properties\": [\n    {\n        \"field_id\": \"{{fieldIdTestRunRunOrder}}\",\n        \"field_value\": 1\n    },\n    {\n      \"field_id\": {{fieldIdTestRunPlannedStartDate}},\n      \"field_value\": \"{{startDate1}}\"\n      \n    },\n    {\n      \"field_id\": {{fieldIdTestRunPlannedEndDate}},\n      \"field_value\": \"{{endDate1}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunExecutionType}}\",\n        \"field_value\": \"{{fieldIdTestRunExecutionTypeSmoke}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunAssignedTo}}\",\n        \"field_value\": \"{{fieldIdTestRunAssignedToUserTest}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunStatus}}\",\n        \"field_value\": \"{{fieldIdTestRunStatusPassed}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunPriority}}\",\n        \"field_value\": \"{{fieldIdTestRunPriorityMedium}}\"\n    }\n  ],\n  \"test_case\": {\n    \"id\": {{newTestCaseId1}}\n  }\n  \n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-runs?parentType=release&parentId={{newReleaseId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-runs"
											],
											"query": [
												{
													"key": "parentType",
													"value": "release"
												},
												{
													"key": "parentId",
													"value": "{{newReleaseId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create a test run inside test cycle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b08b9307-3010-4ab1-b0a4-fe2a04aaea7f",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"",
													"    let jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newTestRunId5\", jsonData.id);",
													"    pm.environment.set(\"testRunInfo5\", jsonData);",
													"",
													"    pm.test(\"Status code is 201\", () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(`Response data contains name: ${jsonData.name}`, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"testRunName\"));",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData.test_case_version_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData.creator_id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has test_case property\", () => {",
													"        pm.expect(jsonData.test_case).to.not.eql(null);",
													"        pm.expect(jsonData.test_case.links).to.not.eql(null);",
													"        pm.expect(jsonData.test_case.id).to.eql(pm.environment.get(\"newTestCaseId1\"));",
													"    });",
													"",
													"    let tmp;",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Run Order\":",
													"                pm.test(`Repsonse data has run order: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"            ",
													"            case \"Environment\":",
													"                pm.test(`Repsonse data has environment: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"                ",
													"            case \"Status\":",
													"                pm.test(`Repsonse data has status: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Unexecuted\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunStatusUnexecuted\").toString()",
													"                    );",
													"                });",
													"                break;",
													"",
													"            case \"Execution Type\":",
													"                pm.test(`Repsonse data has type: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Smoke\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunExecutionTypeSmoke\").toString()",
													"                    );",
													"                });",
													"                break;",
													"                ",
													"            case \"Planned Start Date\":",
													"                pm.test(\"Repsonse data contains Planned Start Date\", () => {",
													"                    tmp = pm.environment.get(\"startDate1\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Planned End Date\":",
													"                pm.test(\"Repsonse data contains Planned End Date\", () => {",
													"                    tmp = pm.environment.get(\"endDate1\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(`Repsonse data has priority: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Medium\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunPriorityMedium\").toString()",
													"                    );",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(pm.environment.get(\"userTestFullName\"));",
													"                    pm.expect(field.field_value).to.include(",
													"                        pm.environment.get(\"fieldIdTestRunAssignedToUserTest\").toString()",
													"                    );",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "baf5f4f8-daf9-4dde-8112-c8bcb30d81ba",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"testRunName\", \"Test Run 5\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate1\", today.toISOString());",
													"today.setDate(today.getDate() + 5);",
													"pm.environment.set(\"endDate1\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{testRunName}}\",\n  \"properties\": [\n    {\n        \"field_id\": \"{{fieldIdTestRunRunOrder}}\",\n        \"field_value\": 1\n    },\n    {\n      \"field_id\": {{fieldIdTestRunPlannedStartDate}},\n      \"field_value\": \"{{startDate1}}\"\n      \n    },\n    {\n      \"field_id\": {{fieldIdTestRunPlannedEndDate}},\n      \"field_value\": \"{{endDate1}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunExecutionType}}\",\n        \"field_value\": \"{{fieldIdTestRunExecutionTypeSmoke}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunAssignedTo}}\",\n        \"field_value\": \"{{fieldIdTestRunAssignedToUserTest}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunStatus}}\",\n        \"field_value\": \"{{fieldIdTestRunStatusPassed}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunPriority}}\",\n        \"field_value\": \"{{fieldIdTestRunPriorityMedium}}\"\n    }\n  ],\n  \"test_case\": {\n    \"id\": {{newTestCaseId1}}\n  }\n  \n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-runs?parentType=test-cycle&parentId={{newCycleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-runs"
											],
											"query": [
												{
													"key": "parentType",
													"value": "test-cycle"
												},
												{
													"key": "parentId",
													"value": "{{newCycleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create a test run inside test suite",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3775821e-dfe2-498f-a262-a9f99b0c1211",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"",
													"    let jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newTestRunId6\", jsonData.id);",
													"    pm.environment.set(\"testRunInfo6\", jsonData);",
													"",
													"    pm.test(\"Status code is 201\", () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(`Response data contains name: ${jsonData.name}`, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"testRunName\"));",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData.test_case_version_id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData.creator_id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has test_case property\", () => {",
													"        pm.expect(jsonData.test_case).to.not.eql(null);",
													"        pm.expect(jsonData.test_case.links).to.not.eql(null);",
													"        pm.expect(jsonData.test_case.id).to.eql(pm.environment.get(\"newTestCaseId1\"));",
													"    });",
													"",
													"    let tmp;",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Run Order\":",
													"                pm.test(`Repsonse data has run order: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(\"0\");",
													"                });",
													"                break;",
													"            ",
													"            case \"Environment\":",
													"                pm.test(`Repsonse data has environment: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"                ",
													"            case \"Status\":",
													"                pm.test(`Repsonse data has status: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Unexecuted\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunStatusUnexecuted\").toString()",
													"                    );",
													"                });",
													"                break;",
													"",
													"            case \"Execution Type\":",
													"                pm.test(`Repsonse data has type: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Smoke\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunExecutionTypeSmoke\").toString()",
													"                    );",
													"                });",
													"                break;",
													"                ",
													"            case \"Planned Start Date\":",
													"                pm.test(\"Repsonse data contains Planned Start Date\", () => {",
													"                    tmp = pm.environment.get(\"startDate1\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Planned End Date\":",
													"                pm.test(\"Repsonse data contains Planned End Date\", () => {",
													"                    tmp = pm.environment.get(\"endDate1\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(`Repsonse data has priority: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Medium\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunPriorityMedium\").toString()",
													"                    );",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(pm.environment.get(\"userTestFullName\"));",
													"                    pm.expect(field.field_value).to.include(",
													"                        pm.environment.get(\"fieldIdTestRunAssignedToUserTest\").toString()",
													"                    );",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c1cb598f-2959-469d-b1a9-4293249615a5",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"testRunName\", \"Test Run 6\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate1\", today.toISOString());",
													"today.setDate(today.getDate() + 5);",
													"pm.environment.set(\"endDate1\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{testRunName}}\",\n  \"properties\": [\n    {\n        \"field_id\": \"{{fieldIdTestRunRunOrder}}\",\n        \"field_value\": 1\n    },\n    {\n      \"field_id\": {{fieldIdTestRunPlannedStartDate}},\n      \"field_value\": \"{{startDate1}}\"\n      \n    },\n    {\n      \"field_id\": {{fieldIdTestRunPlannedEndDate}},\n      \"field_value\": \"{{endDate1}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunExecutionType}}\",\n        \"field_value\": \"{{fieldIdTestRunExecutionTypeSmoke}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunAssignedTo}}\",\n        \"field_value\": \"{{fieldIdTestRunAssignedToUserTest}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunStatus}}\",\n        \"field_value\": \"{{fieldIdTestRunStatusPassed}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunPriority}}\",\n        \"field_value\": \"{{fieldIdTestRunPriorityMedium}}\"\n    }\n  ],\n  \"test_case\": {\n    \"id\": {{newTestCaseId1}}\n  }\n  \n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-runs?parentType=test-suite&parentId={{newTestSuiteId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-runs"
											],
											"query": [
												{
													"key": "parentType",
													"value": "test-suite"
												},
												{
													"key": "parentId",
													"value": "{{newTestSuiteId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get Test Run Statuses",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ede4fbb-9926-4aa0-b889-17e76646e6fc",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    jsonData.forEach((status, index) => {",
													"        pm.test(`Response data at ${index} has links property`, () => {",
													"            pm.expect(status.links).to.not.eql(null);",
													"        });",
													"",
													"        pm.test(`Response data at ${index} has id property`, () => {",
													"            pm.expect(status.id).to.not.eql(null);",
													"        });",
													"",
													"        switch (status.name) {",
													"            case \"Passed\":",
													"                pm.test(`Response data at ${index} contains is_default: ${status.is_default}`, () => {",
													"                    pm.expect(status.is_default).to.eql(false);",
													"                });",
													"                pm.test(`Response data at ${index} contains color`, () => {",
													"                    pm.expect(status.color).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data at ${index} contains active: ${status.active}`, () => {",
													"                    pm.expect(status.active).to.eql(true);",
													"                });",
													"                pm.environment.set(\"statusPassedId\", status.id);",
													"                break;",
													"            case \"Failed\":",
													"                pm.test(`Response data at ${index} contains is_default: ${status.is_default}`, () => {",
													"                    pm.expect(status.is_default).to.eql(false);",
													"                });",
													"                pm.test(`Response data at ${index} contains color`, () => {",
													"                    pm.expect(status.color).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data at ${index} contains active: ${status.active}`, () => {",
													"                    pm.expect(status.active).to.eql(true);",
													"                });",
													"                pm.environment.set(\"statusFailedId\", status.id);",
													"                break;",
													"            case \"Incomplete\":",
													"                pm.test(`Response data at ${index} contains is_default: ${status.is_default}`, () => {",
													"                    pm.expect(status.is_default).to.eql(false);",
													"                });",
													"                pm.test(`Response data at ${index} contains color`, () => {",
													"                    pm.expect(status.color).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data at ${index} contains active: ${status.active}`, () => {",
													"                    pm.expect(status.active).to.eql(true);",
													"                });",
													"                pm.environment.set(\"statusIncompleteId\", status.id);",
													"                break;",
													"            case \"Blocked\":",
													"                pm.test(`Response data at ${index} contains is_default: ${status.is_default}`, () => {",
													"                    pm.expect(status.is_default).to.eql(false);",
													"                });",
													"                pm.test(`Response data at ${index} contains color`, () => {",
													"                    pm.expect(status.color).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data at ${index} contains active: ${status.active}`, () => {",
													"                    pm.expect(status.active).to.eql(true);",
													"                });",
													"                pm.environment.set(\"statusBlockedId\", status.id);",
													"                break;",
													"            case \"Unexecuted\":",
													"                pm.test(`Response data at ${index} contains is_default: ${status.is_default}`, () => {",
													"                    pm.expect(status.is_default).to.eql(true);",
													"                });",
													"                pm.test(`Response data at ${index} contains color`, () => {",
													"                    pm.expect(status.color).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data at ${index} contains active: ${status.active}`, () => {",
													"                    pm.expect(status.active).to.eql(false);",
													"                });",
													"                pm.environment.set(\"statusUnexecutedId\", status.id);",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8415113f-1705-43db-b5fa-e0bae070c216",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-runs/execution-statuses",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-runs",
												"execution-statuses"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Submit testlog of test run 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8a8741c0-86d0-443b-a027-cd7bc818a41e",
												"exec": [
													"const RESPONSE_CODE = 201;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"",
													"    let jsonData = pm.response.json();",
													"    let testRunInfo = pm.environment.get(\"testRunInfo1\");",
													"    pm.environment.set(\"newTestLogId1\", jsonData.id);",
													"    pm.environment.set(\"testLogInfo1\", jsonData);",
													"    pm.environment.set(\"testRunStatus1\", jsonData.status);",
													"    pm.environment.set(\"testStepLogId1\", jsonData.test_step_logs[0].test_step_log_id);",
													"",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "78571a8d-2067-4417-999f-eb0be6034b9e",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"exeStartDate\", today.toISOString());",
													"today.setDate(today.getDate() + 2);",
													"pm.environment.set(\"exeEndDate\", today.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"exe_start_date\": \"{{exeStartDate}}\",\n    \"exe_end_date\": \"{{exeEndDate}}\",\n    \"status\": {\n      \"id\": {{statusPassedId}}\n    }\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-runs/{{newTestRunId1}}/test-logs",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-runs",
												"{{newTestRunId1}}",
												"test-logs"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get Test Run 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a88ba8a1-0314-4a0d-925d-00c5e60921b0",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.environment.set(\"testRunInfo1\", jsonData);",
													"    pm.environment.set(\"testRunName1\",jsonData.name);",
													"    pm.environment.set(\"testRunPid1\", jsonData.pid);",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0d6ab293-ae6b-4c51-9b9e-0cac57639c6e",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-runs/{{newTestRunId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-runs",
												"{{newTestRunId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get Test Run 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f7b5ce0-0c79-4f85-94eb-cb846d202c6c",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.environment.set(\"testRunInfo2\", jsonData);",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7894e379-9fc3-4e23-ba28-a999dd232933",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-runs/{{newTestRunId2}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-runs",
												"{{newTestRunId2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get Test Run 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cb356213-ec1f-471a-ae21-e39ab3ad3735",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.environment.set(\"testRunInfo3\", jsonData);",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1a1ec9d9-5f09-4540-9b3e-e6c0ceed05bf",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-runs/{{newTestRunId3}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-runs",
												"{{newTestRunId3}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get Test Run 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55ba9757-3b51-44bd-92b3-554f0550ec60",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.environment.set(\"testRunInfo4\", jsonData);",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3f82ccb9-fc53-4662-8d89-6607e741e186",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-runs/{{newTestRunId4}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-runs",
												"{{newTestRunId4}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get Test Run 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c173e8b0-74cc-4121-8af2-97656221df3e",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.environment.set(\"testRunInfo5\", jsonData);",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "525be3c6-c31c-4fda-aa48-8a7c140a81ac",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-runs/{{newTestRunId5}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-runs",
												"{{newTestRunId5}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get Test Run 6",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96ad6793-30d1-4f72-b1b6-73d8d1321193",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.environment.set(\"testRunInfo6\", jsonData);",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d683ff92-a078-494d-88aa-953e20a56b6e",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-runs/{{newTestRunId6}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-runs",
												"{{newTestRunId6}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Defects",
							"item": [
								{
									"name": "200 - Precondition - Get Defecet fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e39db1f-f4d2-4fdc-afb0-e86355457813",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdDefect\";",
													"    var jsonData = pm.response.json();",
													"    var userList = pm.environment.get(\"userList\");",
													"    ",
													"",
													"    // jsonData.forEach((field) => {",
													"    //     if (field.label === \"Summary\" || field.label === \"Description\") {",
													"    //         pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"    //     }",
													"    // });",
													"    ",
													"    pm.environment.set(\"defectFields\", jsonData);",
													"    ",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/defects/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"defects",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Submit a defect",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e91096c9-2da7-497b-8676-591d310c6548",
												"type": "text/javascript",
												"exec": [
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === 201) {",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.environment.set(\"newDefectId1\", jsonData.id);",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.properties = searchAndModifyJSONItemValueFromList(jsonData.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"    jsonData.properties = searchAndModifyJSONItemValueFromList(jsonData.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"    jsonData.properties = searchAndModifyJSONItemValueFromList(jsonData.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"    delete jsonData.url;",
													"",
													"    pm.environment.set(\"defectInfo1\", jsonData);",
													"",
													"    pm.test(\"Status code is 201\", () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has property id\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has property pid\", () => {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has property url\", () => {",
													"        pm.expect(jsonData.url).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has property submitted_date\", () => {",
													"        pm.expect(jsonData.submitted_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has property last_modified_date\", () => {",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has property submitter_id\", () => {",
													"        pm.expect(jsonData.submitter_id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has property web_url\", () => {",
													"        pm.expect(jsonData.web_url).to.not.eql(null);",
													"    });",
													"",
													"    jsonData.properties.forEach((field, index) => {",
													"        switch (field.field_name) {",
													"            case \"Summary\":",
													"                pm.test(\"Response data has property summary contains: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"defectSummary\"));",
													"                });",
													"                break;",
													"            case \"Description\":",
													"                pm.test(\"Response data has property description contains: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"defectDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "04e81410-c6f1-4e78-bb8c-a3fa0800548b",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"defectSummary\", \"Summary of DF-1\");",
													"pm.environment.set(\"defectDescription\", \"Description of DF-1\");",
													"",
													"let today = new Date();",
													"let date2 = today;",
													"date2.setDate(today.getDate() + 10);",
													"",
													"let defectFields = pm.environment.get(\"defectFields\");",
													"let defectFieldsInput = {",
													"    \"Summary\": pm.environment.get(\"defectSummary\"),",
													"    \"Description\": pm.environment.get(\"defectDescription\"),",
													"    \"Submitter\": pm.environment.get(\"userTestFullName\"),",
													"    \"Affected Release/Build\": pm.environment.get(\"newBuildName1\"),",
													"    \"Severity\": \"Fatal\",",
													"    \"Fixed Release/Build\": pm.environment.get(\"newBuildName1\"),",
													"    \"Submitted Date\": today.toISOString(),",
													"    \"Priority\": \"Urgent\",",
													"    \"Root Cause\": \"Human Error\",",
													"    \"Module\": `MD-2 ${pm.environment.get(\"newModuleName1\")}`,",
													"    \"Assigned To\": pm.environment.get(\"userTestFullName\"),",
													"    \"Status\": \"Reopened\",",
													"    \"Type\": \"Bug\",",
													"    \"Target Release/Build\": pm.environment.get(\"newBuildName1\"),",
													"    \"Reason\": \"Cannot Fix\",",
													"    \"Category\": \"DesignUI\",",
													"    \"Target Date\": date2.toISOString(),",
													"    \"Closed Date\": date2.toISOString()",
													"}",
													"",
													"let requestDefectProperties = [];",
													"Object.keys(defectFieldsInput).forEach((prop, index) => {",
													"    let property = generateProperty(prop, defectFieldsInput[prop], defectFields);",
													"",
													"    requestDefectProperties.push(property);",
													"});",
													"",
													"pm.environment.set(\"requestDefectProperties\", JSON.stringify(requestDefectProperties));",
													"",
													"function generateProperty(fieldName, fieldValue, fieldsArray) {",
													"    for (let field of fieldsArray) {",
													"        if (field.label === fieldName) {",
													"            if (!field.allowed_values) {",
													"                return {",
													"                    \"field_id\": field.id,",
													"                    \"field_value\": fieldValue",
													"                };",
													"            }",
													"",
													"            for (let value of field.allowed_values) {",
													"                if (value.label.replace(/[\\s\\/-]/g, \"\") === fieldValue.toString().replace(/[\\s\\/-]/g, \"\")) {",
													"                    return {",
													"                        \"field_id\": field.id,",
													"                        \"field_value\": value.value",
													"                    };",
													"                }",
													"            }",
													"        }",
													"    }",
													"}",
													"",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value",
													"function searchJSONItemFromList(jsonList, expectedKey, expectedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            return jsonList[i];",
													"        }",
													"    }",
													"    return null;",
													"}",
													"",
													"const priorityField = searchJSONItemFromList(pm.environment.get(\"defectFields\"), \"label\", \"Priority\");",
													"const priorityFieldProperty = searchJSONItemFromList(JSON.parse(pm.environment.get(\"requestDefectProperties\")), \"field_id\", priorityField.id);",
													"const typeField = searchJSONItemFromList(pm.environment.get(\"defectFields\"), \"label\", \"Type\");",
													"const typeFieldProperty = searchJSONItemFromList(JSON.parse(pm.environment.get(\"requestDefectProperties\")), \"field_id\", typeField.id);",
													"const reasonField = searchJSONItemFromList(pm.environment.get(\"defectFields\"), \"label\", \"Reason\");",
													"const reasonFieldProperty = searchJSONItemFromList(JSON.parse(pm.environment.get(\"requestDefectProperties\")), \"field_id\", reasonField.id);",
													"const rootCauseField = searchJSONItemFromList(pm.environment.get(\"defectFields\"), \"label\", \"Root Cause\");",
													"const rootCauseFieldProperty = searchJSONItemFromList(JSON.parse(pm.environment.get(\"requestDefectProperties\")), \"field_id\", rootCauseField.id);",
													"const severityField = searchJSONItemFromList(pm.environment.get(\"defectFields\"), \"label\", \"Severity\");",
													"const severityFieldProperty = searchJSONItemFromList(JSON.parse(pm.environment.get(\"requestDefectProperties\")), \"field_id\", severityField.id);",
													"const statusField = searchJSONItemFromList(pm.environment.get(\"defectFields\"), \"label\", \"Status\");",
													"const statusFieldProperty = searchJSONItemFromList(JSON.parse(pm.environment.get(\"requestDefectProperties\")), \"field_id\", statusField.id);",
													"pm.environment.set(\"defectPriorityId\", priorityFieldProperty.field_value);",
													"pm.environment.set(\"defectTypeId\", typeFieldProperty.field_value);",
													"pm.environment.set(\"defectReasonId\", reasonFieldProperty.field_value);",
													"pm.environment.set(\"defectRootCauseId\", rootCauseFieldProperty.field_value);",
													"pm.environment.set(\"defectSeverityId\", severityFieldProperty.field_value);",
													"pm.environment.set(\"defectStatusId\", statusFieldProperty.field_value);",
													"",
													"",
													"",
													"",
													"",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"properties\": {{requestDefectProperties}},\n  \"attachments\": [ {\n      \"name\": \"sample_file_name.txt\",\n      \"content_type\": \"text/plain\",\n      \"data\": \"dGhpcyBpcyBzYW1wbGUgdGVzdA==\"\n    }]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/defects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"defects"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Subcribe defect 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca84ffcb-8326-4027-878d-ed5958f3f4be",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Subcribe requirement success without any errors\", () => {",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        ",
													"        pm.expect(jsonData.result.noSubscribers).to.eql(1);",
													"        ",
													"        pm.expect(jsonData.result.subscribers[0].userName).to.eql(pm.environment.get(\"username\"));",
													"        ",
													"        pm.expect(jsonData.result.subscribers[0].fullName).to.eql(pm.environment.get(\"userTestFullName\"));",
													"        ",
													"        pm.expect(jsonData.result.subscribers[0].id).to.eql(pm.environment.get(\"userTestId\"));",
													"    });",
													"    ",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "54cec9a9-f196-4b5b-9b78-a00e8583f163",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "objectId",
													"value": "{{newDefectId1}}",
													"type": "text"
												},
												{
													"key": "userId",
													"value": "{{userTestId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/p/{{projectId}}/portal/notification/subscribe/3",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"p",
												"{{projectId}}",
												"portal",
												"notification",
												"subscribe",
												"3"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Link Objects",
							"item": [
								{
									"name": "201 - Precondition - Link release with requirements",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5435be16-31ac-4d8f-a476-0534f4a8e56b",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    ",
													"    pm.test(\"Response status: \" + pm.response.code, ()  => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"    let releaseInfo = pm.environment.get(\"releaseInfo1\");",
													"    ",
													"    pm.test(`Response data has ${jsonData.length} item(s)`, () => {",
													"        pm.expect(jsonData.length).to.eql(1);",
													"    });",
													"    ",
													"    pm.test(\"Item at 0 has property id\", () => {",
													"        pm.expect(jsonData[0].id).to.eql(releaseInfo.id);",
													"    });",
													"    ",
													"    pm.test(`Item at 0 has ${jsonData[0].objects.length} objects`, () => {",
													"        pm.expect(jsonData[0].objects.length).to.eql(1);",
													"    });",
													"    ",
													"    jsonData[0].objects.forEach((object, index) => {",
													"        let reqInfo = pm.environment.get(\"reqInfo1\");",
													"        ",
													"        pm.test(`Object at ${index} has property id`, () => {",
													"            pm.expect(object.id).to.eql(reqInfo.id);",
													"        });",
													"        ",
													"        pm.test(`Object at ${index} has property pid`, () => {",
													"            pm.expect(object.pid).to.eql(reqInfo.pid);",
													"        });",
													"        ",
													"        pm.test(`Object at ${index} has property link_type: ${object.link_type}`, () => {",
													"            pm.expect(object.link_type).to.eql(\"release_scope_includes\");",
													"        });",
													"        ",
													"        pm.test(`Object at ${index} has property self`, () => {",
													"            pm.expect(object.self).to.not.eql(null);",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  {{newReqId1}}\n]"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/{{newReleaseId1}}/link?type=requirements",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"{{newReleaseId1}}",
												"link"
											],
											"query": [
												{
													"key": "type",
													"value": "requirements"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Link build with requirements",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cc99f65f-7658-4bd2-8c03-ddc8878785bd",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    ",
													"    pm.test(\"Response status: \" + pm.response.code, ()  => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"    let buildInfo = pm.environment.get(\"buildInfo1\");",
													"    ",
													"    pm.test(`Response data has ${jsonData.length} item(s)`, () => {",
													"        pm.expect(jsonData.length).to.eql(1);",
													"    });",
													"    ",
													"    pm.test(\"Item at 0 has property id\", () => {",
													"        pm.expect(jsonData[0].id).to.eql(buildInfo.id);",
													"    });",
													"    ",
													"    pm.test(`Item at 0 has ${jsonData[0].objects.length} objects`, () => {",
													"        pm.expect(jsonData[0].objects.length).to.eql(1);",
													"    });",
													"    ",
													"    jsonData[0].objects.forEach((object, index) => {",
													"        let reqInfo = pm.environment.get(\"reqInfo1\");",
													"        ",
													"        pm.test(`Object at ${index} has property id`, () => {",
													"            pm.expect(object.id).to.eql(reqInfo.id);",
													"        });",
													"        ",
													"        pm.test(`Object at ${index} has property pid`, () => {",
													"            pm.expect(object.pid).to.eql(reqInfo.pid);",
													"        });",
													"        ",
													"        pm.test(`Object at ${index} has property link_type: ${object.link_type}`, () => {",
													"            pm.expect(object.link_type).to.eql(\"build_scope_includes\");",
													"        });",
													"        ",
													"        pm.test(`Object at ${index} has property self`, () => {",
													"            pm.expect(object.self).to.not.eql(null);",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  {{newReqId1}}\n]"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds/{{newBuildId1}}/link?type=requirements",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds",
												"{{newBuildId1}}",
												"link"
											],
											"query": [
												{
													"key": "type",
													"value": "requirements"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Link requirement with test cases",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8c1421cd-8eba-4865-a836-a37ef8ad48af",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    ",
													"    pm.test(\"Response status: \" + pm.response.code, ()  => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"    let reqInfo = pm.environment.get(\"reqInfo1\");",
													"    ",
													"    pm.test(`Response data has ${jsonData.length} item(s)`, () => {",
													"        pm.expect(jsonData.length).to.eql(1);",
													"    });",
													"    ",
													"    pm.test(\"Item at 0 has property id\", () => {",
													"        pm.expect(jsonData[0].id.toString()).to.not.eql(reqInfo.id);",
													"    });",
													"    ",
													"    pm.test(`Item at 0 has ${jsonData[0].objects.length} objects`, () => {",
													"        pm.expect(jsonData[0].objects.length).to.eql(3);",
													"    });",
													"    ",
													"    jsonData[0].objects.forEach((object, index) => {",
													"        let reqInfo = pm.environment.get(`testCaseInfo${index + 1}`);",
													"        ",
													"        pm.test(`Object at ${index} has property id`, () => {",
													"            pm.expect(object.id).to.eql(reqInfo.id);",
													"        });",
													"        ",
													"        pm.test(`Object at ${index} has property pid`, () => {",
													"            pm.expect(object.pid).to.eql(reqInfo.pid);",
													"        });",
													"        ",
													"        pm.test(`Object at ${index} has property link_type: ${object.link_type}`, () => {",
													"            pm.expect(object.link_type).to.eql(\"is_covered_by\");",
													"        });",
													"        ",
													"        pm.test(`Object at ${index} has property self`, () => {",
													"            pm.expect(object.self).to.not.eql(null);",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  {{newTestCaseId1}}, {{newTestCaseId2}}, {{newTestCaseId3}}\n]"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/link?type=test-cases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"link"
											],
											"query": [
												{
													"key": "type",
													"value": "test-cases"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Link test log with defects",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ead83518-7469-4494-b2dc-0c45e9f6d841",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    ",
													"    pm.test(\"Response status: \" + pm.response.code, ()  => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"    let testLogInfo = pm.environment.get(\"testLogInfo1\");",
													"    ",
													"    pm.test(`Response data has ${jsonData.length} item(s)`, () => {",
													"        pm.expect(jsonData.length).to.eql(1);",
													"    });",
													"    ",
													"    pm.test(\"Item at 0 has property id\", () => {",
													"        pm.expect(jsonData[0].id).to.eql(testLogInfo.id",
													"        );",
													"    });",
													"    ",
													"    pm.test(`Item at 0 has ${jsonData[0].objects.length} objects`, () => {",
													"        pm.expect(jsonData[0].objects.length).to.eql(1);",
													"    });",
													"    ",
													"    jsonData[0].objects.forEach((object, index) => {",
													"        let reqInfo = pm.environment.get(\"defectInfo1\");",
													"        ",
													"        pm.test(`Object at ${index} has property id`, () => {",
													"            pm.expect(object.id).to.eql(reqInfo.id);",
													"        });",
													"        ",
													"        pm.test(`Object at ${index} has property pid`, () => {",
													"            pm.expect(object.pid).to.eql(reqInfo.pid);",
													"        });",
													"        ",
													"        pm.test(`Object at ${index} has property link_type: ${object.link_type}`, () => {",
													"            pm.expect(object.link_type).to.eql(\"is_associated_with\");",
													"        });",
													"        ",
													"        pm.test(`Object at ${index} has property self`, () => {",
													"            pm.expect(object.self).to.not.eql(null);",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  {{newDefectId1}}\n]"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-logs/{{newTestLogId1}}/link?type=defects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-logs",
												"{{newTestLogId1}}",
												"link"
											],
											"query": [
												{
													"key": "type",
													"value": "defects"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Link test step with defects",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c87a78bb-d284-4e63-b8b4-ba7b531ca068",
												"type": "text/javascript",
												"exec": [
													"// https://agile.qasymphony.com/browse/MR-3592",
													"",
													"if (pm.response.code === 201) {",
													"    ",
													"    pm.test(\"Response status: \" + pm.response.code, ()  => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"    ",
													"    pm.test(`Response data has ${jsonData.length} item(s)`, () => {",
													"        pm.expect(jsonData.length).to.eql(1);",
													"    });",
													"    ",
													"    pm.test(\"Item at 0 has property id\", () => {",
													"        pm.expect(jsonData[0].id).to.eql(pm.environment.get(\"testStepLogId1\"));",
													"    });",
													"    ",
													"    pm.test(`Item at 0 has ${jsonData[0].objects.length} objects`, () => {",
													"        pm.expect(jsonData[0].objects.length).to.eql(1);",
													"    });",
													"    ",
													"    jsonData[0].objects.forEach((object, index) => {",
													"        let reqInfo = pm.environment.get(\"defectInfo1\");",
													"        ",
													"        pm.test(`Object at ${index} has property id`, () => {",
													"            pm.expect(object.id).to.eql(reqInfo.id);",
													"        });",
													"        ",
													"        pm.test(`Object at ${index} has property pid`, () => {",
													"            pm.expect(object.pid).to.eql(reqInfo.pid);",
													"        });",
													"        ",
													"        pm.test(`Object at ${index} has property link_type: ${object.link_type}`, () => {",
													"            pm.expect(object.link_type).to.eql(\"is_associated_with\");",
													"        });",
													"        ",
													"        pm.test(`Object at ${index} has property self`, () => {",
													"            pm.expect(object.self).to.not.eql(null);",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "21cfb5fb-cd87-4c47-a12e-f5419c219afc",
												"type": "text/javascript",
												"exec": [
													"console.log(`newDefectId1: ${pm.environment.get(\"newDefectId1\")}`)"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  {{newDefectId1}}\n]"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-steps/{{testStepLogId1}}/link?type=defects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-steps",
												"{{testStepLogId1}}",
												"link"
											],
											"query": [
												{
													"key": "type",
													"value": "defects"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Main",
					"item": [
						{
							"name": "Test with release",
							"item": [
								{
									"name": "200 - Query objects - Success with object type releases and criteria name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e71eba8a-2c8f-4284-9582-18b30c32fc21",
												"exec": [
													"const expectedResponseCode = 200;",
													"const releaseInfos = [pm.environment.get(\"releaseInfo2\")];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(releaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${releaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(releaseInfos.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        releaseInfos.forEach((releaseInfo, i) => {",
													"            if(releaseInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(releaseInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(releaseInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(releaseInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(releaseInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has description property`, () => {",
													"                    pm.expect(item.description).to.eql(releaseInfo.description);",
													"                });",
													"                pm.test(`Response data has items[${index}] has note property`, () => {",
													"                    pm.expect(item.note).to.eql(releaseInfo.note);",
													"                });",
													"                pm.test(`Response data has items[${index}] has start_date property`, () => {",
													"                    pm.expect(item.start_date).to.eql(releaseInfo.start_date);",
													"                });",
													"                pm.test(`Response data has items[${index}] has end_date property`, () => {",
													"                    pm.expect(item.end_date).to.eql(releaseInfo.end_date);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(releaseInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    releaseInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5fbb7f07-a7a8-45e9-b502-8c87151efe6e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"releases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'name' = 'Release 2'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type releases and criteria id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2fc54a76-b8a1-4579-b299-62e9ef56e1c9",
												"exec": [
													"const expectedResponseCode = 200;",
													"const releaseInfos = [pm.environment.get(\"releaseInfo1\")];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(releaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${releaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(releaseInfos.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        releaseInfos.forEach((releaseInfo, i) => {",
													"            if(releaseInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(releaseInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(releaseInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(releaseInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(releaseInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has description property`, () => {",
													"                    pm.expect(item.description).to.eql(releaseInfo.description);",
													"                });",
													"                pm.test(`Response data has items[${index}] has note property`, () => {",
													"                    pm.expect(item.note).to.eql(releaseInfo.note);",
													"                });",
													"                pm.test(`Response data has items[${index}] has start_date property`, () => {",
													"                    pm.expect(item.start_date).to.eql(releaseInfo.start_date);",
													"                });",
													"                pm.test(`Response data has items[${index}] has end_date property`, () => {",
													"                    pm.expect(item.end_date).to.eql(releaseInfo.end_date);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(releaseInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    releaseInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"    ",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "29947be8-9a8b-496c-af6d-dda4dd02308b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"releases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'id' = '{{newReleaseId1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Test with Build",
							"item": [
								{
									"name": "200 - Query objects - Success with object type builds and criteria name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f90f644-cf4e-4940-b4f5-fa7bda355454",
												"exec": [
													"const expectedResponseCode = 200;",
													"const buildInfos = [pm.environment.get(\"buildInfo1\")];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(buildInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${buildInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(buildInfos.length);",
													"    });",
													"",
													"    pm.test(\"Data of the Builds mapped with criteria should be returned correctly\", () => {",
													"        pm.expect(JSON.parse(JSON.stringify(jsonData.items))).to.eql(JSON.parse(JSON.stringify(buildInfos)));",
													"    });",
													"    jsonData.items.forEach((item, index) => {",
													"        buildInfos.forEach((buildInfo, i) => {",
													"            if(buildInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(buildInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(buildInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(buildInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(buildInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(buildInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    buildInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5e956be6-b352-4d12-b92f-86d7bd99cf4f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"builds\",\n  \"fields\": [\"*\"],\n  \"query\": \"'name' = '{{buildName}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type builds and criteria id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cbc50e28-4356-46ba-bdde-a3c61d82ee0e",
												"exec": [
													"const expectedResponseCode = 200;",
													"const buildInfos = [pm.environment.get(\"buildInfo1\")];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(buildInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${buildInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(buildInfos.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        buildInfos.forEach((buildInfo, i) => {",
													"            if(buildInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(buildInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(buildInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(buildInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(buildInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(buildInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    buildInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3609c16d-5f52-4822-ae03-9929dfc4a8a4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"builds\",\n  \"fields\": [\"*\"],\n  \"query\": \"'id' = '{{newBuildId1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Test with test suite",
							"item": [
								{
									"name": "200 - Query objects - Success with object type testsuites and criteria name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e0672907-a232-4873-a4df-1904a482cee2",
												"exec": [
													"const expectedResponseCode = 200;",
													"const testSuiteInfos = [pm.environment.get(\"testSuiteInfo1\")];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testSuiteInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testSuiteInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testSuiteInfos.length);",
													"    });",
													"",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        testSuiteInfos.forEach((testSuiteInfo, i) => {",
													"            if(testSuiteInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testSuiteInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testSuiteInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testSuiteInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testSuiteInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testSuiteInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testSuiteInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testSuiteInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b4bea990-262d-436e-b469-7000f7a1ff40",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-suites\",\n  \"fields\": [\"*\"],\n  \"query\": \"'name' = '{{newTestSuiteName1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type testsuites and criteria id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f5ef7f6b-4c46-476c-9c12-f391b72f52b3",
												"exec": [
													"const expectedResponseCode = 200;",
													"const testSuiteInfos = [pm.environment.get(\"testSuiteInfo1\")];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testSuiteInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testSuiteInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testSuiteInfos.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        testSuiteInfos.forEach((testSuiteInfo, i) => {",
													"            if(testSuiteInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testSuiteInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testSuiteInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testSuiteInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testSuiteInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testSuiteInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testSuiteInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testSuiteInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d242ea7e-5767-479c-9321-7dcd058b9d11",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-suites\",\n  \"fields\": [\"*\"],\n  \"query\": \"'id' = '{{newTestSuiteId1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Test with requirements",
							"item": [
								{
									"name": "200 - Query objects - Success with object type requirements and criteria id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f51eb97-4da8-4f7a-920b-2c6c664bff54",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [pm.environment.get(\"reqInfo1\")];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "192846b0-688d-468f-8343-3f762a4d6042",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'id' = '{{newReqId1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type requirements and criteria name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f572a11-e119-4781-b414-21ba72b19eae",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [pm.environment.get(\"reqInfo2\")];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4e53af4d-c771-4a1b-84fc-cc3d2050b73d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'name' = 'Requirement 2'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type requirements and criteria creator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e5a20ba-0202-404f-a5fc-706d631f490f",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [pm.environment.get(`reqInfo1`), pm.environment.get(`reqInfo2`)];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"    ",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"    ",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "119352cb-9f31-46b3-afe3-52d5eaad1d10",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'creator' = '{{userTestFullName}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type requirements and criteria description",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "887c5c55-9ffe-4562-a94a-fd5d047f97bc",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [pm.environment.get(`reqInfo1`), pm.environment.get(`reqInfo2`)];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"    ",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"    ",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7c43069b-bf25-4e42-88dc-3fc663a19d42",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'description' ~ 'Description'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type requirements and criteria module",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fe4e990-09dc-44c7-b2f6-178d08698e23",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [pm.environment.get(`reqInfo1`), pm.environment.get(`reqInfo2`)];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"    ",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"    ",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1ec1a115-17db-488d-9196-f7701faccfea",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'module' = '{{newModuleId1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type requirements and criteria priority",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "503e4d9c-4ac9-4c88-86b6-4ec371fe59b3",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [pm.environment.get(`reqInfo1`), pm.environment.get(`reqInfo2`)];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"    ",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"    ",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f4864a8b-f454-4028-9bab-4f53c1fedf09",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'priority' = 'should have'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type requirements and criteria status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "abb6fbd1-2a1b-49ad-8a47-fa4616ebc6e6",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [pm.environment.get(`reqInfo1`), pm.environment.get(`reqInfo2`)];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"    ",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"    ",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dadfd6c8-5fd0-47b0-8edc-d65a7095695b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'status' = 'in progress'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type requirements and criteria type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f9541d13-03fe-4d7d-93e4-33788e9c2131",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"    ",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"    ",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d1aeda0b-632d-4164-8bf8-1ae00847e38c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'type' = 'functional'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type requirements and criteria assigned to",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec8daf8e-3406-4a38-85aa-bb3218d93c6b",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [pm.environment.get(`reqInfo1`), pm.environment.get(`reqInfo2`)];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"    ",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"    ",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e29e14d0-c391-4428-8d9b-cbd674543405",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'assigned to' = '{{userTestFullName}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type requirements and criteria has associated with defects",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a98670b2-79c6-4dd6-a70a-cd8d557b064e",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [pm.environment.get(`reqInfo1`)];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"    ",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"    ",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0319e9ac-1e72-4ac5-a17a-191a2dbd08d3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Has Association with Defects' = 'YES'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query requirements with criteria has associated with defects by value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8c7bf73a-c168-41d8-b204-0b52eef29d7e",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [pm.environment.get(`reqInfo2`)];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"    ",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"    ",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4ff0c3b9-e5cb-4195-b483-dfd23d9c4a8e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Has Association with Defects' = 'something'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type requirements and criteria has associated with test cases",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f0347835-cebc-4a1b-851d-ce5fa5e3d9e1",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [pm.environment.get(`reqInfo1`)];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"    ",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"    ",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5611cd62-8f56-4465-8fe2-1a480870d178",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Has Association with Test Cases' = 'YES'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query requirements with criteria has associated with test cases by value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d6db8eea-f61a-4979-884f-652c716c0ab4",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [pm.environment.get(`reqInfo2`)];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"    ",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"    ",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f64c16f7-7c60-4f6d-9fb2-ae637fc4a986",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Has Association with Test Cases' = 'something'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type requirements and criteria has associated with test runs",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5080fe3-8d84-4a51-80a6-70d770ead8a9",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [pm.environment.get(`reqInfo1`)];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"    ",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"    ",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "305921c8-30a0-4866-9bd5-77aada8ff3ce",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Has Association with Test Runs' = 'YES' \"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query requirements with criteria has associated with test runs by value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c3c8aaf-505d-4e86-a917-92122b4e98c2",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [pm.environment.get(`reqInfo2`)];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"    ",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"    ",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4eb8dfc3-208f-445c-b725-0a44a236b275",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Has Association with Test Runs' = 'something'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type requirements and criteria has attachments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c11a923-d9c6-42bf-9bd2-0df5179f7881",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"    ",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"    ",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "add49a57-fc8b-4071-a29d-d941506c0f69",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Has Attachments' = 'YES' \"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query requirements with criteria has attachments by value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e1f3a957-27ef-428d-b6f3-9f3cd7e8dc15",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [pm.environment.get(`reqInfo1`), pm.environment.get(`reqInfo2`)];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"    ",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"    ",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4e724314-42af-4012-bdf8-eec0045b6713",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Has Attachments' = 'something'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type requirements and criteria subscribers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48bccd64-5dde-4a14-b96f-ce55af7e06b3",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [pm.environment.get(`reqInfo1`)];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"    ",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"    ",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c53340f9-c6a6-40fe-af0f-42b354085cd6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'subscribers' = '{{userTestId}}' \"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query requirements with criteria subscribers by user full name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bbde2c85-9e50-4833-bdf9-5e034637f91d",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"    ",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"    ",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b7a40103-6d62-406e-8c6f-3bb947720182",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'subscribers' = '{{userTestFulName}}' \"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type requirements and criteria target release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8578ec6d-b7d8-4032-8fdd-1337724bb28c",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [pm.environment.get(`reqInfo1`)];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"    ",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"    ",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b754b620-8f1c-4cd8-9a90-548a04240006",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'target release' = '{{newReleaseName1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type requirements and criteria target build",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d62c0a00-9c31-4538-b6c2-fe86fc704f86",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [pm.environment.get(`reqInfo1`)];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"    ",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"    ",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "af2a60c9-8882-4081-9049-bb986535bb27",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'target build' = '{{newBuildId1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type requirements and criteria created date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e292ea69-9b2d-4bb8-b09b-c35646f45473",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [pm.environment.get(`reqInfo1`), pm.environment.get(`reqInfo2`)];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"    ",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"    ",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e06b6cc5-6455-4804-ac7f-fab70852204d",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"dateToCompare\", today.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'created date' < '{{dateToCompare}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type requirements and criteria last modified date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b44d929d-70f5-4354-b6c0-edd3aa03045c",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [pm.environment.get(`reqInfo1`), pm.environment.get(`reqInfo2`)];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"    ",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"    ",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2e8d8dc1-04a1-463c-ab98-93c7678e113a",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"dateToCompare\", today.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'last modified date' < '{{dateToCompare}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type requirements and criteria last modified user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15c5452c-e0e3-48a7-9e2c-0e6652efa06d",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [pm.environment.get(`reqInfo1`), pm.environment.get(`reqInfo2`)];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"    ",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"    ",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "eefd0e6d-c732-4cea-98bf-776e1bde2715",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'last modified user' = '{{userTestFullName}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type requirements and criteria last modified user by user Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f18d678a-beec-423c-8b6f-3e6c038c3fe4",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [pm.environment.get(`reqInfo1`), pm.environment.get(`reqInfo2`)];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"    ",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"    ",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7fd0762c-220a-47e3-9894-c523459095df",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'last modified user' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Query objects - Query requirements with criteria target release by release Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42f48b38-a30b-4025-80e0-9de04087e093",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 400;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"   pm.test(\"Response data has property message contains: is not allowed for field 'Target Release/Build'\", () => {",
													"       pm.expect(jsonData.message).to.eql(`Value '${pm.environment.get(\"newReleaseId1\")}' is not allowed for field 'Target Release/Build'. Please given an allowed value!`);",
													"   });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "536b59bd-cce4-4c80-8523-3d3c5be4f45c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'target release' = {{newReleaseId1}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Query objects - Query requirements with criteria target build by build Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83cc4503-5ead-44f8-a81a-a0d6430fa80b",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 400;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"   pm.test(\"Response data has property message contains: is not allowed for field 'Target Release/Build'\", () => {",
													"       pm.expect(jsonData.message).to.eql(`Value '${pm.environment.get(\"newBuildName1\")}' is not allowed for field 'Target Release/Build'. Please given an allowed value!`);",
													"   });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e59a8ecd-0510-4473-8583-16624464f337",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'target build' = '{{newBuildName1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Query objects - Query requirements with invalid requirement id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "175c0f7c-1c46-4a00-9312-45aea6ea1db7",
												"exec": [
													"let expectedResponseCode = 400;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"   pm.test(\"Response data has property message contains: For input string\", () => {",
													"       pm.expect(jsonData.message).to.eql(`For input string: \\\"${pm.environment.get(\"newReqId1\")}${pm.environment.get(\"invalidPostfix\")}\\\"`);",
													"   });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e77b7805-c023-4ba7-b747-a4702e015ed1",
												"exec": [
													"pm.environment.set(\"invalidPostfix\", \"abcd\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'id' = '{{newReqId1}}{{invalidPostfix}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Test with test cases",
							"item": [
								{
									"name": "200 - Query objects - Success with object type test cases and criteria id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e5d85f1-9da6-4c69-aa79-db30c4ba9a4a",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testCaseInfos = [pm.environment.get(\"testCaseInfo1\")];",
													"testCaseInfos[0].attachments = [];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testCaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testCaseInfos.length);",
													"    });",
													"    ",
													"    jsonData.items.forEach((item, index) => {",
													"        testCaseInfos.forEach((testCaseInfo, i) => {",
													"            if(testCaseInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testCaseInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testCaseInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testCaseInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testCaseInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testCaseInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testCaseInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has attachments property`, () => {",
													"                    pm.expect(item.attachments.length).to.eql(testCaseInfo.attachments.length);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has version property`, () => {",
													"                    pm.expect(item.version).to.eql(testCaseInfo.version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has description property`, () => {",
													"                    pm.expect(item.description).to.eql(testCaseInfo.description);",
													"                });",
													"                pm.test(`Response data has items[${index}] has precondition property`, () => {",
													"                    pm.expect(item.precondition).to.eql(testCaseInfo.precondition);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testCaseInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testCaseInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_steps object`, () => {",
													"                    pm.expect(item.test_steps.length).to.eql(testCaseInfo.test_steps.length);",
													"                });",
													"                item.test_steps.forEach((testStep, index2) => {",
													"                    testCaseInfo.test_steps.forEach((testStepItem, i2) => {",
													"                        if(testStep.id === testStepItem.id){",
													"                            pm.test(`Response data has test step at ${index2}`, () => {",
													"                                pm.expect(testStep.description).to.eql(testStepItem.description);",
													"                                pm.expect(testStep.expected).to.eql(testStepItem.expected);",
													"                                pm.expect(testStep.order).to.eql(testStepItem.order);",
													"                                pm.expect(testStep.links).to.not.eql(null);",
													"                                pm.expect(testStep.attachments).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "59fc2d7d-4944-4783-ba19-c375b165c950",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'id' = '{{newTestCaseId1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test cases and criteria name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4964b7df-b247-4102-a6c1-1dd025935f06",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testCaseInfos = [pm.environment.get(\"testCaseInfo2\")];",
													"testCaseInfos[0].attachments = [];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testCaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        testCaseInfos.forEach((testCaseInfo, i) => {",
													"            if(testCaseInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testCaseInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testCaseInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testCaseInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testCaseInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testCaseInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testCaseInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has attachments property`, () => {",
													"                    pm.expect(item.attachments.length).to.eql(testCaseInfo.attachments.length);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has version property`, () => {",
													"                    pm.expect(item.version).to.eql(testCaseInfo.version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has description property`, () => {",
													"                    pm.expect(item.description).to.eql(testCaseInfo.description);",
													"                });",
													"                pm.test(`Response data has items[${index}] has precondition property`, () => {",
													"                    pm.expect(item.precondition).to.eql(testCaseInfo.precondition);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testCaseInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testCaseInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_steps object`, () => {",
													"                    pm.expect(item.test_steps.length).to.eql(testCaseInfo.test_steps.length);",
													"                });",
													"                item.test_steps.forEach((testStep, index2) => {",
													"                    testCaseInfo.test_steps.forEach((testStepItem, i2) => {",
													"                        if(testStep.id === testStepItem.id){",
													"                            pm.test(`Response data has test step at ${index2}`, () => {",
													"                                pm.expect(testStep.description).to.eql(testStepItem.description);",
													"                                pm.expect(testStep.expected).to.eql(testStepItem.expected);",
													"                                pm.expect(testStep.order).to.eql(testStepItem.order);",
													"                                pm.expect(testStep.links).to.not.eql(null);",
													"                                pm.expect(testStep.attachments).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5f550356-7f2d-473a-9af8-5296f1534900",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'name' ~ 'Test Case 2'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test cases and criteria creator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ffad0f8-5b73-4d04-b378-fecef834bc24",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testCaseInfos = [pm.environment.get(\"testCaseInfo1\"), pm.environment.get(\"testCaseInfo2\"),",
													"    pm.environment.get(\"testCaseInfo3\"), pm.environment.get(\"testCaseInfo4\")",
													"];",
													"",
													"testCaseInfos[0].attachments = [];",
													"testCaseInfos[1].attachments = [];",
													"testCaseInfos[2].attachments = [];",
													"testCaseInfos[3].attachments = [];",
													"",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testCaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items,\"order\");",
													"    // Customize attachment href and web_url before verification",
													"    // test-steps string in href and web_url of test case 4  when the test case have not been approved",
													"    jsonData.items[3].test_steps[0].attachments[0].links[0].href = jsonData.items[3].test_steps[0].attachments[0].links[0].href.replace(\"test-steps/\", \"\");",
													"    jsonData.items[3].test_steps[0].attachments[0].web_url = jsonData.items[3].test_steps[0].attachments[0].web_url.replace(\"teststep\", \"\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testCaseInfos.forEach((testCaseInfo, i) => {",
													"            if(testCaseInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testCaseInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testCaseInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testCaseInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testCaseInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testCaseInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testCaseInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has attachments property`, () => {",
													"                    pm.expect(item.attachments.length).to.eql(testCaseInfo.attachments.length);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has version property`, () => {",
													"                    pm.expect(item.version).to.eql(testCaseInfo.version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has description property`, () => {",
													"                    pm.expect(item.description).to.eql(testCaseInfo.description);",
													"                });",
													"                pm.test(`Response data has items[${index}] has precondition property`, () => {",
													"                    pm.expect(item.precondition).to.eql(testCaseInfo.precondition);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testCaseInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testCaseInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_steps object`, () => {",
													"                    pm.expect(item.test_steps.length).to.eql(testCaseInfo.test_steps.length);",
													"                });",
													"                item.test_steps.forEach((testStep, index2) => {",
													"                    testCaseInfo.test_steps.forEach((testStepItem, i2) => {",
													"                        if(testStep.id === testStepItem.id){",
													"                            pm.test(`Response data has test step at ${index2} ${testCaseInfo.name} vs ${item.name}`, () => {",
													"                                pm.expect(testStep.description).to.eql(testStepItem.description);",
													"                                pm.expect(testStep.expected).to.eql(testStepItem.expected);",
													"                                pm.expect(testStep.order).to.eql(testStepItem.order);",
													"                                pm.expect(testStep.links).to.not.eql(null);",
													"                                pm.expect(testStep.attachments).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5e5d5b15-f215-4992-aad8-2839820ca5c0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'creator' = '{{userTestFullName}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test cases and criteria description",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ae3708c-7692-4446-8b18-752cfe334e40",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testCaseInfos = [pm.environment.get(\"testCaseInfo1\"), pm.environment.get(\"testCaseInfo2\"),",
													"    pm.environment.get(\"testCaseInfo3\"), pm.environment.get(\"testCaseInfo4\")",
													"];",
													"",
													"testCaseInfos[0].attachments = [];",
													"testCaseInfos[1].attachments = [];",
													"testCaseInfos[2].attachments = [];",
													"testCaseInfos[3].attachments = [];",
													"",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testCaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items,\"order\");",
													"    // Customize attachment href and web_url before verification",
													"    // test-steps string in href and web_url of test case 4  when the test case have not been approved",
													"    jsonData.items[3].test_steps[0].attachments[0].links[0].href = jsonData.items[3].test_steps[0].attachments[0].links[0].href.replace(\"test-steps/\", \"\");",
													"    jsonData.items[3].test_steps[0].attachments[0].web_url = jsonData.items[3].test_steps[0].attachments[0].web_url.replace(\"teststep\", \"\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testCaseInfos.forEach((testCaseInfo, i) => {",
													"            if(testCaseInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testCaseInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testCaseInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testCaseInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testCaseInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testCaseInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testCaseInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has attachments property`, () => {",
													"                    pm.expect(item.attachments.length).to.eql(testCaseInfo.attachments.length);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has version property`, () => {",
													"                    pm.expect(item.version).to.eql(testCaseInfo.version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has description property`, () => {",
													"                    pm.expect(item.description).to.eql(testCaseInfo.description);",
													"                });",
													"                pm.test(`Response data has items[${index}] has precondition property`, () => {",
													"                    pm.expect(item.precondition).to.eql(testCaseInfo.precondition);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testCaseInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testCaseInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_steps object`, () => {",
													"                    pm.expect(item.test_steps.length).to.eql(testCaseInfo.test_steps.length);",
													"                });",
													"                item.test_steps.forEach((testStep, index2) => {",
													"                    testCaseInfo.test_steps.forEach((testStepItem, i2) => {",
													"                        if(testStep.id === testStepItem.id){",
													"                            pm.test(`Response data has test step at ${index2}`, () => {",
													"                                pm.expect(testStep.description).to.eql(testStepItem.description);",
													"                                pm.expect(testStep.expected).to.eql(testStepItem.expected);",
													"                                pm.expect(testStep.order).to.eql(testStepItem.order);",
													"                                pm.expect(testStep.links).to.not.eql(null);",
													"                                pm.expect(testStep.attachments).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3a79640b-9a8c-452c-b480-a9ff3c89905c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'description' ~ 'Description'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test cases and criteria module",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d0b2c5e1-d69d-4c11-8d02-258be96d8b54",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testCaseInfos = [pm.environment.get(\"testCaseInfo1\"), pm.environment.get(\"testCaseInfo2\"),",
													"    pm.environment.get(\"testCaseInfo3\"), pm.environment.get(\"testCaseInfo4\")",
													"];",
													"",
													"testCaseInfos[0].attachments = [];",
													"testCaseInfos[1].attachments = [];",
													"testCaseInfos[2].attachments = [];",
													"testCaseInfos[3].attachments = [];",
													"",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testCaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items,\"order\");",
													"    // Customize attachment href and web_url before verification",
													"    // test-steps string in href and web_url of test case 4  when the test case have not been approved",
													"    jsonData.items[3].test_steps[0].attachments[0].links[0].href = jsonData.items[3].test_steps[0].attachments[0].links[0].href.replace(\"test-steps/\", \"\");",
													"    jsonData.items[3].test_steps[0].attachments[0].web_url = jsonData.items[3].test_steps[0].attachments[0].web_url.replace(\"teststep\", \"\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testCaseInfos.forEach((testCaseInfo, i) => {",
													"            if(testCaseInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testCaseInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testCaseInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testCaseInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testCaseInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testCaseInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testCaseInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has attachments property`, () => {",
													"                    pm.expect(item.attachments.length).to.eql(testCaseInfo.attachments.length);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has version property`, () => {",
													"                    pm.expect(item.version).to.eql(testCaseInfo.version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has description property`, () => {",
													"                    pm.expect(item.description).to.eql(testCaseInfo.description);",
													"                });",
													"                pm.test(`Response data has items[${index}] has precondition property`, () => {",
													"                    pm.expect(item.precondition).to.eql(testCaseInfo.precondition);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testCaseInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testCaseInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_steps object`, () => {",
													"                    pm.expect(item.test_steps.length).to.eql(testCaseInfo.test_steps.length);",
													"                });",
													"                item.test_steps.forEach((testStep, index2) => {",
													"                    testCaseInfo.test_steps.forEach((testStepItem, i2) => {",
													"                        if(testStep.id === testStepItem.id){",
													"                            pm.test(`Response data has test step at ${index2}`, () => {",
													"                                pm.expect(testStep.description).to.eql(testStepItem.description);",
													"                                pm.expect(testStep.expected).to.eql(testStepItem.expected);",
													"                                pm.expect(testStep.order).to.eql(testStepItem.order);",
													"                                pm.expect(testStep.links).to.not.eql(null);",
													"                                pm.expect(testStep.attachments).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "01d6eaf8-5261-4307-81bf-02bfd16fb026",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'module' = '{{newModuleId1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test cases and criteria automation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c793696b-7e58-449b-ae28-2b728ffe031e",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testCaseInfos = [pm.environment.get(\"testCaseInfo2\")];",
													"",
													"testCaseInfos[0].attachments = [];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testCaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        testCaseInfos.forEach((testCaseInfo, i) => {",
													"            if(testCaseInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testCaseInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testCaseInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testCaseInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testCaseInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testCaseInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testCaseInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has attachments property`, () => {",
													"                    pm.expect(item.attachments.length).to.eql(testCaseInfo.attachments.length);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has version property`, () => {",
													"                    pm.expect(item.version).to.eql(testCaseInfo.version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has description property`, () => {",
													"                    pm.expect(item.description).to.eql(testCaseInfo.description);",
													"                });",
													"                pm.test(`Response data has items[${index}] has precondition property`, () => {",
													"                    pm.expect(item.precondition).to.eql(testCaseInfo.precondition);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testCaseInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testCaseInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_steps object`, () => {",
													"                    pm.expect(item.test_steps.length).to.eql(testCaseInfo.test_steps.length);",
													"                });",
													"                item.test_steps.forEach((testStep, index2) => {",
													"                    testCaseInfo.test_steps.forEach((testStepItem, i2) => {",
													"                        if(testStep.id === testStepItem.id){",
													"                            pm.test(`Response data has test step at ${index2}`, () => {",
													"                                pm.expect(testStep.description).to.eql(testStepItem.description);",
													"                                pm.expect(testStep.expected).to.eql(testStepItem.expected);",
													"                                pm.expect(testStep.order).to.eql(testStepItem.order);",
													"                                pm.expect(testStep.links).to.not.eql(null);",
													"                                pm.expect(testStep.attachments).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "24ba5c28-319a-43fa-99cb-2ca461f58081",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'automation' = 'YES'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test cases and criteria automation content",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c5b6f93c-8c3c-499a-abe6-4222608b029b",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testCaseInfos = [pm.environment.get(\"testCaseInfo2\")];",
													"",
													"testCaseInfos[0].attachments = [];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testCaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        testCaseInfos.forEach((testCaseInfo, i) => {",
													"            if(testCaseInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testCaseInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testCaseInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testCaseInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testCaseInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testCaseInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testCaseInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has attachments property`, () => {",
													"                    pm.expect(item.attachments.length).to.eql(testCaseInfo.attachments.length);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has version property`, () => {",
													"                    pm.expect(item.version).to.eql(testCaseInfo.version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has description property`, () => {",
													"                    pm.expect(item.description).to.eql(testCaseInfo.description);",
													"                });",
													"                pm.test(`Response data has items[${index}] has precondition property`, () => {",
													"                    pm.expect(item.precondition).to.eql(testCaseInfo.precondition);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testCaseInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testCaseInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_steps object`, () => {",
													"                    pm.expect(item.test_steps.length).to.eql(testCaseInfo.test_steps.length);",
													"                });",
													"                item.test_steps.forEach((testStep, index2) => {",
													"                    testCaseInfo.test_steps.forEach((testStepItem, i2) => {",
													"                        if(testStep.id === testStepItem.id){",
													"                            pm.test(`Response data has test step at ${index2}`, () => {",
													"                                pm.expect(testStep.description).to.eql(testStepItem.description);",
													"                                pm.expect(testStep.expected).to.eql(testStepItem.expected);",
													"                                pm.expect(testStep.order).to.eql(testStepItem.order);",
													"                                pm.expect(testStep.links).to.not.eql(null);",
													"                                pm.expect(testStep.attachments).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5adde4c6-ae0f-49d0-a364-15456adb41f3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'automation content' ~ 'automation'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test cases and criteria priority",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd43ac56-0fb2-47e6-b00b-f933d6d79726",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testCaseInfos = [pm.environment.get(\"testCaseInfo1\"), pm.environment.get(\"testCaseInfo2\"),",
													"    pm.environment.get(\"testCaseInfo3\"), pm.environment.get(\"testCaseInfo4\")",
													"];",
													"",
													"testCaseInfos[0].attachments = [];",
													"testCaseInfos[1].attachments = [];",
													"testCaseInfos[2].attachments = [];",
													"testCaseInfos[3].attachments = [];",
													"",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testCaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items,\"order\");",
													"    // Customize attachment href and web_url before verification",
													"    // test-steps string in href and web_url of test case 4  when the test case have not been approved",
													"    jsonData.items[3].test_steps[0].attachments[0].links[0].href = jsonData.items[3].test_steps[0].attachments[0].links[0].href.replace(\"test-steps/\", \"\");",
													"    jsonData.items[3].test_steps[0].attachments[0].web_url = jsonData.items[3].test_steps[0].attachments[0].web_url.replace(\"teststep\", \"\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testCaseInfos.forEach((testCaseInfo, i) => {",
													"            if(testCaseInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testCaseInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testCaseInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testCaseInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testCaseInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testCaseInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testCaseInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has attachments property`, () => {",
													"                    pm.expect(item.attachments.length).to.eql(testCaseInfo.attachments.length);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has version property`, () => {",
													"                    pm.expect(item.version).to.eql(testCaseInfo.version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has description property`, () => {",
													"                    pm.expect(item.description).to.eql(testCaseInfo.description);",
													"                });",
													"                pm.test(`Response data has items[${index}] has precondition property`, () => {",
													"                    pm.expect(item.precondition).to.eql(testCaseInfo.precondition);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testCaseInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testCaseInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_steps object`, () => {",
													"                    pm.expect(item.test_steps.length).to.eql(testCaseInfo.test_steps.length);",
													"                });",
													"                item.test_steps.forEach((testStep, index2) => {",
													"                    testCaseInfo.test_steps.forEach((testStepItem, i2) => {",
													"                        if(testStep.id === testStepItem.id){",
													"                            pm.test(`Response data has test step at ${index2}`, () => {",
													"                                pm.expect(testStep.description).to.eql(testStepItem.description);",
													"                                pm.expect(testStep.expected).to.eql(testStepItem.expected);",
													"                                pm.expect(testStep.order).to.eql(testStepItem.order);",
													"                                pm.expect(testStep.links).to.not.eql(null);",
													"                                pm.expect(testStep.attachments).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "59248c78-06e6-4f17-820e-3333b862d433",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'priority' = 'high'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test cases and criteria status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bdf99ccc-c887-4104-a648-6d34864640ec",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testCaseInfos = [pm.environment.get(\"testCaseInfo1\"), pm.environment.get(\"testCaseInfo2\"),",
													"    pm.environment.get(\"testCaseInfo3\"), pm.environment.get(\"testCaseInfo4\")",
													"];",
													"",
													"testCaseInfos[0].attachments = [];",
													"testCaseInfos[1].attachments = [];",
													"testCaseInfos[2].attachments = [];",
													"testCaseInfos[3].attachments = [];",
													"",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testCaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items,\"order\");",
													"    // Customize attachment href and web_url before verification",
													"    // test-steps string in href and web_url of test case 4  when the test case have not been approved",
													"    jsonData.items[3].test_steps[0].attachments[0].links[0].href = jsonData.items[3].test_steps[0].attachments[0].links[0].href.replace(\"test-steps/\", \"\");",
													"    jsonData.items[3].test_steps[0].attachments[0].web_url = jsonData.items[3].test_steps[0].attachments[0].web_url.replace(\"teststep\", \"\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testCaseInfos.forEach((testCaseInfo, i) => {",
													"            if(testCaseInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testCaseInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testCaseInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testCaseInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testCaseInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testCaseInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testCaseInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has attachments property`, () => {",
													"                    pm.expect(item.attachments.length).to.eql(testCaseInfo.attachments.length);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has version property`, () => {",
													"                    pm.expect(item.version).to.eql(testCaseInfo.version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has description property`, () => {",
													"                    pm.expect(item.description).to.eql(testCaseInfo.description);",
													"                });",
													"                pm.test(`Response data has items[${index}] has precondition property`, () => {",
													"                    pm.expect(item.precondition).to.eql(testCaseInfo.precondition);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testCaseInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testCaseInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_steps object`, () => {",
													"                    pm.expect(item.test_steps.length).to.eql(testCaseInfo.test_steps.length);",
													"                });",
													"                item.test_steps.forEach((testStep, index2) => {",
													"                    testCaseInfo.test_steps.forEach((testStepItem, i2) => {",
													"                        if(testStep.id === testStepItem.id){",
													"                            pm.test(`Response data has test step at ${index2}`, () => {",
													"                                pm.expect(testStep.description).to.eql(testStepItem.description);",
													"                                pm.expect(testStep.expected).to.eql(testStepItem.expected);",
													"                                pm.expect(testStep.order).to.eql(testStepItem.order);",
													"                                pm.expect(testStep.links).to.not.eql(null);",
													"                                pm.expect(testStep.attachments).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2f10f8d1-a698-41b3-9ae7-0dda1f74d62d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'status' = 'in progress'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test cases and criteria type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e88a956c-d65d-4666-9ab3-a1764b78ad85",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testCaseInfos = [pm.environment.get(\"testCaseInfo1\"), pm.environment.get(\"testCaseInfo2\"),",
													"    pm.environment.get(\"testCaseInfo3\"), pm.environment.get(\"testCaseInfo4\")",
													"];",
													"",
													"testCaseInfos[0].attachments = [];",
													"testCaseInfos[1].attachments = [];",
													"testCaseInfos[2].attachments = [];",
													"testCaseInfos[3].attachments = [];",
													"",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testCaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items,\"order\");",
													"    // Customize attachment href and web_url before verification",
													"    // test-steps string in href and web_url of test case 4  when the test case have not been approved",
													"    jsonData.items[3].test_steps[0].attachments[0].links[0].href = jsonData.items[3].test_steps[0].attachments[0].links[0].href.replace(\"test-steps/\", \"\");",
													"    jsonData.items[3].test_steps[0].attachments[0].web_url = jsonData.items[3].test_steps[0].attachments[0].web_url.replace(\"teststep\", \"\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testCaseInfos.forEach((testCaseInfo, i) => {",
													"            if(testCaseInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testCaseInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testCaseInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testCaseInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testCaseInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testCaseInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testCaseInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has attachments property`, () => {",
													"                    pm.expect(item.attachments.length).to.eql(testCaseInfo.attachments.length);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has version property`, () => {",
													"                    pm.expect(item.version).to.eql(testCaseInfo.version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has description property`, () => {",
													"                    pm.expect(item.description).to.eql(testCaseInfo.description);",
													"                });",
													"                pm.test(`Response data has items[${index}] has precondition property`, () => {",
													"                    pm.expect(item.precondition).to.eql(testCaseInfo.precondition);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testCaseInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testCaseInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_steps object`, () => {",
													"                    pm.expect(item.test_steps.length).to.eql(testCaseInfo.test_steps.length);",
													"                });",
													"                item.test_steps.forEach((testStep, index2) => {",
													"                    testCaseInfo.test_steps.forEach((testStepItem, i2) => {",
													"                        if(testStep.id === testStepItem.id){",
													"                            pm.test(`Response data has test step at ${index2}`, () => {",
													"                                pm.expect(testStep.description).to.eql(testStepItem.description);",
													"                                pm.expect(testStep.expected).to.eql(testStepItem.expected);",
													"                                pm.expect(testStep.order).to.eql(testStepItem.order);",
													"                                pm.expect(testStep.links).to.not.eql(null);",
													"                                pm.expect(testStep.attachments).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "766e85e7-4831-4d4e-9539-7816aeddfe44",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'type' = 'performance'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test cases and criteria assigned to",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ce60203-192e-4430-9070-214a0b7ab35e",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testCaseInfos = [pm.environment.get(\"testCaseInfo1\"), pm.environment.get(\"testCaseInfo2\"),",
													"    pm.environment.get(\"testCaseInfo3\"), pm.environment.get(\"testCaseInfo4\")",
													"];",
													"",
													"testCaseInfos[0].attachments = [];",
													"testCaseInfos[1].attachments = [];",
													"testCaseInfos[2].attachments = [];",
													"testCaseInfos[3].attachments = [];",
													"",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testCaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items,\"order\");",
													"    // Customize attachment href and web_url before verification",
													"    // test-steps string in href and web_url of test case 4  when the test case have not been approved",
													"    jsonData.items[3].test_steps[0].attachments[0].links[0].href = jsonData.items[3].test_steps[0].attachments[0].links[0].href.replace(\"test-steps/\", \"\");",
													"    jsonData.items[3].test_steps[0].attachments[0].web_url = jsonData.items[3].test_steps[0].attachments[0].web_url.replace(\"teststep\", \"\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testCaseInfos.forEach((testCaseInfo, i) => {",
													"            if(testCaseInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testCaseInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testCaseInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testCaseInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testCaseInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testCaseInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testCaseInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has attachments property`, () => {",
													"                    pm.expect(item.attachments.length).to.eql(testCaseInfo.attachments.length);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has version property`, () => {",
													"                    pm.expect(item.version).to.eql(testCaseInfo.version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has description property`, () => {",
													"                    pm.expect(item.description).to.eql(testCaseInfo.description);",
													"                });",
													"                pm.test(`Response data has items[${index}] has precondition property`, () => {",
													"                    pm.expect(item.precondition).to.eql(testCaseInfo.precondition);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testCaseInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testCaseInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_steps object`, () => {",
													"                    pm.expect(item.test_steps.length).to.eql(testCaseInfo.test_steps.length);",
													"                });",
													"                item.test_steps.forEach((testStep, index2) => {",
													"                    testCaseInfo.test_steps.forEach((testStepItem, i2) => {",
													"                        if(testStep.id === testStepItem.id){",
													"                            pm.test(`Response data has test step at ${index2}`, () => {",
													"                                pm.expect(testStep.description).to.eql(testStepItem.description);",
													"                                pm.expect(testStep.expected).to.eql(testStepItem.expected);",
													"                                pm.expect(testStep.order).to.eql(testStepItem.order);",
													"                                pm.expect(testStep.links).to.not.eql(null);",
													"                                pm.expect(testStep.attachments).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bb14cd86-4fd4-42d0-9b0f-75a72bfe0033",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'assigned to' = '{{userTestFullName}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test cases and criteria has associated with requirements",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bdea1128-b6c8-4c92-82cf-27c0020a12b0",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testCaseInfos = [pm.environment.get(\"testCaseInfo1\"), pm.environment.get(\"testCaseInfo2\"),",
													"    pm.environment.get(\"testCaseInfo3\")",
													"];",
													"",
													"testCaseInfos[0].attachments = [];",
													"testCaseInfos[1].attachments = [];",
													"testCaseInfos[2].attachments = [];",
													"",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testCaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items,\"order\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testCaseInfos.forEach((testCaseInfo, i) => {",
													"            if(testCaseInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testCaseInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testCaseInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testCaseInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testCaseInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testCaseInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testCaseInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has attachments property`, () => {",
													"                    pm.expect(item.attachments.length).to.eql(testCaseInfo.attachments.length);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has version property`, () => {",
													"                    pm.expect(item.version).to.eql(testCaseInfo.version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has description property`, () => {",
													"                    pm.expect(item.description).to.eql(testCaseInfo.description);",
													"                });",
													"                pm.test(`Response data has items[${index}] has precondition property`, () => {",
													"                    pm.expect(item.precondition).to.eql(testCaseInfo.precondition);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testCaseInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testCaseInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_steps object`, () => {",
													"                    pm.expect(item.test_steps.length).to.eql(testCaseInfo.test_steps.length);",
													"                });",
													"                item.test_steps.forEach((testStep, index2) => {",
													"                    testCaseInfo.test_steps.forEach((testStepItem, i2) => {",
													"                        if(testStep.id === testStepItem.id){",
													"                            pm.test(`Response data has test step at ${index2}`, () => {",
													"                                pm.expect(testStep.description).to.eql(testStepItem.description);",
													"                                pm.expect(testStep.expected).to.eql(testStepItem.expected);",
													"                                pm.expect(testStep.order).to.eql(testStepItem.order);",
													"                                pm.expect(testStep.links).to.not.eql(null);",
													"                                pm.expect(testStep.attachments).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "234a65ca-62ba-4111-94a4-3f586b8e532c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Has Association with Requirements' = 'YES'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query test cases with criteria has associated with requirements by value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ff88b85a-d6b4-493f-b207-2dc38fe9072d",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testCaseInfos = [pm.environment.get(\"testCaseInfo4\")];",
													"",
													"testCaseInfos[0].attachments = [];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testCaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    // Customize attachment href and web_url before verification",
													"    // test-steps string in href and web_url of test case 4  when the test case have not been approved",
													"    jsonData.items[0].test_steps[0].attachments[0].links[0].href = jsonData.items[0].test_steps[0].attachments[0].links[0].href.replace(\"test-steps/\", \"\");",
													"    jsonData.items[0].test_steps[0].attachments[0].web_url = jsonData.items[0].test_steps[0].attachments[0].web_url.replace(\"teststep\", \"\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testCaseInfos.forEach((testCaseInfo, i) => {",
													"            if(testCaseInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testCaseInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testCaseInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testCaseInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testCaseInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testCaseInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testCaseInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has attachments property`, () => {",
													"                    pm.expect(item.attachments.length).to.eql(testCaseInfo.attachments.length);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has version property`, () => {",
													"                    pm.expect(item.version).to.eql(testCaseInfo.version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has description property`, () => {",
													"                    pm.expect(item.description).to.eql(testCaseInfo.description);",
													"                });",
													"                pm.test(`Response data has items[${index}] has precondition property`, () => {",
													"                    pm.expect(item.precondition).to.eql(testCaseInfo.precondition);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testCaseInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testCaseInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_steps object`, () => {",
													"                    pm.expect(item.test_steps.length).to.eql(testCaseInfo.test_steps.length);",
													"                });",
													"                item.test_steps.forEach((testStep, index2) => {",
													"                    testCaseInfo.test_steps.forEach((testStepItem, i2) => {",
													"                        if(testStep.id === testStepItem.id){",
													"                            pm.test(`Response data has test step at ${index2}`, () => {",
													"                                pm.expect(testStep.description).to.eql(testStepItem.description);",
													"                                pm.expect(testStep.expected).to.eql(testStepItem.expected);",
													"                                pm.expect(testStep.order).to.eql(testStepItem.order);",
													"                                pm.expect(testStep.links).to.not.eql(null);",
													"                                pm.expect(testStep.attachments).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4e46559e-4bf0-4db8-afa1-3a4caccb57d3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Has Association with Requirements' = 'something'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test cases and criteria has executed test run instances",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78802cc5-00a3-4695-b8ce-2d6300369347",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testCaseInfos = [pm.environment.get(\"testCaseInfo1\")];",
													"",
													"testCaseInfos[0].attachments = [];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testCaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        testCaseInfos.forEach((testCaseInfo, i) => {",
													"            if(testCaseInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testCaseInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testCaseInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testCaseInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testCaseInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testCaseInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testCaseInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has attachments property`, () => {",
													"                    pm.expect(item.attachments.length).to.eql(testCaseInfo.attachments.length);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has version property`, () => {",
													"                    pm.expect(item.version).to.eql(testCaseInfo.version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has description property`, () => {",
													"                    pm.expect(item.description).to.eql(testCaseInfo.description);",
													"                });",
													"                pm.test(`Response data has items[${index}] has precondition property`, () => {",
													"                    pm.expect(item.precondition).to.eql(testCaseInfo.precondition);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testCaseInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testCaseInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_steps object`, () => {",
													"                    pm.expect(item.test_steps.length).to.eql(testCaseInfo.test_steps.length);",
													"                });",
													"                item.test_steps.forEach((testStep, index2) => {",
													"                    testCaseInfo.test_steps.forEach((testStepItem, i2) => {",
													"                        if(testStep.id === testStepItem.id){",
													"                            pm.test(`Response data has test step at ${index2}`, () => {",
													"                                pm.expect(testStep.description).to.eql(testStepItem.description);",
													"                                pm.expect(testStep.expected).to.eql(testStepItem.expected);",
													"                                pm.expect(testStep.order).to.eql(testStepItem.order);",
													"                                pm.expect(testStep.links).to.not.eql(null);",
													"                                pm.expect(testStep.attachments).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "69708c01-6758-48d7-b604-9289962f0e91",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Has Executed Test Run Instances' = 'YES'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query test cases with criteria has executed test run instances by value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f4241dd-8010-460f-95c0-9df9db9c17e8",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testCaseInfos = [ pm.environment.get(\"testCaseInfo2\"),",
													"    pm.environment.get(\"testCaseInfo3\"), pm.environment.get(\"testCaseInfo4\")",
													"];",
													"",
													"testCaseInfos[0].attachments = [];",
													"testCaseInfos[1].attachments = [];",
													"testCaseInfos[2].attachments = [];",
													"",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testCaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items,\"order\");",
													"    // Customize attachment href and web_url before verification",
													"    // test-steps string in href and web_url of test case 4  when the test case have not been approved",
													"    jsonData.items[2].test_steps[0].attachments[0].links[0].href = jsonData.items[2].test_steps[0].attachments[0].links[0].href.replace(\"test-steps/\", \"\");",
													"    jsonData.items[2].test_steps[0].attachments[0].web_url = jsonData.items[2].test_steps[0].attachments[0].web_url.replace(\"teststep\", \"\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testCaseInfos.forEach((testCaseInfo, i) => {",
													"            if(testCaseInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testCaseInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testCaseInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testCaseInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testCaseInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testCaseInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testCaseInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has attachments property`, () => {",
													"                    pm.expect(item.attachments.length).to.eql(testCaseInfo.attachments.length);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has version property`, () => {",
													"                    pm.expect(item.version).to.eql(testCaseInfo.version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has description property`, () => {",
													"                    pm.expect(item.description).to.eql(testCaseInfo.description);",
													"                });",
													"                pm.test(`Response data has items[${index}] has precondition property`, () => {",
													"                    pm.expect(item.precondition).to.eql(testCaseInfo.precondition);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testCaseInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testCaseInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_steps object`, () => {",
													"                    pm.expect(item.test_steps.length).to.eql(testCaseInfo.test_steps.length);",
													"                });",
													"                item.test_steps.forEach((testStep, index2) => {",
													"                    testCaseInfo.test_steps.forEach((testStepItem, i2) => {",
													"                        if(testStep.id === testStepItem.id){",
													"                            pm.test(`Response data has test step at ${index2}`, () => {",
													"                                pm.expect(testStep.description).to.eql(testStepItem.description);",
													"                                pm.expect(testStep.expected).to.eql(testStepItem.expected);",
													"                                pm.expect(testStep.order).to.eql(testStepItem.order);",
													"                                pm.expect(testStep.links).to.not.eql(null);",
													"                                pm.expect(testStep.attachments).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "730c4d51-c640-4dd1-8020-d3c34efa5e61",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Has Executed Test Run Instances' = 'something'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test cases and criteria has test run instances",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8643d98-4949-4c0b-b678-14b20d1b12e2",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testCaseInfos = [pm.environment.get(\"testCaseInfo1\"), pm.environment.get(\"testCaseInfo2\"),",
													"    pm.environment.get(\"testCaseInfo3\")];",
													"    ",
													"testCaseInfos[0].attachments = [];",
													"testCaseInfos[1].attachments = [];",
													"testCaseInfos[2].attachments = [];",
													"",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testCaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items,\"order\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testCaseInfos.forEach((testCaseInfo, i) => {",
													"            if(testCaseInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testCaseInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testCaseInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testCaseInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testCaseInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testCaseInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testCaseInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has attachments property`, () => {",
													"                    pm.expect(item.attachments.length).to.eql(testCaseInfo.attachments.length);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has version property`, () => {",
													"                    pm.expect(item.version).to.eql(testCaseInfo.version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has description property`, () => {",
													"                    pm.expect(item.description).to.eql(testCaseInfo.description);",
													"                });",
													"                pm.test(`Response data has items[${index}] has precondition property`, () => {",
													"                    pm.expect(item.precondition).to.eql(testCaseInfo.precondition);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testCaseInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testCaseInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_steps object`, () => {",
													"                    pm.expect(item.test_steps.length).to.eql(testCaseInfo.test_steps.length);",
													"                });",
													"                item.test_steps.forEach((testStep, index2) => {",
													"                    testCaseInfo.test_steps.forEach((testStepItem, i2) => {",
													"                        if(testStep.id === testStepItem.id){",
													"                            pm.test(`Response data has test step at ${index2}`, () => {",
													"                                pm.expect(testStep.description).to.eql(testStepItem.description);",
													"                                pm.expect(testStep.expected).to.eql(testStepItem.expected);",
													"                                pm.expect(testStep.order).to.eql(testStepItem.order);",
													"                                pm.expect(testStep.links).to.not.eql(null);",
													"                                pm.expect(testStep.attachments).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1d1e0967-8573-4f5a-8c90-1f0287d8f0d9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Has Test Run Instances' = 'YES' \"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query test cases with criteria has test run instances by value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "66a999e7-2ac0-48a2-b0e5-131f597fce91",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testCaseInfos = [pm.environment.get(\"testCaseInfo4\")];",
													"",
													"testCaseInfos[0].attachments = [];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testCaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    jsonData.items[0].test_steps[0].attachments[0].links[0].href = jsonData.items[0].test_steps[0].attachments[0].links[0].href.replace(\"test-steps/\", \"\");",
													"    jsonData.items[0].test_steps[0].attachments[0].web_url = jsonData.items[0].test_steps[0].attachments[0].web_url.replace(\"teststep\", \"\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testCaseInfos.forEach((testCaseInfo, i) => {",
													"            if(testCaseInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testCaseInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testCaseInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testCaseInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testCaseInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testCaseInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testCaseInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has attachments property`, () => {",
													"                    pm.expect(item.attachments.length).to.eql(testCaseInfo.attachments.length);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has version property`, () => {",
													"                    pm.expect(item.version).to.eql(testCaseInfo.version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has description property`, () => {",
													"                    pm.expect(item.description).to.eql(testCaseInfo.description);",
													"                });",
													"                pm.test(`Response data has items[${index}] has precondition property`, () => {",
													"                    pm.expect(item.precondition).to.eql(testCaseInfo.precondition);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testCaseInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testCaseInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_steps object`, () => {",
													"                    pm.expect(item.test_steps.length).to.eql(testCaseInfo.test_steps.length);",
													"                });",
													"                item.test_steps.forEach((testStep, index2) => {",
													"                    testCaseInfo.test_steps.forEach((testStepItem, i2) => {",
													"                        if(testStep.id === testStepItem.id){",
													"                            pm.test(`Response data has test step at ${index2}`, () => {",
													"                                pm.expect(testStep.description).to.eql(testStepItem.description);",
													"                                pm.expect(testStep.expected).to.eql(testStepItem.expected);",
													"                                pm.expect(testStep.order).to.eql(testStepItem.order);",
													"                                pm.expect(testStep.links).to.not.eql(null);",
													"                                pm.expect(testStep.attachments).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "71582a61-0fdd-4611-bdf3-ae55ad155538",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Has Test Run Instances' = 'something'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test cases and criteria has attachments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d489a336-14b3-4fd4-84ca-d0106b122f8e",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testCaseInfos = [];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testCaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f4a455d4-54db-4b72-875d-6705d2b6f7d4",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Has Attachments' = 'YES' \"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query test cases with criteria has attachments by value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "53c6caeb-fc4e-48ac-a3d8-85f7ea88187f",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testCaseInfos = [pm.environment.get(\"testCaseInfo1\"), pm.environment.get(\"testCaseInfo2\"),",
													"    pm.environment.get(\"testCaseInfo3\"), pm.environment.get(\"testCaseInfo4\")",
													"];",
													"",
													"testCaseInfos[0].attachments = [];",
													"testCaseInfos[1].attachments = [];",
													"testCaseInfos[2].attachments = [];",
													"testCaseInfos[3].attachments = [];",
													"",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testCaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items,\"order\");",
													"    // Customize attachment href and web_url before verification",
													"    // test-steps string in href and web_url of test case 4  when the test case have not been approved",
													"    jsonData.items[3].test_steps[0].attachments[0].links[0].href = jsonData.items[3].test_steps[0].attachments[0].links[0].href.replace(\"test-steps/\", \"\");",
													"    jsonData.items[3].test_steps[0].attachments[0].web_url = jsonData.items[3].test_steps[0].attachments[0].web_url.replace(\"teststep\", \"\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testCaseInfos.forEach((testCaseInfo, i) => {",
													"            if(testCaseInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testCaseInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testCaseInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testCaseInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testCaseInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testCaseInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testCaseInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has attachments property`, () => {",
													"                    pm.expect(item.attachments.length).to.eql(testCaseInfo.attachments.length);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has version property`, () => {",
													"                    pm.expect(item.version).to.eql(testCaseInfo.version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has description property`, () => {",
													"                    pm.expect(item.description).to.eql(testCaseInfo.description);",
													"                });",
													"                pm.test(`Response data has items[${index}] has precondition property`, () => {",
													"                    pm.expect(item.precondition).to.eql(testCaseInfo.precondition);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testCaseInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testCaseInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_steps object`, () => {",
													"                    pm.expect(item.test_steps.length).to.eql(testCaseInfo.test_steps.length);",
													"                });",
													"                item.test_steps.forEach((testStep, index2) => {",
													"                    testCaseInfo.test_steps.forEach((testStepItem, i2) => {",
													"                        if(testStep.id === testStepItem.id){",
													"                            pm.test(`Response data has test step at ${index2}`, () => {",
													"                                pm.expect(testStep.description).to.eql(testStepItem.description);",
													"                                pm.expect(testStep.expected).to.eql(testStepItem.expected);",
													"                                pm.expect(testStep.order).to.eql(testStepItem.order);",
													"                                pm.expect(testStep.links).to.not.eql(null);",
													"                                pm.expect(testStep.attachments).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8dc18dd2-8c35-4396-a3ea-8a6ad8224bd3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Has Attachments' = 'something'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test cases and criteria has test steps",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ecf8e7c8-5d30-45ea-bc12-70db16a51227",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testCaseInfos = [pm.environment.get(\"testCaseInfo1\"), pm.environment.get(\"testCaseInfo2\"),",
													"    pm.environment.get(\"testCaseInfo3\"), pm.environment.get(\"testCaseInfo4\")",
													"];",
													"testCaseInfos[0].attachments = [];",
													"testCaseInfos[1].attachments = [];",
													"testCaseInfos[2].attachments = [];",
													"testCaseInfos[3].attachments = [];",
													"",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testCaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items,\"order\");",
													"    // Customize attachment href and web_url before verification",
													"    // test-steps string in href and web_url of test case 4  when the test case have not been approved",
													"    jsonData.items[3].test_steps[0].attachments[0].links[0].href = jsonData.items[3].test_steps[0].attachments[0].links[0].href.replace(\"test-steps/\", \"\");",
													"    jsonData.items[3].test_steps[0].attachments[0].web_url = jsonData.items[3].test_steps[0].attachments[0].web_url.replace(\"teststep\", \"\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testCaseInfos.forEach((testCaseInfo, i) => {",
													"            if(testCaseInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testCaseInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testCaseInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testCaseInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testCaseInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testCaseInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testCaseInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has attachments property`, () => {",
													"                    pm.expect(item.attachments.length).to.eql(testCaseInfo.attachments.length);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has version property`, () => {",
													"                    pm.expect(item.version).to.eql(testCaseInfo.version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has description property`, () => {",
													"                    pm.expect(item.description).to.eql(testCaseInfo.description);",
													"                });",
													"                pm.test(`Response data has items[${index}] has precondition property`, () => {",
													"                    pm.expect(item.precondition).to.eql(testCaseInfo.precondition);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testCaseInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testCaseInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_steps object`, () => {",
													"                    pm.expect(item.test_steps.length).to.eql(testCaseInfo.test_steps.length);",
													"                });",
													"                item.test_steps.forEach((testStep, index2) => {",
													"                    testCaseInfo.test_steps.forEach((testStepItem, i2) => {",
													"                        if(testStep.id === testStepItem.id){",
													"                            pm.test(`Response data has test step at ${index2}`, () => {",
													"                                pm.expect(testStep.description).to.eql(testStepItem.description);",
													"                                pm.expect(testStep.expected).to.eql(testStepItem.expected);",
													"                                pm.expect(testStep.order).to.eql(testStepItem.order);",
													"                                pm.expect(testStep.links).to.not.eql(null);",
													"                                pm.expect(testStep.attachments).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "daa23c30-7ea4-46b9-b6bd-28ee37af2fa1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Has Test Step' = 'YES' \"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query test cases with criteria has test step by value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "05324341-c927-47b4-aefe-636b76ff7a68",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testCaseInfos = [];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testCaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "48811ab1-e504-4420-a2e9-6b1ae1be0d89",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Has Test Step' = 'something'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test cases and criteria is approved",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c4001a8-5465-4373-92c9-58b870b2d82c",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testCaseInfos = [pm.environment.get(\"testCaseInfo1\"), pm.environment.get(\"testCaseInfo2\"),",
													"    pm.environment.get(\"testCaseInfo3\")];",
													"",
													"testCaseInfos[0].attachments = [];",
													"testCaseInfos[1].attachments = [];",
													"testCaseInfos[2].attachments = [];",
													"",
													"",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testCaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items,\"order\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testCaseInfos.forEach((testCaseInfo, i) => {",
													"            if(testCaseInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testCaseInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testCaseInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testCaseInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testCaseInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testCaseInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testCaseInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has attachments property`, () => {",
													"                    pm.expect(item.attachments.length).to.eql(testCaseInfo.attachments.length);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has version property`, () => {",
													"                    pm.expect(item.version).to.eql(testCaseInfo.version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has description property`, () => {",
													"                    pm.expect(item.description).to.eql(testCaseInfo.description);",
													"                });",
													"                pm.test(`Response data has items[${index}] has precondition property`, () => {",
													"                    pm.expect(item.precondition).to.eql(testCaseInfo.precondition);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testCaseInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testCaseInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_steps object`, () => {",
													"                    pm.expect(item.test_steps.length).to.eql(testCaseInfo.test_steps.length);",
													"                });",
													"                item.test_steps.forEach((testStep, index2) => {",
													"                    testCaseInfo.test_steps.forEach((testStepItem, i2) => {",
													"                        if(testStep.id === testStepItem.id){",
													"                            pm.test(`Response data has test step at ${index2}`, () => {",
													"                                pm.expect(testStep.description).to.eql(testStepItem.description);",
													"                                pm.expect(testStep.expected).to.eql(testStepItem.expected);",
													"                                pm.expect(testStep.order).to.eql(testStepItem.order);",
													"                                pm.expect(testStep.links).to.not.eql(null);",
													"                                pm.expect(testStep.attachments).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "177e093a-3091-4327-a79b-3c9251f91f0e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Is Approved' = 'YES' \"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query test cases with criteria is approved by value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ea2ff1ad-2387-4591-a0d9-710079888df3",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testCaseInfos = [pm.environment.get(\"testCaseInfo4\")];",
													"",
													"testCaseInfos[0].attachments = [];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testCaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    // Customize attachment href and web_url before verification",
													"    // test-steps string in href and web_url of test case 4  when the test case have not been approved",
													"    jsonData.items[0].test_steps[0].attachments[0].links[0].href = jsonData.items[0].test_steps[0].attachments[0].links[0].href.replace(\"test-steps/\", \"\");",
													"    jsonData.items[0].test_steps[0].attachments[0].web_url = jsonData.items[0].test_steps[0].attachments[0].web_url.replace(\"teststep\", \"\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testCaseInfos.forEach((testCaseInfo, i) => {",
													"            if(testCaseInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testCaseInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testCaseInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testCaseInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testCaseInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testCaseInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testCaseInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has attachments property`, () => {",
													"                    pm.expect(item.attachments.length).to.eql(testCaseInfo.attachments.length);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has version property`, () => {",
													"                    pm.expect(item.version).to.eql(testCaseInfo.version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has description property`, () => {",
													"                    pm.expect(item.description).to.eql(testCaseInfo.description);",
													"                });",
													"                pm.test(`Response data has items[${index}] has precondition property`, () => {",
													"                    pm.expect(item.precondition).to.eql(testCaseInfo.precondition);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testCaseInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testCaseInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_steps object`, () => {",
													"                    pm.expect(item.test_steps.length).to.eql(testCaseInfo.test_steps.length);",
													"                });",
													"                item.test_steps.forEach((testStep, index2) => {",
													"                    testCaseInfo.test_steps.forEach((testStepItem, i2) => {",
													"                        if(testStep.id === testStepItem.id){",
													"                            pm.test(`Response data has test step at ${index2}`, () => {",
													"                                pm.expect(testStep.description).to.eql(testStepItem.description);",
													"                                pm.expect(testStep.expected).to.eql(testStepItem.expected);",
													"                                pm.expect(testStep.order).to.eql(testStepItem.order);",
													"                                pm.expect(testStep.links).to.not.eql(null);",
													"                                pm.expect(testStep.attachments).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "01aed898-e9bc-48d5-a23a-fdbda871553a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Is Approved' = 'something'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test cases and criteria is called test case",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "13bde464-67a5-4e94-a8d6-8ba5bf3b9d69",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testCaseInfos = [pm.environment.get(\"testCaseInfo1\")];",
													"",
													"testCaseInfos[0].attachments = [];",
													"",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testCaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        testCaseInfos.forEach((testCaseInfo, i) => {",
													"            if(testCaseInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testCaseInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testCaseInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testCaseInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testCaseInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testCaseInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testCaseInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has attachments property`, () => {",
													"                    pm.expect(item.attachments.length).to.eql(testCaseInfo.attachments.length);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has version property`, () => {",
													"                    pm.expect(item.version).to.eql(testCaseInfo.version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has description property`, () => {",
													"                    pm.expect(item.description).to.eql(testCaseInfo.description);",
													"                });",
													"                pm.test(`Response data has items[${index}] has precondition property`, () => {",
													"                    pm.expect(item.precondition).to.eql(testCaseInfo.precondition);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testCaseInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testCaseInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_steps object`, () => {",
													"                    pm.expect(item.test_steps.length).to.eql(testCaseInfo.test_steps.length);",
													"                });",
													"                item.test_steps.forEach((testStep, index2) => {",
													"                    testCaseInfo.test_steps.forEach((testStepItem, i2) => {",
													"                        if(testStep.id === testStepItem.id){",
													"                            pm.test(`Response data has test step at ${index2}`, () => {",
													"                                pm.expect(testStep.description).to.eql(testStepItem.description);",
													"                                pm.expect(testStep.expected).to.eql(testStepItem.expected);",
													"                                pm.expect(testStep.order).to.eql(testStepItem.order);",
													"                                pm.expect(testStep.links).to.not.eql(null);",
													"                                pm.expect(testStep.attachments).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6dacff9e-fc5d-4ed5-8b7f-ac0a9f47bfb2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Is Called Test Case' = 'YES' \"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query test cases with criteria is called test case by value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c0ce4cb3-6b80-4a58-8b9a-4dce2807bf66",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testCaseInfos = [pm.environment.get(\"testCaseInfo2\"),",
													"    pm.environment.get(\"testCaseInfo3\"), pm.environment.get(\"testCaseInfo4\")",
													"];",
													"",
													"testCaseInfos[0].attachments = [];",
													"testCaseInfos[1].attachments = [];",
													"testCaseInfos[2].attachments = [];",
													"",
													"",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testCaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items,\"order\");",
													"    // Customize attachment href and web_url before verification",
													"    // test-steps string in href and web_url of test case 4  when the test case have not been approved",
													"    jsonData.items[2].test_steps[0].attachments[0].links[0].href = jsonData.items[2].test_steps[0].attachments[0].links[0].href.replace(\"test-steps/\", \"\");",
													"    jsonData.items[2].test_steps[0].attachments[0].web_url = jsonData.items[2].test_steps[0].attachments[0].web_url.replace(\"teststep\", \"\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testCaseInfos.forEach((testCaseInfo, i) => {",
													"            if(testCaseInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testCaseInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testCaseInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testCaseInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testCaseInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testCaseInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testCaseInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has attachments property`, () => {",
													"                    pm.expect(item.attachments.length).to.eql(testCaseInfo.attachments.length);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has version property`, () => {",
													"                    pm.expect(item.version).to.eql(testCaseInfo.version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has description property`, () => {",
													"                    pm.expect(item.description).to.eql(testCaseInfo.description);",
													"                });",
													"                pm.test(`Response data has items[${index}] has precondition property`, () => {",
													"                    pm.expect(item.precondition).to.eql(testCaseInfo.precondition);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testCaseInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testCaseInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_steps object`, () => {",
													"                    pm.expect(item.test_steps.length).to.eql(testCaseInfo.test_steps.length);",
													"                });",
													"                item.test_steps.forEach((testStep, index2) => {",
													"                    testCaseInfo.test_steps.forEach((testStepItem, i2) => {",
													"                        if(testStep.id === testStepItem.id){",
													"                            pm.test(`Response data has test step at ${index2}`, () => {",
													"                                pm.expect(testStep.description).to.eql(testStepItem.description);",
													"                                pm.expect(testStep.expected).to.eql(testStepItem.expected);",
													"                                pm.expect(testStep.order).to.eql(testStepItem.order);",
													"                                pm.expect(testStep.links).to.not.eql(null);",
													"                                pm.expect(testStep.attachments).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c50a5c34-65ad-4901-acf9-e17a12f1fc69",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Is Called Test Case' = 'something'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test cases and criteria is calling test case",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "921004b1-fc85-4fc0-8c70-af7bae8a79e2",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testCaseInfos = [pm.environment.get(\"testCaseInfo3\")];",
													"testCaseInfos[0].attachments = [];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testCaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        testCaseInfos.forEach((testCaseInfo, i) => {",
													"            if(testCaseInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testCaseInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testCaseInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testCaseInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testCaseInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testCaseInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testCaseInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has attachments property`, () => {",
													"                    pm.expect(item.attachments.length).to.eql(testCaseInfo.attachments.length);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has version property`, () => {",
													"                    pm.expect(item.version).to.eql(testCaseInfo.version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has description property`, () => {",
													"                    pm.expect(item.description).to.eql(testCaseInfo.description);",
													"                });",
													"                pm.test(`Response data has items[${index}] has precondition property`, () => {",
													"                    pm.expect(item.precondition).to.eql(testCaseInfo.precondition);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testCaseInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testCaseInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_steps object`, () => {",
													"                    pm.expect(item.test_steps.length).to.eql(testCaseInfo.test_steps.length);",
													"                });",
													"                item.test_steps.forEach((testStep, index2) => {",
													"                    testCaseInfo.test_steps.forEach((testStepItem, i2) => {",
													"                        if(testStep.id === testStepItem.id){",
													"                            pm.test(`Response data has test step at ${index2}`, () => {",
													"                                pm.expect(testStep.description).to.eql(testStepItem.description);",
													"                                pm.expect(testStep.expected).to.eql(testStepItem.expected);",
													"                                pm.expect(testStep.order).to.eql(testStepItem.order);",
													"                                pm.expect(testStep.links).to.not.eql(null);",
													"                                pm.expect(testStep.attachments).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "78a65dda-5442-4116-b7e9-2a8200b4a08c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Is Calling Test Case' = 'YES' \"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query test cases with criteria is calling test case by value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c59dab7-a4f8-4e48-ac8c-8e662f422166",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testCaseInfos = [pm.environment.get(\"testCaseInfo1\"), pm.environment.get(\"testCaseInfo2\"),",
													"    pm.environment.get(\"testCaseInfo4\")",
													"];",
													"",
													"testCaseInfos[0].attachments = [];",
													"testCaseInfos[1].attachments = [];",
													"testCaseInfos[2].attachments = [];",
													"",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testCaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"order\");",
													"    // Customize attachment href and web_url before verification",
													"    // test-steps string in href and web_url of test case 4  when the test case have not been approved",
													"    jsonData.items[2].test_steps[0].attachments[0].links[0].href = jsonData.items[2].test_steps[0].attachments[0].links[0].href.replace(\"test-steps/\", \"\");",
													"    jsonData.items[2].test_steps[0].attachments[0].web_url = jsonData.items[2].test_steps[0].attachments[0].web_url.replace(\"teststep\", \"\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testCaseInfos.forEach((testCaseInfo, i) => {",
													"            if(testCaseInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testCaseInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testCaseInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testCaseInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testCaseInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testCaseInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testCaseInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has attachments property`, () => {",
													"                    pm.expect(item.attachments.length).to.eql(testCaseInfo.attachments.length);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has version property`, () => {",
													"                    pm.expect(item.version).to.eql(testCaseInfo.version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has description property`, () => {",
													"                    pm.expect(item.description).to.eql(testCaseInfo.description);",
													"                });",
													"                pm.test(`Response data has items[${index}] has precondition property`, () => {",
													"                    pm.expect(item.precondition).to.eql(testCaseInfo.precondition);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testCaseInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testCaseInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_steps object`, () => {",
													"                    pm.expect(item.test_steps.length).to.eql(testCaseInfo.test_steps.length);",
													"                });",
													"                item.test_steps.forEach((testStep, index2) => {",
													"                    testCaseInfo.test_steps.forEach((testStepItem, i2) => {",
													"                        if(testStep.id === testStepItem.id){",
													"                            pm.test(`Response data has test step at ${index2}`, () => {",
													"                                pm.expect(testStep.description).to.eql(testStepItem.description);",
													"                                pm.expect(testStep.expected).to.eql(testStepItem.expected);",
													"                                pm.expect(testStep.order).to.eql(testStepItem.order);",
													"                                pm.expect(testStep.links).to.not.eql(null);",
													"                                pm.expect(testStep.attachments).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "726c0600-9114-4465-97cc-366d039afc46",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Is Calling Test Case' = 'something'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test cases and criteria subscribers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b17a62ae-7c2b-4e52-9b17-babca92d695c",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testCaseInfos = [pm.environment.get(\"testCaseInfo1\")];",
													"testCaseInfos[0].attachments = [];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testCaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        testCaseInfos.forEach((testCaseInfo, i) => {",
													"            if(testCaseInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testCaseInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testCaseInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testCaseInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testCaseInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testCaseInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testCaseInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has attachments property`, () => {",
													"                    pm.expect(item.attachments.length).to.eql(testCaseInfo.attachments.length);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has version property`, () => {",
													"                    pm.expect(item.version).to.eql(testCaseInfo.version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has description property`, () => {",
													"                    pm.expect(item.description).to.eql(testCaseInfo.description);",
													"                });",
													"                pm.test(`Response data has items[${index}] has precondition property`, () => {",
													"                    pm.expect(item.precondition).to.eql(testCaseInfo.precondition);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testCaseInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testCaseInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_steps object`, () => {",
													"                    pm.expect(item.test_steps.length).to.eql(testCaseInfo.test_steps.length);",
													"                });",
													"                item.test_steps.forEach((testStep, index2) => {",
													"                    testCaseInfo.test_steps.forEach((testStepItem, i2) => {",
													"                        if(testStep.id === testStepItem.id){",
													"                            pm.test(`Response data has test step at ${index2}`, () => {",
													"                                pm.expect(testStep.description).to.eql(testStepItem.description);",
													"                                pm.expect(testStep.expected).to.eql(testStepItem.expected);",
													"                                pm.expect(testStep.order).to.eql(testStepItem.order);",
													"                                pm.expect(testStep.links).to.not.eql(null);",
													"                                pm.expect(testStep.attachments).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "737ef033-cdaa-450e-a930-cc34eee49103",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'subscribers' = '{{userTestId}}' \"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query test cases with criteria subscribers by user full name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "178866c5-626f-4817-bf55-0a8330e4f445",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testCaseInfos = [];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testCaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d22d00cc-c30d-46f7-846c-840a3151689e",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'subscribers' = '{{userTestFulName}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test cases and criteria created date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f2f481cd-c107-48db-8e06-99ed2efd3391",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testCaseInfos = [pm.environment.get(\"testCaseInfo1\"), pm.environment.get(\"testCaseInfo2\"),",
													"    pm.environment.get(\"testCaseInfo3\"), pm.environment.get(\"testCaseInfo4\")",
													"];",
													"",
													"testCaseInfos[0].attachments = [];",
													"testCaseInfos[1].attachments = [];",
													"testCaseInfos[2].attachments = [];",
													"testCaseInfos[3].attachments = [];",
													"",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testCaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items,\"order\");",
													"    // Customize attachment href and web_url before verification",
													"    // test-steps string in href and web_url of test case 4  when the test case have not been approved",
													"    jsonData.items[3].test_steps[0].attachments[0].links[0].href = jsonData.items[3].test_steps[0].attachments[0].links[0].href.replace(\"test-steps/\", \"\");",
													"    jsonData.items[3].test_steps[0].attachments[0].web_url = jsonData.items[3].test_steps[0].attachments[0].web_url.replace(\"teststep\", \"\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testCaseInfos.forEach((testCaseInfo, i) => {",
													"            if(testCaseInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testCaseInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testCaseInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testCaseInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testCaseInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testCaseInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testCaseInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has attachments property`, () => {",
													"                    pm.expect(item.attachments.length).to.eql(testCaseInfo.attachments.length);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has version property`, () => {",
													"                    pm.expect(item.version).to.eql(testCaseInfo.version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has description property`, () => {",
													"                    pm.expect(item.description).to.eql(testCaseInfo.description);",
													"                });",
													"                pm.test(`Response data has items[${index}] has precondition property`, () => {",
													"                    pm.expect(item.precondition).to.eql(testCaseInfo.precondition);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testCaseInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testCaseInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_steps object`, () => {",
													"                    pm.expect(item.test_steps.length).to.eql(testCaseInfo.test_steps.length);",
													"                });",
													"                item.test_steps.forEach((testStep, index2) => {",
													"                    testCaseInfo.test_steps.forEach((testStepItem, i2) => {",
													"                        if(testStep.id === testStepItem.id){",
													"                            pm.test(`Response data has test step at ${index2}`, () => {",
													"                                pm.expect(testStep.description).to.eql(testStepItem.description);",
													"                                pm.expect(testStep.expected).to.eql(testStepItem.expected);",
													"                                pm.expect(testStep.order).to.eql(testStepItem.order);",
													"                                pm.expect(testStep.links).to.not.eql(null);",
													"                                pm.expect(testStep.attachments).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9dab6f6e-b565-4535-9624-4cf859754ad4",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"dateToCompare\", today.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'created date' < '{{dateToCompare}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test cases and criteria last modified date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "63685e6e-0e9e-44d3-90fd-a7a3ea4c0ac8",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testCaseInfos = [pm.environment.get(\"testCaseInfo1\"), pm.environment.get(\"testCaseInfo2\"),",
													"    pm.environment.get(\"testCaseInfo3\"), pm.environment.get(\"testCaseInfo4\")",
													"];",
													"",
													"testCaseInfos[0].attachments = [];",
													"testCaseInfos[1].attachments = [];",
													"testCaseInfos[2].attachments = [];",
													"testCaseInfos[3].attachments = [];",
													"",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testCaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items,\"order\");",
													"    // Customize attachment href and web_url before verification",
													"    // test-steps string in href and web_url of test case 4  when the test case have not been approved",
													"    jsonData.items[3].test_steps[0].attachments[0].links[0].href = jsonData.items[3].test_steps[0].attachments[0].links[0].href.replace(\"test-steps/\", \"\");",
													"    jsonData.items[3].test_steps[0].attachments[0].web_url = jsonData.items[3].test_steps[0].attachments[0].web_url.replace(\"teststep\", \"\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testCaseInfos.forEach((testCaseInfo, i) => {",
													"            if(testCaseInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testCaseInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testCaseInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testCaseInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testCaseInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testCaseInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testCaseInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has attachments property`, () => {",
													"                    pm.expect(item.attachments.length).to.eql(testCaseInfo.attachments.length);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has version property`, () => {",
													"                    pm.expect(item.version).to.eql(testCaseInfo.version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has description property`, () => {",
													"                    pm.expect(item.description).to.eql(testCaseInfo.description);",
													"                });",
													"                pm.test(`Response data has items[${index}] has precondition property`, () => {",
													"                    pm.expect(item.precondition).to.eql(testCaseInfo.precondition);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testCaseInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testCaseInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_steps object`, () => {",
													"                    pm.expect(item.test_steps.length).to.eql(testCaseInfo.test_steps.length);",
													"                });",
													"                item.test_steps.forEach((testStep, index2) => {",
													"                    testCaseInfo.test_steps.forEach((testStepItem, i2) => {",
													"                        if(testStep.id === testStepItem.id){",
													"                            pm.test(`Response data has test step at ${index2}`, () => {",
													"                                pm.expect(testStep.description).to.eql(testStepItem.description);",
													"                                pm.expect(testStep.expected).to.eql(testStepItem.expected);",
													"                                pm.expect(testStep.order).to.eql(testStepItem.order);",
													"                                pm.expect(testStep.links).to.not.eql(null);",
													"                                pm.expect(testStep.attachments).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9b87eb3e-fa15-4cee-8be0-47201980d478",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"dateToCompare\", today.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'last modified date' < '{{dateToCompare}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test cases and criteria last modified user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9e9f7ddc-5761-4883-8a4e-7ed5a56e3477",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testCaseInfos = [pm.environment.get(\"testCaseInfo1\"), pm.environment.get(\"testCaseInfo2\"),",
													"    pm.environment.get(\"testCaseInfo3\"), pm.environment.get(\"testCaseInfo4\")",
													"];",
													"",
													"testCaseInfos[0].attachments = [];",
													"testCaseInfos[1].attachments = [];",
													"testCaseInfos[2].attachments = [];",
													"testCaseInfos[3].attachments = [];",
													"",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testCaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items,\"order\");",
													"    // Customize attachment href and web_url before verification",
													"    // test-steps string in href and web_url of test case 4  when the test case have not been approved",
													"    jsonData.items[3].test_steps[0].attachments[0].links[0].href = jsonData.items[3].test_steps[0].attachments[0].links[0].href.replace(\"test-steps/\", \"\");",
													"    jsonData.items[3].test_steps[0].attachments[0].web_url = jsonData.items[3].test_steps[0].attachments[0].web_url.replace(\"teststep\", \"\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testCaseInfos.forEach((testCaseInfo, i) => {",
													"            if(testCaseInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testCaseInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testCaseInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testCaseInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testCaseInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testCaseInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testCaseInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has attachments property`, () => {",
													"                    pm.expect(item.attachments.length).to.eql(testCaseInfo.attachments.length);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has version property`, () => {",
													"                    pm.expect(item.version).to.eql(testCaseInfo.version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has description property`, () => {",
													"                    pm.expect(item.description).to.eql(testCaseInfo.description);",
													"                });",
													"                pm.test(`Response data has items[${index}] has precondition property`, () => {",
													"                    pm.expect(item.precondition).to.eql(testCaseInfo.precondition);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testCaseInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testCaseInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_steps object`, () => {",
													"                    pm.expect(item.test_steps.length).to.eql(testCaseInfo.test_steps.length);",
													"                });",
													"                item.test_steps.forEach((testStep, index2) => {",
													"                    testCaseInfo.test_steps.forEach((testStepItem, i2) => {",
													"                        if(testStep.id === testStepItem.id){",
													"                            pm.test(`Response data has test step at ${index2}`, () => {",
													"                                pm.expect(testStep.description).to.eql(testStepItem.description);",
													"                                pm.expect(testStep.expected).to.eql(testStepItem.expected);",
													"                                pm.expect(testStep.order).to.eql(testStepItem.order);",
													"                                pm.expect(testStep.links).to.not.eql(null);",
													"                                pm.expect(testStep.attachments).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8218226b-de95-4fa1-a301-f23504f11472",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'last modified user' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query test cases with criteria last modified user by user full name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f5b6d99f-404a-4274-a6c8-18b41cd56b1e",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testCaseInfos = [pm.environment.get(\"testCaseInfo1\"), pm.environment.get(\"testCaseInfo2\"),",
													"    pm.environment.get(\"testCaseInfo3\"), pm.environment.get(\"testCaseInfo4\")",
													"];",
													"",
													"testCaseInfos[0].attachments = [];",
													"testCaseInfos[1].attachments = [];",
													"testCaseInfos[2].attachments = [];",
													"testCaseInfos[3].attachments = [];",
													"",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testCaseInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testCaseInfos.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items,\"order\");",
													"    // Customize attachment href and web_url before verification",
													"    // test-steps string in href and web_url of test case 4  when the test case have not been approved",
													"    jsonData.items[3].test_steps[0].attachments[0].links[0].href = jsonData.items[3].test_steps[0].attachments[0].links[0].href.replace(\"test-steps/\", \"\");",
													"    jsonData.items[3].test_steps[0].attachments[0].web_url = jsonData.items[3].test_steps[0].attachments[0].web_url.replace(\"teststep\", \"\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testCaseInfos.forEach((testCaseInfo, i) => {",
													"            if(testCaseInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testCaseInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testCaseInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testCaseInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testCaseInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testCaseInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testCaseInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has attachments property`, () => {",
													"                    pm.expect(item.attachments.length).to.eql(testCaseInfo.attachments.length);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has version property`, () => {",
													"                    pm.expect(item.version).to.eql(testCaseInfo.version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has description property`, () => {",
													"                    pm.expect(item.description).to.eql(testCaseInfo.description);",
													"                });",
													"                pm.test(`Response data has items[${index}] has precondition property`, () => {",
													"                    pm.expect(item.precondition).to.eql(testCaseInfo.precondition);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testCaseInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testCaseInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_steps object`, () => {",
													"                    pm.expect(item.test_steps.length).to.eql(testCaseInfo.test_steps.length);",
													"                });",
													"                item.test_steps.forEach((testStep, index2) => {",
													"                    testCaseInfo.test_steps.forEach((testStepItem, i2) => {",
													"                        if(testStep.id === testStepItem.id){",
													"                            pm.test(`Response data has test step at ${index2}`, () => {",
													"                                pm.expect(testStep.description).to.eql(testStepItem.description);",
													"                                pm.expect(testStep.expected).to.eql(testStepItem.expected);",
													"                                pm.expect(testStep.order).to.eql(testStepItem.order);",
													"                                pm.expect(testStep.links).to.not.eql(null);",
													"                                pm.expect(testStep.attachments).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0f5403f1-33ee-4cb7-8bca-7aa000926330",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'last modified user' = '{{userTestFullName}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Query objects - Query test cases with invalid test case id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "daaba276-8d5d-46e3-bf62-0708e7852ea4",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 400;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"   pm.test(\"Response data has property message contains: For input string\", () => {",
													"       pm.expect(jsonData.message).to.eql(`For input string: \\\"${pm.environment.get(\"newTestCaseId1\")}${pm.environment.get(\"invalidPostfix\")}\\\"`);",
													"   });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d7836aae-ab19-4d06-8217-278001f91241",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"invalidPostfix\", \"abcd\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"query\": \"'id' = '{{newTestCaseId1}}{{invalidPostfix}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Test with test runs",
							"item": [
								{
									"name": "200 - Query objects - Success with object type test runs and criteria id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b0dc2bef-82de-4823-9e41-29ee96221a52",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\")];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e268e209-18ae-488d-9e9f-cee5ddeb50e8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'id' = '{{newTestRunId1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f7e2585-9369-4421-8836-97736f06aab4",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo2\")];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f7fdb382-b6fc-4946-b21b-05efb42a5304",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'name' ~ 'Test Run 2'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria creator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9317f29c-f6cb-4a3b-bc3a-9833f6cc10f6",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo2\"), pm.environment.get(\"testRunInfo3\"),",
													"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "31d0d564-9675-4a65-ad2f-5c1a52e575d2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'creator' = '{{userTestFullName}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria environment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d8c62c33-a346-470e-bdde-d55df53c0dc3",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo2\"), pm.environment.get(\"testRunInfo3\"),",
													"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "959f514c-647c-46d4-9adf-c31ee7034b69",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'environment' is 'empty'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9c1e55e1-6f56-46ac-be97-1a59e90badd9",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "acaf1241-9504-4884-9529-32a45a0f03e1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'release' = '{{newReleaseId1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria priority",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1655d996-0254-405d-8bef-2ba5582917e1",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo2\"), pm.environment.get(\"testRunInfo3\"),",
													"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "998509d1-1782-4a76-8382-ad3b2dec613d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'priority' = 'medium'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dce85221-b253-4a73-a37b-5142eefe6736",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\")];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "44ebc306-3c16-4f83-bc29-32adcd685f9a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'status' = 'passed'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query test runs with criteria status by status id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "51ac7c2f-fe53-4be0-b6f8-4260066c2326",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\")];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "63b608ba-569e-4999-adc8-f5fdf2557da5",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'status' = '{{statusPassedId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria assigned to",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e84d64e3-3fd6-4b1c-b07a-04f8ad76bd19",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo2\"), pm.environment.get(\"testRunInfo3\"),",
													"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cceb7ffc-a10b-46d1-b7eb-7d8f4d9a75de",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'assigned to' = '{{userTestFullName}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria executed end",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "479d74f8-1308-4dd2-a87f-fb4a690140b3",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\")];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "590ae5c6-e8f8-4d93-8dcc-7574e93b0419",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"dateToCompare\", today.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'executed end' < '{{dateToCompare}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria executed start",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "145df5d3-87ad-47e3-9c97-f2d9e90d58f5",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\")];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "05f9009c-3330-4d0a-864f-b1538d0803b2",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"dateToCompare\", today.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'executed start' < '{{dateToCompare}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria execution type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ffdcb57c-b71d-49dc-a021-fb3091c75614",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo2\"), pm.environment.get(\"testRunInfo3\"),",
													"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "568cf73e-007a-4577-af66-2a22d63399d0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'execution type' = 'Smoke'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query test runs with criteria execution type by type id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "337778c3-2f6b-4724-887c-3224cf632bd5",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo2\"), pm.environment.get(\"testRunInfo3\"),",
													"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7019d225-e470-443a-b796-e39080cbb2ab",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'execution type' = '{{fieldIdTestRunExecutionTypeSmoke}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria execution planned end date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca27c662-dc91-431c-a334-beaeda032b5a",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fb5ee9ce-417f-4d13-9baa-de0213d5add1",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"dateToCompare\", today.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'planned end date' < '{{dateToCompare}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria execution planned start date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bbeb646a-66a6-4b5c-a01e-14bd245eead8",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo2\"), pm.environment.get(\"testRunInfo3\"),",
													"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9c6d1e68-f534-41d0-b9b6-fdd738f915eb",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"dateToCompare\", today.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'planned start date' < '{{dateToCompare}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria has association with requirements",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "06583afa-4b9c-40de-9420-ccc6235667df",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo2\"), pm.environment.get(\"testRunInfo3\"),",
													"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9deb5ccd-4ef1-4258-8f10-a12ffce3ae90",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Has Association with Requirements' = 'YES'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query test runs with criteria has association with requirements by value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "426399bc-cfc4-4105-8b31-397e637a4f86",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "521ee87b-c9bb-4ab2-9644-534204de3846",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Has Association with Requirements' = 'something'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria has attachments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d6f82919-a668-433c-8407-65ba91d186db",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5689d4e9-f1e1-44b3-8be3-f3de5d60d05a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Has Attachments' = 'YES' \"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query test runs with criteria has attachments by value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87811d8f-2e0a-4bbb-a26e-3f84eefdd291",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo2\"), pm.environment.get(\"testRunInfo3\"),",
													"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bb0153c4-0ec7-4890-af52-076cccc8a937",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Has Attachments' = 'something'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria has association with defects",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "64f7de1a-4586-4e18-8bd8-4663fd3cd35a",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\")];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e452b8ab-c371-4579-9bc8-f575385ea635",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Has Association with Defects' = 'YES' \"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query test runs with criteria has association with defects by value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "153ff2b6-63f5-471a-adf1-08960859c554",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo2\"), pm.environment.get(\"testRunInfo3\"),",
													"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "358116e7-2b78-4b52-ad56-5990e864dc6a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Has Association with Defects' = 'something' \"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria subscribers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2197dfa-4204-4b1a-803d-2e6bf4961884",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\")];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "17657230-455d-418c-8402-5fdf210ec385",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'subscribers' = '{{userTestId}}' \"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query test runs with criteria subscribers by user full name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dae989ba-acaa-4c69-aac3-5bc5ec4cf3ea",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ae6a8f66-86c8-4006-81b9-506da6bc2a64",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'subscribers' = '{{userTestFulName}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria target release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fe6da7d5-adb8-44b8-bb24-e07c542d3488",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8a2f980b-869e-4bad-85ba-954059247c9a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'target release' = '{{newReleaseName1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria target build",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58a1ce85-f3ab-406d-9f08-df68d9c27ba0",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "092a6778-3fce-479f-99a6-fed01b23fc16",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'target build' = '{{newBuildId1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria test cycle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fcedd2a0-a435-4287-b3e1-0164a4447e52",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3ff4f7c7-ee09-4300-9721-38dfa09df603",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Test Cycle' = '{{newCycleId1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Query objects - Query test runs with criteria test cycle by cycle Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d9b57111-c762-433b-9726-e990524b5689",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 400;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"   pm.test(\"Response data has property message contains: Please given an allowed value!\", () => {",
													"       pm.expect(jsonData.message).to.include(`Value '${pm.environment.get(\"newCycleName1\")}' is not allowed for field 'Test Cycle'. Please given an allowed value!`);",
													"   });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "06462d0d-fbb2-4dae-9ec1-bc341bc901d3",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Test Cycle' = '{{newCycleName1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria test suite",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f956ae50-8693-4868-92ad-65f0083cce0c",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo6\")];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f1770213-c7b6-4158-a0e4-ff9eaa31ef89",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Test Suite' = '{{newTestSuiteId1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Query objects - Query test runs with criteria test suite by test suite name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d8ce4b06-95a2-4f25-9e8c-e678827b8e85",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 400;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"   pm.test(\"Response data has property message contains: Please given an allowed value!\", () => {",
													"       pm.expect(jsonData.message).to.include(`Value '${pm.environment.get(\"newTestSuiteName1\")}' is not allowed for field 'Test Suite'. Please given an allowed value!`);",
													"   });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d30d53a0-d81f-4231-b5ed-f2ca5725e45f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Test Suite' = '{{newTestSuiteName1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria automation test run",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d7ab1dc-a43a-487e-9da7-fbc00ff21372",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo2\")];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6d391022-d8fa-4044-bc6f-ed61f2cc5f00",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Automation Test Run' = 'YES'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query test runs with criteria automation test run by value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c43075d5-c0df-4c97-8170-953cecf17011",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo3\"),",
													"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d0094555-cea3-4b5e-8f52-11cf7bddf865",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Automation Test Run' = 'something'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria number of runs",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "45dc8760-8966-4ccf-b96d-75d379cdfb80",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\")];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4c970e80-56ad-4431-9d7d-acc9e0080ddb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Number of runs' = '1'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria test case assigned to",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "609e1356-0472-445e-b384-a876cf3c8f03",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo2\"), pm.environment.get(\"testRunInfo3\"),",
													"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d90b225d-4bb4-4313-ad5e-fcbb9dc2a815",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Test Case Assigned To' = '{{userTestFullName}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query test runs with criteria test case assigned to by user Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b4279487-5c0e-4b32-b5f5-654dd217b18e",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo2\"), pm.environment.get(\"testRunInfo3\"),",
													"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fdbe89aa-b174-4f86-acfd-cf9ddff13234",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Test Case Assigned To' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria test case automation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d23685cf-0ca5-485b-b7d2-f1b46aa70a3f",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo2\")];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "64895bf2-8ab5-4e30-8631-cf4fc264da31",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Test Case Automation' = 'YES'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria test case automation content",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cae20ad8-2605-4ce5-a897-49e87d444801",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo2\")];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "91354e55-2ffd-4c0c-95df-043c1a427775",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Test Case Automation Content' ~ 'Automation'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria test case created date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ec4abed-938a-4761-8fe3-594af0a09ece",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo2\"), pm.environment.get(\"testRunInfo3\"),",
													"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a6b9b919-285a-4ad4-9911-270f55fce6fe",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"dateToCompare\", today.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'test case created date' < '{{dateToCompare}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria test case last modified date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ccfb367-ee63-4d05-a196-30f29fe354a9",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo2\"), pm.environment.get(\"testRunInfo3\"),",
													"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1220aa1c-d54d-439b-89a9-139578e064a8",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"dateToCompare\", today.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'test case last modified date' < '{{dateToCompare}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria test case creator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d931890-6813-49f1-8da6-077e2fd6328d",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo2\"), pm.environment.get(\"testRunInfo3\"),",
													"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "57b704ca-a9a3-48ef-baf6-f74708c32129",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Test Case Creator' = '{{userTestFullName}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query test runs with criteria test case creator by creator Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0e21e153-9ac0-45f1-867c-3d5f7391bd10",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo2\"), pm.environment.get(\"testRunInfo3\"),",
													"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "82489926-552c-40a1-bbdb-e3b34477e880",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Test Case Creator' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria test case description",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad9758d7-f59e-4bff-a504-0f8de2903bea",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo2\"), pm.environment.get(\"testRunInfo3\"),",
													"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a2ba47f7-448e-49ff-9920-d4e0b0bcd2ed",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Test Case Description' ~ 'Description'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria test case Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8321bffc-6b3c-41ca-88fe-096c47329e99",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo4\"),",
													"    pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0517e92b-3b6c-4fa8-ae99-ecaa04bd3a86",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Test Case Id' = '{{newTestCaseId1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria test case last modified user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e1af160-4740-4636-92cd-0fc2ca6a2408",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo2\"), pm.environment.get(\"testRunInfo3\"),",
													"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fa6aa055-0d5c-4a2e-84b6-14b36985193b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Test Case Last Modified User' = '{{userTestFullName}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query test runs with criteria test case last modified user by user Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "de6ce770-839b-4c34-95da-0b744f02f249",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo2\"), pm.environment.get(\"testRunInfo3\"),",
													"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "50ed8a4a-cf00-40e6-830f-4fde52173efb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Test Case Last Modified User' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria test case module",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b63305c3-ff3b-45ee-adcd-b9bff105c4c0",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo2\"), pm.environment.get(\"testRunInfo3\"),",
													"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "603ddf0d-bd99-4fff-8a46-a1709efa35bb",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Test Case Module' = '{{newModuleId1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria test case precondition",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "766dcf38-d586-40c2-bd04-6efc68f3bbd8",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo2\"), pm.environment.get(\"testRunInfo3\"),",
													"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ec4bb962-1274-4fc2-89f9-98d630ec97f1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Test Case Precondition' ~ 'Precondition'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria test case priority",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b731e52a-a197-4415-94ca-c582e8b898f5",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo2\"), pm.environment.get(\"testRunInfo3\"),",
													"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1a11be2a-8a9b-47c3-91b2-3107b8a2ae04",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Test Case Priority' = 'high'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query test runs with criteria test case priority by priority Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5dfa443d-24f1-48e0-81a3-963145542e65",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo2\"), pm.environment.get(\"testRunInfo3\"),",
													"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c311001a-743b-414c-86d9-eed2bcbb7ab8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Test Case Priority' = '{{fieldIdTestCasePriorityHigh}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria test case status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9a2a5bc-4300-4051-85ee-00005b2c8439",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo2\"), pm.environment.get(\"testRunInfo3\"),",
													"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "506497eb-cc78-409a-ad1e-4418c6670c4b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Test Case Status' = 'In progress'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query test run with criteria test case status by status Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a67c07f-dc22-4f68-9f00-7752b3af07d6",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo2\"), pm.environment.get(\"testRunInfo3\"),",
													"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7d62d71f-d365-424d-acd4-a0ddfaaf0751",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Test Case Status' = '{{fieldIdTestCaseStatusInProgress}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria test case type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "035ccbb5-effc-4485-a4f7-2ba6b901c24f",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo2\"), pm.environment.get(\"testRunInfo3\"),",
													"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "127219ec-7c35-4bc0-83a1-a729272be8e3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Test Case Type' = 'Performance'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query test runs with criteria test case type by type Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "440de70f-3d65-455d-8cee-d1430d6bc709",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo2\"), pm.environment.get(\"testRunInfo3\"),",
													"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bb1e9b36-8fba-4675-87e1-0d3a688a5625",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Test Case Type' = '{{fieldIdTestCaseTypePerformance}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria test case version",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6da1a91b-8526-4956-b7df-afe2d2b0a75a",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo2\"), pm.environment.get(\"testRunInfo3\"),",
													"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "476b8cb3-fc40-4ad4-837e-780b1a25ee15",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Test Case Version' = '1.0'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria tester",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf61904a-6f12-4d27-8ffe-e4e696a1fd8d",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\")];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f52cc3a9-3bf8-4b2e-92b7-e17919912ce8",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'tester' = '{{userTestFullName}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query test runs with criteria tester by tester Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca5fef50-221e-4add-aa8d-f3d709ae09e5",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\")];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "69f1eeda-cefb-4873-aaae-d27d969798bf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'tester' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria created date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cc441ce5-07bd-409e-b0e1-c9e8895bd1bb",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo2\"), pm.environment.get(\"testRunInfo3\"),",
													"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4aa54780-2036-4acd-b578-519f4b2e98cf",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"dateToCompare\", today.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'created date' < '{{dateToCompare}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria last modified date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "079fafa3-9dd9-4511-8d2f-a12a68eaf95e",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo2\"), pm.environment.get(\"testRunInfo3\"),",
													"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8e851350-aa66-4594-88a1-127ca736c877",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"dateToCompare\", today.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'last modified date' < '{{dateToCompare}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type test runs and criteria last modified user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "18f9a09f-0a06-472d-a8c5-9fc9686b3c6a",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo2\"), pm.environment.get(\"testRunInfo3\"),",
													"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e2c0d2ee-71b2-43cf-a0f7-099d3230ae89",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'last modified user' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query test runs with criteria last modified user by user full name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24bc5c6d-b313-4ca2-bdaf-50175545237e",
												"exec": [
													"let expectedResponseCode = 200;",
													"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo2\"), pm.environment.get(\"testRunInfo3\"),",
													"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
													"];",
													"",
													"// Implementation function for sort a list of map by the input key",
													"function sortListMapsByKeyValue(listMaps, key) {",
													"    return listMaps.sort(function(a, b) {",
													"        return a[key] - b[key];",
													"    });",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(testRuns.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
													"    });",
													"",
													"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
													"    jsonData.items.forEach((item, index) => {",
													"        testRuns.forEach((testRunInfo, i) => {",
													"            if(testRunInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(testRunInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(testRunInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(testRunInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
													"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
													"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
													"                    pm.expect(item.parentId).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
													"                    pm.expect(item.parentType).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
													"                    pm.expect(item.creator_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"                ",
													"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
													"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
													"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4a943e9d-3b28-4b08-9246-9424df90c5a4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'last modified user' = '{{userTestFullName}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Query objects - Query test runs with invalid test runs id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "70f8d1e1-93b6-4959-9020-e221430904ea",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 400;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"   pm.test(\"Response data has property message contains: For input string\", () => {",
													"       pm.expect(jsonData.message).to.eql(`For input string: \\\"${pm.environment.get(\"newTestRunId1\")}${pm.environment.get(\"invalidPostfix\")}\\\"`);",
													"   });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "07fe338c-157b-40c1-9490-9c3276314d61",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"invalidPostfix\", \"abcd\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'id' = '{{newTestRunId1}}{{invalidPostfix}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Query objects - Query test runs with criteria target release by release Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "10126198-6364-48c5-842c-68b0711cd56a",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 400;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"   pm.test(\"Response data has property message contains: Please given an allowed value!\", () => {",
													"       pm.expect(jsonData.message).to.eql(`Value '${pm.environment.get(\"newReleaseId1\")}' is not allowed for field 'Target Release/Build'. Please given an allowed value!`);",
													"   });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "49504fd5-5d4b-44f5-82c1-f4b7e8d7b44c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'target release' = '{{newReleaseId1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Query objects - Query test runs with criteria target build by build Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ca3561d-8b7a-4220-96a5-b7e301637bee",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 400;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"   pm.test(\"Response data has property message contains: Please given an allowed value!\", () => {",
													"       pm.expect(jsonData.message).to.eql(`Value '${pm.environment.get(\"newBuildName1\")}' is not allowed for field 'Target Release/Build'. Please given an allowed value!`);",
													"   });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "71719d8b-6816-4660-ab4e-6bf4a7da1332",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'target build' = '{{newBuildName1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Query objects - Query test runs with criteria test case module by module Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "255b531c-b9c9-411d-bc3e-6dc2536bbc4f",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 400;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"   pm.test(\"Response data has property message contains: Please given an allowed value!\", () => {",
													"       pm.expect(jsonData.message).to.eql(`Value '${pm.environment.get(\"newModuleName1\")}' is not allowed for field 'Module'. Please given an allowed value!`);",
													"   });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "eb8a7d13-8285-4a37-8aae-0f202172ad2f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Test Case Module' = '{{newModuleName1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9577055b-f25c-46dd-bc0d-43740e85002b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1eb47811-7279-4eaf-8632-74fa3fee83db",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Test with defects",
							"item": [
								{
									"name": "200 - Query objects - Success with object type Defects and criteria Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a75d83a-5d29-4b17-bde7-d7686db9b1bb",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "87906a85-4f02-4303-961e-ba98bd63695f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'id' = '{{newDefectId1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type Defect and criteria Summary",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04d6e01a-dc43-4a14-bf2b-5ca508975f3a",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7f93e11c-98e8-483f-baca-8e144481f194",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'summary' ~ 'Summary'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type Defects and criteria Description",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eac1110f-6e19-411d-80fd-401ec9bdbf9a",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a1ce4e4b-7551-49a1-889b-5dbe5061544f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Description' ~ 'Description'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type Defects and criteria Environment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a569a1e1-f462-45be-84c9-d50fea76e213",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8cf73071-69e0-4450-b373-615eb6b6d8b9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'environment' is 'empty'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type Defects and criteria Module",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9c0bb939-b0db-4659-95ba-c6458700090f",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2733618e-02e6-4a6e-ae55-d1ed00c28a64",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'module' = '{{newModuleId1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query Defects with criteria Module by module Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8c7c8f32-39f7-4580-8c3f-aa1fe46a4c90",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b19bd0af-84e7-4528-a386-79701f38e9c9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'module' = 'MD-2 {{newModuleName1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type Defects and criteria Priority",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9ced303-5947-49a6-8907-b2921adb2a48",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0f751646-4720-475b-86e4-c07ea8b469d0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'priority' = 'urgent'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query Defects with criteria Priority by priority Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0258c197-50a2-458d-b4a4-33aa86aed104",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1aeb1584-01d6-4e70-9d12-593f3c05326b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'priority' = '{{defectPriorityId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type Defects and criteria Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98b748a4-7a53-45ac-b1e8-9ed63f8c6d8a",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7efd9d2c-cfef-407d-a550-6fb026770c6d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'type' = 'bug'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query Defects with criteria Type by type Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a5a624c2-e9ef-4da5-81d5-8c038f257116",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "28041db1-1ea8-4bba-ae61-2d648295f48a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'type' = '{{defectTypeId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type Defects and criteria Reason",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a665c282-5832-4e3c-9aeb-e74a82945b6f",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b7ead500-4775-4a1c-8ed8-5d4d0cb71331",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'reason' = 'cannot fix'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query Defects with criteria Reason by reason Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95410799-782b-44b3-b248-18cf8f994103",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c3300e32-1d09-4d6e-bdfb-ceff27c51255",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'reason' = '{{defectReasonId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type Defects and criteria Root Cause",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ea6e8ffc-7fc2-41f5-a837-6a430214c0b1",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0decce8a-480f-4834-bee0-0fb228953053",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'root cause' = 'human error'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query Defects with criteria Root Cause by root cause Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d99114c-d733-4550-ace5-45c9be7a8bbc",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2beff992-edc9-4e7c-9c61-23ba4be8e5c3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'root cause' = '{{defectRootCauseId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type Defects and criteria Severity",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ca02a6d-69e8-41e5-aa11-8ca495b7033b",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f06fdd2f-ec4a-4145-8eb0-9eec3d8d1496",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'severity' = 'fatal'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query Defects with criteria Severity by severity Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "693c5db0-be12-4d2c-bd49-87140cb05d55",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fb29f1bd-a554-4d06-8fa1-0eb6ae702e45",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'severity' = '{{defectSeverityId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type Defects and criteria Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b6775b3-9300-4d37-9ed6-f1aaad216c46",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7843b668-0217-48c4-b3ce-5ce40ad39c91",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'status' = 'reopened'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query Defects with criteria Status by status Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "66fdad34-4f58-438c-b57c-243593aeec62",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4930f6ba-e363-4025-8ce8-c045e76d9e8e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'status' = '{{defectStatusId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Succes with object type Defects and criteria Subscriber",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "187d0f2e-83fb-40a0-91ea-04e67c0ce2a9",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "88c3eef7-4420-4c58-8244-55aea571004f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'subscriber' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type Defects and criteria Assigned To",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "74f479a3-cf97-48b8-9b25-d86af49a6e3e",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c50ec8f4-3535-484a-a020-069f638b63fa",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'assigned to' = '{{userTestFullName}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query Defects with criteria Assigned To by user Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f02febd7-a2f8-4b64-8825-765b4a78ad6a",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f0cf80bd-73f4-4774-b0aa-75aa6686e6fd",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'assigned to' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type Defects and criteria Submitter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "158a6b6f-4662-4d26-88d9-fecd36179c45",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fc0bc220-e16d-4c9a-8758-ec398cb67c08",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'submitter' = '{{userTestFullName}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query Defects with criteria Submitter by user Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ed5d08a-41ae-46ca-892d-dc971fcc600a",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e9c84bda-6034-43ff-b163-9e852711173c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'submitter' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type Defects and criteria Last Modified User",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fe580789-f84e-4144-8306-2985cb1eaa21",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "32de10ca-5d47-4b52-9f53-51a27acf8267",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'last modified user' = '{{userTestFullName}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query Defects with criteria Last Modified User by user Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9541b649-d85f-4003-9f64-74639ad247e3",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "098c0c63-b50f-4836-a4d0-992f8a8b3e93",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'last modified user' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type Defects and Submitted Date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ffc566f-98fb-4e7b-8ef8-7a8db3815d01",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7e93e806-30aa-435a-9d23-ac5b61de997f",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"dateToCompare\", today.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'submitted date' > '{{dateToCompare}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type Defects and Closed Date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb464390-e460-434f-bb0c-f898c8dcd9b6",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d502a71c-bf12-496c-877a-8cfcacef01fc",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"dateToCompare\", today.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'closed date' > '{{dateToCompare}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type Defects and Last Modified Date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2cc7e0ca-c922-4f73-9d89-93fe59c5c7da",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "09bf96d6-b2b3-4f4e-8a52-a2e877d1841d",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"dateToCompare\", today.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'last modified date' < '{{dateToCompare}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type Defects and Target Date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3fadbe13-df21-4f78-b504-295019cc30db",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "51aa0e50-2847-40c4-93b9-6d118e7b0386",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"dateToCompare\", today.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'target date' > '{{dateToCompare}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type Defects and criteria Has Association With Requirements",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "05053858-a3f7-4dd2-9139-e710268db151",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9bd240fa-79e7-4831-b6a7-0c11c4fd3536",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Has Association with Requirements' = 'YES'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query Defects with criteria Has Association With Requirements by value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f5eafabf-736e-4952-934a-09b4d1464063",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "05a2fbbe-bb7f-45ac-95de-39b7ab374364",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Has Association with Requirements' = 'something'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Query objects - Query Defects with criteria Has Association With Test Run by test run Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "21dd3611-3e05-49fc-904b-d0489535dd0c",
												"type": "text/javascript",
												"exec": [
													"// Expected: response information of defect DF-1",
													"",
													"let expectedResponseCode = 400;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"   pm.test(\"Response data has property message contains: Unsupported clause\", () => {",
													"       pm.expect(jsonData.message).to.eql(`Unsupported clause: Has Association With Test Run = ${pm.environment.get(\"newTestRunId1\")}`);",
													"   });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "36ee3a7d-eb71-48b7-a6be-8413b131d1e2",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Has Association With Test Run' = '{{newTestRunId1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Query objects - Query Defects with criteria Has Association With Test Run by test run Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8188100c-b217-4887-adf9-1ad4cd5d73a3",
												"type": "text/javascript",
												"exec": [
													"// Expected: response information of defect DF-1",
													"",
													"let expectedResponseCode = 400;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"   pm.test(\"Response data has property message contains: Unsupported clause\", () => {",
													"       pm.expect(jsonData.message).to.eql(`Unsupported clause: Has Association With Test Run = ${pm.environment.get(\"testRunPid1\")} ${pm.environment.get(\"testRunName1\")}`);",
													"   });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "db99f983-fc83-4773-8ec3-9c790728bd00",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Has Association With Test Run' = '{{testRunPid1}} {{testRunName1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type Defects and criteria Has Association With Test Runs",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4bcc5b79-c861-4175-8dd6-d2891ed9f32a",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "635c9541-8de1-4821-b5d5-502fc464c96d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Has Association with Test Runs' = 'YES'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query Defects with criteria Has Association with Test Runs by value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e4656dd-69de-41ed-86b4-8bbc640741b2",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "02c22bf2-7eed-4648-977d-8df0ecbe9ac7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Has Association with Test Runs' = 'something'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type Defects and criteria Has Attachments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "020241fe-8a9b-4e1e-8cc7-cf406bb4fc91",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "716b814c-11dc-4582-acda-6dc01206f174",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Has Attachments' = 'YES'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Query Defects with criteria Has Attachments by value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23798029-15f4-4079-8489-2e265210b751",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e14690b9-284b-43fa-b3f4-5ffdd99dc30a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Has Attachments' = 'something'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type Defects and criteria Target Release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6264ef49-ee5c-4bdb-850f-d56165b0d2c7",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1e2084e3-7ff2-4c9f-9d51-c499b48d6e73",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Target Release' = '{{newReleaseName1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type Defects and criteria Target Build",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42777308-497e-48fd-a7af-59ae09405fda",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1ce08065-ad97-42e6-8518-3be2e569b705",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Target Build' = '{{newBuildId1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type Defects and criteria Affected Release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e1f50b6f-41cc-4649-9cff-4e81132e2751",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ca5c5647-02bd-444f-943e-137d2075f0e0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Affected Release' = '{{newReleaseName1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type Defects and criteria Affected Build",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3778f99e-0122-4f0f-bb2a-9b99c04fd2bf",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4e051018-e458-49f9-9ba2-7794aa0cbc29",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Affected Build' = '{{newBuildId1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type Defects and criteria Fixed Release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eebc25c5-bb55-4f62-909f-a31291eef157",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5b84f11f-4fa4-49ab-bff6-b5d40dff9870",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Fixed Release' = '{{newReleaseName1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with object type Defects and criteria Fixed Build",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "faddbaa8-f163-4e53-8286-d744faffe0dd",
												"exec": [
													"let expectedResponseCode = 200;",
													"const defectInfos = [pm.environment.get(\"defectInfo1\")];",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value then modifying value of the expected key of it",
													"function searchAndModifyJSONItemValueFromList(jsonList, expectedKey, expectedValue, modifiedKey, modifiedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            jsonList[i][modifiedKey] = modifiedValue;",
													"        }",
													"    }",
													"    return jsonList;",
													"}",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + defectInfos.length, () => {",
													"        pm.expect(jsonData.total).to.eql(defectInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${defectInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(defectInfos.length);",
													"    });",
													"",
													"    // Customize build name value before verifying due to add space character for UI design",
													"    jsonData.items.forEach(function(item, index) {",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Affected Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Fixed Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        item.properties = searchAndModifyJSONItemValueFromList(item.properties, \"field_name\", \"Target Release/Build\", \"field_value_name\", pm.environment.get(\"buildName\"));",
													"        jsonData.items[index] = item;",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        defectInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitted_date property`, () => {",
													"                    pm.expect(item.submitted_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has submitter_id property`, () => {",
													"                    pm.expect(item.submitter_id).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7c094662-9165-49cf-8429-4a7464c3c59f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'Fixed Build' = '{{newBuildId1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Query objects - Query Defects with invalid defect id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b0f8135-1209-4d05-b535-712502df2bc7",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 400;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"   pm.test(\"Response data has property message contains: For input string\", () => {",
													"       pm.expect(jsonData.message).to.eql(`For input string: \\\"${pm.environment.get(\"newDefectId1\")}${pm.environment.get(\"invalidPostfix\")}\\\"`);",
													"   });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "84df8cd3-d294-4389-94f2-c1a76169b9fa",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"invalidPostfix\", \"abcd\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"query\": \"'id' = '{{newDefectId1}}{{invalidPostfix}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Test with operations",
							"item": [
								{
									"name": "200 - Query objects - Success with operator greater-than sign",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3d4175d-e139-405d-b48a-b40c4f69084b",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [pm.environment.get(\"reqInfo2\")];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7937a5a4-a547-4d18-8f8a-70a16e3823c5",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'id' > '{{newReqId1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with operator greater-than-or-equal-to sign",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b96e8fb-cef3-4780-abf1-e4506d2dbe01",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [pm.environment.get(\"reqInfo1\"),pm.environment.get(\"reqInfo2\")];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f90383ca-0365-4b31-b31d-06d1a7ae3632",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'id' >= '{{newReqId1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with operator less-than sign",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "514962d4-f99e-4245-85a1-5fc7c02f3065",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [pm.environment.get(\"reqInfo1\")];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ded4a11c-c1f0-4951-92ea-e8571f4e5051",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'id' < '{{newReqId2}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with operator less-than-or-equal-to sign",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eea9a5c4-d0d1-4b11-a15b-26d485047163",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [pm.environment.get(\"reqInfo1\"),pm.environment.get(\"reqInfo2\")];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0fff4e57-534c-442b-871b-38c1063b178d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'id' <= '{{newReqId2}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with operatpr not-equal-sign",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c0fe984-cc8d-4c9f-86df-52686ca67aa3",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [pm.environment.get(\"reqInfo2\")];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dbdca33b-0eb5-46e7-b6a4-ab8712279b62",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'id' <> '{{newReqId1}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with operator is-empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "abd5ca93-c999-4e33-a688-ef9a5dfe6e89",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "50814cb5-e4a7-432d-9d8a-fd7bf2eb2f39",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'description' is 'empty'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with operator is-not-empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98e1bd77-352d-4bd5-a6f8-62fffc1f7975",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [pm.environment.get(\"reqInfo1\"),pm.environment.get(\"reqInfo2\")];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dea45d26-d1e3-4973-be03-15550a893eff",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'name' is 'not empty'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with operator contains",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8074707d-d402-4013-be0f-9663f5d20aa0",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [pm.environment.get(\"reqInfo1\"),pm.environment.get(\"reqInfo2\")];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "381473f2-0914-4a89-9979-6c2c8fcb99e1",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'name' ~ 'Requirement'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query objects - Success with operator not-contains",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a6c951bf-e140-4e79-8f65-d44e43594497",
												"exec": [
													"const expectedResponseCode = 200;",
													"const reqInfos = [pm.environment.get(\"reqInfo2\")];",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
													"    });",
													"",
													"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
													"    });",
													"",
													"    jsonData.items.forEach((item, index) => {",
													"        reqInfos.forEach((reqInfo, i) => {",
													"            if(reqInfo.id === item.id){",
													"                pm.test(`Response data has items[${index}] has id property`, () => {",
													"                    pm.expect(item.id).to.eql(reqInfo.id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has pid property`, () => {",
													"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
													"                });",
													"                pm.test(`Response data has items[${index}] has name property`, () => {",
													"                    pm.expect(item.name).to.eql(reqInfo.name);",
													"                });",
													"                pm.test(`Response data has items[${index}] has order property`, () => {",
													"                    pm.expect(item.order).to.eql(reqInfo.order);",
													"                });",
													"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
													"                    pm.expect(item.created_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
													"                    pm.expect(item.last_modified_date).to.not.eql(null);",
													"                });",
													"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
													"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
													"                });",
													"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
													"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
													"                });",
													"                pm.test(`Response data has items[${index}] has properties object`, () => {",
													"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
													"                });",
													"                item.properties.forEach((property, index1) => {",
													"                    reqInfo.properties.forEach((itemProperty, i1) => {",
													"                        if(itemProperty.field_id === property.field_id){",
													"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
													"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
													"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
													"                                pm.expect(property.field_value).to.not.eql(null);",
													"                            });",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9847e48c-221f-468c-bda3-0ccfa8418d58",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'name' !~ '1'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Query objects - Not supported operator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a0148257-5258-4af4-bac2-23e8b0bdfa75",
												"exec": [
													"let expectedResponseCode = 400;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"    ",
													"    pm.test(\"Response status: \" + pm.response.code, ()  => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"    ",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has message: \" + jsonData.message, () => {",
													"        pm.expect(jsonData.message).to.include(\"Unsupported operator isnot\");",
													"    });",
													"    ",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6249a38a-aa06-415e-9389-c920e9166348",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'id' isnot 'empty'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"search"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "200 - Query objects - Success with page and pageSize",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d537c180-60ff-4d93-b7b0-cfe3a3349b9a",
										"exec": [
											"let expectedResponseCode = 200;",
											"const testRuns = [pm.environment.get(\"testRunInfo3\"), pm.environment.get(\"testRunInfo4\")];",
											"",
											"// Implementation function for sort a list of map by the input key",
											"function sortListMapsByKeyValue(listMaps, key) {",
											"    return listMaps.sort(function(a, b) {",
											"        return a[key] - b[key];",
											"    });",
											"}",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData.links).to.not.eql(null);",
											"    });",
											"",
											"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(2);",
											"    });",
											"",
											"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(2);",
											"    });",
											"",
											"    pm.test(\"Response data contains property total: 6\", () => {",
											"        pm.expect(jsonData.total).to.eql(6);",
											"    });",
											"",
											"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
											"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
											"    });",
											"",
											"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
											"    jsonData.items.forEach((item, index) => {",
											"        testRuns.forEach((testRunInfo, i) => {",
											"            if(testRunInfo.id === item.id){",
											"                pm.test(`Response data has items[${index}] has id property`, () => {",
											"                    pm.expect(item.id).to.eql(testRunInfo.id);",
											"                });",
											"                pm.test(`Response data has items[${index}] has pid property`, () => {",
											"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
											"                });",
											"                pm.test(`Response data has items[${index}] has name property`, () => {",
											"                    pm.expect(item.name).to.eql(testRunInfo.name);",
											"                });",
											"                pm.test(`Response data has items[${index}] has order property`, () => {",
											"                    pm.expect(item.order).to.eql(testRunInfo.order);",
											"                });",
											"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
											"                    pm.expect(item.created_date).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
											"                    pm.expect(item.last_modified_date).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
											"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
											"                });",
											"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
											"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
											"                });",
											"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
											"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
											"                });",
											"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
											"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
											"                });",
											"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
											"                    pm.expect(item.parentId).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
											"                    pm.expect(item.parentType).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
											"                    pm.expect(item.creator_id).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has properties object`, () => {",
											"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
											"                });",
											"                item.properties.forEach((property, index1) => {",
											"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
											"                        if(itemProperty.field_id === property.field_id){",
											"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
											"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
											"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
											"                                pm.expect(property.field_value).to.not.eql(null);",
											"                            });",
											"                        }",
											"                    });",
											"                });",
											"                ",
											"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
											"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
											"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
											"                });",
											"            }",
											"        });",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "89299ae4-3321-470a-a6fb-541a4cd730ae",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'name' ~ 'Test Run'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search?page=2&pageSize=2",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "pageSize",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query objects - Param Page less than 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "96b3cbce-1013-4882-9ad3-ca1ae793a558",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"   pm.test(\"Response data has message: \" + jsonData.message, () => {",
											"       pm.expect(jsonData.message).to.eql(\"Page size or page index must not be less than 1!\");",
											"   });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f70e35d7-8486-4f4b-8982-f24399d29aa4",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'name' ~ 'Test Run'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search?page=0&pageSize=2",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query objects - Param Page larger than 1000",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f411a6f3-fc57-43ff-9e55-0dc236f41676",
										"exec": [
											"let expectedResponseCode = 200;",
											"const testRuns = [];",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData.links).to.not.eql(null);",
											"    });",
											"",
											"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1200);",
											"    });",
											"",
											"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(2);",
											"    });",
											"",
											"    pm.test(\"Response data contains property total: 6\", () => {",
											"        pm.expect(jsonData.total).to.eql(6);",
											"    });",
											"",
											"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
											"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
											"    });",
											"",
											"    jsonData.items.forEach((item, index) => {",
											"        testRuns.forEach((testRunInfo, i) => {",
											"            if(testRunInfo.id === item.id){",
											"                pm.test(`Response data has items[${index}] has id property`, () => {",
											"                    pm.expect(item.id).to.eql(testRunInfo.id);",
											"                });",
											"                pm.test(`Response data has items[${index}] has pid property`, () => {",
											"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
											"                });",
											"                pm.test(`Response data has items[${index}] has name property`, () => {",
											"                    pm.expect(item.name).to.eql(testRunInfo.name);",
											"                });",
											"                pm.test(`Response data has items[${index}] has order property`, () => {",
											"                    pm.expect(item.order).to.eql(testRunInfo.order);",
											"                });",
											"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
											"                    pm.expect(item.created_date).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
											"                    pm.expect(item.last_modified_date).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
											"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
											"                });",
											"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
											"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
											"                });",
											"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
											"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
											"                });",
											"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
											"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
											"                });",
											"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
											"                    pm.expect(item.parentId).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
											"                    pm.expect(item.parentType).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
											"                    pm.expect(item.creator_id).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has properties object`, () => {",
											"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
											"                });",
											"                item.properties.forEach((property, index1) => {",
											"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
											"                        if(itemProperty.field_id === property.field_id){",
											"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
											"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
											"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
											"                                pm.expect(property.field_value).to.not.eql(null);",
											"                            });",
											"                        }",
											"                    });",
											"                });",
											"                ",
											"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
											"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
											"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
											"                });",
											"            }",
											"        });",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "85b9b27a-f00b-49dc-a7b1-b595bf2f0331",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'name' ~ 'Test Run'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search?page=1200&pageSize=2",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "1200"
										},
										{
											"key": "pageSize",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query objects - Param Page Size less than 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "adc875a2-dd36-4ec2-b144-57f81b2452fa",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"   pm.test(\"Response data has message: \" + jsonData.message, () => {",
											"       pm.expect(jsonData.message).to.eql(\"Page size or page index must not be less than 1!\");",
											"   });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a3fc61b8-f701-458a-bf01-50022debf7c6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'name' ~ 'Test Run'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search?page=1&pageSize=0",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query objects - Page has value larger than maximum pagination",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb93eb67-b124-4674-9e34-075cd8068bf7",
										"exec": [
											"let expectedResponseCode = 200;",
											"const testRuns = [];",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData.links).to.not.eql(null);",
											"    });",
											"",
											"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(5);",
											"    });",
											"",
											"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(2);",
											"    });",
											"",
											"    pm.test(\"Response data contains property total: 6\", () => {",
											"        pm.expect(jsonData.total).to.eql(6);",
											"    });",
											"",
											"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
											"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
											"    });",
											"",
											"    jsonData.items.forEach((item, index) => {",
											"        testRuns.forEach((testRunInfo, i) => {",
											"            if(testRunInfo.id === item.id){",
											"                pm.test(`Response data has items[${index}] has id property`, () => {",
											"                    pm.expect(item.id).to.eql(testRunInfo.id);",
											"                });",
											"                pm.test(`Response data has items[${index}] has pid property`, () => {",
											"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
											"                });",
											"                pm.test(`Response data has items[${index}] has name property`, () => {",
											"                    pm.expect(item.name).to.eql(testRunInfo.name);",
											"                });",
											"                pm.test(`Response data has items[${index}] has order property`, () => {",
											"                    pm.expect(item.order).to.eql(testRunInfo.order);",
											"                });",
											"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
											"                    pm.expect(item.created_date).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
											"                    pm.expect(item.last_modified_date).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
											"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
											"                });",
											"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
											"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
											"                });",
											"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
											"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
											"                });",
											"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
											"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
											"                });",
											"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
											"                    pm.expect(item.parentId).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
											"                    pm.expect(item.parentType).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
											"                    pm.expect(item.creator_id).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has properties object`, () => {",
											"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
											"                });",
											"                item.properties.forEach((property, index1) => {",
											"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
											"                        if(itemProperty.field_id === property.field_id){",
											"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
											"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
											"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
											"                                pm.expect(property.field_value).to.not.eql(null);",
											"                            });",
											"                        }",
											"                    });",
											"                });",
											"                ",
											"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
											"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
											"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
											"                });",
											"            }",
											"        });",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "babddaa6-a9bd-4a22-9ee8-8d0b419d32be",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'name' ~ 'Test Run'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search?page=5&pageSize=2",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "5"
										},
										{
											"key": "pageSize",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query objects - Missing param Page",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2c7ca16e-7ddf-4679-bded-0e019376c460",
										"exec": [
											"let expectedResponseCode = 200;",
											"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo2\")];",
											"",
											"// Implementation function for sort a list of map by the input key",
											"function sortListMapsByKeyValue(listMaps, key) {",
											"    return listMaps.sort(function(a, b) {",
											"        return a[key] - b[key];",
											"    });",
											"}",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData.links).to.not.eql(null);",
											"    });",
											"",
											"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1);",
											"    });",
											"",
											"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(2);",
											"    });",
											"",
											"    pm.test(\"Response data contains property total: 6\", () => {",
											"        pm.expect(jsonData.total).to.eql(6);",
											"    });",
											"",
											"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
											"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
											"    });",
											"",
											"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
											"    jsonData.items.forEach((item, index) => {",
											"        testRuns.forEach((testRunInfo, i) => {",
											"            if(testRunInfo.id === item.id){",
											"                pm.test(`Response data has items[${index}] has id property`, () => {",
											"                    pm.expect(item.id).to.eql(testRunInfo.id);",
											"                });",
											"                pm.test(`Response data has items[${index}] has pid property`, () => {",
											"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
											"                });",
											"                pm.test(`Response data has items[${index}] has name property`, () => {",
											"                    pm.expect(item.name).to.eql(testRunInfo.name);",
											"                });",
											"                pm.test(`Response data has items[${index}] has order property`, () => {",
											"                    pm.expect(item.order).to.eql(testRunInfo.order);",
											"                });",
											"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
											"                    pm.expect(item.created_date).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
											"                    pm.expect(item.last_modified_date).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
											"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
											"                });",
											"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
											"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
											"                });",
											"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
											"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
											"                });",
											"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
											"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
											"                });",
											"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
											"                    pm.expect(item.parentId).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
											"                    pm.expect(item.parentType).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
											"                    pm.expect(item.creator_id).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has properties object`, () => {",
											"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
											"                });",
											"                item.properties.forEach((property, index1) => {",
											"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
											"                        if(itemProperty.field_id === property.field_id){",
											"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
											"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
											"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
											"                                pm.expect(property.field_value).to.not.eql(null);",
											"                            });",
											"                        }",
											"                    });",
											"                });",
											"                ",
											"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
											"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
											"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
											"                });",
											"            }",
											"        });",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "02feeef5-a2f9-4ced-aea9-b6291fec52ce",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'name' ~ 'Test Run'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search?pageSize=2",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"search"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query objects - Missing param PageSize",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b08348e-e101-4f7a-ada2-1cb559bad9fc",
										"exec": [
											"let expectedResponseCode = 200;",
											"const testRuns = [pm.environment.get(\"testRunInfo1\"), pm.environment.get(\"testRunInfo2\"), pm.environment.get(\"testRunInfo3\"),",
											"    pm.environment.get(\"testRunInfo4\"), pm.environment.get(\"testRunInfo5\"), pm.environment.get(\"testRunInfo6\")",
											"];",
											"",
											"// Implementation function for sort a list of map by the input key",
											"function sortListMapsByKeyValue(listMaps, key) {",
											"    return listMaps.sort(function(a, b) {",
											"        return a[key] - b[key];",
											"    });",
											"}",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData.links).to.not.eql(null);",
											"    });",
											"",
											"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1);",
											"    });",
											"",
											"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(100);",
											"    });",
											"",
											"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(testRuns.length);",
											"    });",
											"",
											"    pm.test(`Response data has ${testRuns.length} item(s)`, () => {",
											"        pm.expect(jsonData.items.length).to.eql(testRuns.length);",
											"    });",
											"",
											"    jsonData.items = sortListMapsByKeyValue(jsonData.items, \"id\");",
											"    jsonData.items.forEach((item, index) => {",
											"        testRuns.forEach((testRunInfo, i) => {",
											"            if(testRunInfo.id === item.id){",
											"                pm.test(`Response data has items[${index}] has id property`, () => {",
											"                    pm.expect(item.id).to.eql(testRunInfo.id);",
											"                });",
											"                pm.test(`Response data has items[${index}] has pid property`, () => {",
											"                    pm.expect(item.pid).to.eql(testRunInfo.pid);",
											"                });",
											"                pm.test(`Response data has items[${index}] has name property`, () => {",
											"                    pm.expect(item.name).to.eql(testRunInfo.name);",
											"                });",
											"                pm.test(`Response data has items[${index}] has order property`, () => {",
											"                    pm.expect(item.order).to.eql(testRunInfo.order);",
											"                });",
											"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
											"                    pm.expect(item.created_date).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
											"                    pm.expect(item.last_modified_date).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
											"                    pm.expect(item.web_url).to.eql(testRunInfo.web_url);",
											"                });",
											"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
											"                    pm.expect(item.parent_id).to.eql(testRunInfo.parent_id);",
											"                });",
											"                pm.test(`Response data has items[${index}] has test_case_version_id property`, () => {",
											"                    pm.expect(item.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
											"                });",
											"                pm.test(`Response data has items[${index}] has test_case_version property`, () => {",
											"                    pm.expect(item.test_case_version).to.eql(testRunInfo.test_case_version);",
											"                });",
											"                pm.test(`Response data has items[${index}] has parentId property`, () => {",
											"                    pm.expect(item.parentId).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has parentType property`, () => {",
											"                    pm.expect(item.parentType).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has creator_id property`, () => {",
											"                    pm.expect(item.creator_id).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has properties object`, () => {",
											"                    pm.expect(item.properties.length).to.eql(testRunInfo.properties.length);",
											"                });",
											"                item.properties.forEach((property, index1) => {",
											"                    testRunInfo.properties.forEach((itemProperty, i1) => {",
											"                        if(itemProperty.field_id === property.field_id){",
											"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
											"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
											"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
											"                                pm.expect(property.field_value).to.not.eql(null);",
											"                            });",
											"                        }",
											"                    });",
											"                });",
											"                ",
											"                pm.test(`Response data has items[${index}] has test_case object`, () => {",
											"                    pm.expect(item.test_case.id).to.eql(testRunInfo.test_case.id);",
											"                    pm.expect(item.test_case.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
											"                });",
											"            }",
											"        });",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1ae0df1a-e9f0-4718-b3ea-8783b3dd4d84",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query\": \"'name' ~ 'Test Run'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search?page=1",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"search"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query objects - String value of query clause is mismatch uppercase and lowercase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e7bbd9a6-52a4-45f4-99ce-90e6595c3a78",
										"exec": [
											"const expectedResponseCode = 200;",
											"const reqInfos = [pm.environment.get(\"reqInfo1\"), pm.environment.get(\"reqInfo2\")];",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData.links).to.not.eql(null);",
											"    });",
											"",
											"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1);",
											"    });",
											"",
											"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(100);",
											"    });",
											"",
											"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
											"    });",
											"",
											"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
											"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
											"    });",
											"",
											"    jsonData.items.forEach((item, index) => {",
											"        reqInfos.forEach((reqInfo, i) => {",
											"            if(reqInfo.id === item.id){",
											"                pm.test(`Response data has items[${index}] has id property`, () => {",
											"                    pm.expect(item.id).to.eql(reqInfo.id);",
											"                });",
											"                pm.test(`Response data has items[${index}] has pid property`, () => {",
											"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
											"                });",
											"                pm.test(`Response data has items[${index}] has name property`, () => {",
											"                    pm.expect(item.name).to.eql(reqInfo.name);",
											"                });",
											"                pm.test(`Response data has items[${index}] has order property`, () => {",
											"                    pm.expect(item.order).to.eql(reqInfo.order);",
											"                });",
											"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
											"                    pm.expect(item.created_date).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
											"                    pm.expect(item.last_modified_date).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
											"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
											"                });",
											"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
											"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
											"                });",
											"                pm.test(`Response data has items[${index}] has properties object`, () => {",
											"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
											"                });",
											"                item.properties.forEach((property, index1) => {",
											"                    reqInfo.properties.forEach((itemProperty, i1) => {",
											"                        if(itemProperty.field_id === property.field_id){",
											"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
											"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
											"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
											"                                pm.expect(property.field_value).to.not.eql(null);",
											"                            });",
											"                        }",
											"                    });",
											"                });",
											"            }",
											"        });",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "dfd5878d-f080-4c4b-8ca5-172cdd2e60cf",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'name' ~ 'reQuIreMeNT'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query objects - Success with fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "46c2f871-6f3c-402a-ac7e-2dfe8ab82359",
										"exec": [
											"const expectedResponseCode = 200;",
											"const reqInfos = [pm.environment.get(\"reqInfo1\")];",
											"const fields = [\"id\", \"name\", \"created_date\", \"properties\"];",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData.links).to.not.eql(null);",
											"    });",
											"",
											"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1);",
											"    });",
											"",
											"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(100);",
											"    });",
											"",
											"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
											"    });",
											"",
											"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
											"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
											"    });",
											"",
											"    let expectdedReqInfos = JSON.parse(JSON.stringify(reqInfos));",
											"    // Remove unexpected fields in expected Requirement Information before verification",
											"    expectdedReqInfos.forEach(function(reqInfo) {",
											"        Object.keys(reqInfo).forEach(function(reqInfoKey) {",
											"            if (fields.indexOf(reqInfoKey) < 0) {",
											"                delete reqInfo[reqInfoKey];",
											"            }",
											"        });",
											"    });",
											"",
											"    jsonData.items.forEach((item, index) => {",
											"        expectdedReqInfos.forEach((reqInfo, i) => {",
											"            if(reqInfo.id === item.id){",
											"                pm.test(`Response data has items[${index}] has id property`, () => {",
											"                    pm.expect(item.id).to.eql(reqInfo.id);",
											"                });",
											"                pm.test(`Response data has items[${index}] has pid property`, () => {",
											"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
											"                });",
											"                pm.test(`Response data has items[${index}] has name property`, () => {",
											"                    pm.expect(item.name).to.eql(reqInfo.name);",
											"                });",
											"                pm.test(`Response data has items[${index}] has order property`, () => {",
											"                    pm.expect(item.order).to.eql(reqInfo.order);",
											"                });",
											"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
											"                    pm.expect(item.created_date).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
											"                    pm.expect(item.last_modified_date).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
											"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
											"                });",
											"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
											"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
											"                });",
											"                pm.test(`Response data has items[${index}] has properties object`, () => {",
											"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
											"                });",
											"                item.properties.forEach((property, index1) => {",
											"                    reqInfo.properties.forEach((itemProperty, i1) => {",
											"                        if(itemProperty.field_id === property.field_id){",
											"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
											"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
											"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
											"                                pm.expect(property.field_value).to.not.eql(null);",
											"                            });",
											"                        }",
											"                    });",
											"                });",
											"            }",
											"        });",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e50f27e8-4cda-4a43-8f6e-4116bfb408df",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"id\", \"name\", \"created_date\", \"properties\", 1234],\n  \"query\": \"'id' = '{{newReqId1}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query objects - Fields is not an array",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0d4bc75-bcf3-40d0-b71c-988a9fed73a8",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"   pm.test(\"Response data has property message contains: Cannot deserialize instance of `java.util.HashSet<java.lang.Object>` out of START_OBJECT\", () => {",
											"       pm.expect(jsonData.message).to.include(\"Cannot deserialize\");",
											"   });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e648259f-fceb-4dc2-8610-9eaa8f1b3e90",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": {},\n  \"query\": \"'id' = '{{newReqId1}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query objects - Invalid object type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d648449c-9525-4ccf-8005-6e6344c43dff",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"   pm.test(\"Response data has property message contains: Unsupported object type\", () => {",
											"       pm.expect(jsonData.message).to.eql(`Unsupported object type requirements${pm.environment.get(\"invalidPostfix\")}`);",
											"   });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "53f43547-497b-40dd-b3f0-cde78e119f9e",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"invalidPostfix\", \"abcd\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements{{invalidPostfix}}\",\n  \"fields\": [\"*\"],\n  \"query\": \"'id' = '{{newReqId1}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query objects - Missing object type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6aa68c20-f9df-4cb0-8d87-ba6c5c70d847",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"   pm.test(\"Response data has message: \" + jsonData.message, () => {",
											"       pm.expect(jsonData.message).to.eql(\"Unsupported object type null\");",
											"   });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "65973eb2-0226-495d-948d-06d676d8e98b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\n  \"fields\": [\"*\"],\n  \"query\": \"'id' = '{{newReqId1}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query objects - Blank object type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f21fd3a-c60e-4578-a4b0-fb93e5d54b13",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"   pm.test(\"Response data has message: \" + jsonData.message, () => {",
											"       pm.expect(jsonData.message).to.eql(\"Unsupported object type \");",
											"   });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "22c539d4-96cc-4e74-be34-4e7d72fc99a0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"\",\n  \"fields\": [\"*\"],\n  \"query\": \"'id' = '{{newReqId1}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query objects - Missing property fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d2e108f-f2c5-493a-a0c0-2465bdfe6a3e",
										"exec": [
											"const expectedResponseCode = 200;",
											"const reqInfos = [pm.environment.get(\"reqInfo1\")];",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData.links).to.not.eql(null);",
											"    });",
											"",
											"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1);",
											"    });",
											"",
											"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(100);",
											"    });",
											"",
											"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
											"    });",
											"",
											"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
											"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
											"    });",
											"",
											"    jsonData.items.forEach((item, index) => {",
											"        reqInfos.forEach((reqInfo, i) => {",
											"            if(reqInfo.id === item.id){",
											"                pm.test(`Response data has items[${index}] has id property`, () => {",
											"                    pm.expect(item.id).to.eql(reqInfo.id);",
											"                });",
											"                pm.test(`Response data has items[${index}] has pid property`, () => {",
											"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
											"                });",
											"                pm.test(`Response data has items[${index}] has name property`, () => {",
											"                    pm.expect(item.name).to.eql(reqInfo.name);",
											"                });",
											"                pm.test(`Response data has items[${index}] has order property`, () => {",
											"                    pm.expect(item.order).to.eql(reqInfo.order);",
											"                });",
											"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
											"                    pm.expect(item.created_date).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
											"                    pm.expect(item.last_modified_date).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
											"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
											"                });",
											"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
											"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
											"                });",
											"                pm.test(`Response data has items[${index}] has properties object`, () => {",
											"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
											"                });",
											"                item.properties.forEach((property, index1) => {",
											"                    reqInfo.properties.forEach((itemProperty, i1) => {",
											"                        if(itemProperty.field_id === property.field_id){",
											"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
											"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
											"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
											"                                pm.expect(property.field_value).to.not.eql(null);",
											"                            });",
											"                        }",
											"                    });",
											"                });",
											"            }",
											"        });",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "24e4a656-0cd4-46db-bc2f-f37007e46e00",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements\",\n\n  \"query\": \"'id' = '{{newReqId1}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query objects - Invalid value in property fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "209761b8-0e14-4f25-82da-8ea60fa22feb",
										"exec": [
											"const expectedResponseCode = 200;",
											"const reqInfos = [{}];",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData.links).to.not.eql(null);",
											"    });",
											"",
											"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1);",
											"    });",
											"",
											"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(100);",
											"    });",
											"",
											"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
											"    });",
											"",
											"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
											"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "020f62c7-1136-4c44-a58f-481931fe294f",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"abcd\"],\n  \"query\": \"'id' = '{{newReqId1}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query objects - Missing property query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fad68ff6-bed6-41af-9578-2366335a3b74",
										"exec": [
											"const expectedResponseCode = 200;",
											"const reqInfos = [pm.environment.get(\"reqInfo1\"),pm.environment.get(\"reqInfo2\")];",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData.links).to.not.eql(null);",
											"    });",
											"",
											"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1);",
											"    });",
											"",
											"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(100);",
											"    });",
											"",
											"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
											"    });",
											"",
											"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
											"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
											"    });",
											"",
											"    jsonData.items.forEach((item, index) => {",
											"        reqInfos.forEach((reqInfo, i) => {",
											"            if(reqInfo.id === item.id){",
											"                pm.test(`Response data has items[${index}] has id property`, () => {",
											"                    pm.expect(item.id).to.eql(reqInfo.id);",
											"                });",
											"                pm.test(`Response data has items[${index}] has pid property`, () => {",
											"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
											"                });",
											"                pm.test(`Response data has items[${index}] has name property`, () => {",
											"                    pm.expect(item.name).to.eql(reqInfo.name);",
											"                });",
											"                pm.test(`Response data has items[${index}] has order property`, () => {",
											"                    pm.expect(item.order).to.eql(reqInfo.order);",
											"                });",
											"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
											"                    pm.expect(item.created_date).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
											"                    pm.expect(item.last_modified_date).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
											"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
											"                });",
											"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
											"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
											"                });",
											"                pm.test(`Response data has items[${index}] has properties object`, () => {",
											"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
											"                });",
											"                item.properties.forEach((property, index1) => {",
											"                    reqInfo.properties.forEach((itemProperty, i1) => {",
											"                        if(itemProperty.field_id === property.field_id){",
											"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
											"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
											"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
											"                                pm.expect(property.field_value).to.not.eql(null);",
											"                            });",
											"                        }",
											"                    });",
											"                });",
											"            }",
											"        });",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5f6f511a-9c0a-4f4b-88af-4ec709583c71",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"]\n\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query objects - Property query has empty value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3613058e-fb5f-4879-92c1-3475b09f1504",
										"exec": [
											"const expectedResponseCode = 200;",
											"const reqInfos = [pm.environment.get(\"reqInfo1\"),pm.environment.get(\"reqInfo2\")];",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData.links).to.not.eql(null);",
											"    });",
											"",
											"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1);",
											"    });",
											"",
											"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(100);",
											"    });",
											"",
											"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(reqInfos.length);",
											"    });",
											"",
											"    pm.test(`Response data has ${reqInfos.length} item(s)`, () => {",
											"        pm.expect(jsonData.items.length).to.eql(reqInfos.length);",
											"    });",
											"",
											"    jsonData.items.forEach((item, index) => {",
											"        reqInfos.forEach((reqInfo, i) => {",
											"            if(reqInfo.id === item.id){",
											"                pm.test(`Response data has items[${index}] has id property`, () => {",
											"                    pm.expect(item.id).to.eql(reqInfo.id);",
											"                });",
											"                pm.test(`Response data has items[${index}] has pid property`, () => {",
											"                    pm.expect(item.pid).to.eql(reqInfo.pid);",
											"                });",
											"                pm.test(`Response data has items[${index}] has name property`, () => {",
											"                    pm.expect(item.name).to.eql(reqInfo.name);",
											"                });",
											"                pm.test(`Response data has items[${index}] has order property`, () => {",
											"                    pm.expect(item.order).to.eql(reqInfo.order);",
											"                });",
											"                pm.test(`Response data has items[${index}] has created_date property`, () => {",
											"                    pm.expect(item.created_date).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has last_modified_date property`, () => {",
											"                    pm.expect(item.last_modified_date).to.not.eql(null);",
											"                });",
											"                pm.test(`Response data has items[${index}] has web_url property`, () => {",
											"                    pm.expect(item.web_url).to.eql(reqInfo.web_url);",
											"                });",
											"                pm.test(`Response data has items[${index}] has parent_id property`, () => {",
											"                    pm.expect(item.parent_id).to.eql(reqInfo.parent_id);",
											"                });",
											"                pm.test(`Response data has items[${index}] has properties object`, () => {",
											"                    pm.expect(item.properties.length).to.eql(reqInfo.properties.length);",
											"                });",
											"                item.properties.forEach((property, index1) => {",
											"                    reqInfo.properties.forEach((itemProperty, i1) => {",
											"                        if(itemProperty.field_id === property.field_id){",
											"                            pm.test(`Response data has items[${index}] has field name ${property.field_name} property`, () => {",
											"                                pm.expect(itemProperty.field_id).to.eql(property.field_id);",
											"                                pm.expect(itemProperty.field_name).to.eql(property.field_name);",
											"                                pm.expect(property.field_value).to.not.eql(null);",
											"                            });",
											"                        }",
											"                    });",
											"                });",
											"            }",
											"        });",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed8ef3a9-dae4-4869-b5ec-b6b26a4d578a",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query objects - Query clause has no criteria",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2eb472f-f73f-4cda-9a18-8405b0bc19de",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"   pm.test(\"Response data has property message contains: Unsupported operator\", () => {",
											"       pm.expect(jsonData.message).to.eql(`Unsupported operator '${pm.environment.get(\"newReqId1\")}'`);",
											"   });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "65aaf8b3-fb71-4140-bd1a-9ef451155e11",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \" = '{{newReqId1}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query objects - Query clause has no value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bed0cafe-f39f-438c-ba3d-a78ddd0ae031",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"   pm.test(\"Response data has property message contains: Bad clause\", () => {",
											"       pm.expect(jsonData.message).to.eql(\"Bad clause: id = \");",
											"   });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4a9c5029-b8ca-4db7-9ee4-1dedaf31e364",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'id' = \"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query objects - Unsupported criteria",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d5e44d93-682f-4593-8b3e-91bc05a668a0",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"   pm.test(\"Response data has property message contains: Unsupported clause\", () => {",
											"       pm.expect(jsonData.message).to.eql(\"Unsupported clause: order = 2\");",
											"   });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "bd1ba8c2-50c3-47b5-8109-5cb427071eb8",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'order' = '2'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query objects - Not allowed query clause value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb9ba1a2-9a69-4c97-a2f8-6ef32ff32540",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"    pm.test(\"Response data has property message contains 'is now allowed'\", () => {",
											"        pm.expect(jsonData.message).to.eql(\"Value 'abcd' is not allowed for field 'Priority'. Please given an allowed value!\");",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8b6858a3-de34-456e-b15a-20e296aea7ae",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'priority' = 'abcd'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query objects - Query criteria name missing closing single quote",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1a94b8e0-0001-462a-b889-8726d2650eb2",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"   pm.test(\"Response data has property message contains: Bad clause\", () => {",
											"       pm.expect(jsonData.message).to.eql(`Bad clause: id = ${pm.environment.get(\"newReqId1\")}`);",
											"   });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c21faa9f-dd79-4356-8b28-412dea8961c6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'id = '{{newReqId1}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query objects - Query criteria name missing opening single quote",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "70b3a3f0-6dde-49c4-a58a-6553be115a91",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"   pm.test(\"Response data has property message contains: Bad clause\", () => {",
											"       pm.expect(jsonData.message).to.eql(`Bad clause: id' = '${pm.environment.get(\"newReqId1\")}'`);",
											"   });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "da311ea2-5f9d-4240-ae30-d6c2988ab1b4",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"id' = '{{newReqId1}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query objects - Invalid date time format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fdaa3126-81ec-4a84-9f39-1fb68f865b80",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"   pm.test(\"Response data has property message contains: Could not parse date time.\", () => {",
											"       pm.expect(jsonData.message).to.eql(\"Could not parse date time. Please use one of the following format: yyyy-MM-dd'T'HH:mm:ss.SSSZ, yyyy-MM-dd'T'HH:mm:ssZZ\");",
											"   });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5c54a50d-8d56-418b-9af3-75b3c44eaca0",
										"type": "text/javascript",
										"exec": [
											"var today = new Date();",
											"pm.environment.set(\"dateToCompare\", today.toISOString());"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"query\": \"'last modified date' < '{{dateToCompare}}abcd'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/search",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"search"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Cleanup",
					"item": [
						{
							"name": "200 - Cleanup - Delete project",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "efabe461-d702-44c6-8580-1422ba124590",
										"exec": [
											"if (pm.response.code === 200) {",
											"    //get response body",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.test(\"Response code: \" + pm.response.code, function(){",
											"        pm.response.to.have.status(200);",
											"    });",
											"    ",
											"    pm.test(\"Delete project success without any errors\", function(){",
											"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
											"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
											"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
											"    });",
											"    ",
											"} else {",
											"    //other mark failed",
											"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
											"        pm.response.to.have.status(200);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4a3db70e-f097-479c-ba32-1bef2d53ad73",
										"exec": [
											"// generator csrf token\r",
											"var base64object = function(input) {\r",
											" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
											" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
											" return base64;\r",
											"};\r",
											"let uuid = require('uuid');\r",
											"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
											"pm.environment.set(\"csrfToken\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "{{qtestUserCookie}}"
									},
									{
										"key": "X-CSRF-Token",
										"value": "{{csrfToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "id",
											"value": "{{projectId}}",
											"type": "text"
										},
										{
											"key": "dojo.preventCache",
											"value": "{{csrfToken}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{qtestUrl}}/admin/proj/delete-project",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"admin",
										"proj",
										"delete-project"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Cleanup - Logout",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0986078a-e34f-4619-ac2f-f68af8a9d9e7",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6319150f-ca5a-4ea4-b20a-9f5d56413746",
										"type": "text/javascript",
										"exec": [
											"/*",
											"  Unset all fields of type. Valid Type values are Release, Build, TestSuite",
											"*/",
											"function unsetFieldIdsOfType(type, fieldsArray) {",
											"    const PREFIX = `fieldId${type}`;",
											"    let userList = pm.environment.get(\"userList\");",
											"    ",
											"    if (!fieldsArray || !userList) {",
											"        return;",
											"    }",
											"    ",
											"    fieldsArray.forEach((field) => {",
											"        let variableName = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\");",
											"        pm.environment.unset(variableName);",
											"",
											"        if (field.allowed_values) {",
											"            let fieldValueId = \"\";",
											"",
											"            field.allowed_values.forEach((item, index) => {",
											"                switch (field.label) {",
											"                    case \"Assigned To\":",
											"                        pm.environment.unset(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"UserTest\");",
											"                        ",
											"                        userList.forEach((user, userIndex) => {",
											"                            fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
											"                            pm.environment.unset(fieldValueId);",
											"                        });",
											"                        break;",
											"",
											"                    case \"Target Release/Build\":",
											"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"Target\" + (index + 1).toString();",
											"                        pm.environment.unset(fieldValueId);",
											"                        break;",
											"",
											"                    default:",
											"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
											"                        pm.environment.unset(fieldValueId);",
											"                        break;",
											"                }",
											"",
											"            });",
											"        }",
											"    });",
											"",
											"}",
											"",
											"if (pm.response.code === 200) {",
											"",
											"    pm.test(\"Response code: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    var releaseFields = pm.environment.get(\"releaseFields\");",
											"    var buildFields = pm.environment.get(\"buildFields\");",
											"    var requirementFields = pm.environment.get(\"requirementFields\");",
											"    var testSuiteFields = pm.environment.get(\"testSuiteFields\");",
											"    var testCaseFields = pm.environment.get(\"testCaseFields\");",
											"    var testRunFields = pm.environment.get(\"testRunFields\");",
											"",
											"    unsetFieldIdsOfType(\"Release\", releaseFields);",
											"    unsetFieldIdsOfType(\"Build\", buildFields);",
											"    unsetFieldIdsOfType(\"Req\", requirementFields);",
											"    unsetFieldIdsOfType(\"TestSuite\", testSuiteFields);",
											"    unsetFieldIdsOfType(\"TestRun\", testRunFields);",
											"    unsetFieldIdsOfType(\"TestCase\", testCaseFields);",
											"    ",
											"    pm.environment.unset(\"newModuleId1\");",
											"    pm.environment.unset(\"newModuleName1\");",
											"    ",
											"    pm.environment.unset(\"releaseFields\");",
											"    pm.environment.unset(\"buildFields\");",
											"    pm.environment.unset(\"requirementFields\");",
											"    pm.environment.unset(\"testCaseFields\");",
											"    pm.environment.unset(\"testSuiteFields\");",
											"    pm.environment.unset(\"testRunFields\");",
											"    pm.environment.unset(\"defectFields\");",
											"    ",
											"    pm.environment.unset(\"qtestUserCookie\");",
											"    pm.environment.unset(\"tokenType\");",
											"    pm.environment.unset(\"csrfToken\");",
											"    pm.environment.unset(\"accessToken\");",
											"    pm.environment.unset(\"projectStartDate\");",
											"    pm.environment.unset(\"projectEndDate\");",
											"    pm.environment.unset(\"projectStartDate\");",
											"    pm.environment.unset(\"projectName\");",
											"    ",
											"    pm.environment.unset(\"startDate\");",
											"    pm.environment.unset(\"startDate1\");",
											"    pm.environment.unset(\"startDate2\");",
											"    pm.environment.unset(\"startDate3\");",
											"    pm.environment.unset(\"endDate\");",
											"    pm.environment.unset(\"endDate1\");",
											"    pm.environment.unset(\"endDate2\");",
											"    pm.environment.unset(\"endDate3\");",
											"",
											"    pm.environment.unset(\"releaseName\");",
											"    pm.environment.unset(\"releaseDescription\");",
											"    pm.environment.unset(\"releaseNote\");",
											"",
											"    pm.environment.unset(\"newReleaseId1\");",
											"    pm.environment.unset(\"newReleaseId2\");",
											"    pm.environment.unset(\"releaseInfo1\");",
											"    pm.environment.unset(\"releaseInfo2\");",
											"    pm.environment.unset(\"newReleaseName1\");",
											"    pm.environment.unset(\"newReleaseName2\");",
											"    ",
											"    pm.environment.unset(\"newBuildId1\");",
											"    pm.environment.unset(\"newBuildName1\");",
											"    pm.environment.unset(\"buildInfo1\");",
											"    pm.environment.unset(\"buildDate\");",
											"    pm.environment.unset(\"buildNote\");",
											"    pm.environment.unset(\"buildName\");",
											"    ",
											"    pm.environment.unset(\"reqName1\");",
											"    pm.environment.unset(\"reqName2\");",
											"    pm.environment.unset(\"newReqId1\");",
											"    pm.environment.unset(\"newReqId2\");",
											"    pm.environment.unset(\"notExistReqId1\");",
											"    pm.environment.unset(\"notExistReqId2\");",
											"    pm.environment.unset(\"notExistReqId3\");",
											"    pm.environment.unset(\"reqDescription1\");",
											"    pm.environment.unset(\"reqDescription2\");",
											"    pm.environment.unset(\"reqInfo1\");",
											"    pm.environment.unset(\"reqInfo2\");",
											"    ",
											"    pm.environment.unset(\"testCaseName1\");",
											"    pm.environment.unset(\"testCaseName2\");",
											"    pm.environment.unset(\"testCaseName3\");",
											"    pm.environment.unset(\"testCaseName4\");",
											"    ",
											"    pm.environment.unset(\"testCaseDescription1\");",
											"    pm.environment.unset(\"testCaseDescription2\");",
											"    pm.environment.unset(\"testCaseDescription3\");",
											"    pm.environment.unset(\"testCaseDescription4\");",
											"    ",
											"    pm.environment.unset(\"testCasePrecondition1\");",
											"    pm.environment.unset(\"testCasePrecondition2\");",
											"    pm.environment.unset(\"testCasePrecondition3\");",
											"    pm.environment.unset(\"testCasePrecondition4\");",
											"    ",
											"    pm.environment.unset(\"testStepDescription1\");",
											"    pm.environment.unset(\"testStepExpected1\");",
											"    ",
											"    pm.environment.unset(\"newTestCaseId1\");",
											"    pm.environment.unset(\"newTestCaseId2\");",
											"    pm.environment.unset(\"newTestCaseId3\");",
											"    pm.environment.unset(\"newTestCaseId4\");",
											"    ",
											"    pm.environment.unset(\"testCaseInfo1\");",
											"    pm.environment.unset(\"testCaseInfo2\");",
											"    pm.environment.unset(\"testCaseInfo3\");",
											"    pm.environment.unset(\"testCaseInfo4\");",
											"    ",
											"    pm.environment.unset(\"testCaseAutomationContent\");",
											"    ",
											"    pm.environment.unset(\"newCycleId1\");",
											"    pm.environment.unset(\"newCycleName1\");",
											"    pm.environment.unset(\"cycleDescription\");",
											"    pm.environment.unset(\"cycleInfo1\");",
											"    ",
											"    pm.environment.unset(\"newTestSuiteId1\");",
											"    pm.environment.unset(\"newTestSuiteName1\");",
											"    pm.environment.unset(\"testSuiteInfo1\");",
											"    pm.environment.unset(\"suiteDescription\");",
											"    ",
											"    pm.environment.unset(\"testRunName\");",
											"    ",
											"    pm.environment.unset(\"newTestRunId1\");",
											"    pm.environment.unset(\"newTestRunId2\");",
											"    pm.environment.unset(\"newTestRunId3\");",
											"    pm.environment.unset(\"newTestRunId4\");",
											"    pm.environment.unset(\"newTestRunId5\");",
											"    pm.environment.unset(\"newTestRunId6\");",
											"    ",
											"    pm.environment.unset(\"testRunInfo1\");",
											"    pm.environment.unset(\"testRunInfo2\");",
											"    pm.environment.unset(\"testRunInfo3\");",
											"    pm.environment.unset(\"testRunInfo4\");",
											"    pm.environment.unset(\"testRunInfo5\");",
											"    pm.environment.unset(\"testRunInfo6\");",
											"    ",
											"    pm.environment.unset(\"testRunStatus1\");",
											"    ",
											"    pm.environment.unset(\"newTestStepId1c1\");",
											"    pm.environment.unset(\"testStepInfo1c1\");",
											"    ",
											"    pm.environment.unset(\"statusPassedId\");",
											"    pm.environment.unset(\"statusFailedId\");",
											"    pm.environment.unset(\"statusIncompleteId\");",
											"    pm.environment.unset(\"statusBlockedId\");",
											"    pm.environment.unset(\"statusUnexecutedId\");",
											"    ",
											"    pm.environment.unset(\"exeEndDate\");",
											"    pm.environment.unset(\"exeStartDate\");",
											"    pm.environment.unset(\"newTestLogId1\");",
											"    pm.environment.unset(\"testLogInfo1\");",
											"    pm.environment.unset(\"newTestStepLogId1r1\");",
											"    pm.environment.unset(\"testStepLogInfo1r1\");",
											"    ",
											"    pm.environment.unset(\"fieldIdDefectDescription\");",
											"    pm.environment.unset(\"fieldIdDefectSummary\");",
											"    pm.environment.unset(\"defectSummary\");",
											"    pm.environment.unset(\"defectDescription\");",
											"    pm.environment.unset(\"newDefectId1\");",
											"    pm.environment.unset(\"defectInfo1\");",
											"    pm.environment.unset(\"requestDefectProperties\");",
											"    ",
											"    pm.environment.unset(\"dateToCompare\");",
											"    ",
											"    pm.environment.unset(\"notExistReqId1\");",
											"    pm.environment.unset(\"notExistReqId2\");",
											"    pm.environment.unset(\"notExistReqId3\");",
											"    ",
											"    pm.environment.unset(\"notExistPostfix\");",
											"    pm.environment.unset(\"invalidPostfix\");",
											"",
											"    pm.environment.unset(\"userList\");",
											"    pm.environment.unset(\"userTestFullName\");",
											"    pm.environment.unset(\"userTestId\");",
											"    pm.environment.unset(\"testStepLogId1\");",
											"    pm.environment.unset(\"testCasePid1\");",
											"    pm.environment.unset(\"defectPriorityId\");",
											"    pm.environment.unset(\"defectTypeId\");",
											"    pm.environment.unset(\"defectReasonId\");",
											"    pm.environment.unset(\"defectRootCauseId\");",
											"    pm.environment.unset(\"defectSeverityId\");",
											"    pm.environment.unset(\"defectStatusId\");",
											"    pm.environment.unset(\"testRunPid1\");",
											"    pm.environment.unset(\"testRunName1\");",
											"} else {",
											"    //other mark failed",
											"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), () => {",
											"        pm.response.to.have.status(200);",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{qtestUrl}}/oauth/revoke",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"oauth",
										"revoke"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d530e9cf-5823-46eb-84f2-e303392cacf1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "90b7a4ad-4dee-4f25-a441-4de90dce3d19",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3ab512fa-7dee-415b-bacc-89c564432162",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "08c780f9-1379-44c6-a92d-cb456da5b347",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Query comments",
			"item": [
				{
					"name": "Precondition",
					"item": [
						{
							"name": "Login and Create Project",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d904c6b-eabc-46d0-892e-6e97f6d23ab3",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code + \" -  Login\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"    ",
													"    var CryptoJS = require(\"crypto-js\");",
													"    //Encrypt",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Get user id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "81356dbe-b6f7-4a57-9e7b-22fe420a6e4c",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Response data contains data of apiuser1@qas.com\", function() {",
													"        pm.expect(jsonData.items[0].username).to.eql(pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"        pm.expect(pm.response.text()).to.include(\"email\");",
													"        pm.expect(jsonData.items[0].first_name).to.eql(\"API\");",
													"        pm.expect(jsonData.items[0].last_name).to.eql(\"User 1\");",
													"        pm.expect(pm.response.text()).to.include(\"status\");",
													"        pm.expect(pm.response.text()).to.include(\"timezone_offset\");",
													"        pm.expect(pm.response.text()).to.include(\"country_name\");",
													"    });",
													"    ",
													"    pm.environment.set(\"userId\", jsonData.items[0].id);",
													"",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9749803d-81f6-4b36-83cd-d110262113ba",
												"exec": [
													"pm.environment.set(\"username1\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"pm.environment.set(\"firstName1\", \"API\");",
													"pm.environment.set(\"lastName1\", \"User 1\");",
													"pm.environment.set(\"email1\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/users/search?username={{username1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"users",
												"search"
											],
											"query": [
												{
													"key": "username",
													"value": "{{username1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create Project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4373df2-507b-4428-9070-de60b928882e",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"    pm.environment.set(\"projectName\", jsonData.name);",
													"    pm.environment.set(\"projectStartDate\", jsonData.start_date);",
													"    pm.environment.set(\"projectEndDate\", jsonData.end_date);",
													"    ",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6a2a4b2-bbad-409f-8191-cbabc73c44cd",
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman - Query comments\",\n  \"description\": \"Description of qTest API Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\"\n  ],\n  \"automation\": true\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Queries Users by Project Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50e68bda-785c-4c18-aa4f-1f3f03e55a92",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Response data contains page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"    pm.test(\"Response data contains page size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"    pm.test(\"Response data contains total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(1);",
													"    });",
													"    pm.test(\"Response data contains total project: \" + jsonData.total_project, () => {",
													"        pm.expect(jsonData.total_project).to.eql(1);",
													"    });",
													"    if (jsonData.items && jsonData.items.length > 0) {",
													"        jsonData.items.forEach((item, index) => {",
													"            if (item.username === pm.environment.get(\"username\")) {",
													"                pm.test(\"Response data contains user property\", () => {",
													"                    pm.expect(item.id).to.not.eql(null);",
													"                    pm.expect(item.username).to.eql(pm.environment.get(\"username\"));",
													"                    pm.expect(item.first_name).to.not.eql(null);",
													"                    pm.expect(item.last_name).to.not.eql(null);",
													"                    pm.expect(item.avatar).to.not.eql(null);",
													"                    item.assigned_projects.forEach((projectId) => {",
													"                        if (projectId === pm.environment.get(\"projectId\")) {",
													"                            return false;",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    }",
													"",
													"    pm.environment.set(\"userList\", jsonData.items);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/search/user?projectName={{projectName}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"search",
												"user"
											],
											"query": [
												{
													"key": "projectName",
													"value": "{{projectName}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Login with unassigned user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bd16ef55-327e-45d3-b6ff-9d6ff5a52e14",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code + \" -  Login\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken1\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType1\", jsonData.token_type);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username1}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Modules",
							"item": [
								{
									"name": "201 - Precondition - Create a Module",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c05681d-c0a9-4be9-b4a1-da91e2ff1dae",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, () => {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response data has correct properties\", () => {",
													"        pm.expect(jsonData.links).not.to.eql(null);",
													"        pm.expect(jsonData.id).not.to.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"newModuleName1\"));",
													"        pm.expect(jsonData.order).not.to.eql(null);",
													"        pm.expect(jsonData.pid).not.to.eql(null);",
													"        pm.expect(jsonData.created_date).not.to.eql(null);",
													"        pm.expect(jsonData.last_modified_date).not.to.eql(null);",
													"        pm.expect(jsonData.parent_id).not.to.eql(null);",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 1\");",
													"    });",
													"    ",
													"    pm.environment.set(\"newModuleId1\", jsonData.id);",
													"    ",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1b7fd3fa-1f65-48bc-9686-60a8d048c8ee",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"newModuleName1\", \"Module 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{newModuleName1}}\",\r\n  \"description\": \"Description of Module 1\",\r\n  \"shared\": false\r\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Requirements",
							"item": [
								{
									"name": "200 - Precondition - Get requirement fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e3a8eeb-236b-4d8f-a230-ab5834eb3a68",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdReq\";",
													"    var jsonData = pm.response.json();",
													"    var userList = pm.environment.get(\"userList\");",
													"    pm.environment.set(\"requirementFields\", jsonData);",
													"",
													"    jsonData.forEach((field) => {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"",
													"        if (field.allowed_values) {",
													"            var fieldValueId = \"\";",
													"",
													"            field.allowed_values.forEach((item, index) => {",
													"",
													"                switch (field.label) {",
													"                    case \"Assigned To\":",
													"                        userList.forEach((user, userIndex) => {",
													"                            // Just save variables of users who have admin permission",
													"                            if (item.label === `${user.first_name} ${user.last_name}`) {",
													"                                if (user.username === pm.environment.get(\"username\")) {",
													"                                    // UserTest: user who directly affects to the test case",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + `UserTest`;",
													"                                    pm.environment.set(\"userTestFullName\", item.label);",
													"                                    pm.environment.set(\"userTestId\", user.id);",
													"                                } else {",
													"                                    // Other users who have admin permission",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                                }",
													"                                pm.environment.set(fieldValueId, item.value);",
													"                            }",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                        break;",
													"                }",
													"",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/requirements/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"requirements",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create requirement 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2245412d-97e9-4792-931a-3766aa9e3f1a",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newReqId1\", jsonData.id);",
													"    pm.environment.set(\"reqInfo1\", jsonData);",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"id\");",
													"    });",
													"",
													"    pm.test(\"Response data contains name: \" + jsonData.name, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"    });",
													"",
													"    pm.test(\"Response data has order property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"order\");",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"pid\");",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"created_date\");",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"last_modified_date\");",
													"    });",
													"    ",
													"    pm.test(\"Response data contains parent_id property\", () => {",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to\", () => {",
													"                    pm.expect(field.field_value_name).to.eql(`[${pm.environment.get(\"userTestFullName\")}]`);",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToUserTest\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data has description: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3dc48a9f-8ea0-4400-83f4-82a50b87fc20",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 1\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n  \"properties\": [\n    {\n        \"field_id\": \"{{fieldIdReqStatus}}\",\n        \"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdReqPriority}}\",\n        \"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdReqType}}\",\n        \"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdReqAssignedTo}}\",\n        \"field_value\": \"[{{fieldIdReqAssignedToUserTest}}]\"\n    },\n    {\n        \"field_id\": \"{{fieldIdReqDescription}}\",\n        \"field_value\": \"{{reqDescription}}\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create requirement 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a3d9405-f7f9-4242-a919-343f7af19cdc",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newReqId2\", jsonData.id);",
													"    pm.environment.set(\"reqInfo2\", jsonData);",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"id\");",
													"    });",
													"",
													"    pm.test(\"Response data contains name: \" + jsonData.name, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"    });",
													"",
													"    pm.test(\"Response data has order property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"order\");",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"pid\");",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"created_date\");",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"last_modified_date\");",
													"    });",
													"    ",
													"    pm.test(\"Response data contains parent_id property\", () => {",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has assigned to\", () => {",
													"                    pm.expect(field.field_value_name).to.eql(`[${pm.environment.get(\"userTestFullName\")}]`);",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToUserTest\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data has description: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f6e92cb6-5081-41ce-ab45-52b928e8e18e",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 2\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 2\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n  \"properties\": [\n    {\n        \"field_id\": \"{{fieldIdReqStatus}}\",\n        \"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdReqPriority}}\",\n        \"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdReqType}}\",\n        \"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdReqAssignedTo}}\",\n        \"field_value\": \"[{{fieldIdReqAssignedToUserTest}}]\"\n    },\n    {\n        \"field_id\": \"{{fieldIdReqDescription}}\",\n        \"field_value\": \"{{reqDescription}}\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Add comment to requirement 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1cd730a1-922c-41fa-90c5-35b9f2456186",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"reqCommentInfo1\", jsonData);",
													"",
													"    pm.test(\"Status code is 201\", () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"    ",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property created\", () => {",
													"        pm.expect(jsonData).to.have.property(\"created\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property userId\", () => {",
													"        pm.expect(jsonData.userId).to.eql(pm.environment.get(\"userTestId\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has property id\", () => {",
													"        pm.expect(jsonData).to.have.property(\"id\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property content: \" + jsonData.content, () => {",
													"        pm.expect(jsonData.content).to.eql(pm.environment.get(\"reqComment1\"));",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d46715ac-7ab1-4e8d-9885-da28e4657f6b",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqComment1\", \"Comment 1 of Requirement 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"content\": \"{{reqComment1}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Add comment to requirement 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1d03a00-d1b3-4dc1-9862-8b3a214b57b3",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"reqCommentInfo2\", jsonData);",
													"",
													"    pm.test(\"Status code is 201\", () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"    ",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property created\", () => {",
													"        pm.expect(jsonData).to.have.property(\"created\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property userId\", () => {",
													"        pm.expect(jsonData.userId).to.eql(pm.environment.get(\"userTestId\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has property id\", () => {",
													"        pm.expect(jsonData).to.have.property(\"id\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property content: \" + jsonData.content, () => {",
													"        pm.expect(jsonData.content).to.eql(pm.environment.get(\"reqComment2\"));",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a90ed58f-3dcc-4024-b2dc-67b162818433",
												"type": "text/javascript",
												"exec": [
													"// Implementation of delay function",
													"function delay(millis) {",
													"    var date = new Date();",
													"    var curDate = null;",
													"    do {",
													"        curDate = new Date();",
													"    } while (curDate - date < millis);",
													"}",
													"",
													"// delay 2 seconds before sending request to makesure the update time is different from the others",
													"delay(2000);",
													"",
													"pm.environment.set(\"reqComment2\", \"Comment 1 of Requirement 2\");",
													"",
													"let today = new Date();",
													"pm.environment.set(\"req2CommentStartDate\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"content\": \"{{reqComment2}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId2}}/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId2}}",
												"comments"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Test Cases",
							"item": [
								{
									"name": "200 - Precondition - Get Test Case fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd238bbd-c4a6-4516-8d5a-da957a1560f7",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdTestCase\";",
													"    var jsonData = pm.response.json();",
													"    var userList = pm.environment.get(\"userList\");",
													"    pm.environment.set(\"testCaseFields\", jsonData);",
													"",
													"    jsonData.forEach((field) => {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"",
													"        if (field.allowed_values) {",
													"            var fieldValueId = \"\";",
													"",
													"            field.allowed_values.forEach((item, index) => {",
													"",
													"                switch (field.label) {",
													"                    case \"Assigned To\":",
													"                        userList.forEach((user, userIndex) => {",
													"                            // Just save variables of users who have admin permission",
													"                            if (item.label === `${user.first_name} ${user.last_name}`) {",
													"                                if (user.username === pm.environment.get(\"username\")) {",
													"                                    // UserTest: user who directly affects to the test case",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + `UserTest`;",
													"                                    pm.environment.set(\"userTestFullName\", item.label);",
													"                                    pm.environment.set(\"userTestId\", user.id);",
													"                                } else {",
													"                                    // Other users who have admin permission",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                                }",
													"                                pm.environment.set(fieldValueId, item.value);",
													"                            }",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                        break;",
													"                }",
													"",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/test-cases/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"test-cases",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create Test Case 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f19f4d3-5feb-4b59-9335-cf8e1f2c338c",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newTestCaseId1\", jsonData.id);",
													"    pm.environment.set(\"testCaseInfo1\", jsonData);",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"id\");",
													"    });",
													"",
													"    pm.test(`Response data contains name: ${jsonData.name}`, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"testCaseName1\"));",
													"    });",
													"",
													"    pm.test(\"Response data has order property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"order\");",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"pid\");",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"created_date\");",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"last_modified_date\");",
													"    });",
													"",
													"    pm.test(\"Response data has web_url property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"web_url\");",
													"    });",
													"",
													"    pm.test(\"Response data contains parent_id property\", () => {",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"test_case_version_id\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has version property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"version\");",
													"    });",
													"    ",
													"    pm.test(`Response data contains description property: ${jsonData.description}`, () => {",
													"        pm.expect(jsonData.description).to.eql(pm.environment.get(\"testCaseDescription1\"));",
													"    });",
													"    ",
													"    pm.test(`Response data contains precondition property: ${jsonData.precondition}`, () => {",
													"        pm.expect(jsonData.precondition).to.eql(pm.environment.get(\"testCasePrecondition1\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"creator_id\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has agent_ids property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"agent_ids\");",
													"    });",
													"",
													"    jsonData.test_steps.forEach((step, index) => {",
													"        pm.test(`Response data has test_steps[${index}] has links property`, () => {",
													"            pm.expect(step).to.have.property(\"links\");",
													"        });",
													"        ",
													"        pm.test(`Response data has test_steps[${index}] has id property`, () => {",
													"            pm.expect(step).to.have.property(\"id\");",
													"        });",
													"        ",
													"        pm.test(`Response data has test_steps[${index}] contains description property: ${step.description}`, () => {",
													"            pm.expect(step.description).to.eql(pm.environment.get(\"testStepDescription1\"));",
													"        });",
													"        ",
													"        pm.test(`Response data has test_steps[${index}] contains expected property: ${step.expected}`, () => {",
													"            pm.expect(step.expected).to.eql(pm.environment.get(\"testStepExpected1\"));",
													"        });",
													"        ",
													"        pm.test(`Response data has test_steps[${index}] has order property`, () => {",
													"            pm.expect(step).to.have.property(\"order\");",
													"        });",
													"        ",
													"        pm.test(`Response data has test_steps[${index}] has ${step.attachments.length} attachment property`, () => {",
													"            pm.expect(step).to.have.property(\"attachments\");",
													"            pm.expect(step.attachments.length).to.eql(1);",
													"        });",
													"    });",
													"",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Automation\":",
													"                pm.test(`Response data has automation: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"No\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseAutomationNo\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Automation Content\":",
													"                pm.test(\"Response data has empty automation content\", () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"",
													"            case \"Status\":",
													"                pm.test(`Repsonse data has status: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Type\":",
													"                pm.test(`Repsonse data has type: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Performance\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseTypePerformance\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(`Repsonse data has priority: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"High\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCasePriorityHigh\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(`[${pm.environment.get(\"userTestFullName\")}]`);",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdTestCaseAssignedToUserTest\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(`Repsonse data has description: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCaseDescription1\"));",
													"                });",
													"                break;",
													"",
													"            case \"Precondition\":",
													"                pm.test(`Repsonse data has precondition: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCasePrecondition1\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "67b4f2f7-27da-4ee4-8469-56d0756c5976",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"testCaseName1\", \"Test Case 1\");",
													"pm.environment.set(\"testCaseDescription1\", \"Description of Test Case 1\");",
													"pm.environment.set(\"testCasePrecondition1\", \"Precondition of Test Case 1\");",
													"",
													"pm.environment.set(\"testStepDescription1\", \"Description of test step 1\");",
													"pm.environment.set(\"testStepExpected1\", \"Expected of test step 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{testCaseName1}}\",\n    \"properties\": [\n        {\n            \"field_id\": \"{{fieldIdTestCaseAutomation}}\",\n            \"field_value\": \"{{fieldIdTestCaseAutomationNo}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseStatus}}\",\n            \"field_value\": \"{{fieldIdTestCaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseType}}\",\n            \"field_value\": \"{{fieldIdTestCaseTypePerformance}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseAssignedTo}}\",\n            \"field_value\": \"[{{fieldIdTestCaseAssignedToUserTest}}]\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseDescription}}\",\n            \"field_value\": \"{{testCaseDescription1}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCasePrecondition}}\",\n            \"field_value\": \"{{testCasePrecondition1}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCasePriority}}\",\n            \"field_value\": \"{{fieldIdTestCasePriorityHigh}}\"\n        }\n    ],\n    \"test_steps\": [\n        {\n            \"description\": \"{{testStepDescription1}}\",\n            \"expected\": \"{{testStepExpected1}}\",\n            \"attachments\": [\n              {\n          \"name\": \"sample_file_name.txt\",\n          \"content_type\": \"text/plain\",\n          \"data\": \"dGhpcyBpcyBzYW1wbGUgdGVzdA==\"\n              }\n            ]\n        }\n    ],\n    \"parent_id\": \"{{newModuleId1}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cases"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create Test Case 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42d085fe-d082-4add-bbbb-add5fb4267b8",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newTestCaseId2\", jsonData.id);",
													"    pm.environment.set(\"testCaseInfo2\", jsonData);",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"id\");",
													"    });",
													"",
													"    pm.test(`Response data contains name: ${jsonData.name}`, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"testCaseName2\"));",
													"    });",
													"",
													"    pm.test(\"Response data has order property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"order\");",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"pid\");",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"created_date\");",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"last_modified_date\");",
													"    });",
													"",
													"    pm.test(\"Response data has web_url property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"web_url\");",
													"    });",
													"",
													"    pm.test(\"Response data contains parent_id property\", () => {",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"test_case_version_id\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has version property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"version\");",
													"    });",
													"    ",
													"    pm.test(`Response data contains description property: ${jsonData.description}`, () => {",
													"        pm.expect(jsonData.description).to.eql(pm.environment.get(\"testCaseDescription2\"));",
													"    });",
													"    ",
													"    pm.test(`Response data contains precondition property: ${jsonData.precondition}`, () => {",
													"        pm.expect(jsonData.precondition).to.eql(pm.environment.get(\"testCasePrecondition2\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"creator_id\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has agent_ids property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"agent_ids\");",
													"    });",
													"",
													"    jsonData.test_steps.forEach((step, index) => {",
													"        pm.test(`Response data has test_steps[${index}] has links property`, () => {",
													"            pm.expect(step).to.have.property(\"links\");",
													"        });",
													"        ",
													"        pm.test(`Response data has test_steps[${index}] has id property`, () => {",
													"            pm.expect(step).to.have.property(\"id\");",
													"        });",
													"        ",
													"        pm.test(`Response data has test_steps[${index}] contains description property: ${step.description}`, () => {",
													"            pm.expect(step.description).to.eql(pm.environment.get(\"testStepDescription1\"));",
													"        });",
													"        ",
													"        pm.test(`Response data has test_steps[${index}] contains expected property: ${step.expected}`, () => {",
													"            pm.expect(step.expected).to.eql(pm.environment.get(\"testStepExpected1\"));",
													"        });",
													"        ",
													"        pm.test(`Response data has test_steps[${index}] has order property`, () => {",
													"            pm.expect(step).to.have.property(\"order\");",
													"        });",
													"        ",
													"        pm.test(`Response data has test_steps[${index}] has ${step.attachments.length} attachment property`, () => {",
													"            pm.expect(step).to.have.property(\"attachments\");",
													"            pm.expect(step.attachments.length).to.eql(1);",
													"        });",
													"    });",
													"",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Automation\":",
													"                pm.test(`Response data has automation: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"No\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseAutomationNo\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Automation Content\":",
													"                pm.test(\"Response data has empty automation content\", () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"",
													"            case \"Status\":",
													"                pm.test(`Repsonse data has status: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Type\":",
													"                pm.test(`Repsonse data has type: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Performance\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseTypePerformance\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(`Repsonse data has priority: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"High\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCasePriorityHigh\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(`[${pm.environment.get(\"userTestFullName\")}]`);",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdTestCaseAssignedToUserTest\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(`Repsonse data has description: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCaseDescription2\"));",
													"                });",
													"                break;",
													"",
													"            case \"Precondition\":",
													"                pm.test(`Repsonse data has precondition: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCasePrecondition2\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a53fa90c-9fa2-4e3f-af6e-b2c9f378ee76",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"testCaseName2\", \"Test Case 2\");",
													"pm.environment.set(\"testCaseDescription2\", \"Description of Test Case 2\");",
													"pm.environment.set(\"testCasePrecondition2\", \"Precondition of Test Case 2\");",
													"",
													"pm.environment.set(\"testStepDescription1\", \"Description of test step 1\");",
													"pm.environment.set(\"testStepExpected1\", \"Expected of test step 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{testCaseName2}}\",\n    \"properties\": [\n        {\n            \"field_id\": \"{{fieldIdTestCaseAutomation}}\",\n            \"field_value\": \"{{fieldIdTestCaseAutomationNo}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseStatus}}\",\n            \"field_value\": \"{{fieldIdTestCaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseType}}\",\n            \"field_value\": \"{{fieldIdTestCaseTypePerformance}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseAssignedTo}}\",\n            \"field_value\": \"[{{fieldIdTestCaseAssignedToUserTest}}]\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseDescription}}\",\n            \"field_value\": \"{{testCaseDescription2}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCasePrecondition}}\",\n            \"field_value\": \"{{testCasePrecondition2}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCasePriority}}\",\n            \"field_value\": \"{{fieldIdTestCasePriorityHigh}}\"\n        }\n    ],\n    \"test_steps\": [\n        {\n            \"description\": \"{{testStepDescription1}}\",\n            \"expected\": \"{{testStepExpected1}}\",\n            \"attachments\": [\n              {\n          \"name\": \"sample_file_name.txt\",\n          \"content_type\": \"text/plain\",\n          \"data\": \"dGhpcyBpcyBzYW1wbGUgdGVzdA==\"\n              }\n            ]\n        }\n    ],\n    \"parent_id\": \"{{newModuleId1}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cases"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Add comment to test case 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0aac7e63-7139-43ec-8517-b795a0d1ac48",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"testCaseCommentInfo1\", jsonData);",
													"",
													"    pm.test(\"Status code is 201\", () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"    ",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property created\", () => {",
													"        pm.expect(jsonData).to.have.property(\"created\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property userId\", () => {",
													"        pm.expect(jsonData.userId).to.eql(pm.environment.get(\"userTestId\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has property id\", () => {",
													"        pm.expect(jsonData).to.have.property(\"id\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property content: \" + jsonData.content, () => {",
													"        pm.expect(jsonData.content).to.eql(pm.environment.get(\"testCaseComment1\"));",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3b4ccf15-ec5f-4bb2-a9e3-eaa86a3adb88",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"testCaseComment1\", \"Comment 1 of TestCase 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"content\": \"{{testCaseComment1}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cases/{{newTestCaseId1}}/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cases",
												"{{newTestCaseId1}}",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Add comment to test case 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e005610-9be3-4c58-bd52-e810632e5cda",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"testCaseCommentInfo2\", jsonData);",
													"",
													"    pm.test(\"Status code is 201\", () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"    ",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property created\", () => {",
													"        pm.expect(jsonData).to.have.property(\"created\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property userId\", () => {",
													"        pm.expect(jsonData.userId).to.eql(pm.environment.get(\"userTestId\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has property id\", () => {",
													"        pm.expect(jsonData).to.have.property(\"id\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property content: \" + jsonData.content, () => {",
													"        pm.expect(jsonData.content).to.eql(pm.environment.get(\"testCaseComment2\"));",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7c527c75-45a7-4e9d-b448-88bcf1a929d8",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"testCaseComment2\", \"Comment 1 of TestCase 2\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"content\": \"{{testCaseComment2}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cases/{{newTestCaseId2}}/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cases",
												"{{newTestCaseId2}}",
												"comments"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Test Runs",
							"item": [
								{
									"name": "200 - Precondition - Get Test Run fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ce9bfe9-803c-4035-959e-e8e39670866c",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdTestRun\";",
													"    var jsonData = pm.response.json();",
													"    var userList = pm.environment.get(\"userList\");",
													"    pm.environment.set(\"testRunFields\", jsonData);",
													"",
													"    jsonData.forEach((field) => {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"",
													"        if (field.allowed_values) {",
													"            var fieldValueId = \"\";",
													"",
													"            field.allowed_values.forEach((item, index) => {",
													"",
													"                switch (field.label) {",
													"                    case \"Assigned To\":",
													"                        userList.forEach((user, userIndex) => {",
													"                            // Just save variables of users who have admin permission",
													"                            if (item.label === `${user.first_name} ${user.last_name}`) {",
													"                                if (user.username === pm.environment.get(\"username\")) {",
													"                                    // UserTest: user who directly affects to the test case",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + `UserTest`;",
													"                                    pm.environment.set(\"userTestFullName\", item.label);",
													"                                    pm.environment.set(\"userTestId\", user.id);",
													"                                } else {",
													"                                    // Other users who have admin permission",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                                }",
													"                                pm.environment.set(fieldValueId, item.value);",
													"                            }",
													"                        });",
													"                        break;",
													"                    case \"Target Release/Build\":",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"Target\" + (index + 1).toString();",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                        break;",
													"                    default:",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                        break;",
													"                }",
													"",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/test-runs/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"test-runs",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create a test run",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e026e11e-18ba-4e2e-acb7-04d8e339c8bc",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"",
													"    let jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newTestRunId1\", jsonData.id);",
													"    pm.environment.set(\"testRunInfo1\", jsonData);",
													"",
													"    pm.test(\"Status code is 201\", () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"id\");",
													"    });",
													"",
													"    pm.test(`Response data contains name: ${jsonData.name}`, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"testRunName\"));",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"pid\");",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"created_date\");",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"last_modified_date\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"test_case_version_id\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"creator_id\");",
													"    });",
													"",
													"    pm.test(\"Response data has test_case property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"test_case\");",
													"        pm.expect(jsonData.test_case).to.have.property(\"links\");",
													"        pm.expect(jsonData.test_case.id).to.eql(pm.environment.get(\"newTestCaseId1\"));",
													"    });",
													"",
													"    let tmp;",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Run Order\":",
													"                pm.test(`Repsonse data has run order: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"            ",
													"            case \"Environment\":",
													"                pm.test(`Repsonse data has environment: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"                ",
													"            case \"Status\":",
													"                pm.test(`Repsonse data has status: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Unexecuted\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunStatusUnexecuted\").toString()",
													"                    );",
													"                });",
													"                break;",
													"",
													"            case \"Execution Type\":",
													"                pm.test(`Repsonse data has type: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Smoke\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunExecutionTypeSmoke\").toString()",
													"                    );",
													"                });",
													"                break;",
													"                ",
													"            case \"Planned Start Date\":",
													"                pm.test(\"Repsonse data contains Planned Start Date\", () => {",
													"                    tmp = pm.environment.get(\"startDate1\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Planned End Date\":",
													"                pm.test(\"Repsonse data contains Planned End Date\", () => {",
													"                    tmp = pm.environment.get(\"endDate1\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(`Repsonse data has priority: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Medium\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunPriorityMedium\").toString()",
													"                    );",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(pm.environment.get(\"userTestFullName\"));",
													"                    pm.expect(field.field_value).to.include(",
													"                        pm.environment.get(\"fieldIdTestRunAssignedToUserTest\").toString()",
													"                    );",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "32969db0-1644-4d6b-8805-01ae4a96e3c1",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"testRunName\", \"Test Run 1\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate1\", today.toISOString());",
													"today.setDate(today.getDate() + 10);",
													"pm.environment.set(\"endDate1\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{testRunName}}\",\n  \"properties\": [\n    {\n        \"field_id\": \"{{fieldIdTestRunRunOrder}}\",\n        \"field_value\": 1\n    },\n    {\n      \"field_id\": {{fieldIdTestRunPlannedStartDate}},\n      \"field_value\": \"{{startDate1}}\"\n      \n    },\n    {\n      \"field_id\": {{fieldIdTestRunPlannedEndDate}},\n      \"field_value\": \"{{endDate1}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunExecutionType}}\",\n        \"field_value\": \"{{fieldIdTestRunExecutionTypeSmoke}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunAssignedTo}}\",\n        \"field_value\": \"{{fieldIdTestRunAssignedToUserTest}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunStatus}}\",\n        \"field_value\": \"{{fieldIdTestRunStatusPassed}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunPriority}}\",\n        \"field_value\": \"{{fieldIdTestRunPriorityMedium}}\"\n    }\n  ],\n  \"test_case\": {\n    \"id\": {{newTestCaseId1}}\n  }\n  \n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-runs",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-runs"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Add comment to test run 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84543a53-0861-4c3d-88e2-ef40338730a0",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"testRunCommentInfo1\", jsonData);",
													"",
													"    pm.test(\"Status code is 201\", () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"    ",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property created\", () => {",
													"        pm.expect(jsonData).to.have.property(\"created\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property userId\", () => {",
													"        pm.expect(jsonData.userId).to.eql(pm.environment.get(\"userTestId\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has property id\", () => {",
													"        pm.expect(jsonData).to.have.property(\"id\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property content: \" + jsonData.content, () => {",
													"        pm.expect(jsonData.content).to.eql(pm.environment.get(\"testRunComment1\"));",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cfcb295c-55f7-4059-96ae-a904553ad35f",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"testRunComment1\", \"Comment 1 of Test Run 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"content\": \"{{testRunComment1}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-runs/{{newTestRunId1}}/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-runs",
												"{{newTestRunId1}}",
												"comments"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Defects",
							"item": [
								{
									"name": "200 - Precondition - Get Defecet fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "65f3ccc5-3b3c-47b7-bcdc-d4ecbd808397",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdDefect\";",
													"    var jsonData = pm.response.json();",
													"    var userList = pm.environment.get(\"userList\");",
													"    ",
													"",
													"    // jsonData.forEach((field) => {",
													"    //     if (field.label === \"Summary\" || field.label === \"Description\") {",
													"    //         pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"    //     }",
													"    // });",
													"    ",
													"    pm.environment.set(\"defectFields\", jsonData);",
													"    ",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/defects/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"defects",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Submit a defect",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d40fe51-4b1d-4a66-b21c-b8b3a7b95ace",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"",
													"    let jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newDefectId1\", jsonData.id);",
													"    pm.environment.set(\"defectInfo1\", jsonData);",
													"",
													"    pm.test(\"Status code is 201\", () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property id\", () => {",
													"        pm.expect(jsonData).to.have.property(\"id\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property pid\", () => {",
													"        pm.expect(jsonData).to.have.property(\"pid\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property url\", () => {",
													"        pm.expect(jsonData).to.have.property(\"url\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property submitted_date\", () => {",
													"        pm.expect(jsonData).to.have.property(\"submitted_date\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property last_modified_date\", () => {",
													"        pm.expect(jsonData).to.have.property(\"last_modified_date\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property submitter_id\", () => {",
													"        pm.expect(jsonData).to.have.property(\"submitter_id\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property web_url\", () => {",
													"        pm.expect(jsonData).to.have.property(\"web_url\");",
													"    });",
													"    ",
													"    jsonData.properties.forEach((field, index) => {",
													"        switch (field.field_name) {",
													"            case \"Summary\":",
													"                pm.test(\"Response data has property summary contains: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"defectSummary\"));",
													"                });",
													"                break;",
													"            case \"Description\":",
													"                pm.test(\"Response data has property description contains: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"defectDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b8b05bc1-fb32-477c-be78-406ccfdd8207",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"defectSummary\", \"Summary of DF-1\");",
													"pm.environment.set(\"defectDescription\", \"Description of DF-1\");",
													"",
													"let today = new Date();",
													"let date2 = today;",
													"date2.setDate(today.getDate() + 10);",
													"",
													"let defectFields = pm.environment.get(\"defectFields\");",
													"let defectFieldsInput = {",
													"    \"Summary\": pm.environment.get(\"defectSummary\"),",
													"    \"Description\": pm.environment.get(\"defectDescription\"),",
													"    \"Submitter\": pm.environment.get(\"userTestFullName\"),",
													"    \"Severity\": \"Fatal\",",
													"    \"Submitted Date\": today.toISOString(),",
													"    \"Priority\": \"Urgent\",",
													"    \"Root Cause\": \"Human Error\",",
													"    \"Module\": `MD-2 ${pm.environment.get(\"newModuleName1\")}`,",
													"    \"Assigned To\": pm.environment.get(\"userTestFullName\"),",
													"    \"Status\": \"Reopened\",",
													"    \"Type\": \"Bug\",",
													"    \"Reason\": \"Cannot Fix\",",
													"    \"Category\": \"DesignUI\",",
													"    \"Target Date\": date2.toISOString(),",
													"    \"Closed Date\": date2.toISOString()",
													"}",
													"",
													"let requestDefectProperties = [];",
													"Object.keys(defectFieldsInput).forEach((prop, index) => {",
													"    let property = generateProperty(prop, defectFieldsInput[prop], defectFields);",
													"    ",
													"    requestDefectProperties.push(property);",
													"});",
													"",
													"pm.environment.set(\"requestDefectProperties\", JSON.stringify(requestDefectProperties));",
													"",
													"function generateProperty(fieldName, fieldValue, fieldsArray) {",
													"    for (let field of fieldsArray) {",
													"        if (field.label === fieldName) {",
													"            if (!field.allowed_values) {",
													"                return {",
													"                    \"field_id\": field.id,",
													"                    \"field_value\": fieldValue",
													"                };",
													"            }",
													"",
													"            for (let value of field.allowed_values) {",
													"                if (value.label.replace(/[\\s\\/-]/g, \"\") === fieldValue.toString().replace(/[\\s\\/-]/g, \"\")) {",
													"                    return {",
													"                        \"field_id\": field.id,",
													"                        \"field_value\": value.value",
													"                    };",
													"                }",
													"            }",
													"        }",
													"    }",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"properties\": {{requestDefectProperties}},\n  \"attachments\": [ {\n      \"name\": \"sample_file_name.txt\",\n      \"content_type\": \"text/plain\",\n      \"data\": \"dGhpcyBpcyBzYW1wbGUgdGVzdA==\"\n    }]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/defects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"defects"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Add comment to defect",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bcaf527b-c232-47fa-8a2e-82402f3ed9c9",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"defectCommentInfo1\", jsonData);",
													"",
													"    pm.test(\"Status code is 201\", () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"    ",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property created\", () => {",
													"        pm.expect(jsonData).to.have.property(\"created\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property userId\", () => {",
													"        pm.expect(jsonData.userId).to.eql(pm.environment.get(\"userTestId\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has property id\", () => {",
													"        pm.expect(jsonData).to.have.property(\"id\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property content: \" + jsonData.content, () => {",
													"        pm.expect(jsonData.content).to.eql(pm.environment.get(\"defectComment1\"));",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6adfd407-7dc2-4fb5-8536-b0ae8e416144",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"defectComment1\", \"Comment 1 of Defect 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"content\": \"{{defectComment1}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/defects/{{newDefectId1}}/comments",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"defects",
												"{{newDefectId1}}",
												"comments"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Main",
					"item": [
						{
							"name": "200 - Query comments - Success with comments in requirement",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7baccdfb-a3ca-4dc2-904c-b98e516404b7",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4f0b69da-e911-4ad6-864d-293d6441c29e",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 200;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData).to.have.property(\"links\");",
											"    });",
											"",
											"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1);",
											"    });",
											"",
											"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(100);",
											"    });",
											"",
											"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(1);",
											"    });",
											"",
											"    pm.test(`Response data has ${jsonData.items.length} item(s)`, () => {",
											"        pm.expect(jsonData.items.length).to.eql(1);",
											"    });",
											"",
											"    jsonData.items.forEach((item, index) => {",
											"        let commentInfo = getCommentInfo(\"req\", item.id, jsonData.total);",
											"",
											"        if (commentInfo) {",
											"            pm.test(`Item at ${index} has property links`, () => {",
											"                pm.expect(item).to.have.property(\"links\");",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property created`, () => {",
											"                pm.expect(item.created).to.eql(commentInfo.created);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property userId`, () => {",
											"                pm.expect(item.userId).to.eql(commentInfo.userId);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property id`, () => {",
											"                pm.expect(item.id).to.eql(commentInfo.id);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property content: ${item.content}`, () => {",
											"                pm.expect(item.content).to.eql(commentInfo.content);",
											"            });",
											"        }",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}",
											"",
											"function getCommentInfo(type, id, total) {",
											"    for (let i = 0; i < total; i++) {",
											"        let commentInfo = pm.environment.get(`${type}CommentInfo${i + 1}`);",
											"",
											"        if (id === commentInfo.id) {",
											"            return commentInfo;",
											"        }",
											"",
											"        return null;",
											"    }",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"object_type\": \"requirements\",\n    \"object\": \"{{newReqId1}}\",\n    \"author\": \"{{userTestId}}\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/comments",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query comments - Success with comments in test case",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "75263ff7-5649-4e18-860d-e88a4972314a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b5ee37de-0c17-44fa-b71d-6f33268224d2",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 200;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData).to.have.property(\"links\");",
											"    });",
											"",
											"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1);",
											"    });",
											"",
											"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(100);",
											"    });",
											"",
											"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(1);",
											"    });",
											"",
											"    pm.test(`Response data has ${jsonData.items.length} item(s)`, () => {",
											"        pm.expect(jsonData.items.length).to.eql(1);",
											"    });",
											"",
											"    jsonData.items.forEach((item, index) => {",
											"        let commentInfo = getCommentInfo(\"testCase\", item.id, jsonData.total);",
											"",
											"        if (commentInfo) {",
											"            pm.test(`Item at ${index} has property links`, () => {",
											"                pm.expect(item).to.have.property(\"links\");",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property created`, () => {",
											"                pm.expect(item.created).to.eql(commentInfo.created);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property userId`, () => {",
											"                pm.expect(item.userId).to.eql(commentInfo.userId);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property id`, () => {",
											"                pm.expect(item.id).to.eql(commentInfo.id);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property content: ${item.content}`, () => {",
											"                pm.expect(item.content).to.eql(commentInfo.content);",
											"            });",
											"        }",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}",
											"",
											"function getCommentInfo(type, id, total) {",
											"    for (let i = 0; i < total; i++) {",
											"        let commentInfo = pm.environment.get(`${type}CommentInfo${i + 1}`);",
											"",
											"        if (id === commentInfo.id) {",
											"            return commentInfo;",
											"        }",
											"",
											"        return null;",
											"    }",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\" : \"test-cases\",\n    \"object\" : \"{{newTestCaseId1}}\",\n    \"author\" : \"{{userTestId}}\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/comments",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query comments - Success with comments in test run",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "fc062f4c-48eb-46f7-baf4-0b40162294c5",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "114db8a0-0f0b-40a0-a814-46aba3b4a67a",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 200;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData).to.have.property(\"links\");",
											"    });",
											"",
											"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1);",
											"    });",
											"",
											"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(100);",
											"    });",
											"",
											"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(1);",
											"    });",
											"",
											"    pm.test(`Response data has ${jsonData.items.length} item(s)`, () => {",
											"        pm.expect(jsonData.items.length).to.eql(1);",
											"    });",
											"",
											"    jsonData.items.forEach((item, index) => {",
											"        let commentInfo = getCommentInfo(\"testRun\", item.id, jsonData.total);",
											"",
											"        if (commentInfo) {",
											"            pm.test(`Item at ${index} has property links`, () => {",
											"                pm.expect(item).to.have.property(\"links\");",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property created`, () => {",
											"                pm.expect(item.created).to.eql(commentInfo.created);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property userId`, () => {",
											"                pm.expect(item.userId).to.eql(commentInfo.userId);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property id`, () => {",
											"                pm.expect(item.id).to.eql(commentInfo.id);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property content: ${item.content}`, () => {",
											"                pm.expect(item.content).to.eql(commentInfo.content);",
											"            });",
											"        }",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}",
											"",
											"function getCommentInfo(type, id, total) {",
											"    for (let i = 0; i < total; i++) {",
											"        let commentInfo = pm.environment.get(`${type}CommentInfo${i + 1}`);",
											"",
											"        if (id === commentInfo.id) {",
											"            return commentInfo;",
											"        }",
											"",
											"        return null;",
											"    }",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\" : \"test-runs\",\n    \"object\" : \"{{newTestRunId1}}\",\n    \"author\" : \"{{userTestId}}\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/comments",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query comments - Success with comments in defect",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a4d73679-6609-435b-86c0-efc86df16c73",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "aa60f459-68f2-45e7-b446-184eef0c28b3",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 200;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData).to.have.property(\"links\");",
											"    });",
											"",
											"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1);",
											"    });",
											"",
											"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(100);",
											"    });",
											"",
											"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(1);",
											"    });",
											"",
											"    pm.test(`Response data has ${jsonData.items.length} item(s)`, () => {",
											"        pm.expect(jsonData.items.length).to.eql(1);",
											"    });",
											"",
											"    jsonData.items.forEach((item, index) => {",
											"        let commentInfo = getCommentInfo(\"defect\", item.id, jsonData.total);",
											"",
											"        if (commentInfo) {",
											"            pm.test(`Item at ${index} has property links`, () => {",
											"                pm.expect(item).to.have.property(\"links\");",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property created`, () => {",
											"                pm.expect(item.created).to.eql(commentInfo.created);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property userId`, () => {",
											"                pm.expect(item.userId).to.eql(commentInfo.userId);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property id`, () => {",
											"                pm.expect(item.id).to.eql(commentInfo.id);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property content: ${item.content}`, () => {",
											"                pm.expect(item.content).to.eql(commentInfo.content);",
											"            });",
											"        }",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}",
											"",
											"function getCommentInfo(type, id, total) {",
											"    for (let i = 0; i < total; i++) {",
											"        let commentInfo = pm.environment.get(`${type}CommentInfo${i + 1}`);",
											"",
											"        if (id === commentInfo.id) {",
											"            return commentInfo;",
											"        }",
											"",
											"        return null;",
											"    }",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\" : \"defects\",\n    \"object\" : \"{{newDefectId1}}\",\n    \"author\" : \"{{userTestId}}\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/comments",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query comments - Success with page and page size",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e54a96a7-39fc-4720-8459-fa463afd118a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3cc4237d-cc53-4d15-a1bd-18c862e10417",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 200;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData).to.have.property(\"links\");",
											"    });",
											"",
											"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1);",
											"    });",
											"",
											"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(2);",
											"    });",
											"",
											"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(1);",
											"    });",
											"",
											"    pm.test(`Response data has ${jsonData.items.length} item(s)`, () => {",
											"        pm.expect(jsonData.items.length).to.eql(1);",
											"    });",
											"",
											"    jsonData.items.forEach((item, index) => {",
											"        let commentInfo = getCommentInfo(\"req\", item.id, jsonData.total);",
											"",
											"        if (commentInfo) {",
											"            pm.test(`Item at ${index} has property links`, () => {",
											"                pm.expect(item).to.have.property(\"links\");",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property created`, () => {",
											"                pm.expect(item.created).to.eql(commentInfo.created);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property userId`, () => {",
											"                pm.expect(item.userId).to.eql(commentInfo.userId);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property id`, () => {",
											"                pm.expect(item.id).to.eql(commentInfo.id);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property content: ${item.content}`, () => {",
											"                pm.expect(item.content).to.eql(commentInfo.content);",
											"            });",
											"        }",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}",
											"",
											"function getCommentInfo(type, id, total) {",
											"    for (let i = 0; i < total; i++) {",
											"        let commentInfo = pm.environment.get(`${type}CommentInfo${i + 1}`);",
											"",
											"        if (id === commentInfo.id) {",
											"            return commentInfo;",
											"        }",
											"",
											"        return null;",
											"    }",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\" : \"requirements\",\n    \"object\" : \"{{newReqId1}}\",\n    \"author\" : \"{{userTestId}}\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/comments?page=1&pageSize=2",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"comments"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query comments - Start date is larger than end date",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "678217b8-5aa3-4216-90d0-f2f351bb2f44",
										"type": "text/javascript",
										"exec": [
											"var today = new Date();",
											"today.setDate(today.getDate() + 10);",
											"pm.environment.set(\"startDate\", today.toISOString());",
											"today.setDate(today.getDate() - 10);",
											"pm.environment.set(\"endDate\", today.toISOString());"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "622401cc-605f-49bd-b276-52285e328ccc",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 200;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData).to.have.property(\"links\");",
											"    });",
											"",
											"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1);",
											"    });",
											"",
											"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(100);",
											"    });",
											"",
											"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(0);",
											"    });",
											"",
											"    pm.test(`Response data has ${jsonData.items.length} item(s)`, () => {",
											"        pm.expect(jsonData.items.length).to.eql(0);",
											"    });",
											"",
											"    jsonData.items.forEach((item, index) => {",
											"        let commentInfo = getCommentInfo(\"req\", item.id, jsonData.total);",
											"",
											"        if (commentInfo) {",
											"            pm.test(`Item at ${index} has property links`, () => {",
											"                pm.expect(item).to.have.property(\"links\");",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property created`, () => {",
											"                pm.expect(item.created).to.eql(commentInfo.created);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property userId`, () => {",
											"                pm.expect(item.userId).to.eql(commentInfo.userId);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property id`, () => {",
											"                pm.expect(item.id).to.eql(commentInfo.id);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property content: ${item.content}`, () => {",
											"                pm.expect(item.content).to.eql(commentInfo.content);",
											"            });",
											"        }",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}",
											"",
											"function getCommentInfo(type, id, total) {",
											"    for (let i = 0; i < total; i++) {",
											"        let commentInfo = pm.environment.get(`${type}CommentInfo${i + 1}`);",
											"",
											"        if (id === commentInfo.id) {",
											"            return commentInfo;",
											"        }",
											"",
											"        return null;",
											"    }",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\" : \"requirements\",\n    \"start\": \"{{startDate}}\",\n    \"end\": \"{{endDate}}\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/comments",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query comments - Invalid date format",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b3e1c9d5-6a71-490e-b37f-899841beb461",
										"exec": [
											"var today = new Date();",
											"today.setDate(today.getDate() - 10);",
											"pm.environment.set(\"startDate\", today.toISOString());",
											"today.setDate(today.getDate() + 10);",
											"pm.environment.set(\"endDate\", today.toISOString());",
											"",
											"pm.environment.set(\"invalidPostfix\", \"abcd\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a153c23f-d56e-4bd8-8b1e-648d738c8d20",
										"exec": [
											"let expectedResponseCode = 400;",
											"const errorMessage = `Invalid format:\\\"${pm.environment.get('startDate')}${pm.environment.get('invalidPostfix')}\\\"`;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"    ",
											"    pm.test(\"Response data has property message contains 'Invalid format'\", () => {",
											"        pm.expect(jsonData.message).to.include(\"Invalid format\");",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\" : \"requirements\",\n    \"start\": \"{{startDate}}{{invalidPostfix}}\",\n    \"end\": \"{{endDate}}\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/comments",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query comments - Invalid param page",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "076cb22e-06ee-4d6e-8bad-a5bde8eb2fe6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8b45702c-dcd5-4a04-909c-942d7d130dda",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"    ",
											"    pm.test(\"Response data has message: \" + jsonData.message, () => {",
											"        pm.expect(jsonData.message).to.eql(\"Page size or page index must be an integer!\");",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\" : \"requirements\",\n    \"object\" : \"{{newReqId1}}\",\n    \"author\" : \"{{userTestId}}\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/comments?page=abcd&pageSize=2",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"comments"
									],
									"query": [
										{
											"key": "page",
											"value": "abcd"
										},
										{
											"key": "pageSize",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query comments - Invalid param page size",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "8cddbe7f-c54d-43c4-9ba8-7390f99a0731",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "99907d73-0665-4fa4-96b6-766c50d4e5b1",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"    ",
											"    pm.test(\"Response data has message: \" + jsonData.message, () => {",
											"        pm.expect(jsonData.message).to.eql(\"Page size or page index must be an integer!\");",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\" : \"requirements\",\n    \"object\" : \"{{newReqId1}}\",\n    \"author\" : \"{{userTestId}}\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/comments?page=1&pageSize=abcd",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"comments"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "abcd"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query comments - Param page is less than 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3182a910-2261-474e-a14c-d40870bf427c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8021931f-ba45-48aa-bcae-9cb6540e6c90",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"    ",
											"    pm.test(\"Response data has message: \" + jsonData.message, () => {",
											"        pm.expect(jsonData.message).to.eql(\"Page size or page index must not be less than 1!\");",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\" : \"requirements\",\n    \"object\" : \"{{newReqId1}}\",\n    \"author\" : \"{{userTestId}}\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/comments?page=0&pageSize=2",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"comments"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query comments - Param page size is less than 1",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a8e173a8-9292-43a4-8df7-0b74f93d5846",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a272178b-c68f-46f6-9183-aa6e7a0e2585",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"    ",
											"    pm.test(\"Response data has message: \" + jsonData.message, () => {",
											"        pm.expect(jsonData.message).to.eql(\"Page size or page index must not be less than 1!\");",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\" : \"requirements\",\n    \"object\" : \"{{newReqId1}}\",\n    \"author\" : \"{{userTestId}}\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/comments?page=1&pageSize=0",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"comments"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query comments - Param page is larger than 999",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "83d6f528-e916-4541-af5d-d3fd92887fc8",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1a0df162-2d5a-470c-b20c-2b9cdc123acd",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 200;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData).to.have.property(\"links\");",
											"    });",
											"",
											"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1200);",
											"    });",
											"",
											"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(2);",
											"    });",
											"",
											"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(1);",
											"    });",
											"",
											"    pm.test(`Response data has ${jsonData.items.length} item(s)`, () => {",
											"        pm.expect(jsonData.items.length).to.eql(0);",
											"    });",
											"",
											"    jsonData.items.forEach((item, index) => {",
											"        let commentInfo = getCommentInfo(\"req\", item.id, jsonData.total);",
											"",
											"        if (commentInfo) {",
											"            pm.test(`Item at ${index} has property links`, () => {",
											"                pm.expect(item).to.have.property(\"links\");",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property created`, () => {",
											"                pm.expect(item.created).to.eql(commentInfo.created);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property userId`, () => {",
											"                pm.expect(item.userId).to.eql(commentInfo.userId);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property id`, () => {",
											"                pm.expect(item.id).to.eql(commentInfo.id);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property content: ${item.content}`, () => {",
											"                pm.expect(item.content).to.eql(commentInfo.content);",
											"            });",
											"        }",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}",
											"",
											"function getCommentInfo(type, id, total) {",
											"    for (let i = 0; i < total; i++) {",
											"        let commentInfo = pm.environment.get(`${type}CommentInfo${i + 1}`);",
											"",
											"        if (id === commentInfo.id) {",
											"            return commentInfo;",
											"        }",
											"",
											"        return null;",
											"    }",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\" : \"requirements\",\n    \"object\" : \"{{newReqId1}}\",\n    \"author\" : \"{{userTestId}}\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/comments?page=1200&pageSize=2",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"comments"
									],
									"query": [
										{
											"key": "page",
											"value": "1200"
										},
										{
											"key": "pageSize",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query comments - Param page size is larger than 999",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cedd1b9c-65be-4088-9a79-ba2dd7c14676",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5d8ca2b6-88ad-4802-94e2-94345443bf39",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 200;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData).to.have.property(\"links\");",
											"    });",
											"",
											"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1);",
											"    });",
											"",
											"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(100);",
											"    });",
											"",
											"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(1);",
											"    });",
											"",
											"    pm.test(`Response data has ${jsonData.items.length} item(s)`, () => {",
											"        pm.expect(jsonData.items.length).to.eql(1);",
											"    });",
											"",
											"    jsonData.items.forEach((item, index) => {",
											"        let commentInfo = getCommentInfo(\"req\", item.id, jsonData.total);",
											"",
											"        if (commentInfo) {",
											"            pm.test(`Item at ${index} has property links`, () => {",
											"                pm.expect(item).to.have.property(\"links\");",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property created`, () => {",
											"                pm.expect(item.created).to.eql(commentInfo.created);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property userId`, () => {",
											"                pm.expect(item.userId).to.eql(commentInfo.userId);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property id`, () => {",
											"                pm.expect(item.id).to.eql(commentInfo.id);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property content: ${item.content}`, () => {",
											"                pm.expect(item.content).to.eql(commentInfo.content);",
											"            });",
											"        }",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}",
											"",
											"function getCommentInfo(type, id, total) {",
											"    for (let i = 0; i < total; i++) {",
											"        let commentInfo = pm.environment.get(`${type}CommentInfo${i + 1}`);",
											"",
											"        if (id === commentInfo.id) {",
											"            return commentInfo;",
											"        }",
											"",
											"        return null;",
											"    }",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\" : \"requirements\",\n    \"object\" : \"{{newReqId1}}\",\n    \"author\" : \"{{userTestId}}\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/comments?page=1&pageSize=1200",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"comments"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "1200"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query comments - Missing param page",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "21ec8491-9eb7-4f39-9a1e-c87e59e10a9d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "17a07565-32b3-4984-8858-1c9f31cc3b96",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 200;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData).to.have.property(\"links\");",
											"    });",
											"",
											"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1);",
											"    });",
											"",
											"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(2);",
											"    });",
											"",
											"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(1);",
											"    });",
											"",
											"    pm.test(`Response data has ${jsonData.items.length} item(s)`, () => {",
											"        pm.expect(jsonData.items.length).to.eql(1);",
											"    });",
											"",
											"    jsonData.items.forEach((item, index) => {",
											"        let commentInfo = getCommentInfo(\"req\", item.id, jsonData.total);",
											"",
											"        if (commentInfo) {",
											"            pm.test(`Item at ${index} has property links`, () => {",
											"                pm.expect(item).to.have.property(\"links\");",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property created`, () => {",
											"                pm.expect(item.created).to.eql(commentInfo.created);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property userId`, () => {",
											"                pm.expect(item.userId).to.eql(commentInfo.userId);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property id`, () => {",
											"                pm.expect(item.id).to.eql(commentInfo.id);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property content: ${item.content}`, () => {",
											"                pm.expect(item.content).to.eql(commentInfo.content);",
											"            });",
											"        }",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}",
											"",
											"function getCommentInfo(type, id, total) {",
											"    for (let i = 0; i < total; i++) {",
											"        let commentInfo = pm.environment.get(`${type}CommentInfo${i + 1}`);",
											"",
											"        if (id === commentInfo.id) {",
											"            return commentInfo;",
											"        }",
											"",
											"        return null;",
											"    }",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\" : \"requirements\",\n    \"object\" : \"{{newReqId1}}\",\n    \"author\" : \"{{userTestId}}\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/comments?pageSize=2",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"comments"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query comments - Missing param page size",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "89caa1cc-3c5b-4490-8ef4-3a9f5c2a0f98",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "6a131d23-0875-4308-86c9-20c42942ea30",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 200;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData).to.have.property(\"links\");",
											"    });",
											"",
											"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1);",
											"    });",
											"",
											"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(100);",
											"    });",
											"",
											"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(1);",
											"    });",
											"",
											"    pm.test(`Response data has ${jsonData.items.length} item(s)`, () => {",
											"        pm.expect(jsonData.items.length).to.eql(1);",
											"    });",
											"",
											"    jsonData.items.forEach((item, index) => {",
											"        let commentInfo = getCommentInfo(\"req\", item.id, jsonData.total);",
											"",
											"        if (commentInfo) {",
											"            pm.test(`Item at ${index} has property links`, () => {",
											"                pm.expect(item).to.have.property(\"links\");",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property created`, () => {",
											"                pm.expect(item.created).to.eql(commentInfo.created);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property userId`, () => {",
											"                pm.expect(item.userId).to.eql(commentInfo.userId);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property id`, () => {",
											"                pm.expect(item.id).to.eql(commentInfo.id);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property content: ${item.content}`, () => {",
											"                pm.expect(item.content).to.eql(commentInfo.content);",
											"            });",
											"        }",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}",
											"",
											"function getCommentInfo(type, id, total) {",
											"    for (let i = 0; i < total; i++) {",
											"        let commentInfo = pm.environment.get(`${type}CommentInfo${i + 1}`);",
											"",
											"        if (id === commentInfo.id) {",
											"            return commentInfo;",
											"        }",
											"",
											"        return null;",
											"    }",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\" : \"requirements\",\n    \"object\" : \"{{newReqId1}}\",\n    \"author\" : \"{{userTestId}}\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/comments?page=1",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"comments"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query comments - Mising object type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0848655b-df06-4577-9509-3d9f512ccb6d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "aa661038-e418-4a0e-91ea-3678ee64244b",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"    ",
											"    pm.test(\"Response data has message: \" + jsonData.message, () => {",
											"        pm.expect(jsonData.message).to.eql(\"Unsupported object type null\");",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"object\" : \"{{newReqId1}}\",\n    \"author\" : \"{{userTestId}}\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/comments",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query comments - Object type has empty value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c592a7ee-e29f-463d-9638-1f4a2e55fa90",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a668aab9-9c0e-444e-8958-c83dda2eacc0",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"    ",
											"    pm.test(\"Response data has message: \" + jsonData.message, () => {",
											"        pm.expect(jsonData.message).to.eql(\"Unsupported object type \");",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"\",\n    \"object\" : \"{{newReqId1}}\",\n    \"author\" : \"{{userTestId}}\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/comments",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query comments - Object type has not exist value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9fda0cf0-4f8a-44d1-a0ef-b79fbee4dd29",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "bae7817c-ef7a-4a2a-b9ea-b0e7efd01ed0",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"    ",
											"    pm.test(\"Response data has message: \" + jsonData.message, () => {",
											"        pm.expect(jsonData.message).to.eql(\"Unsupported object type abcd\");",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"abcd\",\n    \"object\" : \"{{newReqId1}}\",\n    \"author\" : \"{{userTestId}}\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/comments",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query comments - Not exist object Id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "85c96f0f-a8af-4f8c-8a80-879343748b80",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"notExistPostfix\", \"1234\");"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "29d6ba5c-855f-4a19-adb0-f229fc9869b6",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 200;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData).to.have.property(\"links\");",
											"    });",
											"",
											"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1);",
											"    });",
											"",
											"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(100);",
											"    });",
											"",
											"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(0);",
											"    });",
											"",
											"    pm.test(`Response data has ${jsonData.items.length} item(s)`, () => {",
											"        pm.expect(jsonData.items.length).to.eql(0);",
											"    });",
											"",
											"    jsonData.items.forEach((item, index) => {",
											"        let commentInfo = getCommentInfo(\"req\", item.id, jsonData.total);",
											"",
											"        if (commentInfo) {",
											"            pm.test(`Item at ${index} has property links`, () => {",
											"                pm.expect(item).to.have.property(\"links\");",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property created`, () => {",
											"                pm.expect(item.created).to.eql(commentInfo.created);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property userId`, () => {",
											"                pm.expect(item.userId).to.eql(commentInfo.userId);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property id`, () => {",
											"                pm.expect(item.id).to.eql(commentInfo.id);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property content: ${item.content}`, () => {",
											"                pm.expect(item.content).to.eql(commentInfo.content);",
											"            });",
											"        }",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}",
											"",
											"function getCommentInfo(type, id, total) {",
											"    for (let i = 0; i < total; i++) {",
											"        let commentInfo = pm.environment.get(`${type}CommentInfo${i + 1}`);",
											"",
											"        if (id === commentInfo.id) {",
											"            return commentInfo;",
											"        }",
											"",
											"        return null;",
											"    }",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\" : \"requirements\",\n    \"object\" : \"{{newReqId1}}{{notExistPostfix}}\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/comments",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query comments - Invalid object Id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d9df40b4-84d3-4f7a-a005-039214ade121",
										"exec": [
											"pm.environment.set(\"invalidPostfix\", \"abcd\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "23a465bb-5bdc-4e1a-b092-311124ba258d",
										"exec": [
											"let expectedResponseCode = 400;",
											"let invalidObjectId = pm.environment.get(\"newReqId1\") + pm.environment.get(\"invalidPostfix\");",
											"",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"    ",
											"    pm.test(\"Response data has property message contains 'Cannot deserialize value of type `java.lang.Long` from String \\\"<invalid object id>\\\": not a valid Long value\", () => {",
											"        pm.expect(jsonData.message).to.include(`Cannot deserialize value of type \\`java.lang.Long\\` from String \\\"${invalidObjectId}\\\": not a valid Long value`);",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\" : \"requirements\",\n    \"object\" : \"{{newReqId1}}{{invalidPostfix}}\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/comments",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query comments - Not exist author Id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "96df73cb-64c5-462f-81c3-f1461fa5a66f",
										"exec": [
											"pm.environment.set(\"notExistPostfix\", \"1234\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f47a1f54-d7ae-4482-8dbb-da6e2e7406b8",
										"exec": [
											"let expectedResponseCode = 200;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData).to.have.property(\"links\");",
											"    });",
											"",
											"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1);",
											"    });",
											"",
											"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(100);",
											"    });",
											"",
											"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(0);",
											"    });",
											"",
											"    pm.test(`Response data has ${jsonData.items.length} item(s)`, () => {",
											"        pm.expect(jsonData.items.length).to.eql(0);",
											"    });",
											"",
											"    jsonData.items.forEach((item, index) => {",
											"        let commentInfo = getCommentInfo(\"req\", item.id, jsonData.total);",
											"",
											"        if (commentInfo) {",
											"            pm.test(`Item at ${index} has property links`, () => {",
											"                pm.expect(item).to.have.property(\"links\");",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property created`, () => {",
											"                pm.expect(item.created).to.eql(commentInfo.created);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property userId`, () => {",
											"                pm.expect(item.userId).to.eql(commentInfo.userId);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property id`, () => {",
											"                pm.expect(item.id).to.eql(commentInfo.id);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property content: ${item.content}`, () => {",
											"                pm.expect(item.content).to.eql(commentInfo.content);",
											"            });",
											"        }",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}",
											"",
											"function getCommentInfo(type, id, total) {",
											"    for (let i = 0; i < total; i++) {",
											"        let commentInfo = pm.environment.get(`${type}CommentInfo${i + 1}`);",
											"",
											"        if (id === commentInfo.id) {",
											"            return commentInfo;",
											"        }",
											"",
											"        return null;",
											"    }",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"object_type\": \"requirements\",\n    \"object\": \"{{newReqId1}}\",\n    \"author\": \"{{userTestId}}{{notExistPostfix}}\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/comments",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query comments - Invalid author Id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "25669e8e-4c53-45fe-9fa2-519d2ac87081",
										"exec": [
											"pm.environment.set(\"invalidPostfix\", \"abcd\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b35167da-69ef-4062-9d80-f3d750489145",
										"exec": [
											"let expectedResponseCode = 400;",
											"let invalidAuthorId = pm.environment.get(\"userTestId\") + pm.environment.get(\"invalidPostfix\");",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"    ",
											"    pm.test(\"Response data has property message contains 'Cannot deserialize value of type `java.lang.Long` from String \\\"<invalid author id>\\\": not a valid Long value'\", () => {",
											"        pm.expect(jsonData.message).to.include(`Cannot deserialize value of type \\`java.lang.Long\\` from String \\\"${invalidAuthorId}\\\": not a valid Long value`);",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"object_type\": \"requirements\",\n    \"author\": \"{{userTestId}}{{invalidPostfix}}\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/comments",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query comments - Unassigned author Id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "37a5757d-37ff-4078-a6b4-6115bd87526a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7e3c8cf1-ee43-4b6a-bc99-7ed8ae155c73",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 200;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData).to.have.property(\"links\");",
											"    });",
											"",
											"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1);",
											"    });",
											"",
											"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(100);",
											"    });",
											"",
											"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(0);",
											"    });",
											"",
											"    pm.test(`Response data has ${jsonData.items.length} item(s)`, () => {",
											"        pm.expect(jsonData.items.length).to.eql(0);",
											"    });",
											"",
											"    jsonData.items.forEach((item, index) => {",
											"        let commentInfo = getCommentInfo(\"req\", item.id, jsonData.total);",
											"",
											"        if (commentInfo) {",
											"            pm.test(`Item at ${index} has property links`, () => {",
											"                pm.expect(item).to.have.property(\"links\");",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property created`, () => {",
											"                pm.expect(item.created).to.eql(commentInfo.created);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property userId`, () => {",
											"                pm.expect(item.userId).to.eql(commentInfo.userId);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property id`, () => {",
											"                pm.expect(item.id).to.eql(commentInfo.id);",
											"            });",
											"",
											"            pm.test(`Item at ${index} has property content: ${item.content}`, () => {",
											"                pm.expect(item.content).to.eql(commentInfo.content);",
											"            });",
											"        }",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}",
											"",
											"function getCommentInfo(type, id, total) {",
											"    for (let i = 0; i < total; i++) {",
											"        let commentInfo = pm.environment.get(`${type}CommentInfo${i + 1}`);",
											"",
											"        if (id === commentInfo.id) {",
											"            return commentInfo;",
											"        }",
											"",
											"        return null;",
											"    }",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"object_type\": \"requirements\",\n    \"author\": \"{{userId}}\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/comments",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"comments"
									]
								}
							},
							"response": []
						},
						{
							"name": "401 - Query comments - Query by unassigned user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6f2ff0ee-7cc3-48ec-ae95-a6276376721f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "182afd26-1383-4c00-8bd9-90272d3837dd",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 401;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    // let jsonData = pm.response.json();",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType2}} {{accessToken2}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"object_type\": \"requirements\",\n    \"author\": \"{{userId}}\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/comments",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"comments"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Cleanup",
					"item": [
						{
							"name": "200 - Cleanup - Delete project",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "37bdfbbb-d650-441e-a7bb-62478377b4da",
										"exec": [
											"if (pm.response.code === 200) {",
											"    //get response body",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.test(\"Response code: \" + pm.response.code, function(){",
											"        pm.response.to.have.status(200);",
											"    });",
											"    ",
											"    pm.test(\"Delete project success without any errors\", function(){",
											"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
											"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
											"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
											"    });",
											"    ",
											"} else {",
											"    //other mark failed",
											"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
											"        pm.response.to.have.status(200);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7aa5664e-887d-4433-9b98-ffb78d6d4f44",
										"exec": [
											"// generator csrf token\r",
											"var base64object = function(input) {\r",
											" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
											" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
											" return base64;\r",
											"};\r",
											"let uuid = require('uuid');\r",
											"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
											"pm.environment.set(\"csrfToken\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "{{qtestUserCookie}}"
									},
									{
										"key": "X-CSRF-Token",
										"value": "{{csrfToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "id",
											"value": "{{projectId}}",
											"type": "text"
										},
										{
											"key": "dojo.preventCache",
											"value": "{{csrfToken}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{qtestUrl}}/admin/proj/delete-project",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"admin",
										"proj",
										"delete-project"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Cleanup - Logout",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9041a4b7-b575-4b4e-9f5a-e426f5c4f36d",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b02b5f8c-83c7-40f5-a7fe-6480eeea96b7",
										"exec": [
											"/*",
											"  Unset all fields of type. Valid Type values are Release, Build, TestSuite",
											"*/",
											"function unsetFieldIdsOfType(type, fieldsArray) {",
											"    const PREFIX = `fieldId${type}`;",
											"    let userList = pm.environment.get(\"userList\");",
											"",
											"    if (!fieldsArray) {",
											"        return;",
											"    }",
											"",
											"    fieldsArray.forEach((field) => {",
											"        let variableName = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\");",
											"        pm.environment.unset(variableName);",
											"",
											"        if (field.allowed_values) {",
											"            let fieldValueId = \"\";",
											"",
											"            field.allowed_values.forEach((item, index) => {",
											"                switch (field.label) {",
											"                    case \"Assigned To\":",
											"                        pm.environment.unset(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"UserTest\");",
											"",
											"                        userList.forEach((user, userIndex) => {",
											"                            fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
											"                            pm.environment.unset(fieldValueId);",
											"                        });",
											"                        break;",
											"",
											"                    case \"Target Release/Build\":",
											"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"Target\" + (index + 1).toString();",
											"                        pm.environment.unset(fieldValueId);",
											"                        break;",
											"",
											"                    default:",
											"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
											"                        pm.environment.unset(fieldValueId);",
											"                        break;",
											"                }",
											"",
											"            });",
											"        }",
											"    });",
											"",
											"}",
											"",
											"function unsetEnvVariables(varList) {",
											"    varList.forEach((item) => {",
											"        pm.environment.unset(item);",
											"    });",
											"}",
											"",
											"if (pm.response.code === 200) {",
											"",
											"    pm.test(\"Response code: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    var requirementFields = pm.environment.get(\"requirementFields\");",
											"    var testCaseFields = pm.environment.get(\"testCaseFields\");",
											"    var testRunFields = pm.environment.get(\"testRunFields\");",
											"",
											"    unsetFieldIdsOfType(\"Req\", requirementFields);",
											"    unsetFieldIdsOfType(\"TestRun\", testRunFields);",
											"    unsetFieldIdsOfType(\"TestCase\", testCaseFields);",
											"    pm.environment.unset(\"tokenType1\");",
											"    pm.environment.unset(\"accessToken1\");",
											"    ",
											"    pm.environment.unset(\"username1\");",
											"    pm.environment.unset(\"firstName1\");",
											"    pm.environment.unset(\"lastName1\");",
											"    pm.environment.unset(\"email1\");",
											"    let varList = [",
											"        \"qtestUserCookie\", \"tokenType\", \"csrfToken\", \"accessToken\", \"projectStartDate\", \"projectEndDate\", \"projectName\", \"userTestId\", \"username1\", \"firstName1\", \"lastName1\", \"email1\", \"requirementFields\", \"reqName\", \"reqDescription\", \"newReqId1\", \"newReqId2\", \"reqInfo1\", \"reqInfo2\", \"reqComment1\", \"reqComment2\", \"reqCommentInfo1\", \"reqCommentInfo2\", \"req2CommentStartDate\", \"testCaseFields\", \"testRunFields\", \"defectFields\", \"newModuleId1\", \"newModuleName1\", \"startDate\", \"endDate\", \"startDate1\", \"endDate1\", \"testCaseComment1\", \"testCaseComment2\", \"testCaseCommentInfo1\", \"testCaseCommentInfo2\", \"testCaseName1\", \"testCaseName2\", \"testCaseDescription1\", \"testCaseDescription2\", \"testCasePrecondition1\", \"testCasePrecondition2\", \"testCasePrecondition3\", \"testCasePrecondition4\", \"testStepDescription1\", \"testStepExpected1\", \"newTestCaseId1\", \"newTestCaseId2\", \"testCaseInfo1\", \"testCaseInfo2\", \"testCaseInfo3\", \"testCaseInfo4\", \"testCaseAutomationContent\", \"newTestRunId1\", \"testRunInfo1\", \"testRunComment1\", \"testRunCommentInfo1\", \"testRunName\", \"testRunName1\", \"testRunName2\", \"notExistPostfix\", \"invalidPostfix\", \"userList\", \"userTestFullName\", \"projectId\", \"userId\", \"commentContent1\", \"commentContent2\", \"newDefectId1\", \"defectInfo1\", \"requestDefectProperties\", \"defectComment1\", \"defectCommentInfo1\", \"defectDescription\", \"defectSummary\"",
											"    ];",
											"",
											"    unsetEnvVariables(varList);",
											"} else {",
											"    //other mark failed",
											"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), () => {",
											"        pm.response.to.have.status(200);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{qtestUrl}}/oauth/revoke",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"oauth",
										"revoke"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "15133258-1273-4bc8-a8b9-2c02bec99c5a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fedb93a5-1a1c-406b-b63a-5a59dda3e78b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Query histories",
			"item": [
				{
					"name": "Precondition",
					"item": [
						{
							"name": "Login and Create Project",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9f323be8-3399-4319-b0cc-ff017fc1fdf2",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code + \" -  Login\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"    ",
													"    var CryptoJS = require(\"crypto-js\");",
													"    //Encrypt",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Get user id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d9b29af5-c93b-4416-9026-ac604de88ab4",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Response data contains data of apiuser1@qas.com\", function() {",
													"        pm.expect(jsonData.items[0].username).to.eql(pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"        pm.expect(pm.response.text()).to.include(\"email\");",
													"        pm.expect(jsonData.items[0].first_name).to.eql(\"API\");",
													"        pm.expect(jsonData.items[0].last_name).to.eql(\"User 1\");",
													"        pm.expect(pm.response.text()).to.include(\"status\");",
													"        pm.expect(pm.response.text()).to.include(\"timezone_offset\");",
													"        pm.expect(pm.response.text()).to.include(\"country_name\");",
													"    });",
													"    ",
													"    pm.environment.set(\"userId\", jsonData.items[0].id);",
													"",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "084c34bc-4207-4198-9859-48c6a3a3b3e1",
												"exec": [
													"pm.environment.set(\"username1\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"pm.environment.set(\"firstName1\", \"API\");",
													"pm.environment.set(\"lastName1\", \"User 1\");",
													"pm.environment.set(\"email1\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/users/search?username={{username1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"users",
												"search"
											],
											"query": [
												{
													"key": "username",
													"value": "{{username1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create Project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "32d4c960-3395-41be-830b-eb487775351b",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"    pm.environment.set(\"projectName\", jsonData.name);",
													"    pm.environment.set(\"projectStartDate\", jsonData.start_date);",
													"    pm.environment.set(\"projectEndDate\", jsonData.end_date);",
													"    ",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "83b7489d-06cd-41a1-84f0-ced00d49839a",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman - Query Histories\",\n  \"description\": \"Description of qTest API Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\"\n  ],\n  \"automation\": true\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Queries Users by Project Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60644328-4197-42ff-b803-1e4ca7070649",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Response data contains page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"    pm.test(\"Response data contains page size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"    pm.test(\"Response data contains total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(1);",
													"    });",
													"    pm.test(\"Response data contains total project: \" + jsonData.total_project, () => {",
													"        pm.expect(jsonData.total_project >= 1).to.equal(true);",
													"    });",
													"    if (jsonData.items && jsonData.items.length > 0) {",
													"        jsonData.items.forEach((item, index) => {",
													"            if (item.username === pm.environment.get(\"username\")) {",
													"                pm.test(\"Response data contains user\", () => {",
													"                    pm.expect(item.id).to.not.eql(null);",
													"                    pm.expect(item.username).to.eql(pm.environment.get(\"username\"));",
													"                    pm.expect(item.first_name).to.not.eql(null);",
													"                    pm.expect(item.last_name).to.not.eql(null);",
													"                    pm.expect(item.avatar).to.not.eql(null);",
													"                    item.assigned_projects.forEach((projectId) => {",
													"                        if (projectId === pm.environment.get(\"projectId\")) {",
													"                            return false;",
													"                        }",
													"                    });",
													"                });",
													"            }",
													"        });",
													"    }",
													"",
													"    pm.environment.set(\"userList\", jsonData.items);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/search/user?projectName={{projectName}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"search",
												"user"
											],
											"query": [
												{
													"key": "projectName",
													"value": "{{projectName}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Login with unassigned user",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f71ea5a-c1a8-4f37-b19a-281a9f1a13c9",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code + \" -  Login\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken1\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType1\", jsonData.token_type);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username1}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Releases",
							"item": [
								{
									"name": "200 - Precondition - Get Release fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d58f921-b11e-4373-bc83-b55e357ed088",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdRelease\";",
													"    var jsonData = pm.response.json();",
													"    ",
													"    let listToUnset = pm.environment.get(\"listToUnset\") || [];",
													"",
													"    jsonData.forEach((field) => {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"        listToUnset.push(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"));",
													"",
													"        if (field.allowed_values) {",
													"            var fieldValueId = \"\";",
													"",
													"            field.allowed_values.forEach((item, index) => {",
													"                fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                pm.environment.set(fieldValueId, item.value);",
													"                listToUnset.push(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\"));",
													"            });",
													"        }",
													"    });",
													"    ",
													"    pm.environment.set(\"listToUnset\", listToUnset);",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/releases/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"releases",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create Release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b0f57fa-c5f6-45c9-b747-aabc6a34e25d",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newReleaseId1\", jsonData.id);",
													"    pm.environment.set(\"releaseInfo1\", jsonData);",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct release info\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"        pm.expect(jsonData).to.have.property(\"id\");",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"releaseName1\"));",
													"        pm.expect(jsonData).to.have.property(\"pid\");",
													"        pm.expect(jsonData).to.have.property(\"created_date\");",
													"        pm.expect(jsonData).to.have.property(\"last_modified_date\");",
													"        pm.expect(jsonData).to.have.property(\"description\");",
													"        pm.expect(jsonData).to.have.property(\"note\");",
													"    });",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "376feebc-7bb8-4b76-80cb-616632655e15",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"releaseName1\", \"Release 1\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate\", today.toISOString());",
													"today.setDate(today.getDate() + 10);",
													"pm.environment.set(\"endDate\", today.toISOString());",
													"",
													"pm.environment.set(\"releaseDescription\", \"Description of the release\");",
													"pm.environment.set(\"releaseNote\", \"Note of the release\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{releaseName1}}\",\n    \"properties\": [\n      {\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"{{releaseDescription}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"{{releaseNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create Release 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "46815a01-0a14-4899-b887-1609c54ad4c5",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newReleaseId2\", jsonData.id);",
													"    pm.environment.set(\"releaseInfo2\", jsonData);",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct release info\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"        pm.expect(jsonData).to.have.property(\"id\");",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"releaseName2\"));",
													"        pm.expect(jsonData).to.have.property(\"pid\");",
													"        pm.expect(jsonData).to.have.property(\"created_date\");",
													"        pm.expect(jsonData).to.have.property(\"last_modified_date\");",
													"        pm.expect(jsonData).to.have.property(\"description\");",
													"        pm.expect(jsonData).to.have.property(\"note\");",
													"    });",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a3ae539e-a4d9-4c75-a9c8-db23563f630a",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"releaseName2\", \"Release 2\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate\", today.toISOString());",
													"today.setDate(today.getDate() + 10);",
													"pm.environment.set(\"endDate\", today.toISOString());",
													"",
													"pm.environment.set(\"releaseDescription\", \"Description of the release\");",
													"pm.environment.set(\"releaseNote\", \"Note of the release 2\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{releaseName2}}\",\n    \"properties\": [\n      {\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"{{releaseDescription}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"{{releaseNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Builds",
							"item": [
								{
									"name": "200 - Precondition - Get Build fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa77dd8d-292a-4f24-8eec-aff58476c650",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdBuild\";",
													"    var jsonData = pm.response.json();",
													"    ",
													"    let listToUnset = pm.environment.get(\"listToUnset\") || [];",
													"",
													"    jsonData.forEach((field) => {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"        listToUnset.push(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"));",
													"        ",
													"        if (field.allowed_values) {",
													"            var fieldValueId = \"\";",
													"",
													"            field.allowed_values.forEach((item, index) => {",
													"                fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                pm.environment.set(fieldValueId, item.value);",
													"                listToUnset.push(fieldValueId);",
													"            });",
													"        }",
													"    });",
													"    ",
													"    pm.environment.set(\"listToUnset\", listToUnset);",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/builds/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"builds",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create a Build",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "29bcbbc8-1c7e-4b49-ab0d-020b0ce5de1e",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newBuildId1\", jsonData.id);",
													"    pm.environment.set(\"buildInfo1\", jsonData);",
													"    ",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Response data has links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has id\", () => {",
													"        pm.expect(jsonData).to.have.property(\"id\");",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name: \" + jsonData.name, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"buildName\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has order\", () => {",
													"        pm.expect(jsonData).to.have.property(\"order\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid\", () => {",
													"        pm.expect(jsonData).to.have.property(\"pid\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date\", () => {",
													"        pm.expect(jsonData).to.have.property(\"created_date\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modified_date\", () => {",
													"        pm.expect(jsonData).to.have.property(\"last_modified_date\");",
													"    });",
													"",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has property Status\", () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdBuildStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Build Date\":",
													"                pm.test(\"Repsonse data has property Build Date\", () => {",
													"                    tmp = pm.environment.get(\"buildDate\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Build Note\":",
													"                pm.test(\"Repsonse data has property Build Note\", () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"buildNote\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d4fcb07d-9cef-434c-ab7b-ca2c91dc5c38",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"buildName\", \"Build 1\");",
													"",
													"var today = new Date();",
													"today.setDate(today.getDate() + 1);",
													"pm.environment.set(\"buildDate\", today.toISOString());",
													"pm.environment.set(\"buildNote\", \"Note of the build\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{buildName}}\",\n    \"properties\": [\n      {\n            \"field_id\": {{fieldIdBuildStatus}},\n            \"field_value\": \"{{fieldIdBuildStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ],\n    \"release\": {\n      \"id\": \"{{newReleaseId1}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Modules",
							"item": [
								{
									"name": "201 - Precondition - Create a Module",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b695f6b0-33a0-4d18-9ed1-0bb8b2b38dcb",
												"exec": [
													"if (pm.response.code === 201) {",
													"    pm.test(\"Response status \" + pm.response.code, () => {",
													"        pm.response.to.have.status(201); ",
													"    });",
													"    ",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response data has correct properties\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"        pm.expect(jsonData).to.have.property(\"id\");",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"newModuleName1\"));",
													"        pm.expect(jsonData).to.have.property(\"order\");",
													"        pm.expect(jsonData).to.have.property(\"pid\");",
													"        pm.expect(jsonData).to.have.property(\"created_date\");",
													"        pm.expect(jsonData).to.have.property(\"last_modified_date\");",
													"        pm.expect(jsonData).to.have.property(\"parent_id\");",
													"        pm.expect(jsonData.description).to.eql(\"Description of Module 1\");",
													"    });",
													"    ",
													"    pm.environment.set(\"newModuleId1\", jsonData.id);",
													"    pm.environment.set(\"moduleInfo1\", jsonData);",
													"    ",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "db810705-2304-423e-b0b2-3df15f481234",
												"exec": [
													"pm.environment.set(\"newModuleName1\", \"Module 1\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"name\": \"{{newModuleName1}}\",\r\n  \"description\": \"Description of Module 1\",\r\n  \"shared\": false\r\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/modules",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"modules"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Requirements",
							"item": [
								{
									"name": "200 - Precondition - Get requirement fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b8f09a77-4ba7-48c3-8a5b-7e057255c555",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdReq\";",
													"    var jsonData = pm.response.json();",
													"    var userList = pm.environment.get(\"userList\");",
													"    ",
													"    let listToUnset = pm.environment.get(\"listToUnset\") || [];",
													"",
													"    jsonData.forEach((field) => {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"        listToUnset.push(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"));",
													"",
													"        if (field.allowed_values) {",
													"            var fieldValueId = \"\";",
													"",
													"            field.allowed_values.forEach((item, index) => {",
													"",
													"                switch (field.label) {",
													"                    case \"Assigned To\":",
													"                        userList.forEach((user, userIndex) => {",
													"                            // Just save variables of users who have admin permission",
													"                            if (item.label === `${user.first_name} ${user.last_name}`) {",
													"                                if (user.username === pm.environment.get(\"username\")) {",
													"                                    // UserTest: user who directly affects to the test case",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + `UserTest`;",
													"                                    pm.environment.set(\"userTestFullName\", item.label);",
													"                                    pm.environment.set(\"userTestId\", user.id);",
													"                                } else {",
													"                                    // Other users who have admin permission",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                                }",
													"                                pm.environment.set(fieldValueId, item.value);",
													"                                listToUnset.push(fieldValueId);",
													"                            }",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                        listToUnset.push(fieldValueId);",
													"                        break;",
													"                }",
													"",
													"            });",
													"        }",
													"    });",
													"    ",
													"    pm.environment.set(\"listToUnset\", listToUnset);",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/requirements/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"requirements",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create requirement 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4182b2ec-a0dc-4a78-9d3e-c3f5b1dd8587",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.environment.set(\"newReqId1\", jsonData.id);",
													"    pm.environment.set(\"reqInfo1\", jsonData);",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"id\");",
													"    });",
													"",
													"    pm.test(\"Response data contains name: \" + jsonData.name, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"    });",
													"",
													"    pm.test(\"Response data has order property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"order\");",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"pid\");",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"created_date\");",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"last_modified_date\");",
													"    });",
													"",
													"    pm.test(\"Response data contains parent_id property\", () => {",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    let changes = [];",
													"    jsonData.properties.forEach((field) => {",
													"        changes.push({",
													"            field: field.field_name,",
													"            old_value: \"\",",
													"            new_value: field.field_value_name || field.field_value",
													"        });",
													"",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has property Status\", () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has property Priority\", () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has property Type\", () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has property Assigned To\", () => {",
													"                    pm.expect(field.field_value_name).to.eql(`[${pm.environment.get(\"userTestFullName\")}]`);",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToUserTest\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data has property Description\", () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"    createObjectHistory(\"requirement\", jsonData.id, changes);",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													"",
													"function createObjectHistory(objType, objId, changes) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`) || [];",
													"",
													"    let searchSuccess = false;",
													"    if (objHistoriesList && objHistoriesList.length > 0) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                let history = {",
													"                    changes: changes",
													"                };",
													"                objHistories.histories.push(history);",
													"",
													"                searchSuccess = true;",
													"                break;",
													"            }",
													"        }",
													"    }",
													"",
													"",
													"    // if search fail, create objectHistories",
													"    if (!searchSuccess) {",
													"        let objHistories = {",
													"            id: objId,",
													"            histories: []",
													"        };",
													"",
													"        let history = {",
													"            changes: changes",
													"        };",
													"",
													"        objHistories.histories.push(history);",
													"        objHistoriesList.push(objHistories);",
													"    }",
													"",
													"    pm.environment.set(`${objType}HistoriesList`, objHistoriesList);",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d3185963-6bba-498b-9301-184393436f02",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 1\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n  \"properties\": [\n    {\n        \"field_id\": \"{{fieldIdReqStatus}}\",\n        \"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdReqPriority}}\",\n        \"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdReqType}}\",\n        \"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdReqAssignedTo}}\",\n        \"field_value\": \"[{{fieldIdReqAssignedToUserTest}}]\"\n    },\n    {\n        \"field_id\": \"{{fieldIdReqDescription}}\",\n        \"field_value\": \"{{reqDescription}}\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Subcribe requirement 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a0541ea-7e4d-415b-996c-f3052964f32e",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Subcribe requirement success without any errors\", () => {",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        ",
													"        pm.expect(jsonData.result.noSubscribers).to.eql(1);",
													"        ",
													"        pm.expect(jsonData.result.subscribers[0].userName).to.eql(pm.environment.get(\"username\"));",
													"        ",
													"        pm.expect(jsonData.result.subscribers[0].fullName).to.eql(pm.environment.get(\"userTestFullName\"));",
													"        ",
													"        pm.expect(jsonData.result.subscribers[0].id).to.eql(pm.environment.get(\"userTestId\"));",
													"    });",
													"    ",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d5e7ce9d-b72f-436b-9501-c4525937010c",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "objectId",
													"value": "{{newReqId1}}",
													"type": "text"
												},
												{
													"key": "userId",
													"value": "{{userTestId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/p/{{projectId}}/portal/notification/subscribe/2",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"p",
												"{{projectId}}",
												"portal",
												"notification",
												"subscribe",
												"2"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create requirement 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "40d0e699-ae5c-4f14-90fb-473329376124",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newReqId2\", jsonData.id);",
													"    pm.environment.set(\"reqInfo2\", jsonData);",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"id\");",
													"    });",
													"",
													"    pm.test(\"Response data contains name: \" + jsonData.name, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"reqName\"));",
													"    });",
													"",
													"    pm.test(\"Response data has order property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"order\");",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"pid\");",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"created_date\");",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"last_modified_date\");",
													"    });",
													"    ",
													"    pm.test(\"Response data contains parent_id property\", () => {",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    let changes = [];",
													"    jsonData.properties.forEach((field) => {",
													"        changes.push({",
													"            field: field.field_name,",
													"            old_value: \"\",",
													"            new_value: field.field_value_name || field.field_value",
													"        });",
													"        ",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has property Status\", () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has property Priority\", () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Should have\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqPriorityShouldhave\").toString());",
													"                });",
													"                break;",
													"            ",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has property Type\", () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Non-functional\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReqTypeNonfunctional\").toString());",
													"                });",
													"                break;",
													"                ",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has property Assigned To\", () => {",
													"                    pm.expect(field.field_value_name).to.eql(`[${pm.environment.get(\"userTestFullName\")}]`);",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdReqAssignedToUserTest\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data has property Description\", () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"reqDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    ",
													"    createObjectHistory(\"requirement\", jsonData.id, changes);",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													"",
													"function createObjectHistory(objType, objId, changes) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`) || [];",
													"",
													"    let searchSuccess = false;",
													"    if (objHistoriesList && objHistoriesList.length > 0) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                let history = {",
													"                    changes: changes",
													"                };",
													"                objHistories.histories.push(history);",
													"",
													"                searchSuccess = true;",
													"                break;",
													"            }",
													"        }",
													"    }",
													"",
													"",
													"    // if search fail, create objectHistories",
													"    if (!searchSuccess) {",
													"        let objHistories = {",
													"            id: objId,",
													"            histories: []",
													"        };",
													"",
													"        let history = {",
													"            changes: changes",
													"        };",
													"",
													"        objHistories.histories.push(history);",
													"        objHistoriesList.push(objHistories);",
													"    }",
													"",
													"    pm.environment.set(`${objType}HistoriesList`, objHistoriesList);",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f8621511-ea29-4fe2-a8a8-316391165e34",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"reqName\", \"Requirement 2\");",
													"pm.environment.set(\"reqDescription\", \"Description of Requirement 2\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{reqName}}\",\n  \"properties\": [\n    {\n        \"field_id\": \"{{fieldIdReqStatus}}\",\n        \"field_value\": \"{{fieldIdReqStatusInProgress}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdReqPriority}}\",\n        \"field_value\": \"{{fieldIdReqPriorityShouldhave}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdReqType}}\",\n        \"field_value\": \"{{fieldIdReqTypeNonfunctional}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdReqAssignedTo}}\",\n        \"field_value\": \"[{{fieldIdReqAssignedToUserTest}}]\"\n    },\n    {\n        \"field_id\": \"{{fieldIdReqDescription}}\",\n        \"field_value\": \"{{reqDescription}}\"\n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements?parentId={{newModuleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newModuleId1}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Test Cases",
							"item": [
								{
									"name": "200 - Precondition - Get Test Case fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1156c915-c41b-4626-ad12-c2971007f33c",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdTestCase\";",
													"    var jsonData = pm.response.json();",
													"    var userList = pm.environment.get(\"userList\");",
													"    ",
													"    let listToUnset = pm.environment.get(\"listToUnset\") || [];",
													"",
													"    jsonData.forEach((field) => {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"        listToUnset.push(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"));",
													"",
													"        if (field.allowed_values) {",
													"            var fieldValueId = \"\";",
													"",
													"            field.allowed_values.forEach((item, index) => {",
													"",
													"                switch (field.label) {",
													"                    case \"Assigned To\":",
													"                        userList.forEach((user, userIndex) => {",
													"                            // Just save variables of users who have admin permission",
													"                            if (item.label === `${user.first_name} ${user.last_name}`) {",
													"                                if (user.username === pm.environment.get(\"username\")) {",
													"                                    // UserTest: user who directly affects to the test case",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + `UserTest`;",
													"                                    pm.environment.set(\"userTestFullName\", item.label);",
													"                                    pm.environment.set(\"userTestId\", user.id);",
													"                                } else {",
													"                                    // Other users who have admin permission",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                                }",
													"                                pm.environment.set(fieldValueId, item.value);",
													"                                listToUnset.push(fieldValueId);",
													"                            }",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                        listToUnset.push(fieldValueId);",
													"                        break;",
													"                }",
													"",
													"            });",
													"        }",
													"    });",
													"    ",
													"    pm.environment.set(\"listToUnset\", listToUnset);",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/test-cases/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"test-cases",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create Test Case 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eeabcccb-8e3a-468c-ab32-76cdaccd91bb",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.environment.set(\"newTestCaseId1\", jsonData.id);",
													"    pm.environment.set(\"testCaseInfo1\", jsonData);",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"id\");",
													"    });",
													"",
													"    pm.test(`Response data contains name: ${jsonData.name}`, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"testCaseName1\"));",
													"    });",
													"",
													"    pm.test(\"Response data has order property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"order\");",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"pid\");",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"created_date\");",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"last_modified_date\");",
													"    });",
													"",
													"    pm.test(\"Response data has web_url property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"web_url\");",
													"    });",
													"",
													"    pm.test(\"Response data contains parent_id property\", () => {",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"test_case_version_id\");",
													"    });",
													"",
													"    pm.test(\"Response data has version property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"version\");",
													"    });",
													"",
													"    pm.test(`Response data contains description property: ${jsonData.description}`, () => {",
													"        pm.expect(jsonData.description).to.eql(pm.environment.get(\"testCaseDescription1\"));",
													"    });",
													"",
													"    pm.test(`Response data contains precondition property: ${jsonData.precondition}`, () => {",
													"        pm.expect(jsonData.precondition).to.eql(pm.environment.get(\"testCasePrecondition1\"));",
													"    });",
													"",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"creator_id\");",
													"    });",
													"",
													"    pm.test(\"Response data has agent_ids property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"agent_ids\");",
													"    });",
													"",
													"    let changes = [];",
													"    jsonData.properties.forEach((field) => {",
													"        changes.push({",
													"            field: field.field_name,",
													"            old_value: \"\",",
													"            new_value: field.field_value_name || field.field_value",
													"        });",
													"        switch (field.field_name) {",
													"            case \"Automation\":",
													"                pm.test(`Response data has automation: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"No\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseAutomationNo\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Automation Content\":",
													"                pm.test(\"Response data has empty automation content\", () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"",
													"            case \"Status\":",
													"                pm.test(`Repsonse data has status: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Type\":",
													"                pm.test(`Repsonse data has type: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Performance\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseTypePerformance\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(`Repsonse data has priority: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"High\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCasePriorityHigh\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(`[${pm.environment.get(\"userTestFullName\")}]`);",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdTestCaseAssignedToUserTest\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(`Repsonse data has description: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCaseDescription1\"));",
													"                });",
													"                break;",
													"",
													"            case \"Precondition\":",
													"                pm.test(`Repsonse data has precondition: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCasePrecondition1\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    ",
													"    let historySteps = [];",
													"    jsonData.test_steps.forEach((step, index) => {",
													"        pm.test(`Response data has test_steps[${index}] has links property`, () => {",
													"            pm.expect(step).to.have.property(\"links\");",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] has id property`, () => {",
													"            pm.expect(step).to.have.property(\"id\");",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] contains description property: ${step.description}`, () => {",
													"            pm.expect(step.description).to.eql(pm.environment.get(\"testStepDescription1\"));",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] contains expected property: ${step.expected}`, () => {",
													"            pm.expect(step.expected).to.eql(pm.environment.get(\"testStepExpected1\"));",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] has order property`, () => {",
													"            pm.expect(step).to.have.property(\"order\");",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] has ${step.attachments.length} attachment property`, () => {",
													"            pm.expect(step).to.have.property(\"attachments\");",
													"            pm.expect(step.attachments.length).to.eql(1);",
													"        });",
													"        historySteps.push({",
													"            id: step.id,",
													"            description: step.description,",
													"            expectedResult: step.expected,",
													"            stepOrder: step.order || null,",
													"            calledTestCaseId: step.called_test_case ? step.called_test_case.id : null,",
													"        });",
													"    });",
													"",
													"    // Create changes of test steps",
													"    changes.push({",
													"        field: \"Test Step\",",
													"        old_value: [],",
													"        new_value: historySteps",
													"    });",
													"",
													"    createObjectHistory(\"testCase\", jsonData.id, changes);",
													"    ",
													"    // Save for future use",
													"    pm.environment.set(\"testCaseVersion1\", jsonData.version);",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													"",
													"function createObjectHistory(objType, objId, changes) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`) || [];",
													"",
													"    let searchSuccess = false;",
													"    if (objHistoriesList && objHistoriesList.length > 0) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                let history = {",
													"                    changes: changes",
													"                };",
													"                objHistories.histories.push(history);",
													"",
													"                searchSuccess = true;",
													"                break;",
													"            }",
													"        }",
													"    }",
													"",
													"",
													"    // if search fail, create objectHistories",
													"    if (!searchSuccess) {",
													"        let objHistories = {",
													"            id: objId,",
													"            histories: []",
													"        };",
													"",
													"        let history = {",
													"            changes: changes",
													"        };",
													"",
													"        objHistories.histories.push(history);",
													"        objHistoriesList.push(objHistories);",
													"    }",
													"",
													"    pm.environment.set(`${objType}HistoriesList`, objHistoriesList);",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8915030a-c6c9-4431-b9cb-6757360046e4",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"testCaseName1\", \"Test Case 1\");",
													"pm.environment.set(\"testCaseDescription1\", \"Description of Test Case 1\");",
													"pm.environment.set(\"testCasePrecondition1\", \"Precondition of Test Case 1\");",
													"",
													"pm.environment.set(\"testStepDescription1\", \"Description of test step 1\");",
													"pm.environment.set(\"testStepExpected1\", \"Expected of test step 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{testCaseName1}}\",\n    \"properties\": [\n        {\n            \"field_id\": \"{{fieldIdTestCaseAutomation}}\",\n            \"field_value\": \"{{fieldIdTestCaseAutomationNo}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseStatus}}\",\n            \"field_value\": \"{{fieldIdTestCaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseType}}\",\n            \"field_value\": \"{{fieldIdTestCaseTypePerformance}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseAssignedTo}}\",\n            \"field_value\": \"[{{fieldIdTestCaseAssignedToUserTest}}]\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseDescription}}\",\n            \"field_value\": \"{{testCaseDescription1}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCasePrecondition}}\",\n            \"field_value\": \"{{testCasePrecondition1}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCasePriority}}\",\n            \"field_value\": \"{{fieldIdTestCasePriorityHigh}}\"\n        }\n    ],\n    \"test_steps\": [\n        {\n            \"description\": \"{{testStepDescription1}}\",\n            \"expected\": \"{{testStepExpected1}}\",\n            \"attachments\": [\n              {\n          \"name\": \"sample_file_name.txt\",\n          \"content_type\": \"text/plain\",\n          \"data\": \"dGhpcyBpcyBzYW1wbGUgdGVzdA==\"\n              }\n            ]\n        }\n    ],\n    \"parent_id\": \"{{newModuleId1}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cases"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Subcribe test case 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b4346ce-2ff8-416a-9c4f-cb79b7369554",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Subcribe requirement success without any errors\", () => {",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        ",
													"        pm.expect(jsonData.result.noSubscribers).to.eql(1);",
													"        ",
													"        pm.expect(jsonData.result.subscribers[0].userName).to.eql(pm.environment.get(\"username\"));",
													"        ",
													"        pm.expect(jsonData.result.subscribers[0].fullName).to.eql(pm.environment.get(\"userTestFullName\"));",
													"        ",
													"        pm.expect(jsonData.result.subscribers[0].id).to.eql(pm.environment.get(\"userTestId\"));",
													"    });",
													"    ",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "14262f21-ed5a-47f5-aa26-fc89041b7c53",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "objectId",
													"value": "{{newTestCaseId1}}",
													"type": "text"
												},
												{
													"key": "userId",
													"value": "{{userTestId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/p/{{projectId}}/portal/notification/subscribe/1",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"p",
												"{{projectId}}",
												"portal",
												"notification",
												"subscribe",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Approve Test Case 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d0cb56fc-ec7f-4e47-a38a-f998efb5c73c",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    var testCaseInfo = pm.environment.get(\"testCaseInfo1\");",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData.id).to.eql(testCaseInfo.id);",
													"    });",
													"",
													"    pm.test(\"Response data contains name: \" + jsonData.name, () => {",
													"        pm.expect(jsonData.name).to.eql(testCaseInfo.name);",
													"    });",
													"",
													"    pm.test(\"Response data has order property\", () => {",
													"        pm.expect(jsonData.order).to.eql(testCaseInfo.order);",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData.pid).to.eql(testCaseInfo.pid);",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData.created_date).to.eql(testCaseInfo.created_date);",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"last_modified_date\");",
													"    });",
													"",
													"    pm.test(\"Response data has web_url property\", () => {",
													"        pm.expect(jsonData.web_url).to.eql(testCaseInfo.web_url);",
													"    });",
													"",
													"    pm.test(\"Response data contains parent_id property\", () => {",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"    });",
													"    ",
													"    pm.test(\"Response data has version property\", () => {",
													"        var subStrings = testCaseInfo.version.split('.');",
													"        var newVersion = (parseInt(subStrings[0]) + 1).toString() + '.0';",
													"        pm.expect(jsonData.version).to.eql(newVersion);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains description property: \" + jsonData.description, () => {",
													"        pm.expect(jsonData.description).to.eql(testCaseInfo.description);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains precondition property: \" + jsonData.precondition, () => {",
													"        pm.expect(jsonData.precondition).to.eql(testCaseInfo.precondition);",
													"    });",
													"    ",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData.creator_id).to.eql(testCaseInfo.creator_id);",
													"    });",
													"    ",
													"    pm.test(\"Response data has agent_ids property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"agent_ids\");",
													"    });",
													"    ",
													"    jsonData.test_steps.forEach(function(step, index) {",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has links property\", () => {",
													"            pm.expect(step).to.have.property(\"links\");",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has id property\", () => {",
													"            pm.expect(step.id).to.eql(testCaseInfo.test_steps[index].id);",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] contains description property: \" + step.description, () => {",
													"            pm.expect(step.description).to.eql(pm.environment.get(\"testStepDescription1\"));",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] contains expected property: \" + step.expected, () => {",
													"            pm.expect(step.expected).to.eql(pm.environment.get(\"testStepExpected1\"));",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has order property\", () => {",
													"            pm.expect(step.order).to.eql(testCaseInfo.test_steps[index].order);",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has attachments property\", () => {",
													"            pm.expect(step).to.have.property(\"attachments\");",
													"        });",
													"    });",
													"",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Automation\":",
													"                pm.test(\"Response data has automation: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"No\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseAutomationNo\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Automation Content\":",
													"                pm.test(\"Response data has empty automation content\", () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Performance\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseTypePerformance\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"High\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCasePriorityHigh\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(`[${pm.environment.get(\"userTestFullName\")}]`);",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdTestCaseAssignedToUserTest\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(testCaseInfo.description);",
													"                });",
													"                break;",
													"",
													"            case \"Precondition\":",
													"                pm.test(\"Repsonse data contains precondition: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(testCaseInfo.precondition);",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    let changes = [];",
													"    // Create changes of test steps",
													"    changes.push({",
													"        field: \"Version\",",
													"        old_value: pm.environment.get(\"testCaseVersion1\"),",
													"        new_value: jsonData.version",
													"    });",
													"",
													"    createObjectHistory(\"testCase\", jsonData.id, changes);",
													"    ",
													"    pm.environment.set(\"testCaseInfo1\", jsonData);",
													"    pm.environment.unset(\"testCaseVersion1\");",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													"",
													"function createObjectHistory(objType, objId, changes) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`) || [];",
													"",
													"    let searchSuccess = false;",
													"    if (objHistoriesList && objHistoriesList.length > 0) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                let history = {",
													"                    changes: changes",
													"                };",
													"                objHistories.histories.push(history);",
													"",
													"                searchSuccess = true;",
													"                break;",
													"            }",
													"        }",
													"    }",
													"",
													"",
													"    // if search fail, create objectHistories",
													"    if (!searchSuccess) {",
													"        let objHistories = {",
													"            id: objId,",
													"            histories: []",
													"        };",
													"",
													"        let history = {",
													"            changes: changes",
													"        };",
													"",
													"        objHistories.histories.push(history);",
													"        objHistoriesList.push(objHistories);",
													"    }",
													"",
													"    pm.environment.set(`${objType}HistoriesList`, objHistoriesList);",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "21f68bad-3f0e-4de9-ab97-9d9b64e465ef",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cases/{{newTestCaseId1}}/approve",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cases",
												"{{newTestCaseId1}}",
												"approve"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create Test Case automation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c0904260-193a-4010-942e-62e4b1922b6d",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newTestCaseId2\", jsonData.id);",
													"    pm.environment.set(\"testCaseInfo2\", jsonData);",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"id\");",
													"    });",
													"",
													"    pm.test(\"Response data contains name: \" + jsonData.name, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"testCaseName2\"));",
													"    });",
													"",
													"    pm.test(\"Response data has order property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"order\");",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"pid\");",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"created_date\");",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"last_modified_date\");",
													"    });",
													"",
													"    pm.test(\"Response data has web_url property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"web_url\");",
													"    });",
													"",
													"    pm.test(\"Response data contains parent_id property\", () => {",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"test_case_version_id\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has version property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"version\");",
													"    });",
													"    ",
													"    pm.test(\"Response data contains description property: \" + jsonData.description, () => {",
													"        pm.expect(jsonData.description).to.eql(pm.environment.get(\"testCaseDescription2\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data contains precondition property: \" + jsonData.precondition, () => {",
													"        pm.expect(jsonData.precondition).to.eql(pm.environment.get(\"testCasePrecondition2\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"creator_id\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has agent_ids property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"agent_ids\");",
													"    });",
													"",
													"    let changes = [];",
													"    jsonData.properties.forEach((field) => {",
													"        changes.push({",
													"            field: field.field_name,",
													"            old_value: \"\",",
													"            new_value: field.field_value_name || field.field_value",
													"        });",
													"        switch (field.field_name) {",
													"            case \"Automation\":",
													"                pm.test(\"Response data has automation: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Yes\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseAutomationYes\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Automation Content\":",
													"                pm.test(\"Response data has empty automation content\", () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCaseAutomationContent\"));",
													"                });",
													"                break;",
													"",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Performance\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseTypePerformance\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"High\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCasePriorityHigh\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(`[${pm.environment.get(\"userTestFullName\")}]`);",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdTestCaseAssignedToUserTest\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCaseDescription2\"));",
													"                });",
													"                break;",
													"",
													"            case \"Precondition\":",
													"                pm.test(\"Repsonse data contains precondition: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCasePrecondition2\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    ",
													"    let historySteps = [];",
													"    jsonData.test_steps.forEach((step, index) => {",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has links property\", () => {",
													"            pm.expect(step).to.have.property(\"links\");",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has id property\", () => {",
													"            pm.expect(step).to.have.property(\"id\");",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] contains description property: \" + step.description, () => {",
													"            pm.expect(step.description).to.eql(pm.environment.get(\"testStepDescription1\"));",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] contains expected property: \" + step.description, () => {",
													"            pm.expect(step.expected).to.eql(pm.environment.get(\"testStepExpected1\"));",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has order property\", () => {",
													"            pm.expect(step).to.have.property(\"order\");",
													"        });",
													"        ",
													"        pm.test(`Response data has test_steps[${index}] has ${step.attachments.length} attachment property`, () => {",
													"            pm.expect(step).to.have.property(\"attachments\");",
													"            pm.expect(step.attachments.length).to.eql(1);",
													"        });",
													"        ",
													"        historySteps.push({",
													"            id: step.id,",
													"            description: step.description,",
													"            expectedResult: step.expected,",
													"            stepOrder: step.order || null,",
													"            calledTestCaseId: step.called_test_case ? step.called_test_case.id : null,",
													"        });",
													"    });",
													"    ",
													"    // Create changes of test steps",
													"    changes.push({",
													"        field: \"Test Step\",",
													"        old_value: [],",
													"        new_value: historySteps",
													"    });",
													"",
													"    createObjectHistory(\"testCase\", jsonData.id, changes);",
													"    ",
													"    // Save for future use",
													"    pm.environment.set(\"testCaseVersion2\", jsonData.version);",
													"",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													"",
													"function createObjectHistory(objType, objId, changes) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`) || [];",
													"",
													"    let searchSuccess = false;",
													"    if (objHistoriesList && objHistoriesList.length > 0) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                let history = {",
													"                    changes: changes",
													"                };",
													"                objHistories.histories.push(history);",
													"",
													"                searchSuccess = true;",
													"                break;",
													"            }",
													"        }",
													"    }",
													"",
													"",
													"    // if search fail, create objectHistories",
													"    if (!searchSuccess) {",
													"        let objHistories = {",
													"            id: objId,",
													"            histories: []",
													"        };",
													"",
													"        let history = {",
													"            changes: changes",
													"        };",
													"",
													"        objHistories.histories.push(history);",
													"        objHistoriesList.push(objHistories);",
													"    }",
													"",
													"    pm.environment.set(`${objType}HistoriesList`, objHistoriesList);",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "490582a7-6603-48f5-acd8-d111ee02e202",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"testCaseName2\", \"Test Case Automation 2\");",
													"pm.environment.set(\"testCaseDescription2\", \"Description of Test Case Automation 2\");",
													"pm.environment.set(\"testCasePrecondition2\", \"Precondition of Test Case Automation 2\");",
													"",
													"pm.environment.set(\"testCaseAutomationContent\", \"Automation Content of Test Case Automation 2\");",
													"",
													"pm.environment.set(\"testStepDescription1\", \"Description of test step 1\");",
													"pm.environment.set(\"testStepExpected1\", \"Expected of test step 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{testCaseName2}}\",\n  \"properties\": [\n    {\n        \"field_id\": \"{{fieldIdTestCaseAutomation}}\",\n        \"field_value\": \"{{fieldIdTestCaseAutomationYes}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestCaseAutomationContent}}\",\n        \"field_value\": \"{{testCaseAutomationContent}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestCaseStatus}}\",\n        \"field_value\": \"{{fieldIdTestCaseStatusInProgress}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestCaseType}}\",\n        \"field_value\": \"{{fieldIdTestCaseTypePerformance}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestCaseAssignedTo}}\",\n        \"field_value\": \"[{{fieldIdTestCaseAssignedToUserTest}}]\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestCaseDescription}}\",\n        \"field_value\": \"{{testCaseDescription2}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestCasePrecondition}}\",\n        \"field_value\": \"{{testCasePrecondition2}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestCasePriority}}\",\n        \"field_value\": \"{{fieldIdTestCasePriorityHigh}}\"\n    }\n  ],\n  \"test_steps\": [\n    {\n      \"description\": \"{{testStepDescription1}}\",\n      \"expected\": \"{{testStepExpected1}}\",\n      \"attachments\": [\n              {\n          \"name\": \"sample_file_name.txt\",\n          \"content_type\": \"text/plain\",\n          \"data\": \"dGhpcyBpcyBzYW1wbGUgdGVzdA==\"\n              }\n            ]\n    }\n  ],\n  \"parent_id\": \"{{newModuleId1}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cases"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Approve Test Case 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "85b1c97c-684c-4b9f-acfe-55ff3b3f88ee",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    var testCaseInfo = pm.environment.get(\"testCaseInfo2\");",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData.id).to.eql(testCaseInfo.id);",
													"    });",
													"",
													"    pm.test(\"Response data contains name: \" + jsonData.name, () => {",
													"        pm.expect(jsonData.name).to.eql(testCaseInfo.name);",
													"    });",
													"",
													"    pm.test(\"Response data has order property\", () => {",
													"        pm.expect(jsonData.order).to.eql(testCaseInfo.order);",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData.pid).to.eql(testCaseInfo.pid);",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData.created_date).to.eql(testCaseInfo.created_date);",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"last_modified_date\");",
													"    });",
													"",
													"    pm.test(\"Response data has web_url property\", () => {",
													"        pm.expect(jsonData.web_url).to.eql(testCaseInfo.web_url);",
													"    });",
													"",
													"    pm.test(\"Response data contains parent_id property\", () => {",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"    });",
													"    ",
													"    pm.test(\"Response data has version property\", () => {",
													"        var subStrings = testCaseInfo.version.split('.');",
													"        var newVersion = (parseInt(subStrings[0]) + 1).toString() + '.0';",
													"        pm.expect(jsonData.version).to.eql(newVersion);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains description property: \" + jsonData.description, () => {",
													"        pm.expect(jsonData.description).to.eql(testCaseInfo.description);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains precondition property: \" + jsonData.precondition, () => {",
													"        pm.expect(jsonData.precondition).to.eql(testCaseInfo.precondition);",
													"    });",
													"    ",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData.creator_id).to.eql(testCaseInfo.creator_id);",
													"    });",
													"    ",
													"    pm.test(\"Response data has agent_ids property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"agent_ids\");",
													"    });",
													"    ",
													"    jsonData.test_steps.forEach((step, index) => {",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has links property\", () => {",
													"            pm.expect(step).to.have.property(\"links\");",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has id property\", () => {",
													"            pm.expect(step.id).to.eql(testCaseInfo.test_steps[index].id);",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] contains description property: \" + step.description, () => {",
													"            pm.expect(step.description).to.eql(pm.environment.get(\"testStepDescription1\"));",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] contains expected property: \" + step.expected, () => {",
													"            pm.expect(step.expected).to.eql(pm.environment.get(\"testStepExpected1\"));",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has order property\", () => {",
													"            pm.expect(step.order).to.eql(testCaseInfo.test_steps[index].order);",
													"        });",
													"        ",
													"        pm.test(\"Response data has test_steps[ \" + index + \"] has attachments property\", () => {",
													"            pm.expect(step).to.have.property(\"attachments\");",
													"        });",
													"    });",
													"",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Automation\":",
													"                pm.test(\"Response data has automation: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Yes\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseAutomationYes\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Automation Content\":",
													"                pm.test(\"Response data has empty automation content\", () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCaseAutomationContent\"));",
													"                });",
													"                break;",
													"",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Performance\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseTypePerformance\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"High\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCasePriorityHigh\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(`[${pm.environment.get(\"userTestFullName\")}]`);",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdTestCaseAssignedToUserTest\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(testCaseInfo.description);",
													"                });",
													"                break;",
													"",
													"            case \"Precondition\":",
													"                pm.test(\"Repsonse data contains precondition: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(testCaseInfo.precondition);",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    ",
													"    let changes = [];",
													"    // Create changes of test steps",
													"    changes.push({",
													"        field: \"Version\",",
													"        old_value: pm.environment.get(\"testCaseVersion2\"),",
													"        new_value: jsonData.version",
													"    });",
													"",
													"    createObjectHistory(\"testCase\", jsonData.id, changes);",
													"    ",
													"    pm.environment.set(\"testCaseInfo2\", jsonData);",
													"    pm.environment.unset(\"testCaseVersion2\");",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													"",
													"function createObjectHistory(objType, objId, changes) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`) || [];",
													"",
													"    let searchSuccess = false;",
													"    if (objHistoriesList && objHistoriesList.length > 0) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                let history = {",
													"                    changes: changes",
													"                };",
													"                objHistories.histories.push(history);",
													"",
													"                searchSuccess = true;",
													"                break;",
													"            }",
													"        }",
													"    }",
													"",
													"",
													"    // if search fail, create objectHistories",
													"    if (!searchSuccess) {",
													"        let objHistories = {",
													"            id: objId,",
													"            histories: []",
													"        };",
													"",
													"        let history = {",
													"            changes: changes",
													"        };",
													"",
													"        objHistories.histories.push(history);",
													"        objHistoriesList.push(objHistories);",
													"    }",
													"",
													"    pm.environment.set(`${objType}HistoriesList`, objHistoriesList);",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "81404045-3eb7-4d3f-9c3d-0894bce7f6c3",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cases/{{newTestCaseId2}}/approve",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cases",
												"{{newTestCaseId2}}",
												"approve"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create Test Case has test step that calls another test case",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ce318c0d-8cec-4b7e-8eee-c47bd8a5fc32",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newTestCaseId3\", jsonData.id);",
													"    pm.environment.set(\"testCaseInfo3\", jsonData);",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"id\");",
													"    });",
													"",
													"    pm.test(`Response data contains name: ${jsonData.name}`, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"testCaseName3\"));",
													"    });",
													"",
													"    pm.test(\"Response data has order property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"order\");",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"pid\");",
													"    });",
													"",
													"    pm.test(\"Response data has web_url property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"web_url\");",
													"    });",
													"",
													"    pm.test(\"Response data contains parent_id property\", () => {",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"test_case_version_id\");",
													"    });",
													"",
													"    pm.test(\"Response data has version property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"version\");",
													"    });",
													"",
													"    pm.test(`Response data contains description property: ${jsonData.description}`, () => {",
													"        pm.expect(jsonData.description).to.eql(pm.environment.get(\"testCaseDescription3\"));",
													"    });",
													"",
													"    pm.test(`Response data contains precondition property: ${jsonData.precondition}`, () => {",
													"        pm.expect(jsonData.precondition).to.eql(pm.environment.get(\"testCasePrecondition3\"));",
													"    });",
													"",
													"    pm.test(\"Response data has agent_ids property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"agent_ids\");",
													"    });",
													"",
													"    let changes = [];",
													"    jsonData.properties.forEach((field) => {",
													"        changes.push({",
													"            field: field.field_name,",
													"            old_value: \"\",",
													"            new_value: field.field_value_name || field.field_value",
													"        });",
													"        switch (field.field_name) {",
													"            case \"Automation\":",
													"                pm.test(`Response data has automation: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"No\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseAutomationNo\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Automation Content\":",
													"                pm.test(\"Response data has empty automation content\", () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"",
													"            case \"Status\":",
													"                pm.test(`Repsonse data has status: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Type\":",
													"                pm.test(`Repsonse data has type: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Performance\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseTypePerformance\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(`Repsonse data has priority: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"High\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCasePriorityHigh\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(`[${pm.environment.get(\"userTestFullName\")}]`);",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdTestCaseAssignedToUserTest\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(`Repsonse data has description: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCaseDescription3\"));",
													"                });",
													"                break;",
													"",
													"            case \"Precondition\":",
													"                pm.test(`Repsonse data has precondition: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCasePrecondition3\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    ",
													"    let historySteps = [];",
													"    jsonData.test_steps.forEach((step, index) => {",
													"        pm.test(`Response data has test_steps[${index}] has links property`, () => {",
													"            pm.expect(step).to.have.property(\"links\");",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] has id property`, () => {",
													"            pm.expect(step).to.have.property(\"id\");",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] has order property`, () => {",
													"            pm.expect(step).to.have.property(\"order\");",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] has ${step.attachments.length} attachment property`, () => {",
													"            pm.expect(step).to.have.property(\"attachments\");",
													"            pm.expect(step.attachments.length).to.eql(1);",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] has called_test_case property`, () => {",
													"            var testCaseInfo = pm.environment.get(\"testCaseInfo1\");",
													"",
													"            pm.expect(step.called_test_case).to.have.property(\"links\");",
													"            pm.expect(step.called_test_case.id).to.eql(pm.environment.get(\"newTestCaseId1\"));",
													"            pm.expect(step.called_test_case.name).to.eql(testCaseInfo.name);",
													"            pm.expect(step.called_test_case.order).to.eql(testCaseInfo.order);",
													"            pm.expect(step.called_test_case.pid).to.eql(testCaseInfo.pid);",
													"            pm.expect(step.called_test_case.created_date).to.eql(testCaseInfo.created_date);",
													"            pm.expect(step.called_test_case).to.have.property(\"last_modified_date\");",
													"            pm.expect(step.called_test_case.parent_id).to.eql(testCaseInfo.parent_id);",
													"            pm.expect(step.called_test_case.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"            pm.expect(step.called_test_case.description).to.eql(testCaseInfo.description);",
													"            pm.expect(step.called_test_case.precondition).to.eql(testCaseInfo.precondition);",
													"            pm.expect(step.called_test_case.creator_id).to.eql(testCaseInfo.creator_id);",
													"            pm.expect(step.called_test_case.agent_ids).to.eql(testCaseInfo.agent_ids);",
													"",
													"            step.called_test_case.properties.forEach((field) => {",
													"                switch (field.field_name) {",
													"                    case \"Automation\":",
													"                        pm.test(`Response data has automation: ${field.field_value_name}`, () => {",
													"                            pm.expect(field.field_value_name).to.eql(\"No\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseAutomationNo\").toString());",
													"                        });",
													"                        break;",
													"",
													"                    case \"Automation Content\":",
													"                        pm.test(\"Response data has empty automation content\", () => {",
													"                            pm.expect(field.field_value).to.eql(\"\");",
													"                        });",
													"                        break;",
													"",
													"                    case \"Status\":",
													"                        pm.test(`Repsonse data has status: ${field.field_value_name}`, () => {",
													"                            pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseStatusInProgress\").toString());",
													"                        });",
													"                        break;",
													"",
													"                    case \"Type\":",
													"                        pm.test(`Repsonse data has type: ${field.field_value_name}`, () => {",
													"                            pm.expect(field.field_value_name).to.eql(\"Performance\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseTypePerformance\").toString());",
													"                        });",
													"                        break;",
													"",
													"                    case \"Priority\":",
													"                        pm.test(`Repsonse data has priority: ${field.field_value_name}`, () => {",
													"                            pm.expect(field.field_value_name).to.eql(\"High\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCasePriorityHigh\").toString());",
													"                        });",
													"                        break;",
													"",
													"                    case \"Assigned To\":",
													"                        pm.test(`Repsonse data has property assigned to`, () => {",
													"                            pm.expect(field.field_value_name).to.eql(`[${pm.environment.get(\"userTestFullName\")}]`);",
													"                            pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdTestCaseAssignedToUserTest\").toString());",
													"                        });",
													"                        break;",
													"",
													"                    case \"Description\":",
													"                        pm.test(`Repsonse data has description: ${field.field_value}`, () => {",
													"                            pm.expect(field.field_value).to.eql(testCaseInfo.description);",
													"                        });",
													"                        break;",
													"",
													"                    case \"Precondition\":",
													"                        pm.test(`Repsonse data has precondition: ${field.field_value}`, () => {",
													"                            pm.expect(field.field_value).to.eql(testCaseInfo.precondition);",
													"                        });",
													"                        break;",
													"                }",
													"            });",
													"        });",
													"        historySteps.push({",
													"            id: step.id,",
													"            description: step.description,",
													"            expectedResult: step.expected,",
													"            stepOrder: step.order || null,",
													"            calledTestCaseId: step.called_test_case ? step.called_test_case.id : null,",
													"        });",
													"    });",
													"    ",
													"    // Create changes of test steps",
													"    changes.push({",
													"        field: \"Test Step\",",
													"        old_value: [],",
													"        new_value: historySteps",
													"    });",
													"",
													"    createObjectHistory(\"testCase\", jsonData.id, changes);",
													"    ",
													"    pm.environment.set(\"testCaseVersion3\", jsonData.version);",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													"",
													"function createObjectHistory(objType, objId, changes) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`) || [];",
													"",
													"    let searchSuccess = false;",
													"    if (objHistoriesList && objHistoriesList.length > 0) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                let history = {",
													"                    changes: changes",
													"                };",
													"                objHistories.histories.push(history);",
													"",
													"                searchSuccess = true;",
													"                break;",
													"            }",
													"        }",
													"    }",
													"",
													"",
													"    // if search fail, create objectHistories",
													"    if (!searchSuccess) {",
													"        let objHistories = {",
													"            id: objId,",
													"            histories: []",
													"        };",
													"",
													"        let history = {",
													"            changes: changes",
													"        };",
													"",
													"        objHistories.histories.push(history);",
													"        objHistoriesList.push(objHistories);",
													"    }",
													"",
													"    pm.environment.set(`${objType}HistoriesList`, objHistoriesList);",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dbd95f8a-fb40-40cb-96df-7445950c2c22",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"testCaseName3\", \"Test Case 3\");",
													"pm.environment.set(\"testCaseDescription3\", \"Description of Test Case 3\");",
													"pm.environment.set(\"testCasePrecondition3\", \"Precondition of Test Case 3\");",
													"",
													"pm.environment.set(\"testStepDescription1\", \"Description of test step 1\");",
													"pm.environment.set(\"testStepExpected1\", \"Expected of test step 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{testCaseName3}}\",\n    \"properties\": [\n        {\n            \"field_id\": \"{{fieldIdTestCaseAutomation}}\",\n            \"field_value\": \"{{fieldIdTestCaseAutomationNo}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseStatus}}\",\n            \"field_value\": \"{{fieldIdTestCaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseType}}\",\n            \"field_value\": \"{{fieldIdTestCaseTypePerformance}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseAssignedTo}}\",\n            \"field_value\": \"[{{fieldIdTestCaseAssignedToUserTest}}]\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseDescription}}\",\n            \"field_value\": \"{{testCaseDescription3}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCasePrecondition}}\",\n            \"field_value\": \"{{testCasePrecondition3}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCasePriority}}\",\n            \"field_value\": \"{{fieldIdTestCasePriorityHigh}}\"\n        }\n    ],\n    \"test_steps\": [\n        {\n            \"description\": \"{{testStepDescription1}}\",\n            \"expected\": \"{{testStepExpected1}}\",\n            \"called_test_case_id\": \"{{newTestCaseId1}}\",\n            \"attachments\": [\n                {\n                    \"name\": \"sample_file_name.txt\",\n                    \"content_type\": \"text/plain\",\n                    \"data\": \"dGhpcyBpcyBzYW1wbGUgdGVzdA==\"\n                }\n            ]\n        }\n    ],\n    \"parent_id\": \"{{newModuleId1}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cases"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Approve Test Case 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e98352cf-f683-40ad-9edd-9da05743847e",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    var testCaseInfo = pm.environment.get(\"testCaseInfo3\");",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData.id).to.eql(testCaseInfo.id);",
													"    });",
													"",
													"    pm.test(\"Response data contains name: \" + jsonData.name, () => {",
													"        pm.expect(jsonData.name).to.eql(testCaseInfo.name);",
													"    });",
													"",
													"    pm.test(\"Response data has order property\", () => {",
													"        pm.expect(jsonData.order).to.eql(testCaseInfo.order);",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData.pid).to.eql(testCaseInfo.pid);",
													"    });",
													"",
													"    pm.test(\"Response data has web_url property\", () => {",
													"        pm.expect(jsonData.web_url).to.eql(testCaseInfo.web_url);",
													"    });",
													"",
													"    pm.test(\"Response data contains parent_id property\", () => {",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData.test_case_version_id).to.eql(testCaseInfo.test_case_version_id);",
													"    });",
													"",
													"    pm.test(\"Response data has version property\", () => {",
													"        var subStrings = testCaseInfo.version.split('.');",
													"        var newVersion = (parseInt(subStrings[0]) + 1).toString() + '.0';",
													"        pm.expect(jsonData.version).to.eql(newVersion);",
													"    });",
													"",
													"    pm.test(\"Response data contains description property: \" + jsonData.description, () => {",
													"        pm.expect(jsonData.description).to.eql(testCaseInfo.description);",
													"    });",
													"",
													"    pm.test(\"Response data contains precondition property: \" + jsonData.precondition, () => {",
													"        pm.expect(jsonData.precondition).to.eql(testCaseInfo.precondition);",
													"    });",
													"",
													"    pm.test(\"Response data has agent_ids property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"agent_ids\");",
													"    });",
													"",
													"    jsonData.test_steps.forEach((step, index) => {",
													"        pm.test(`Response data has test_steps[${index}] has links property`, () => {",
													"            pm.expect(step).to.have.property(\"links\");",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] has id property`, () => {",
													"            pm.expect(step).to.have.property(\"id\");",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] has order property`, () => {",
													"            pm.expect(step).to.have.property(\"order\");",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] has ${step.attachments.length} attachment property`, () => {",
													"            pm.expect(step).to.have.property(\"attachments\");",
													"            pm.expect(step.attachments.length).to.eql(1);",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] has called_test_case property`, () => {",
													"            let calledTestCase = pm.environment.get(\"testCaseInfo1\");",
													"",
													"            pm.expect(step.called_test_case).to.have.property(\"links\");",
													"            pm.expect(step.called_test_case.id).to.eql(pm.environment.get(\"newTestCaseId1\"));",
													"            pm.expect(step.called_test_case.name).to.eql(calledTestCase.name);",
													"            pm.expect(step.called_test_case.order).to.eql(calledTestCase.order);",
													"            pm.expect(step.called_test_case.pid).to.eql(calledTestCase.pid);",
													"            pm.expect(step.called_test_case.created_date).to.eql(calledTestCase.created_date);",
													"            pm.expect(step.called_test_case).to.have.property(\"last_modified_date\");",
													"            pm.expect(step.called_test_case.parent_id).to.eql(calledTestCase.parent_id);",
													"            pm.expect(step.called_test_case.test_case_version_id).to.eql(calledTestCase.test_case_version_id);",
													"            pm.expect(step.called_test_case.description).to.eql(calledTestCase.description);",
													"            pm.expect(step.called_test_case.precondition).to.eql(calledTestCase.precondition);",
													"            pm.expect(step.called_test_case.creator_id).to.eql(calledTestCase.creator_id);",
													"            pm.expect(step.called_test_case.agent_ids).to.eql(calledTestCase.agent_ids);",
													"",
													"            step.called_test_case.properties.forEach((field) => {",
													"                switch (field.field_name) {",
													"                    case \"Automation\":",
													"                        pm.test(`Response data has automation: ${field.field_value_name}`, () => {",
													"                            pm.expect(field.field_value_name).to.eql(\"No\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseAutomationNo\").toString());",
													"                        });",
													"                        break;",
													"",
													"                    case \"Automation Content\":",
													"                        pm.test(\"Response data has empty automation content\", () => {",
													"                            pm.expect(field.field_value).to.eql(\"\");",
													"                        });",
													"                        break;",
													"",
													"                    case \"Status\":",
													"                        pm.test(`Repsonse data has status: ${field.field_value_name}`, () => {",
													"                            pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseStatusInProgress\").toString());",
													"                        });",
													"                        break;",
													"",
													"                    case \"Type\":",
													"                        pm.test(`Repsonse data has type: ${field.field_value_name}`, () => {",
													"                            pm.expect(field.field_value_name).to.eql(\"Performance\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseTypePerformance\").toString());",
													"                        });",
													"                        break;",
													"",
													"                    case \"Priority\":",
													"                        pm.test(`Repsonse data has priority: ${field.field_value_name}`, () => {",
													"                            pm.expect(field.field_value_name).to.eql(\"High\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCasePriorityHigh\").toString());",
													"                        });",
													"                        break;",
													"",
													"                    case \"Assigned To\":",
													"                        pm.test(`Repsonse data has property assigned to`, () => {",
													"                            pm.expect(field.field_value_name).to.eql(`[${pm.environment.get(\"userTestFullName\")}]`);",
													"                            pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdTestCaseAssignedToUserTest\").toString());",
													"                        });",
													"                        break;",
													"",
													"                    case \"Description\":",
													"                        pm.test(`Repsonse data has description: ${field.field_value}`, () => {",
													"                            pm.expect(field.field_value).to.eql(calledTestCase.description);",
													"                        });",
													"                        break;",
													"",
													"                    case \"Precondition\":",
													"                        pm.test(`Repsonse data has precondition: ${field.field_value}`, () => {",
													"                            pm.expect(field.field_value).to.eql(calledTestCase.precondition);",
													"                        });",
													"                        break;",
													"                }",
													"            });",
													"        });",
													"    });",
													"",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Automation\":",
													"                pm.test(\"Response data has automation: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"No\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseAutomationNo\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Automation Content\":",
													"                pm.test(\"Response data has empty automation content\", () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has status: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Type\":",
													"                pm.test(\"Repsonse data has type: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Performance\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseTypePerformance\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(\"Repsonse data has priority: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"High\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCasePriorityHigh\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(`[${pm.environment.get(\"userTestFullName\")}]`);",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdTestCaseAssignedToUserTest\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data contains description: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(testCaseInfo.description);",
													"                });",
													"                break;",
													"",
													"            case \"Precondition\":",
													"                pm.test(\"Repsonse data contains precondition: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(testCaseInfo.precondition);",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    ",
													"    let changes = [];",
													"    // Create changes of test steps",
													"    changes.push({",
													"        field: \"Version\",",
													"        old_value: pm.environment.get(\"testCaseVersion3\"),",
													"        new_value: jsonData.version",
													"    });",
													"",
													"    createObjectHistory(\"testCase\", jsonData.id, changes);",
													"",
													"    pm.environment.set(\"testCaseInfo3\", jsonData);",
													"    pm.environment.unset(\"testCaseVersion3\");",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													"",
													"function createObjectHistory(objType, objId, changes) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`) || [];",
													"",
													"    let searchSuccess = false;",
													"    if (objHistoriesList && objHistoriesList.length > 0) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                let history = {",
													"                    changes: changes",
													"                };",
													"                objHistories.histories.push(history);",
													"",
													"                searchSuccess = true;",
													"                break;",
													"            }",
													"        }",
													"    }",
													"",
													"",
													"    // if search fail, create objectHistories",
													"    if (!searchSuccess) {",
													"        let objHistories = {",
													"            id: objId,",
													"            histories: []",
													"        };",
													"",
													"        let history = {",
													"            changes: changes",
													"        };",
													"",
													"        objHistories.histories.push(history);",
													"        objHistoriesList.push(objHistories);",
													"    }",
													"",
													"    pm.environment.set(`${objType}HistoriesList`, objHistoriesList);",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "05467bce-d8c8-49ca-ba13-04b8d245ae5a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cases/{{newTestCaseId3}}/approve",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cases",
												"{{newTestCaseId3}}",
												"approve"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create Test Case 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2f0525d-a50f-49c7-9a7b-6ec51dab1b77",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.environment.set(\"newTestCaseId4\", jsonData.id);",
													"    pm.environment.set(\"testCaseInfo4\", jsonData);",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"id\");",
													"    });",
													"",
													"    pm.test(`Response data contains name: ${jsonData.name}`, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"testCaseName4\"));",
													"    });",
													"",
													"    pm.test(\"Response data has order property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"order\");",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"pid\");",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"created_date\");",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"last_modified_date\");",
													"    });",
													"",
													"    pm.test(\"Response data has web_url property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"web_url\");",
													"    });",
													"",
													"    pm.test(\"Response data contains parent_id property\", () => {",
													"        pm.expect(jsonData.parent_id).to.eql(pm.environment.get(\"newModuleId1\"));",
													"    });",
													"",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"test_case_version_id\");",
													"    });",
													"",
													"    pm.test(\"Response data has version property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"version\");",
													"    });",
													"",
													"    pm.test(`Response data contains description property: ${jsonData.description}`, () => {",
													"        pm.expect(jsonData.description).to.eql(pm.environment.get(\"testCaseDescription4\"));",
													"    });",
													"",
													"    pm.test(`Response data contains precondition property: ${jsonData.precondition}`, () => {",
													"        pm.expect(jsonData.precondition).to.eql(pm.environment.get(\"testCasePrecondition4\"));",
													"    });",
													"",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"creator_id\");",
													"    });",
													"",
													"    pm.test(\"Response data has agent_ids property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"agent_ids\");",
													"    });",
													"",
													"    let changes = [];",
													"    jsonData.properties.forEach((field) => {",
													"        changes.push({",
													"            field: field.field_name,",
													"            old_value: \"\",",
													"            new_value: field.field_value_name || field.field_value",
													"        });",
													"        switch (field.field_name) {",
													"            case \"Automation\":",
													"                pm.test(`Response data has automation: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"No\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseAutomationNo\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Automation Content\":",
													"                pm.test(\"Response data has empty automation content\", () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"",
													"            case \"Status\":",
													"                pm.test(`Repsonse data has status: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Type\":",
													"                pm.test(`Repsonse data has type: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Performance\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCaseTypePerformance\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(`Repsonse data has priority: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"High\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdTestCasePriorityHigh\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(`[${pm.environment.get(\"userTestFullName\")}]`);",
													"                    pm.expect(field.field_value).to.include(pm.environment.get(\"fieldIdTestCaseAssignedToUserTest\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(`Repsonse data has description: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCaseDescription4\"));",
													"                });",
													"                break;",
													"",
													"            case \"Precondition\":",
													"                pm.test(`Repsonse data has precondition: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"testCasePrecondition4\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    ",
													"    let historySteps = [];",
													"    jsonData.test_steps.forEach((step, index) => {",
													"        pm.test(`Response data has test_steps[${index}] has links property`, () => {",
													"            pm.expect(step).to.have.property(\"links\");",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] has id property`, () => {",
													"            pm.expect(step).to.have.property(\"id\");",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] contains description property: ${step.description}`, () => {",
													"            pm.expect(step.description).to.eql(pm.environment.get(\"testStepDescription1\"));",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] contains expected property: ${step.expected}`, () => {",
													"            pm.expect(step.expected).to.eql(pm.environment.get(\"testStepExpected1\"));",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] has order property`, () => {",
													"            pm.expect(step).to.have.property(\"order\");",
													"        });",
													"",
													"        pm.test(`Response data has test_steps[${index}] has ${step.attachments.length} attachment property`, () => {",
													"            pm.expect(step).to.have.property(\"attachments\");",
													"            pm.expect(step.attachments.length).to.eql(1);",
													"        });",
													"        ",
													"        historySteps.push({",
													"            id: step.id,",
													"            description: step.description,",
													"            expectedResult: step.expected,",
													"            stepOrder: step.order || null,",
													"            calledTestCaseId: step.called_test_case ? step.called_test_case.id : null,",
													"        });",
													"    });",
													"",
													"    // Create changes of test steps",
													"    changes.push({",
													"        field: \"Test Step\",",
													"        old_value: [],",
													"        new_value: historySteps",
													"    });",
													"",
													"    createObjectHistory(\"testCase\", jsonData.id, changes);",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													"",
													"function createObjectHistory(objType, objId, changes) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`) || [];",
													"",
													"    let searchSuccess = false;",
													"    if (objHistoriesList && objHistoriesList.length > 0) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                let history = {",
													"                    changes: changes",
													"                };",
													"                objHistories.histories.push(history);",
													"",
													"                searchSuccess = true;",
													"                break;",
													"            }",
													"        }",
													"    }",
													"",
													"",
													"    // if search fail, create objectHistories",
													"    if (!searchSuccess) {",
													"        let objHistories = {",
													"            id: objId,",
													"            histories: []",
													"        };",
													"",
													"        let history = {",
													"            changes: changes",
													"        };",
													"",
													"        objHistories.histories.push(history);",
													"        objHistoriesList.push(objHistories);",
													"    }",
													"",
													"    pm.environment.set(`${objType}HistoriesList`, objHistoriesList);",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "677a6b6e-a997-4aba-908e-bbea8b885a7f",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"testCaseName4\", \"Test Case 4\");",
													"pm.environment.set(\"testCaseDescription4\", \"Description of Test Case 4\");",
													"pm.environment.set(\"testCasePrecondition4\", \"Precondition of Test Case 4\");",
													"",
													"pm.environment.set(\"testStepDescription1\", \"Description of test step 1\");",
													"pm.environment.set(\"testStepExpected1\", \"Expected of test step 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{testCaseName4}}\",\n    \"properties\": [\n        {\n            \"field_id\": \"{{fieldIdTestCaseAutomation}}\",\n            \"field_value\": \"{{fieldIdTestCaseAutomationNo}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseStatus}}\",\n            \"field_value\": \"{{fieldIdTestCaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseType}}\",\n            \"field_value\": \"{{fieldIdTestCaseTypePerformance}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseAssignedTo}}\",\n            \"field_value\": \"[{{fieldIdTestCaseAssignedToUserTest}}]\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCaseDescription}}\",\n            \"field_value\": \"{{testCaseDescription4}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCasePrecondition}}\",\n            \"field_value\": \"{{testCasePrecondition4}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdTestCasePriority}}\",\n            \"field_value\": \"{{fieldIdTestCasePriorityHigh}}\"\n        }\n    ],\n    \"test_steps\": [\n        {\n            \"description\": \"{{testStepDescription1}}\",\n            \"expected\": \"{{testStepExpected1}}\",\n            \"attachments\": [\n              {\n          \"name\": \"sample_file_name.txt\",\n          \"content_type\": \"text/plain\",\n          \"data\": \"dGhpcyBpcyBzYW1wbGUgdGVzdA==\"\n              }\n            ]\n        }\n    ],\n    \"parent_id\": \"{{newModuleId1}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cases"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Preconditoin - Get test steps of test case 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a9aa599-acff-4b2f-98a8-c3b75aea0114",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has \" + jsonData.length + \" test steps\", () => {",
													"        pm.expect(jsonData.length).to.eql(1);",
													"    });",
													"",
													"    jsonData.forEach((step, index) => {",
													"        pm.test(\"Response data has test step \" + (index + 1).toString() + \" has links property\", () => {",
													"            pm.expect(step).to.have.property(\"links\");",
													"        });",
													"",
													"        pm.test(\"Response data has test step \" + (index + 1).toString() + \" has id property\", () => {",
													"            pm.expect(step).to.have.property(\"id\");",
													"        });",
													"",
													"        pm.test(\"Response data has test step \" + (index + 1).toString() + \" contains description: \" + step.description, () => {",
													"            pm.expect(step).to.have.property(\"description\");",
													"        });",
													"",
													"        pm.test(\"Response data has test step \" + (index + 1).toString() + \" contains expected: \" + step.expected, () => {",
													"            pm.expect(step).to.have.property(\"expected\");",
													"        });",
													"",
													"        pm.test(\"Response data has test step \" + (index + 1).toString() + \" has order property\", () => {",
													"            pm.expect(step).to.have.property(\"order\");",
													"        });",
													"",
													"        pm.test(\"Response data has test step \" + (index + 1).toString() + \" has attachments property\", () => {",
													"            pm.expect(step).to.have.property(\"attachments\");",
													"",
													"            if (step.attachment) {",
													"                pm.test(\"Response data has test step \" + (index + 1).toString() + \" has \" + step.attachments.length + \" attachments\", () => {",
													"                    pm.expect(step.attachment.length).to.eql(0);",
													"                });",
													"            }",
													"        });",
													"    });",
													"",
													"    pm.environment.set(\"testStepInfo1c1\", jsonData[0]);",
													"    pm.environment.set(\"newTestStepId1c1\", jsonData[0].id);",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "51398ce3-ddcf-4203-bb11-80642434d0a7",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cases/{{newTestCaseId1}}/test-steps",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cases",
												"{{newTestCaseId1}}",
												"test-steps"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Test Cycle",
							"item": [
								{
									"name": "200 - Precondition - Create test cycle 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "62760137-06ec-4489-9f4b-407479baca72",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newCycleId1\", jsonData.id);",
													"    pm.environment.set(\"cycleInfo1\", jsonData);",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Response data has links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has id\", () => {",
													"        pm.expect(jsonData).to.have.property(\"id\");",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name: \" + jsonData.name, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"newCycleName1\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has order\", () => {",
													"        pm.expect(jsonData).to.have.property(\"order\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid\", () => {",
													"        pm.expect(jsonData).to.have.property(\"pid\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date\", () => {",
													"        pm.expect(jsonData).to.have.property(\"created_date\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modified_date\", () => {",
													"        pm.expect(jsonData).to.have.property(\"last_modified_date\");",
													"    });",
													"    ",
													"    pm.test(\"Response data contains description: \" + jsonData.description, () => {",
													"        pm.expect(jsonData.description).to.eql(pm.environment.get(\"cycleDescription\"));",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "591ac93e-f406-4f95-bc21-9f8a59437689",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"newCycleName1\", \"Cycle 1\");",
													"pm.environment.set(\"cycleDescription\", \"Description of Test Cycle 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{newCycleName1}}\",\n    \"description\": \"{{cycleDescription}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cycles?parentId={{newReleaseId1}}&parentType=release",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cycles"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newReleaseId1}}"
												},
												{
													"key": "parentType",
													"value": "release"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Test Suite",
							"item": [
								{
									"name": "200 - Precondition - Get test suite fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cc00190e-e5ce-4d58-8723-341139c179b7",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdTestSuite\";",
													"    var jsonData = pm.response.json();",
													"    var userList = pm.environment.get(\"userList\");",
													"    ",
													"    let listToUnset = pm.environment.get(\"listToUnset\") || [];",
													"",
													"    jsonData.forEach((field) => {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"        listToUnset.push(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"));",
													"",
													"        if (field.allowed_values) {",
													"            var fieldValueId = \"\";",
													"",
													"            field.allowed_values.forEach((item, index) => {",
													"",
													"                switch (field.label) {",
													"                    case \"Assigned To\":",
													"                        userList.forEach((user, userIndex) => {",
													"                            // Just save variables of users who have admin permission",
													"                            if (item.label === `${user.first_name} ${user.last_name}`) {",
													"                                if (user.username === pm.environment.get(\"username\")) {",
													"                                    // UserTest: user who directly affects to the test case",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + `UserTest`;",
													"                                    pm.environment.set(\"userTestFullName\", item.label);",
													"                                } else {",
													"                                    // Other users who have admin permission",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                                }",
													"                                pm.environment.set(fieldValueId, item.value);",
													"                                listToUnset.push(fieldValueId);",
													"                            }",
													"                        });",
													"                        break;",
													"                    case \"Target Release/Build\":",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"Target\" + (index + 1).toString();",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                        listToUnset.push(fieldValueId);",
													"                        break;",
													"                    default:",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                        listToUnset.push(fieldValueId);",
													"                        break;",
													"                }",
													"",
													"            });",
													"        }",
													"    });",
													"    ",
													"    pm.environment.set(\"listToUnset\", listToUnset);",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/test-suites/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"test-suites",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create test suite 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4eae7520-7cac-4cc2-b45a-c1782f569489",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newTestSuiteId1\", jsonData.id);",
													"    pm.environment.set(\"testSuiteInfo1\", jsonData);",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has id\", () => {",
													"        pm.expect(jsonData).to.have.property(\"id\");",
													"    });",
													"",
													"    pm.test(\"Response data contains name: \" + jsonData.name, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"newTestSuiteName1\"));",
													"    });",
													"",
													"    pm.test(\"Response data has order\", () => {",
													"        pm.expect(jsonData).to.have.property(\"order\");",
													"    });",
													"",
													"    pm.test(\"Response data has pid\", () => {",
													"        pm.expect(jsonData).to.have.property(\"pid\");",
													"    });",
													"",
													"    pm.test(\"Response data has created_date\", () => {",
													"        pm.expect(jsonData).to.have.property(\"created_date\");",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date\", () => {",
													"        pm.expect(jsonData).to.have.property(\"last_modified_date\");",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach((field) => {",
													"        switch (field.field_name) {",
													"            case \"Planned Start Date\":",
													"                pm.test(\"Repsonse data contains Planned Start Date\", () => {",
													"                    tmp = pm.environment.get(\"startDate\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Planned End Date\":",
													"                pm.test(\"Repsonse data contains Planned End Date\", () => {",
													"                    tmp = pm.environment.get(\"endDate\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Target Release/Build\":",
													"                pm.test(\"Repsonse data has Target Release/Build property\", () => {",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestSuiteTargetReleaseBuildTarget1\").toString()",
													"                    );",
													"                });",
													"                break;",
													"",
													"            case \"Environment\":",
													"                pm.test(\"Repsonse data has Environment property\", () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(\"Repsonse data has Assigned To property\", () => {",
													"                    pm.expect(field.field_value).to.eql(",
													"                        `[${pm.environment.get(\"fieldIdTestSuiteAssignedToUserTest\")}]`",
													"                    );",
													"                    pm.expect(field.field_value_name).to.eql(`[${pm.environment.get(\"userTestFullName\")}]`);",
													"                });",
													"                break;",
													"",
													"            case \"Execution Type\":",
													"                pm.test(`Repsonse data contains Execotion Type: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestSuiteExecutionTypeSmoke\").toString()",
													"                    );",
													"                    pm.expect(field.field_value_name).to.eql(\"Smoke\");",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(`Repsonse data has Description: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"suiteDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "997b252d-6f3e-4147-a6f3-e8c0eeb84003",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"newTestSuiteName1\", \"Test Suite 1\");",
													"pm.environment.set(\"suiteDescription\", \"Description of Test Suite 1\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate\", today.toISOString());",
													"today.setDate(today.getDate() + 5);",
													"pm.environment.set(\"endDate\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{newTestSuiteName1}}\",\n  \"properties\": [\n    {\n      \"field_id\": {{fieldIdTestSuitePlannedStartDate}},\n      \"field_value\": \"{{startDate}}\"\n      \n    },\n    {\n      \"field_id\": {{fieldIdTestSuitePlannedEndDate}},\n      \"field_value\": \"{{endDate}}\"\n      \n    },\n    {\n      \"field_id\": {{fieldIdTestSuiteAssignedTo}},\n      \"field_value\": \"[{{fieldIdTestSuiteAssignedToUserTest}}]\"\n      \n    },\n    {\n      \"field_id\": {{fieldIdTestSuiteExecutionType}},\n      \"field_value\": \"{{fieldIdTestSuiteExecutionTypeSmoke}}\"\n      \n    },\n    {\n      \"field_id\": {{fieldIdTestSuiteDescription}},\n      \"field_value\": \"{{suiteDescription}}\"\n      \n    }\n  ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-suites?parentId={{newCycleId1}}&parentType=test-cycle",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-suites"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newCycleId1}}"
												},
												{
													"key": "parentType",
													"value": "test-cycle"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Test Runs",
							"item": [
								{
									"name": "200 - Precondition - Get Test Run fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "21d75c6e-c626-4267-9fe6-ffdfa92c17b0",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdTestRun\";",
													"    var jsonData = pm.response.json();",
													"    var userList = pm.environment.get(\"userList\");",
													"    ",
													"    let listToUnset = pm.environment.get(\"listToUnset\") || [];",
													"",
													"    jsonData.forEach((field) => {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"        listToUnset.push(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"));",
													"",
													"        if (field.allowed_values) {",
													"            var fieldValueId = \"\";",
													"",
													"            field.allowed_values.forEach((item, index) => {",
													"",
													"                switch (field.label) {",
													"                    case \"Assigned To\":",
													"                        userList.forEach((user, userIndex) => {",
													"                            // Just save variables of users who have admin permission",
													"                            if (item.label === `${user.first_name} ${user.last_name}`) {",
													"                                if (user.username === pm.environment.get(\"username\")) {",
													"                                    // UserTest: user who directly affects to the test case",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + `UserTest`;",
													"                                    pm.environment.set(\"userTestFullName\", item.label);",
													"                                    pm.environment.set(\"userTestId\", user.id);",
													"                                } else {",
													"                                    // Other users who have admin permission",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                                }",
													"                                pm.environment.set(fieldValueId, item.value);",
													"                                listToUnset.push(fieldValueId);",
													"                            }",
													"                        });",
													"                        break;",
													"                    case \"Target Release/Build\":",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"Target\" + (index + 1).toString();",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                        listToUnset.push(fieldValueId);",
													"                        break;",
													"                    default:",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                        listToUnset.push(fieldValueId);",
													"                        break;",
													"                }",
													"",
													"            });",
													"        }",
													"    });",
													"    ",
													"    pm.environment.set(\"listToUnset\", listToUnset);",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/test-runs/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"test-runs",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create a test run",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b3cba9e-16d5-4560-821d-87a8691f82f6",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"",
													"    let jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newTestRunId1\", jsonData.id);",
													"    pm.environment.set(\"testRunInfo1\", jsonData);",
													"",
													"    pm.test(\"Status code is 201\", () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"id\");",
													"    });",
													"",
													"    pm.test(`Response data contains name: ${jsonData.name}`, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"testRunName\"));",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"pid\");",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"created_date\");",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"last_modified_date\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"test_case_version_id\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"creator_id\");",
													"    });",
													"",
													"    pm.test(\"Response data has test_case property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"test_case\");",
													"        pm.expect(jsonData.test_case).to.have.property(\"links\");",
													"        pm.expect(jsonData.test_case.id).to.eql(pm.environment.get(\"newTestCaseId1\"));",
													"    });",
													"",
													"    let tmp;",
													"    let changes = [];",
													"    jsonData.properties.forEach((field) => {",
													"        changes.push({",
													"            field: field.field_name,",
													"            old_value: \"\",",
													"            new_value: field.field_value_name || field.field_value",
													"        });",
													"        switch (field.field_name) {",
													"            case \"Run Order\":",
													"                pm.test(`Repsonse data has run order: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"            ",
													"            case \"Environment\":",
													"                pm.test(`Repsonse data has environment: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"                ",
													"            case \"Status\":",
													"                pm.test(`Repsonse data has status: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Unexecuted\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunStatusUnexecuted\").toString()",
													"                    );",
													"                });",
													"                break;",
													"",
													"            case \"Execution Type\":",
													"                pm.test(`Repsonse data has type: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Smoke\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunExecutionTypeSmoke\").toString()",
													"                    );",
													"                });",
													"                break;",
													"                ",
													"            case \"Planned Start Date\":",
													"                pm.test(\"Repsonse data contains Planned Start Date\", () => {",
													"                    tmp = pm.environment.get(\"startDate1\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Planned End Date\":",
													"                pm.test(\"Repsonse data contains Planned End Date\", () => {",
													"                    tmp = pm.environment.get(\"endDate1\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(`Repsonse data has priority: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Medium\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunPriorityMedium\").toString()",
													"                    );",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(pm.environment.get(\"userTestFullName\"));",
													"                    pm.expect(field.field_value).to.include(",
													"                        pm.environment.get(\"fieldIdTestRunAssignedToUserTest\").toString()",
													"                    );",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    ",
													"    createObjectHistory(\"testRun\", jsonData.id, changes);",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													"",
													"function createObjectHistory(objType, objId, changes) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`) || [];",
													"",
													"    let searchSuccess = false;",
													"    if (objHistoriesList && objHistoriesList.length > 0) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                let history = {",
													"                    changes: changes",
													"                };",
													"                objHistories.histories.push(history);",
													"",
													"                searchSuccess = true;",
													"                break;",
													"            }",
													"        }",
													"    }",
													"",
													"",
													"    // if search fail, create objectHistories",
													"    if (!searchSuccess) {",
													"        let objHistories = {",
													"            id: objId,",
													"            histories: []",
													"        };",
													"",
													"        let history = {",
													"            changes: changes",
													"        };",
													"",
													"        objHistories.histories.push(history);",
													"        objHistoriesList.push(objHistories);",
													"    }",
													"",
													"    pm.environment.set(`${objType}HistoriesList`, objHistoriesList);",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f31e778f-15a2-400c-8fce-e36dd58add47",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"testRunName\", \"Test Run 1\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate1\", today.toISOString());",
													"today.setDate(today.getDate() + 10);",
													"pm.environment.set(\"endDate1\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{testRunName}}\",\n  \"properties\": [\n    {\n        \"field_id\": \"{{fieldIdTestRunRunOrder}}\",\n        \"field_value\": 1\n    },\n    {\n      \"field_id\": {{fieldIdTestRunPlannedStartDate}},\n      \"field_value\": \"{{startDate1}}\"\n      \n    },\n    {\n      \"field_id\": {{fieldIdTestRunPlannedEndDate}},\n      \"field_value\": \"{{endDate1}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunExecutionType}}\",\n        \"field_value\": \"{{fieldIdTestRunExecutionTypeSmoke}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunAssignedTo}}\",\n        \"field_value\": \"{{fieldIdTestRunAssignedToUserTest}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunStatus}}\",\n        \"field_value\": \"{{fieldIdTestRunStatusPassed}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunPriority}}\",\n        \"field_value\": \"{{fieldIdTestRunPriorityMedium}}\"\n    }\n  ],\n  \"test_case\": {\n    \"id\": {{newTestCaseId1}}\n  }\n  \n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-runs",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-runs"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Subcribe test run 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "21521980-f42e-4928-b860-53cfa92317ac",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Subcribe requirement success without any errors\", () => {",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        ",
													"        pm.expect(jsonData.result.noSubscribers).to.eql(1);",
													"        ",
													"        pm.expect(jsonData.result.subscribers[0].userName).to.eql(pm.environment.get(\"username\"));",
													"        ",
													"        pm.expect(jsonData.result.subscribers[0].fullName).to.eql(pm.environment.get(\"userTestFullName\"));",
													"        ",
													"        pm.expect(jsonData.result.subscribers[0].id).to.eql(pm.environment.get(\"userTestId\"));",
													"    });",
													"    ",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "26420a87-52df-4da6-865c-96019dd2a0e6",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "objectId",
													"value": "{{newTestRunId1}}",
													"type": "text"
												},
												{
													"key": "userId",
													"value": "{{userTestId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/p/{{projectId}}/portal/notification/subscribe/14",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"p",
												"{{projectId}}",
												"portal",
												"notification",
												"subscribe",
												"14"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create a test run by automation test case",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4334f542-5045-4996-a51b-a23662760775",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"",
													"    let jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newTestRunId2\", jsonData.id);",
													"    pm.environment.set(\"testRunInfo2\", jsonData);",
													"",
													"    pm.test(\"Status code is 201\", () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"id\");",
													"    });",
													"",
													"    pm.test(`Response data contains name: ${jsonData.name}`, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"testRunName\"));",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"pid\");",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"created_date\");",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"last_modified_date\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"test_case_version_id\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"creator_id\");",
													"    });",
													"",
													"    pm.test(\"Response data has test_case property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"test_case\");",
													"        pm.expect(jsonData.test_case).to.have.property(\"links\");",
													"        pm.expect(jsonData.test_case.id).to.eql(pm.environment.get(\"newTestCaseId2\"));",
													"    });",
													"",
													"    let tmp;",
													"    let changes = [];",
													"    jsonData.properties.forEach((field) => {",
													"        changes.push({",
													"            field: field.field_name,",
													"            old_value: \"\",",
													"            new_value: field.field_value_name || field.field_value",
													"        });",
													"        switch (field.field_name) {",
													"            case \"Run Order\":",
													"                pm.test(`Repsonse data has run order: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"            ",
													"            case \"Environment\":",
													"                pm.test(`Repsonse data has environment: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"                ",
													"            case \"Status\":",
													"                pm.test(`Repsonse data has status: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Unexecuted\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunStatusUnexecuted\").toString()",
													"                    );",
													"                });",
													"                break;",
													"",
													"            case \"Execution Type\":",
													"                pm.test(`Repsonse data has type: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Smoke\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunExecutionTypeSmoke\").toString()",
													"                    );",
													"                });",
													"                break;",
													"                ",
													"            case \"Planned Start Date\":",
													"                pm.test(\"Repsonse data contains Planned Start Date\", () => {",
													"                    tmp = pm.environment.get(\"startDate2\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Planned End Date\":",
													"                pm.test(\"Repsonse data contains Planned End Date\", () => {",
													"                    tmp = pm.environment.get(\"endDate2\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(`Repsonse data has priority: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Medium\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunPriorityMedium\").toString()",
													"                    );",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(pm.environment.get(\"userTestFullName\"));",
													"                    pm.expect(field.field_value).to.include(",
													"                        pm.environment.get(\"fieldIdTestRunAssignedToUserTest\").toString()",
													"                    );",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    ",
													"    createObjectHistory(\"testRun\", jsonData.id, changes);",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													"",
													"function createObjectHistory(objType, objId, changes) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`) || [];",
													"",
													"    let searchSuccess = false;",
													"    if (objHistoriesList && objHistoriesList.length > 0) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                let history = {",
													"                    changes: changes",
													"                };",
													"                objHistories.histories.push(history);",
													"",
													"                searchSuccess = true;",
													"                break;",
													"            }",
													"        }",
													"    }",
													"",
													"",
													"    // if search fail, create objectHistories",
													"    if (!searchSuccess) {",
													"        let objHistories = {",
													"            id: objId,",
													"            histories: []",
													"        };",
													"",
													"        let history = {",
													"            changes: changes",
													"        };",
													"",
													"        objHistories.histories.push(history);",
													"        objHistoriesList.push(objHistories);",
													"    }",
													"",
													"    pm.environment.set(`${objType}HistoriesList`, objHistoriesList);",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ad647b98-16d6-4e8f-a68a-9974439a899c",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"testRunName\", \"Test Run 2\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate2\", today.toISOString());",
													"today.setDate(today.getDate() + 5);",
													"pm.environment.set(\"endDate2\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{testRunName}}\",\n  \"properties\": [\n    {\n        \"field_id\": \"{{fieldIdTestRunRunOrder}}\",\n        \"field_value\": 1\n    },\n    {\n      \"field_id\": {{fieldIdTestRunPlannedStartDate}},\n      \"field_value\": \"{{startDate2}}\"\n      \n    },\n    {\n      \"field_id\": {{fieldIdTestRunPlannedEndDate}},\n      \"field_value\": \"{{endDate2}}\"\n      \n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunExecutionType}}\",\n        \"field_value\": \"{{fieldIdTestRunExecutionTypeSmoke}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunAssignedTo}}\",\n        \"field_value\": \"{{fieldIdTestRunAssignedToUserTest}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunStatus}}\",\n        \"field_value\": \"{{fieldIdTestRunStatusPassed}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunPriority}}\",\n        \"field_value\": \"{{fieldIdTestRunPriorityMedium}}\"\n    }\n  ],\n  \"test_case\": {\n    \"id\": {{newTestCaseId2}}\n  }\n  \n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-runs",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-runs"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create a test run with test case has called test case",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "05814879-e098-4c9f-9e00-c12f0083f62c",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"",
													"    let jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newTestRunId3\", jsonData.id);",
													"    pm.environment.set(\"testRunInfo3\", jsonData);",
													"",
													"    pm.test(\"Status code is 201\", () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"id\");",
													"    });",
													"",
													"    pm.test(`Response data contains name: ${jsonData.name}`, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"testRunName\"));",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"pid\");",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"created_date\");",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"last_modified_date\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"test_case_version_id\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"creator_id\");",
													"    });",
													"",
													"    pm.test(\"Response data has test_case property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"test_case\");",
													"        pm.expect(jsonData.test_case).to.have.property(\"links\");",
													"        pm.expect(jsonData.test_case.id).to.eql(pm.environment.get(\"newTestCaseId3\"));",
													"    });",
													"",
													"    let tmp;",
													"    let changes = [];",
													"    jsonData.properties.forEach((field) => {",
													"        changes.push({",
													"            field: field.field_name,",
													"            old_value: \"\",",
													"            new_value: field.field_value_name || field.field_value",
													"        });",
													"        switch (field.field_name) {",
													"            case \"Run Order\":",
													"                pm.test(`Repsonse data has run order: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"            ",
													"            case \"Environment\":",
													"                pm.test(`Repsonse data has environment: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"                ",
													"            case \"Status\":",
													"                pm.test(`Repsonse data has status: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Unexecuted\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunStatusUnexecuted\").toString()",
													"                    );",
													"                });",
													"                break;",
													"",
													"            case \"Execution Type\":",
													"                pm.test(`Repsonse data has type: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Smoke\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunExecutionTypeSmoke\").toString()",
													"                    );",
													"                });",
													"                break;",
													"                ",
													"            case \"Planned Start Date\":",
													"                pm.test(\"Repsonse data contains Planned Start Date\", () => {",
													"                    tmp = pm.environment.get(\"startDate3\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Planned End Date\":",
													"                pm.test(\"Repsonse data contains Planned End Date\", () => {",
													"                    tmp = pm.environment.get(\"endDate3\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(`Repsonse data has priority: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Medium\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunPriorityMedium\").toString()",
													"                    );",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(pm.environment.get(\"userTestFullName\"));",
													"                    pm.expect(field.field_value).to.include(",
													"                        pm.environment.get(\"fieldIdTestRunAssignedToUserTest\").toString()",
													"                    );",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    ",
													"    createObjectHistory(\"testRun\", jsonData.id, changes);",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													"",
													"function createObjectHistory(objType, objId, changes) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`) || [];",
													"",
													"    let searchSuccess = false;",
													"    if (objHistoriesList && objHistoriesList.length > 0) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                let history = {",
													"                    changes: changes",
													"                };",
													"                objHistories.histories.push(history);",
													"",
													"                searchSuccess = true;",
													"                break;",
													"            }",
													"        }",
													"    }",
													"",
													"",
													"    // if search fail, create objectHistories",
													"    if (!searchSuccess) {",
													"        let objHistories = {",
													"            id: objId,",
													"            histories: []",
													"        };",
													"",
													"        let history = {",
													"            changes: changes",
													"        };",
													"",
													"        objHistories.histories.push(history);",
													"        objHistoriesList.push(objHistories);",
													"    }",
													"",
													"    pm.environment.set(`${objType}HistoriesList`, objHistoriesList);",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1ea4ec01-101a-4906-bf37-74d618c8b658",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"testRunName\", \"Test Run 3\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate3\", today.toISOString());",
													"today.setDate(today.getDate() + 10);",
													"pm.environment.set(\"endDate3\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{testRunName}}\",\n  \"properties\": [\n    {\n        \"field_id\": \"{{fieldIdTestRunRunOrder}}\",\n        \"field_value\": 1\n    },\n    {\n      \"field_id\": {{fieldIdTestRunPlannedStartDate}},\n      \"field_value\": \"{{startDate3}}\"\n      \n    },\n    {\n      \"field_id\": {{fieldIdTestRunPlannedEndDate}},\n      \"field_value\": \"{{endDate3}}\"\n      \n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunExecutionType}}\",\n        \"field_value\": \"{{fieldIdTestRunExecutionTypeSmoke}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunAssignedTo}}\",\n        \"field_value\": \"{{fieldIdTestRunAssignedToUserTest}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunStatus}}\",\n        \"field_value\": \"{{fieldIdTestRunStatusPassed}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunPriority}}\",\n        \"field_value\": \"{{fieldIdTestRunPriorityMedium}}\"\n    }\n  ],\n  \"test_case\": {\n    \"id\": {{newTestCaseId3}}\n  }\n  \n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-runs",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-runs"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create a test run inside release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9f646ee7-40df-4926-892d-76de205df46a",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"",
													"    let jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newTestRunId4\", jsonData.id);",
													"    pm.environment.set(\"testRunInfo4\", jsonData);",
													"",
													"    pm.test(\"Status code is 201\", () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"id\");",
													"    });",
													"",
													"    pm.test(`Response data contains name: ${jsonData.name}`, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"testRunName\"));",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"pid\");",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"created_date\");",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"last_modified_date\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"test_case_version_id\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"creator_id\");",
													"    });",
													"",
													"    pm.test(\"Response data has test_case property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"test_case\");",
													"        pm.expect(jsonData.test_case).to.have.property(\"links\");",
													"        pm.expect(jsonData.test_case.id).to.eql(pm.environment.get(\"newTestCaseId1\"));",
													"    });",
													"",
													"    let tmp;",
													"    let changes = [];",
													"    jsonData.properties.forEach((field) => {",
													"        changes.push({",
													"            field: field.field_name,",
													"            old_value: \"\",",
													"            new_value: field.field_value_name || field.field_value",
													"        });",
													"        switch (field.field_name) {",
													"            case \"Run Order\":",
													"                pm.test(`Repsonse data has run order: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"            ",
													"            case \"Environment\":",
													"                pm.test(`Repsonse data has environment: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"                ",
													"            case \"Status\":",
													"                pm.test(`Repsonse data has status: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Unexecuted\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunStatusUnexecuted\").toString()",
													"                    );",
													"                });",
													"                break;",
													"",
													"            case \"Execution Type\":",
													"                pm.test(`Repsonse data has type: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Smoke\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunExecutionTypeSmoke\").toString()",
													"                    );",
													"                });",
													"                break;",
													"                ",
													"            case \"Planned Start Date\":",
													"                pm.test(\"Repsonse data contains Planned Start Date\", () => {",
													"                    tmp = pm.environment.get(\"startDate1\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Planned End Date\":",
													"                pm.test(\"Repsonse data contains Planned End Date\", () => {",
													"                    tmp = pm.environment.get(\"endDate1\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(`Repsonse data has priority: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Medium\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunPriorityMedium\").toString()",
													"                    );",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(pm.environment.get(\"userTestFullName\"));",
													"                    pm.expect(field.field_value).to.include(",
													"                        pm.environment.get(\"fieldIdTestRunAssignedToUserTest\").toString()",
													"                    );",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    ",
													"    createObjectHistory(\"testRun\", jsonData.id, changes);",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													"",
													"function createObjectHistory(objType, objId, changes) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`) || [];",
													"",
													"    let searchSuccess = false;",
													"    if (objHistoriesList && objHistoriesList.length > 0) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                let history = {",
													"                    changes: changes",
													"                };",
													"                objHistories.histories.push(history);",
													"",
													"                searchSuccess = true;",
													"                break;",
													"            }",
													"        }",
													"    }",
													"",
													"",
													"    // if search fail, create objectHistories",
													"    if (!searchSuccess) {",
													"        let objHistories = {",
													"            id: objId,",
													"            histories: []",
													"        };",
													"",
													"        let history = {",
													"            changes: changes",
													"        };",
													"",
													"        objHistories.histories.push(history);",
													"        objHistoriesList.push(objHistories);",
													"    }",
													"",
													"    pm.environment.set(`${objType}HistoriesList`, objHistoriesList);",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5fcf6965-8501-4038-97bb-628d77ce304c",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"testRunName\", \"Test Run 4\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate1\", today.toISOString());",
													"today.setDate(today.getDate() + 5);",
													"pm.environment.set(\"endDate1\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{testRunName}}\",\n  \"properties\": [\n    {\n        \"field_id\": \"{{fieldIdTestRunRunOrder}}\",\n        \"field_value\": 1\n    },\n    {\n      \"field_id\": {{fieldIdTestRunPlannedStartDate}},\n      \"field_value\": \"{{startDate1}}\"\n      \n    },\n    {\n      \"field_id\": {{fieldIdTestRunPlannedEndDate}},\n      \"field_value\": \"{{endDate1}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunExecutionType}}\",\n        \"field_value\": \"{{fieldIdTestRunExecutionTypeSmoke}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunAssignedTo}}\",\n        \"field_value\": \"{{fieldIdTestRunAssignedToUserTest}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunStatus}}\",\n        \"field_value\": \"{{fieldIdTestRunStatusPassed}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunPriority}}\",\n        \"field_value\": \"{{fieldIdTestRunPriorityMedium}}\"\n    }\n  ],\n  \"test_case\": {\n    \"id\": {{newTestCaseId1}}\n  }\n  \n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-runs?parentType=release&parentId={{newReleaseId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-runs"
											],
											"query": [
												{
													"key": "parentType",
													"value": "release"
												},
												{
													"key": "parentId",
													"value": "{{newReleaseId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create a test run inside test cycle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d011226-5ed3-4449-9517-4979ffc4c924",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"",
													"    let jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newTestRunId5\", jsonData.id);",
													"    pm.environment.set(\"testRunInfo5\", jsonData);",
													"",
													"    pm.test(\"Status code is 201\", () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"id\");",
													"    });",
													"",
													"    pm.test(`Response data contains name: ${jsonData.name}`, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"testRunName\"));",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"pid\");",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"created_date\");",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"last_modified_date\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"test_case_version_id\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"creator_id\");",
													"    });",
													"",
													"    pm.test(\"Response data has test_case property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"test_case\");",
													"        pm.expect(jsonData.test_case).to.have.property(\"links\");",
													"        pm.expect(jsonData.test_case.id).to.eql(pm.environment.get(\"newTestCaseId1\"));",
													"    });",
													"",
													"    let tmp;",
													"    let changes = [];",
													"    jsonData.properties.forEach((field) => {",
													"        changes.push({",
													"            field: field.field_name,",
													"            old_value: \"\",",
													"            new_value: field.field_value_name || field.field_value",
													"        });",
													"        switch (field.field_name) {",
													"            case \"Run Order\":",
													"                pm.test(`Repsonse data has run order: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"            ",
													"            case \"Environment\":",
													"                pm.test(`Repsonse data has environment: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"                ",
													"            case \"Status\":",
													"                pm.test(`Repsonse data has status: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Unexecuted\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunStatusUnexecuted\").toString()",
													"                    );",
													"                });",
													"                break;",
													"",
													"            case \"Execution Type\":",
													"                pm.test(`Repsonse data has type: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Smoke\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunExecutionTypeSmoke\").toString()",
													"                    );",
													"                });",
													"                break;",
													"                ",
													"            case \"Planned Start Date\":",
													"                pm.test(\"Repsonse data contains Planned Start Date\", () => {",
													"                    tmp = pm.environment.get(\"startDate1\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Planned End Date\":",
													"                pm.test(\"Repsonse data contains Planned End Date\", () => {",
													"                    tmp = pm.environment.get(\"endDate1\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(`Repsonse data has priority: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Medium\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunPriorityMedium\").toString()",
													"                    );",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(pm.environment.get(\"userTestFullName\"));",
													"                    pm.expect(field.field_value).to.include(",
													"                        pm.environment.get(\"fieldIdTestRunAssignedToUserTest\").toString()",
													"                    );",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    ",
													"    createObjectHistory(\"testRun\", jsonData.id, changes);",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													"",
													"function createObjectHistory(objType, objId, changes) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`) || [];",
													"",
													"    let searchSuccess = false;",
													"    if (objHistoriesList && objHistoriesList.length > 0) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                let history = {",
													"                    changes: changes",
													"                };",
													"                objHistories.histories.push(history);",
													"",
													"                searchSuccess = true;",
													"                break;",
													"            }",
													"        }",
													"    }",
													"",
													"",
													"    // if search fail, create objectHistories",
													"    if (!searchSuccess) {",
													"        let objHistories = {",
													"            id: objId,",
													"            histories: []",
													"        };",
													"",
													"        let history = {",
													"            changes: changes",
													"        };",
													"",
													"        objHistories.histories.push(history);",
													"        objHistoriesList.push(objHistories);",
													"    }",
													"",
													"    pm.environment.set(`${objType}HistoriesList`, objHistoriesList);",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c8108a21-adce-4ac8-b425-c615e63b16bc",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"testRunName\", \"Test Run 5\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate1\", today.toISOString());",
													"today.setDate(today.getDate() + 5);",
													"pm.environment.set(\"endDate1\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{testRunName}}\",\n  \"properties\": [\n    {\n        \"field_id\": \"{{fieldIdTestRunRunOrder}}\",\n        \"field_value\": 1\n    },\n    {\n      \"field_id\": {{fieldIdTestRunPlannedStartDate}},\n      \"field_value\": \"{{startDate1}}\"\n      \n    },\n    {\n      \"field_id\": {{fieldIdTestRunPlannedEndDate}},\n      \"field_value\": \"{{endDate1}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunExecutionType}}\",\n        \"field_value\": \"{{fieldIdTestRunExecutionTypeSmoke}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunAssignedTo}}\",\n        \"field_value\": \"{{fieldIdTestRunAssignedToUserTest}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunStatus}}\",\n        \"field_value\": \"{{fieldIdTestRunStatusPassed}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunPriority}}\",\n        \"field_value\": \"{{fieldIdTestRunPriorityMedium}}\"\n    }\n  ],\n  \"test_case\": {\n    \"id\": {{newTestCaseId1}}\n  }\n  \n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-runs?parentType=test-cycle&parentId={{newCycleId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-runs"
											],
											"query": [
												{
													"key": "parentType",
													"value": "test-cycle"
												},
												{
													"key": "parentId",
													"value": "{{newCycleId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create a test run inside test suite",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48ae722d-2b87-48fc-8230-bcb376a7a7ba",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"",
													"    let jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newTestRunId6\", jsonData.id);",
													"    pm.environment.set(\"testRunInfo6\", jsonData);",
													"",
													"    pm.test(\"Status code is 201\", () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"",
													"    pm.test(\"Response data has links property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"id\");",
													"    });",
													"",
													"    pm.test(`Response data contains name: ${jsonData.name}`, () => {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"testRunName\"));",
													"    });",
													"",
													"    pm.test(\"Response data has pid property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"pid\");",
													"    });",
													"",
													"    pm.test(\"Response data has created_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"created_date\");",
													"    });",
													"",
													"    pm.test(\"Response data has last_modified_date property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"last_modified_date\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has test_case_version_id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"test_case_version_id\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has creator_id property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"creator_id\");",
													"    });",
													"",
													"    pm.test(\"Response data has test_case property\", () => {",
													"        pm.expect(jsonData).to.have.property(\"test_case\");",
													"        pm.expect(jsonData.test_case).to.have.property(\"links\");",
													"        pm.expect(jsonData.test_case.id).to.eql(pm.environment.get(\"newTestCaseId1\"));",
													"    });",
													"",
													"    let tmp;",
													"    let changes = [];",
													"    jsonData.properties.forEach((field) => {",
													"        changes.push({",
													"            field: field.field_name,",
													"            old_value: \"\",",
													"            new_value: field.field_value_name || field.field_value",
													"        });",
													"        switch (field.field_name) {",
													"            case \"Run Order\":",
													"                pm.test(`Repsonse data has run order: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(\"0\");",
													"                });",
													"                break;",
													"            ",
													"            case \"Environment\":",
													"                pm.test(`Repsonse data has environment: ${field.field_value}`, () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"                ",
													"            case \"Status\":",
													"                pm.test(`Repsonse data has status: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Unexecuted\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunStatusUnexecuted\").toString()",
													"                    );",
													"                });",
													"                break;",
													"",
													"            case \"Execution Type\":",
													"                pm.test(`Repsonse data has type: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Smoke\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunExecutionTypeSmoke\").toString()",
													"                    );",
													"                });",
													"                break;",
													"                ",
													"            case \"Planned Start Date\":",
													"                pm.test(\"Repsonse data contains Planned Start Date\", () => {",
													"                    tmp = pm.environment.get(\"startDate1\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Planned End Date\":",
													"                pm.test(\"Repsonse data contains Planned End Date\", () => {",
													"                    tmp = pm.environment.get(\"endDate1\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Priority\":",
													"                pm.test(`Repsonse data has priority: ${field.field_value_name}`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(\"Medium\");",
													"                    pm.expect(field.field_value).to.eql(",
													"                        pm.environment.get(\"fieldIdTestRunPriorityMedium\").toString()",
													"                    );",
													"                });",
													"                break;",
													"",
													"            case \"Assigned To\":",
													"                pm.test(`Repsonse data has property assigned to`, () => {",
													"                    pm.expect(field.field_value_name).to.eql(pm.environment.get(\"userTestFullName\"));",
													"                    pm.expect(field.field_value).to.include(",
													"                        pm.environment.get(\"fieldIdTestRunAssignedToUserTest\").toString()",
													"                    );",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    ",
													"    createObjectHistory(\"testRun\", jsonData.id, changes);",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													"",
													"function createObjectHistory(objType, objId, changes) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`) || [];",
													"",
													"    let searchSuccess = false;",
													"    if (objHistoriesList && objHistoriesList.length > 0) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                let history = {",
													"                    changes: changes",
													"                };",
													"                objHistories.histories.push(history);",
													"",
													"                searchSuccess = true;",
													"                break;",
													"            }",
													"        }",
													"    }",
													"",
													"",
													"    // if search fail, create objectHistories",
													"    if (!searchSuccess) {",
													"        let objHistories = {",
													"            id: objId,",
													"            histories: []",
													"        };",
													"",
													"        let history = {",
													"            changes: changes",
													"        };",
													"",
													"        objHistories.histories.push(history);",
													"        objHistoriesList.push(objHistories);",
													"    }",
													"",
													"    pm.environment.set(`${objType}HistoriesList`, objHistoriesList);",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5eca72d5-4b06-43a0-9eeb-f764f22fc465",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"testRunName\", \"Test Run 6\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate1\", today.toISOString());",
													"today.setDate(today.getDate() + 5);",
													"pm.environment.set(\"endDate1\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{testRunName}}\",\n  \"properties\": [\n    {\n        \"field_id\": \"{{fieldIdTestRunRunOrder}}\",\n        \"field_value\": 1\n    },\n    {\n      \"field_id\": {{fieldIdTestRunPlannedStartDate}},\n      \"field_value\": \"{{startDate1}}\"\n      \n    },\n    {\n      \"field_id\": {{fieldIdTestRunPlannedEndDate}},\n      \"field_value\": \"{{endDate1}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunExecutionType}}\",\n        \"field_value\": \"{{fieldIdTestRunExecutionTypeSmoke}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunAssignedTo}}\",\n        \"field_value\": \"{{fieldIdTestRunAssignedToUserTest}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunStatus}}\",\n        \"field_value\": \"{{fieldIdTestRunStatusPassed}}\"\n    },\n    {\n        \"field_id\": \"{{fieldIdTestRunPriority}}\",\n        \"field_value\": \"{{fieldIdTestRunPriorityMedium}}\"\n    }\n  ],\n  \"test_case\": {\n    \"id\": {{newTestCaseId1}}\n  }\n  \n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-runs?parentType=test-suite&parentId={{newTestSuiteId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-runs"
											],
											"query": [
												{
													"key": "parentType",
													"value": "test-suite"
												},
												{
													"key": "parentId",
													"value": "{{newTestSuiteId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get Test Run Statuses",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "82e1af96-71a3-4203-9ec9-70606663a0e3",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    jsonData.forEach((status, index) => {",
													"        pm.test(`Response data at ${index} has links property`, () => {",
													"            pm.expect(status).to.have.property(\"links\");",
													"        });",
													"",
													"        pm.test(`Response data at ${index} has id property`, () => {",
													"            pm.expect(status).to.have.property(\"id\");",
													"        });",
													"",
													"        switch (status.name) {",
													"            case \"Passed\":",
													"                pm.test(`Response data at ${index} contains is_default: ${status.is_default}`, () => {",
													"                    pm.expect(status.is_default).to.eql(false);",
													"                });",
													"                pm.test(`Response data at ${index} contains color`, () => {",
													"                    pm.expect(status).to.have.property(\"color\");",
													"                });",
													"                pm.test(`Response data at ${index} contains active: ${status.active}`, () => {",
													"                    pm.expect(status.active).to.eql(true);",
													"                });",
													"                pm.environment.set(\"statusPassedId\", status.id);",
													"                break;",
													"            case \"Failed\":",
													"                pm.test(`Response data at ${index} contains is_default: ${status.is_default}`, () => {",
													"                    pm.expect(status.is_default).to.eql(false);",
													"                });",
													"                pm.test(`Response data at ${index} contains color`, () => {",
													"                    pm.expect(status).to.have.property(\"color\");",
													"                });",
													"                pm.test(`Response data at ${index} contains active: ${status.active}`, () => {",
													"                    pm.expect(status.active).to.eql(true);",
													"                });",
													"                pm.environment.set(\"statusFailedId\", status.id);",
													"                break;",
													"            case \"Incomplete\":",
													"                pm.test(`Response data at ${index} contains is_default: ${status.is_default}`, () => {",
													"                    pm.expect(status.is_default).to.eql(false);",
													"                });",
													"                pm.test(`Response data at ${index} contains color`, () => {",
													"                    pm.expect(status).to.have.property(\"color\");",
													"                });",
													"                pm.test(`Response data at ${index} contains active: ${status.active}`, () => {",
													"                    pm.expect(status.active).to.eql(true);",
													"                });",
													"                pm.environment.set(\"statusIncompleteId\", status.id);",
													"                break;",
													"            case \"Blocked\":",
													"                pm.test(`Response data at ${index} contains is_default: ${status.is_default}`, () => {",
													"                    pm.expect(status.is_default).to.eql(false);",
													"                });",
													"                pm.test(`Response data at ${index} contains color`, () => {",
													"                    pm.expect(status).to.have.property(\"color\");",
													"                });",
													"                pm.test(`Response data at ${index} contains active: ${status.active}`, () => {",
													"                    pm.expect(status.active).to.eql(true);",
													"                });",
													"                pm.environment.set(\"statusBlockedId\", status.id);",
													"                break;",
													"            case \"Unexecuted\":",
													"                pm.test(`Response data at ${index} contains is_default: ${status.is_default}`, () => {",
													"                    pm.expect(status.is_default).to.eql(true);",
													"                });",
													"                pm.test(`Response data at ${index} contains color`, () => {",
													"                    pm.expect(status).to.have.property(\"color\");",
													"                });",
													"                pm.test(`Response data at ${index} contains active: ${status.active}`, () => {",
													"                    pm.expect(status.active).to.eql(false);",
													"                });",
													"                pm.environment.set(\"statusUnexecutedId\", status.id);",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6fe650bb-5830-4e0a-b301-6da90180db17",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-runs/execution-statuses",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-runs",
												"execution-statuses"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Submit testlog of test run 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "09f2ebda-3be8-4440-9c57-e13e67bb1ea3",
												"type": "text/javascript",
												"exec": [
													"// https://agile.qasymphony.com/browse/MR-3593",
													"",
													"if (pm.response.code === 201) {",
													"",
													"    let jsonData = pm.response.json();",
													"    let testRunInfo = pm.environment.get(\"testRunInfo1\");",
													"    ",
													"    pm.environment.set(\"newTestLogId1\", jsonData.id);",
													"    pm.environment.set(\"testLogInfo1\", jsonData);",
													"    pm.environment.set(\"testRunStatus1\", jsonData.status);",
													"    ",
													"    pm.test(\"Status code is 201\", () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"    ",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property id\", () => {",
													"        pm.expect(jsonData).to.have.property(\"id\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property test_case_version_id\", () => {",
													"        pm.expect(jsonData.test_case_version_id).to.eql(testRunInfo.test_case_version_id);",
													"    });",
													"    ",
													"    pm.test(\"Response data has property exe_start_date\", () => {",
													"        pm.expect(jsonData).to.have.property(\"exe_start_date\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property exe_end_date\", () => {",
													"        pm.expect(jsonData).to.have.property(\"exe_end_date\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property user_id\", () => {",
													"        pm.expect(jsonData.user_id).to.eql(pm.environment.get(\"userTestId\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has property planned_exe_time\", () => {",
													"        pm.expect(jsonData.planned_exe_time).to.eql(0);",
													"    });",
													"    ",
													"    pm.test(\"Response data has property actual_exe_time\", () => {",
													"        pm.expect(jsonData.actual_exe_time).to.eql(0);",
													"    });",
													"    ",
													"    jsonData.test_step_logs.forEach((step, index) => {",
													"        pm.environment.set(`newTestStepLogId${index + 1}r1`, step.test_step_log_id);",
													"        pm.environment.set(`testStepLogInfo${index + 1}r1`, step);",
													"        ",
													"        pm.test(`test_step_logs at ${index} has correct info `, () => {",
													"            pm.expect(step).to.have.property(\"links\");",
													"            pm.expect(step).to.have.property(\"test_step_id\", pm.environment.get(\"newTestStepId1c1\"));",
													"            pm.expect(step).to.have.property(\"test_step_log_id\");",
													"            pm.expect(step).to.have.property(\"user_id\", pm.environment.get(\"userTestId\"));",
													"            pm.expect(step).to.have.property(\"status\");",
													"            pm.expect(step.status).to.have.property(\"id\");",
													"            pm.expect(step.status).to.have.property(\"name\");",
													"            pm.expect(step).to.have.property(\"order\");",
													"            pm.expect(step).to.have.property(\"group\");",
													"            pm.expect(step).to.have.property(\"defects\");",
													"        });",
													"    });",
													"    ",
													"    jsonData.properties.forEach((field, fieldIndex) => {",
													"        switch (field.field_name) {",
													"            case \"Tester\":",
													"                pm.test(\"Response data has property Tester\", () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"userTestId\").toString());",
													"                    pm.expect(field.field_value_name).to.eql(pm.environment.get(\"userTestFullName\"));",
													"                });",
													"                break;",
													"            ",
													"            case \"Execution Type\":",
													"                pm.test(\"Response data has property Execution Type: \" + field.field_value_name, () => {",
													"                    let fieldData = getFieldDataInTestRun(testRunInfo, field.field_id);",
													"                    pm.expect(field.field_value).to.eql(fieldData.field_value);",
													"                    pm.expect(field.field_value_name).to.eql(fieldData.field_value_name);",
													"                });",
													"                break;",
													"                ",
													"            case \"Planned Start Date\":",
													"                pm.test(\"Response data has property Planned Start Date\", () => {",
													"                    let fieldData = getFieldDataInTestRun(testRunInfo, field.field_id);",
													"                    pm.expect(field.field_value).to.eql(fieldData.field_value);",
													"                });",
													"                break;",
													"                ",
													"            case \"Planned End Date\":",
													"                pm.test(\"Response data has property Planned End Date\", () => {",
													"                    let fieldData = getFieldDataInTestRun(testRunInfo, field.field_id);",
													"                    pm.expect(field.field_value).to.eql(fieldData.field_value);",
													"                });",
													"                break;",
													"                ",
													"            case \"Test Case Version\":",
													"                pm.test(\"Response data has property Test Case Version\", () => {",
													"                    pm.expect(field.field_value).to.eql(\"1.0\");",
													"                });",
													"                break;",
													"                ",
													"            case \"Target Release/Build\":",
													"                pm.test(\"Response data has property Target Release/Build\", () => {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"                ",
													"            case \"Status\":",
													"                pm.test(\"Response data has property Execution Type: \" + field.field_value_name, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"statusPassedId\").toString());",
													"                    pm.expect(field.field_value_name).to.eql(\"Passed\");",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    ",
													"    createObjectHistory(\"testRun\", pm.environment.get(\"newTestRunId1\"), []);",
													"    ",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													"",
													"function getFieldDataInTestRun(testRunInfo, fieldId) {",
													"    for (let field of testRunInfo.properties) {",
													"        if (field.field_id === fieldId) {",
													"            return {",
													"                \"field_value\": field.field_value,",
													"                \"field_value_name\": field.field_value_name || \"\"",
													"            }",
													"        }",
													"    }",
													"}",
													"",
													"function createObjectHistory(objType, objId, changes) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`) || [];",
													"",
													"    let searchSuccess = false;",
													"    if (objHistoriesList && objHistoriesList.length > 0) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                let history = {",
													"                    changes: changes",
													"                };",
													"                objHistories.histories.push(history);",
													"",
													"                searchSuccess = true;",
													"                break;",
													"            }",
													"        }",
													"    }",
													"",
													"",
													"    // if search fail, create objectHistories",
													"    if (!searchSuccess) {",
													"        let objHistories = {",
													"            id: objId,",
													"            histories: []",
													"        };",
													"",
													"        let history = {",
													"            changes: changes",
													"        };",
													"",
													"        objHistories.histories.push(history);",
													"        objHistoriesList.push(objHistories);",
													"    }",
													"",
													"    pm.environment.set(`${objType}HistoriesList`, objHistoriesList);",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "aa11e3e4-ff39-491c-9c01-4b70f9a4bdcd",
												"type": "text/javascript",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"exeStartDate\", today.toISOString());",
													"today.setDate(today.getDate() + 2);",
													"pm.environment.set(\"exeEndDate\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"exe_start_date\": \"{{exeStartDate}}\",\n    \"exe_end_date\": \"{{exeEndDate}}\",\n    \"status\": {\n      \"id\": {{statusPassedId}}\n    }\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-runs/{{newTestRunId1}}/test-logs",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-runs",
												"{{newTestRunId1}}",
												"test-logs"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Create Defects",
							"item": [
								{
									"name": "200 - Precondition - Get Defecet fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ea65050d-0569-4a2c-a051-5064c4448812",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdDefect\";",
													"    let jsonData = pm.response.json();",
													"    ",
													"    let listToUnset = pm.environment.get(\"listToUnset\") || [];",
													"",
													"    jsonData.forEach((field) => {",
													"        switch (field.label) {",
													"            case \"Summary\":",
													"            case \"Description\":",
													"            case \"Target Date\":",
													"            case \"Closed Date\":",
													"            case \"Assigned To\":",
													"                pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"                listToUnset.push(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"));",
													"                break;",
													"",
													"            case \"Module\":",
													"            case \"Affected Release/Build\":",
													"            case \"Target Release/Build\":",
													"            case \"Fixed Release/Build\":",
													"                pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"                listToUnset.push(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"));",
													"                ",
													"                field.allowed_values.forEach((val, index) => {",
													"                    pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"Value\" + (index + 1), val.value);",
													"                    listToUnset.push(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"Value\" + (index + 1));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    ",
													"    pm.environment.set(\"listToUnset\", listToUnset);",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/defects/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"defects",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Submit defect 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4cdfa3e2-3c8e-4360-926d-e72b2ec1b181",
												"exec": [
													"if (pm.response.code === 201) {",
													"",
													"    let jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newDefectId1\", jsonData.id);",
													"    pm.environment.set(\"defectInfo1\", jsonData);",
													"",
													"    pm.test(\"Status code is 201\", () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property id\", () => {",
													"        pm.expect(jsonData).to.have.property(\"id\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property pid\", () => {",
													"        pm.expect(jsonData).to.have.property(\"pid\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property url\", () => {",
													"        pm.expect(jsonData).to.have.property(\"url\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property submitted_date\", () => {",
													"        pm.expect(jsonData).to.have.property(\"submitted_date\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property last_modified_date\", () => {",
													"        pm.expect(jsonData).to.have.property(\"last_modified_date\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property submitter_id\", () => {",
													"        pm.expect(jsonData).to.have.property(\"submitter_id\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property web_url\", () => {",
													"        pm.expect(jsonData).to.have.property(\"web_url\");",
													"    });",
													"    ",
													"    let changes = [];",
													"    jsonData.properties.forEach((field, index) => {",
													"        changes.push({",
													"            field: field.field_name,",
													"            old_value: \"\",",
													"            new_value: field.field_value_name || field.field_value",
													"        });",
													"        switch (field.field_name) {",
													"            case \"Summary\":",
													"                pm.test(\"Response data has property summary contains: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"defectSummary\"));",
													"                });",
													"                break;",
													"            case \"Description\":",
													"                pm.test(\"Response data has property description contains: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"defectDescription\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    ",
													"    createObjectHistory(\"defect\", jsonData.id, changes);",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													"",
													"function createObjectHistory(objType, objId, changes) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`) || [];",
													"",
													"    let searchSuccess = false;",
													"    if (objHistoriesList && objHistoriesList.length > 0) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                let history = {",
													"                    changes: changes",
													"                };",
													"                objHistories.histories.push(history);",
													"",
													"                searchSuccess = true;",
													"                break;",
													"            }",
													"        }",
													"    }",
													"",
													"",
													"    // if search fail, create objectHistories",
													"    if (!searchSuccess) {",
													"        let objHistories = {",
													"            id: objId,",
													"            histories: []",
													"        };",
													"",
													"        let history = {",
													"            changes: changes",
													"        };",
													"",
													"        objHistories.histories.push(history);",
													"        objHistoriesList.push(objHistories);",
													"    }",
													"",
													"    pm.environment.set(`${objType}HistoriesList`, objHistoriesList);",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7c110237-283f-4edb-9040-a21fb426a734",
												"exec": [
													"pm.environment.set(\"defectSummary\", \"Summary of Defect 1\");",
													"pm.environment.set(\"defectDescription\", \"Description of Defect 1\");",
													"",
													"let today = new Date();",
													"",
													"today.setDate(today.getDate() + 2);",
													"pm.environment.set(\"defectTargetDate\", today.toISOString());",
													"",
													"today.setDate(today.getDate() + 2);",
													"pm.environment.set(\"defectClosedDate\", today.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"properties\": [\n        {\n            \"field_id\": \"{{fieldIdDefectSummary}}\",\n            \"field_value\": \"{{defectSummary}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdDefectDescription}}\",\n            \"field_value\": \"{{defectDescription}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdDefectModule}}\",\n            \"field_value\": \"{{newModuleId1}}\"\n        },\n        {\n          \"field_id\": \"{{fieldIdDefectAffectedReleaseBuild}}\",\n            \"field_value\": \"{{fieldIdDefectAffectedReleaseBuildValue1}}\"\n        },\n        {\n          \"field_id\": \"{{fieldIdDefectFixedReleaseBuild}}\",\n            \"field_value\": \"{{fieldIdDefectFixedReleaseBuildValue1}}\"\n        },\n        {\n          \"field_id\": \"{{fieldIdDefectTargetReleaseBuild}}\",\n            \"field_value\": \"{{fieldIdDefectTargetReleaseBuildValue1}}\"\n        },\n        {\n          \"field_id\": \"{{fieldIdDefectTargetDate}}\",\n            \"field_value\": \"{{defectTargetDate}}\"\n        },\n        {\n          \"field_id\": \"{{fieldIdDefectClosedDate}}\",\n            \"field_value\": \"{{defectClosedDate}}\"\n        },\n        {\n          \"field_id\": \"{{fieldIdDefectAssignedTo}}\",\n            \"field_value\": \"{{userTestId}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/defects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"defects"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Submit defect 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9cc4bd61-1381-4885-b50d-5ad1c89ea801",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"",
													"    let jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"newDefectId2\", jsonData.id);",
													"    pm.environment.set(\"defectInfo2\", jsonData);",
													"",
													"    pm.test(\"Status code is 201\", () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property id\", () => {",
													"        pm.expect(jsonData).to.have.property(\"id\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property pid\", () => {",
													"        pm.expect(jsonData).to.have.property(\"pid\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property url\", () => {",
													"        pm.expect(jsonData).to.have.property(\"url\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property submitted_date\", () => {",
													"        pm.expect(jsonData).to.have.property(\"submitted_date\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property last_modified_date\", () => {",
													"        pm.expect(jsonData).to.have.property(\"last_modified_date\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property submitter_id\", () => {",
													"        pm.expect(jsonData).to.have.property(\"submitter_id\");",
													"    });",
													"    ",
													"    pm.test(\"Response data has property web_url\", () => {",
													"        pm.expect(jsonData).to.have.property(\"web_url\");",
													"    });",
													"    ",
													"    let changes = [];",
													"    jsonData.properties.forEach((field, index) => {",
													"        changes.push({",
													"            field: field.field_name,",
													"            old_value: \"\",",
													"            new_value: field.field_value_name || field.field_value",
													"        });",
													"        switch (field.field_name) {",
													"            case \"Summary\":",
													"                pm.test(\"Response data has property summary contains: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"defectSummary2\"));",
													"                });",
													"                break;",
													"            case \"Description\":",
													"                pm.test(\"Response data has property description contains: \" + field.field_value, () => {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"defectDescription2\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"    ",
													"    createObjectHistory(\"defect\", jsonData.id, changes);",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													"",
													"function createObjectHistory(objType, objId, changes) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`) || [];",
													"",
													"    let searchSuccess = false;",
													"    if (objHistoriesList && objHistoriesList.length > 0) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                let history = {",
													"                    changes: changes",
													"                };",
													"                objHistories.histories.push(history);",
													"",
													"                searchSuccess = true;",
													"                break;",
													"            }",
													"        }",
													"    }",
													"",
													"",
													"    // if search fail, create objectHistories",
													"    if (!searchSuccess) {",
													"        let objHistories = {",
													"            id: objId,",
													"            histories: []",
													"        };",
													"",
													"        let history = {",
													"            changes: changes",
													"        };",
													"",
													"        objHistories.histories.push(history);",
													"        objHistoriesList.push(objHistories);",
													"    }",
													"",
													"    pm.environment.set(`${objType}HistoriesList`, objHistoriesList);",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "293e751c-e486-48cc-a89e-e1356bdb9225",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"defectSummary2\", \"Summary of Defect 2\");",
													"pm.environment.set(\"defectDescription2\", \"Description of Defect 2\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"properties\": [\n        {\n            \"field_id\": \"{{fieldIdDefectSummary}}\",\n            \"field_value\": \"{{defectSummary2}}\"\n        },\n        {\n            \"field_id\": \"{{fieldIdDefectDescription}}\",\n            \"field_value\": \"{{defectDescription2}}\"\n        },\n        {\n          \"field_id\": \"{{fieldIdDefectAffectedReleaseBuild}}\",\n            \"field_value\": \"{{fieldIdDefectAffectedReleaseBuildValue2}}\"\n        },\n        {\n          \"field_id\": \"{{fieldIdDefectFixedReleaseBuild}}\",\n            \"field_value\": \"{{fieldIdDefectFixedReleaseBuildValue2}}\"\n        },\n        {\n          \"field_id\": \"{{fieldIdDefectTargetReleaseBuild}}\",\n            \"field_value\": \"{{fieldIdDefectTargetReleaseBuildValue2}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/defects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"defects"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Subcribe defect 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2992ba43-d6f8-4b34-be08-63271bd36bb6",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Subcribe requirement success without any errors\", () => {",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        ",
													"        pm.expect(jsonData.result.noSubscribers).to.eql(1);",
													"        ",
													"        pm.expect(jsonData.result.subscribers[0].userName).to.eql(pm.environment.get(\"username\"));",
													"        ",
													"        pm.expect(jsonData.result.subscribers[0].fullName).to.eql(pm.environment.get(\"userTestFullName\"));",
													"        ",
													"        pm.expect(jsonData.result.subscribers[0].id).to.eql(pm.environment.get(\"userTestId\"));",
													"    });",
													"    ",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ce8978ce-355e-4b30-bcc6-4db66e9a323e",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "objectId",
													"value": "{{newDefectId1}}",
													"type": "text"
												},
												{
													"key": "userId",
													"value": "{{userTestId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/p/{{projectId}}/portal/notification/subscribe/3",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"p",
												"{{projectId}}",
												"portal",
												"notification",
												"subscribe",
												"3"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Link Objects",
							"item": [
								{
									"name": "201 - Precondition - Link release with requirements",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "888db702-3155-4b09-bb23-d9bf6a189ca6",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    ",
													"    pm.test(\"Response status: \" + pm.response.code, ()  => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"    let releaseInfo = pm.environment.get(\"releaseInfo1\");",
													"    ",
													"    pm.test(`Response data has ${jsonData.length} item(s)`, () => {",
													"        pm.expect(jsonData.length).to.eql(1);",
													"    });",
													"    ",
													"    pm.test(\"Item at 0 has property id\", () => {",
													"        pm.expect(jsonData[0].id).to.eql(releaseInfo.id);",
													"    });",
													"    ",
													"    pm.test(`Item at 0 has ${jsonData[0].objects.length} objects`, () => {",
													"        pm.expect(jsonData[0].objects.length).to.eql(1);",
													"    });",
													"    ",
													"    jsonData[0].objects.forEach((object, index) => {",
													"        let reqInfo = pm.environment.get(\"reqInfo1\");",
													"        let changes = [];",
													"        ",
													"        pm.test(`Object at ${index} has property id`, () => {",
													"            pm.expect(object.id).to.eql(reqInfo.id);",
													"        });",
													"        ",
													"        pm.test(`Object at ${index} has property pid`, () => {",
													"            pm.expect(object.pid).to.eql(reqInfo.pid);",
													"        });",
													"        ",
													"        pm.test(`Object at ${index} has property link_type: ${object.link_type}`, () => {",
													"            pm.expect(object.link_type).to.eql(\"release_scope_includes\");",
													"        });",
													"        ",
													"        pm.test(`Object at ${index} has property self`, () => {",
													"            pm.expect(object).to.have.property(\"self\");",
													"        });",
													"        ",
													"        changes.push({",
													"            field: \"Target Release/Build\",",
													"            old_value: \"\",",
													"            new_value: releaseInfo.name",
													"        });",
													"        ",
													"        createObjectHistory(\"requirement\", reqInfo.id, changes);",
													"        ",
													"        pm.environment.set(\"reqTargetRB1\", releaseInfo.name);",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													"",
													"function createObjectHistory(objType, objId, changes) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`) || [];",
													"",
													"    let searchSuccess = false;",
													"    if (objHistoriesList && objHistoriesList.length > 0) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                let history = {",
													"                    changes: changes",
													"                };",
													"                objHistories.histories.push(history);",
													"",
													"                searchSuccess = true;",
													"                break;",
													"            }",
													"        }",
													"    }",
													"",
													"",
													"    // if search fail, create objectHistories",
													"    if (!searchSuccess) {",
													"        let objHistories = {",
													"            id: objId,",
													"            histories: []",
													"        };",
													"",
													"        let history = {",
													"            changes: changes",
													"        };",
													"",
													"        objHistories.histories.push(history);",
													"        objHistoriesList.push(objHistories);",
													"    }",
													"",
													"    pm.environment.set(`${objType}HistoriesList`, objHistoriesList);",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  {{newReqId1}}\n]"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/{{newReleaseId1}}/link?type=requirements",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"{{newReleaseId1}}",
												"link"
											],
											"query": [
												{
													"key": "type",
													"value": "requirements"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Link build with requirements",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f81ba2c-9c58-4b60-a5a9-f2f2cbb582cd",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    ",
													"    pm.test(\"Response status: \" + pm.response.code, ()  => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"    let buildInfo = pm.environment.get(\"buildInfo1\");",
													"    ",
													"    pm.test(`Response data has ${jsonData.length} item(s)`, () => {",
													"        pm.expect(jsonData.length).to.eql(1);",
													"    });",
													"    ",
													"    pm.test(\"Item at 0 has property id\", () => {",
													"        pm.expect(jsonData[0].id).to.eql(buildInfo.id);",
													"    });",
													"    ",
													"    pm.test(`Item at 0 has ${jsonData[0].objects.length} objects`, () => {",
													"        pm.expect(jsonData[0].objects.length).to.eql(1);",
													"    });",
													"    ",
													"    jsonData[0].objects.forEach((object, index) => {",
													"        let reqInfo = pm.environment.get(\"reqInfo1\");",
													"        let changes = [];",
													"        ",
													"        pm.test(`Object at ${index} has property id`, () => {",
													"            pm.expect(object.id).to.eql(reqInfo.id);",
													"        });",
													"        ",
													"        pm.test(`Object at ${index} has property pid`, () => {",
													"            pm.expect(object.pid).to.eql(reqInfo.pid);",
													"        });",
													"        ",
													"        pm.test(`Object at ${index} has property link_type: ${object.link_type}`, () => {",
													"            pm.expect(object.link_type).to.eql(\"build_scope_includes\");",
													"        });",
													"        ",
													"        pm.test(`Object at ${index} has property self`, () => {",
													"            pm.expect(object).to.have.property(\"self\");",
													"        });",
													"        ",
													"        changes.push({",
													"            field: \"Target Release/Build\",",
													"            old_value: pm.environment.get(\"reqTargetRB1\"),",
													"            new_value: buildInfo.name",
													"        });",
													"        ",
													"        createObjectHistory(\"requirement\", reqInfo.id, changes);",
													"    });",
													"    ",
													"    pm.environment.unset(\"reqTargetRB1\");",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													"",
													"function createObjectHistory(objType, objId, changes) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`) || [];",
													"",
													"    let searchSuccess = false;",
													"    if (objHistoriesList && objHistoriesList.length > 0) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                let history = {",
													"                    changes: changes",
													"                };",
													"                objHistories.histories.push(history);",
													"                ",
													"                searchSuccess = true;",
													"                break;",
													"            }",
													"        }",
													"    }",
													"",
													"    // if search fail, create objectHistories",
													"    if (!searchSuccess) {",
													"        let objHistories = {",
													"            id: objId,",
													"            histories: []",
													"        };",
													"",
													"        let history = {",
													"            changes: changes",
													"        };",
													"",
													"        objHistories.histories.push(history);",
													"        objHistoriesList.push(objHistories);",
													"    }",
													"",
													"    pm.environment.set(`${objType}HistoriesList`, objHistoriesList);",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  {{newReqId1}}\n]"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds/{{newBuildId1}}/link?type=requirements",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds",
												"{{newBuildId1}}",
												"link"
											],
											"query": [
												{
													"key": "type",
													"value": "requirements"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Link requirement with test cases",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5bac1f3d-08d7-456d-9962-38b732f0004f",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    ",
													"    pm.test(\"Response status: \" + pm.response.code, ()  => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"    let reqInfo = pm.environment.get(\"reqInfo1\");",
													"    ",
													"    pm.test(`Response data has ${jsonData.length} item(s)`, () => {",
													"        pm.expect(jsonData.length).to.eql(1);",
													"    });",
													"    ",
													"    pm.test(\"Item at 0 has property id\", () => {",
													"        pm.expect(jsonData[0].id.toString()).to.not.eql(reqInfo.id);",
													"    });",
													"    ",
													"    pm.test(`Item at 0 has ${jsonData[0].objects.length} objects`, () => {",
													"        pm.expect(jsonData[0].objects.length).to.eql(3);",
													"    });",
													"    ",
													"    jsonData[0].objects.forEach((object, index) => {",
													"        let reqInfo = pm.environment.get(`testCaseInfo${index + 1}`);",
													"        ",
													"        pm.test(`Object at ${index} has property id`, () => {",
													"            pm.expect(object.id).to.eql(reqInfo.id);",
													"        });",
													"        ",
													"        pm.test(`Object at ${index} has property pid`, () => {",
													"            pm.expect(object.pid).to.eql(reqInfo.pid);",
													"        });",
													"        ",
													"        pm.test(`Object at ${index} has property link_type: ${object.link_type}`, () => {",
													"            pm.expect(object.link_type).to.eql(\"is_covered_by\");",
													"        });",
													"        ",
													"        pm.test(`Object at ${index} has property self`, () => {",
													"            pm.expect(object).to.have.property(\"self\");",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  {{newTestCaseId1}}, {{newTestCaseId2}}, {{newTestCaseId3}}\n]"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/requirements/{{newReqId1}}/link?type=test-cases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"requirements",
												"{{newReqId1}}",
												"link"
											],
											"query": [
												{
													"key": "type",
													"value": "test-cases"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Link test log with defects",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0644fe23-f32a-471d-b02c-58df2adb92c7",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    ",
													"    pm.test(\"Response status: \" + pm.response.code, ()  => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"    let testLogInfo = pm.environment.get(\"testLogInfo1\");",
													"    ",
													"    pm.test(`Response data has ${jsonData.length} item(s)`, () => {",
													"        pm.expect(jsonData.length).to.eql(1);",
													"    });",
													"    ",
													"    pm.test(\"Item at 0 has property id\", () => {",
													"        pm.expect(jsonData[0].id).to.eql(testLogInfo.id",
													"        );",
													"    });",
													"    ",
													"    pm.test(`Item at 0 has ${jsonData[0].objects.length} objects`, () => {",
													"        pm.expect(jsonData[0].objects.length).to.eql(1);",
													"    });",
													"    ",
													"    jsonData[0].objects.forEach((object, index) => {",
													"        let reqInfo = pm.environment.get(\"defectInfo1\");",
													"        ",
													"        pm.test(`Object at ${index} has property id`, () => {",
													"            pm.expect(object.id).to.eql(reqInfo.id);",
													"        });",
													"        ",
													"        pm.test(`Object at ${index} has property pid`, () => {",
													"            pm.expect(object.pid).to.eql(reqInfo.pid);",
													"        });",
													"        ",
													"        pm.test(`Object at ${index} has property link_type: ${object.link_type}`, () => {",
													"            pm.expect(object.link_type).to.eql(\"is_associated_with\");",
													"        });",
													"        ",
													"        pm.test(`Object at ${index} has property self`, () => {",
													"            pm.expect(object).to.have.property(\"self\");",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  {{newDefectId1}}\n]"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-logs/{{newTestLogId1}}/link?type=defects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-logs",
												"{{newTestLogId1}}",
												"link"
											],
											"query": [
												{
													"key": "type",
													"value": "defects"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Link test step with defects",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bad7c278-9cc7-43f5-ad19-a864d0f548b7",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"    ",
													"    pm.test(\"Response status: \" + pm.response.code, ()  => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"    ",
													"    pm.test(`Response data has ${jsonData.length} item(s)`, () => {",
													"        pm.expect(jsonData.length).to.eql(1);",
													"    });",
													"    ",
													"    pm.test(\"Item at 0 has property id\", () => {",
													"        pm.expect(jsonData[0]).to.have.property(\"id\", pm.environment.get(\"newTestStepLogId1r1\"));",
													"    });",
													"    ",
													"    pm.test(`Item at 0 has ${jsonData[0].objects.length} objects`, () => {",
													"        pm.expect(jsonData[0].objects.length).to.eql(1);",
													"    });",
													"    ",
													"    jsonData[0].objects.forEach((object, index) => {",
													"        let defectInfo = pm.environment.get(`defectInfo${index + 1}`);",
													"        ",
													"        pm.test(`Object at ${index} has property id`, () => {",
													"            pm.expect(object.id).to.eql(defectInfo.id);",
													"        });",
													"        ",
													"        pm.test(`Object at ${index} has property pid`, () => {",
													"            pm.expect(object.pid).to.eql(defectInfo.pid);",
													"        });",
													"        ",
													"        pm.test(`Object at ${index} has property link_type: ${object.link_type}`, () => {",
													"            pm.expect(object.link_type).to.eql(\"is_associated_with\");",
													"        });",
													"        ",
													"        pm.test(`Object at ${index} has property self`, () => {",
													"            pm.expect(object).to.have.property(\"self\");",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n  {{newDefectId1}}\n]"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-steps/{{newTestStepLogId1r1}}/link?type=defects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-steps",
												"{{newTestStepLogId1r1}}",
												"link"
											],
											"query": [
												{
													"key": "type",
													"value": "defects"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Main",
					"item": [
						{
							"name": "Test with requirements",
							"item": [
								{
									"name": "200 - Query histories - Requirement -  Success with criteria Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bedb322a-e1df-47a4-8b62-8d2ca581f0b3",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(3);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8292e8c6-61f9-4325-a1f7-4566f0dd71b6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'id' = '{{newReqId1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Requieremnt - Success with criteria Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bbacd586-a459-4920-9e4b-4364c72188c0",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(1);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "44f92283-01c5-4557-b166-e3a3b352a0b9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'name' = 'Requirement 2'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Requirement - Success with criteria Creator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "25c7e481-4b53-40b8-8e1d-3c2584abc16b",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(4);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e48f5af4-961c-47c7-af3b-8f3a115c3bc0",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'creator' = '{{userTestFullName}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Requirement - Criteria Creator value is user Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0bc4ca4c-cfba-4ee2-a6ab-609ea44166c9",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(4);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ff2cf576-2df1-4c61-810e-1f3c230e8282",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'creator' = '{{userTestId}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Requirement - Success with criteria Description",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b875f1d-ad0a-448f-a3a8-73b1e0bbaf25",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(4);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "65792b88-875c-4baf-97c0-70b8686ef355",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'description' ~ 'Description'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Requirement - Success with criteria Module",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "32b803c5-fbe7-48f3-a040-41c6c289cf55",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(4);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "eed38c70-373f-4dc3-bbdc-397d0c09e6bf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'module' = '{{newModuleId1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Requirement - Criteria Module value is combined with pid and module name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "85888cff-4350-4738-ad17-1ba24e626583",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(4);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"pm.environment.unset(\"queryValue\");",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "37ffb686-a94c-4581-a79e-db7ba2505167",
												"exec": [
													"let moduleInfo = pm.environment.get(\"moduleInfo1\");",
													"",
													"pm.environment.set(\"queryValue\", `${moduleInfo.pid} ${moduleInfo.name}`);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'module' = '{{queryValue}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Requirement - Success with criteria Priority",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f3160c1c-49cf-45c1-a54b-b941c74d8f7c",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(4);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0c9c2db9-fff5-47a2-8200-3904e5e7b775",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'priority' = 'should have'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Requirement - Criteria Priority value is priority Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ddc8e062-8f20-466d-a021-3799d9c2cfc0",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(4);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b399257d-8fe2-47f0-aea0-1a5d01e49c61",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'priority' = '{{fieldIdReqPriorityShouldhave}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Requirement - Success with criteria Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f2bcaa80-db5d-4857-9952-0a5f002e3619",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(4);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "54f8dffd-0cf5-4347-8e0d-d67896820cdf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'status' = 'in progress'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Requirement - Criteria Status value is status Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c7cd7fc7-7555-4719-95d8-e1b081d37bc7",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(4);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "114dcc8c-9a57-4339-89ba-8abcf2fa888d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'status' = '{{fieldIdReqStatusInProgress}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Requirement - Success with criteria Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c50e2a7-9f63-4f9e-9d9e-40661e854fb7",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(4);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e9b2f838-f6f9-4e05-b5b6-a55c0ca864fc",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'type' = 'non-functional'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Requirement - Criteria Type value is type Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f5d8406a-daf6-45fc-a038-cc5549abe622",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(4);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fdb3f502-8f6a-403c-ad97-de7544dac95c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'type' = '{{fieldIdReqTypeNonfunctional}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Requirement - Success with criteria Assigned To",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5900e988-d27f-4983-8a6e-11f6773ffefd",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(4);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9b0dc420-3153-49cc-a2d9-4e74e178e0b3",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'assigned to' = '{{userTestFullName}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Requirement - Criteria Assigned To value is user Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0006eb08-92fc-4bc4-8e18-9d5f8233b218",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(4);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d747fab9-5f09-4ac6-a5c8-be6a98c3af1c",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'assigned to' = '{{userTestId}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Requirement - Success with criteria Has Association with Defects",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "27062c7c-0315-4e2a-8474-f5a2a62ada7b",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(3);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9c6d16d5-7c6e-4223-adec-c3ceb60d2d7b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Has Association with Defects' = 'YES'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Requirement - Criteria Has Association with Defects has value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c98b1f5c-61b2-4628-b6e8-c293f93818d7",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(1);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8501cd17-5e5f-42de-a1f8-c3a3191148ff",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Has Association with Defects' = 'something'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Requirement  - Success with criteria Has Association with Test Cases",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a97e47a-07d7-43c7-85d5-08339419d69b",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(3);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2b0e61d5-3cdf-4803-ad1f-90487f6317aa",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Has Association with Test Cases' = 'YES'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Requirement - Criteria Has Association with Test Cases has value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "62c5e964-7cf7-4267-ad31-31ce08cdf6ec",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(1);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7bd81a93-e766-4bab-9d46-0862bb571e4a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Has Association with Test Cases' = 'something'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Requirement - Success with criteria Has Association with Test Runs",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d1dd633b-3d22-490d-bd3e-63e68ae890d7",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(3);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "45db3810-de1c-4f30-8493-d92cd2d582da",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Has Association with Test Runs' = 'YES' \",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Requirement - Criteria Has Association with Test Runs has value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ee5db7b-57f7-46ed-af01-f5bb0c528526",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(1);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7cc3835c-add4-4522-a9b9-59657f0e2a93",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Has Association with Test Runs' = 'something'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Requirement - Success with criteria Has Attachments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ff2d59ba-52d7-4f37-bd25-50f264f08f13",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(0);",
													"    });",
													"",
													"    pm.test(`Response data has ${jsonData.items.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(0);",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cd6e7099-d233-45dd-9eee-3d1e79f07ce5",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Has Attachments' = 'YES' \",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Requirement - Criteria Has Attachments has value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04366aae-d7c6-430f-8fc8-f07a364eca6f",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(4);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "199d95c5-175a-4d82-995f-dcffa2972b65",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Has Attachments' = 'something'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Requirement - Success with criteria Subscribers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "82383f0d-6108-41e7-b92f-c5a8256e0470",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(3);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"            ",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "42ec687c-58a5-49d7-8fc3-54af617cf38a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'subscribers' = '{{userTestId}}' \",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Requirement - Criteria Subscribers value is user full name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c5c906c-9170-4eed-9700-8035bdf62297",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(0);",
													"    });",
													"",
													"    pm.test(`Response data has ${jsonData.items.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(0);",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a2accec7-0f43-4aed-9112-84c9426f71c4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'subscribers' = '{{userTestFulName}}' \",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Requirement - Success with criteria Target Release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "db7da00d-2cd5-476a-b097-1530dde7e847",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(3);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4b6f072e-7963-46ba-bec2-d772edcba0af",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'target release' = '{{releaseName1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Requirement - Success with criteria Target Build",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22637e24-a837-478f-b8f3-ed7b71f0fee3",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(3);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f16e34cc-e815-4f6c-8a49-fb9465179ae4",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'target build' = '{{newBuildId1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Requirement - Success with criteria Created Date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92c2e9e3-16ec-4bc2-a255-28040510fce0",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(4);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4708e257-f439-4da0-acef-64791236e36e",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"dateToCompare\", today.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'created date' < '{{dateToCompare}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Requirement - Success with criteria Last Modified Date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0c42f4a4-de05-4e15-a75f-de35be54ee99",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(4);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "37db6f2e-a3ec-4529-8393-35ab2a6466a7",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"dateToCompare\", today.toISOString());"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'last modified date' < '{{dateToCompare}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Requirement - Success with criteria Last Modified User",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f39ec3d4-d619-4d0d-b7cc-a4f3e8840d61",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(4);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "48f9ae95-640a-49c3-95f7-3e8452fd33fa",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'last modified user' = '{{userTestFullName}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Requirement - Criteria Last Modified User value is user Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c007d81c-1e19-4b0a-b978-df0e736df619",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(4);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "280d049d-dbe5-48c6-83fb-efc2936545e2",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'last modified user' = '{{userTestId}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Query histories - Requirement - Criteria Target Release value is release Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "328c7832-2b0d-4709-8cff-51c7dae7b4a4",
												"exec": [
													"let expectedResponseCode = 400;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"   pm.test(\"Response data has property message contains: is not allowed for field 'Target Release/Build'\", () => {",
													"       pm.expect(jsonData.message).to.eql(`Value '${pm.environment.get(\"newReleaseId1\")}' is not allowed for field 'Target Release/Build'. Please given an allowed value!`);",
													"   });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cd864573-278a-464e-81f9-046ea2a02485",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'target release' = '{{newReleaseId1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Query histories - Requirement - Criteria Rarget Build value is build Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "322c4e3f-d924-43e3-834f-b25e0be7f512",
												"exec": [
													"let expectedResponseCode = 400;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"   pm.test(\"Response data has property message contains: is not allowed for field 'Target Release/Build'\", () => {",
													"       pm.expect(jsonData.message).to.eql(`Value '${pm.environment.get(\"buildName\")}' is not allowed for field 'Target Release/Build'. Please given an allowed value!`);",
													"   });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "94805538-31ee-456c-b904-4d9519e8a10f",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'target build' = '{{buildName}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Query histories - Requirement - Invalid requirement id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ff60e132-7b45-43d1-82bc-6cde701bca3a",
												"exec": [
													"let expectedResponseCode = 400;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"   pm.test(\"Response data has property message contains: For input string\", () => {",
													"       pm.expect(jsonData.message).to.eql(`For input string: \\\"${pm.environment.get(\"newReqId1\")}${pm.environment.get(\"invalidPostfix\")}\\\"`);",
													"   });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    case \"Weight\":",
													"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
													"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8ed4089b-37c3-4fb4-9e71-26cbce2602c5",
												"exec": [
													"pm.environment.set(\"invalidPostfix\", \"abcd\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'id' = '{{newReqId1}}{{invalidPostfix}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Test with test cases",
							"item": [
								{
									"name": "200 - Query histories - Test Case - Success with criteria Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "981f7fb2-a5ea-48ee-bd8a-da90a5b08154",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1ba9ccfb-a5f2-41dc-b21b-517648338273",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'id' = '{{newTestCaseId1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Success with criteria Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b8b4c3b2-06a9-4610-bde1-a9bcf90b0b6f",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f3c4eb53-1807-4848-97d6-7b96faf4ceb3",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'name' ~ 'Test Case 2'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Success with criteria Creator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a0bcadd-07ca-49be-ab05-da3a52e87dfc",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c727633d-3fcd-4da0-950a-1f7bf8acf59c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'creator' = '{{userTestFullName}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Criteria Creator value is user Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e54439a-6cd5-4cd6-81f9-7a4957f4659d",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4becd3b8-e628-4824-a60e-3aa61e1d7cba",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'creator' = '{{userTestId}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Success with criteria Description",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "17f51772-ff29-467d-a5d9-5487b91c4055",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9a716f11-549c-4e4f-b2d0-14fe98cfb72e",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'description' ~ 'Description'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case -  Success with criteria Module",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4fee3685-c509-4097-bc53-a63cf9a8d436",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "595b269f-c5aa-4250-9cc3-cfc22d0bb35a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'module' = '{{newModuleId1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Success with criteria Automation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c6739f52-cfc4-4a15-aa43-0c718c3d47ad",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "13494fec-6fb2-4dca-a968-4e94a23a625f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'automation' = 'YES'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Criteria Automation has value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "74af5e84-7538-4b98-8844-70f360f6ba04",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 400;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"   pm.test(\"Response data has property message contains 'is not allowed'\", () => {",
													"       pm.expect(jsonData.message).to.eql(\"Value 'something' is not allowed for field 'Automation'. Please given an allowed value!\");",
													"   });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23404792-43fe-4fee-8933-750ec28ba723",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'automation' = 'something'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Success with criteria Automation Content",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a6dcec9a-cb36-4061-b96e-740ab2f1f5c4",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6ffe9a4a-89c6-48ba-893d-ff6707e69d9d",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'automation content' ~ 'automation'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Success with criteria Priority",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "844cdf50-9ee5-4749-a4eb-e86d9a16bbf4",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "441dc1d8-ddb5-4427-8466-ee0a28a16a98",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'priority' = 'high'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Criteria Priority value is priority Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "efec808d-79a7-40d5-aca2-3237e82d72fc",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "27d9cd9f-9750-4b8c-9c0e-eb916898ee8f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'priority' = '{{fieldIdTestCasePriorityHigh}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Success with criteria Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a310eb52-717e-47d3-a75e-60ccae5fe3f2",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "48408b9d-c6c9-480c-8e9f-90323e03c37d",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'status' = 'in progress'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Criteria Status value is status Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "036f58bf-d204-4079-8213-28e76dcf06e8",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "13556486-29f2-4be5-a1a0-c33b5f2fd1f5",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'status' = '{{fieldIdTestCaseStatusInProgress}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Success with criteria Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab8b4489-2387-4b74-8d32-9c96ce63e194",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "94f14de0-a8fe-45e8-95ab-d164e526617c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'type' = 'performance'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Criteria Type value is type Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "94dc2368-b3eb-4e2a-a90d-174f14d85f8f",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ccb797bb-fb57-4c31-bd0e-68ed3227ec11",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'type' = '{{fieldIdTestCaseTypePerformance}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Success with criteria Assigned To",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "087bcb63-3445-4c23-9c09-bc31f81232df",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a7ba9721-ca50-45d7-9cdf-89d7669f7d6e",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'assigned to' = '{{userTestFullName}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Criteria Assigned To value is user Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "10d5be9d-734a-4903-9589-ee9453d08732",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6843f83e-941a-49fd-8902-a89656edaea1",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'assigned to' = '{{userTestId}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Success with criteria Has Association with Requirements",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "59024e31-4626-4b27-84e3-324313427812",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(6);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ce48ded6-5a75-448c-88d6-72e4dc70fa15",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Has Association with Requirements' = 'YES'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Criteria Has Association with Requirements has value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e6a4439-2202-4596-b630-b4b431ab5bfb",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(1);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bab5815e-fabe-451a-8272-121dcecb42ed",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Has Association with Requirements' = 'something'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Success with criteria Has Executed Test Run Instances",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44027cf6-e7a0-4cb5-8439-ad2f3bea1854",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "32c71f8a-cabe-469b-8340-efdd5b9fc122",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Has Executed Test Run Instances' = 'YES'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Criteria Has Executed Test Run Instances has value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "38b0a125-9a4c-40b5-9097-af2ebb64edcb",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(5);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "889bee38-3f9f-473c-9a16-5220afafbb7a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Has Executed Test Run Instances' = 'something'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Success with criteria Has Test Run Instances",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1f971aae-43fd-4b16-aee8-0ba00a217740",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(6);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "108e8c80-d627-4b5d-8da8-84d582e93b58",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Has Test Run Instances' = 'YES' \",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Criteria Has Test Run Instances has value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f1b4ab4-1944-4066-93f9-eaf1bbfccb2d",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(1);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5f60c49e-9177-428e-9bf9-a8af3efc2b3c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Has Test Run Instances' = 'something'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Success with criteria Has Attachments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf3cfe20-45db-4dcb-9ebf-774546b0200c",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(0);",
													"    });",
													"",
													"    pm.test(`Response data has ${jsonData.items.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(0);",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "027f7f46-0d52-4a19-8860-0be1c4820b50",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Has Attachments' = 'YES' \",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Criteria Has Attachments has value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c543b483-0ff8-4e94-8ad3-21eaefdc3e05",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b38a3bd4-3f9f-4b29-a665-3ff4772c9d39",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Has Attachments' = 'something'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Success with criteria Has Test Steps",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef4530d2-31e9-4df2-8d93-33611c24318c",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "be8412df-48c8-4a47-875c-ad3d748b90ec",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Has Test Step' = 'YES' \",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Criteria Has Test Step has value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ccae70cd-09a4-439b-af6c-166a159c630e",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(0);",
													"    });",
													"",
													"    pm.test(`Response data has ${jsonData.items.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(0);",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c946b655-439e-4d35-8df2-26a79dfa6a71",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Has Test Step' = 'something'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Success with criteria Is Approved",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6864ee63-928c-4cef-a3cb-e839620017dd",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(6);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "172f173e-5dd4-4ff5-aa49-fc0b5fed1176",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Is Approved' = 'YES' \",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Criteria Is Approved has value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "251b5be5-012f-4ccf-bf5f-636d6f45d73e",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(1);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "54f250ca-6634-4bb9-adf7-7e79b80c07b2",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Is Approved' = 'something'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Success with criteria Is Called Test Case",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a3fae08-dbcd-4135-bba1-14bf4792d653",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6ac74acd-118d-42ff-b6e3-23b268933211",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Is Called Test Case' = 'YES' \",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Criteria Is Called Test Case has value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "30ab50c3-1867-4cc6-bb95-a7278e970c4e",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(5);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7ac6c8d8-e2ad-4b78-9d59-209d3c2501e9",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Is Called Test Case' = 'something'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case -  Success with  criteria Is Calling Test Case",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc5e3418-e728-4e01-8762-df8578de8dbd",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7636b93b-ce59-429b-b87e-b57526a26a0a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Is Calling Test Case' = 'YES' \",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Criteria Is Calling Test Case has value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c342bb1-b5bd-4910-83e2-4de9ca55729f",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(5);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3fe39b5b-f25a-4361-a2a3-85f94e2ed7c5",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Is Calling Test Case' = 'something'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Success with criteria Subscribers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad8e0c0d-b399-4302-83ae-5f1d666b92bf",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "543ed2c7-d372-4c70-99c6-f17d40e64410",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'subscribers' = '{{userTestId}}' \",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Criteria Subscribers has user full name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6621da86-4523-402c-b850-72211b78c3f0",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(0);",
													"    });",
													"",
													"    pm.test(`Response data has ${jsonData.items.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(0);",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "748d3c0f-b973-4759-8170-44f98bff97b8",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'subscribers' = '{{userTestFulName}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Success with criteria Created Date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e7eb303-c7e3-48b5-8d41-36cbb1310214",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e3975edf-a09f-4126-aa4e-8fa7afaefb4a",
												"type": "text/javascript",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"dateToCompare\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'created date' < '{{dateToCompare}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Success with criteria Last Modified Date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9d39f6d-8b79-479a-93d8-41aa4803a94a",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a4a2c6b1-24f8-41ad-8d52-a712fe56cc89",
												"type": "text/javascript",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"dateToCompare\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'last modified date' < '{{dateToCompare}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Success with criteria Last Modified User",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6af3e3cc-5213-457c-9952-0a9e9bd6db40",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c09f24e5-cd23-492c-8474-9f9f68211714",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'last modified user' = '{{userTestId}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Case - Criteria Last Modified User value has user full name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c5c1378e-bc08-4bba-8f16-641df78a4ce3",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testCase\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"",
													"                    case \"Test Step\":",
													"                        change.new_value.forEach((testStep, stepIndex) => {",
													"                            let responseStep = resChange.new_value[stepIndex];",
													"                            pm.expect(responseStep.id).to.eql(testStep.id);",
													"                            pm.expect(responseStep.stepOrder).to.eql(testStep.stepOrder);",
													"                            pm.expect(responseStep.description).to.eql(testStep.description);",
													"                            pm.expect(responseStep.expectedResult).to.eql(testStep.expectedResult);",
													"                            pm.expect(responseStep.calledTestCaseId).to.eql(testStep.calledTestCaseId);",
													"                            pm.expect(responseStep).to.have.property(\"revisionId\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"parameters\");",
													"                            pm.expect(responseStep.descriptionInfo).to.have.property(\"editedParameters\");",
													"                            pm.expect(responseStep.descriptionInfo.rawText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.valueText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.htmlText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainText).to.eql(testStep.description);",
													"                            pm.expect(responseStep.descriptionInfo.plainValueText).to.eql(testStep.description);",
													"                        });",
													"                        break;",
													"",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                pm.expect(resChange.old_value).to.eql(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "62b4262c-4dce-4474-9148-1da4b886c686",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'last modified user' = '{{userTestFullName}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Query histories - Test Case - Invalid test case Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02c4923d-ac51-4035-8f1a-03a8dec039f0",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 400;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"   pm.test(\"Response data has property message contains: For input string\", () => {",
													"       pm.expect(jsonData.message).to.eql(`For input string: \\\"${pm.environment.get(\"newTestCaseId1\")}${pm.environment.get(\"invalidPostfix\")}\\\"`);",
													"   });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f75f07db-82be-4a4b-9bc8-76f80b675973",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"invalidPostfix\", \"abcd\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-cases\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'id' = '{{newTestCaseId1}}{{invalidPostfix}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Test with test runs",
							"item": [
								{
									"name": "200 - Query histories - Test Run - Success with criteria Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15718a7d-8bf4-4db7-be76-7233210f3bf1",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "66dc0d13-714b-4136-8689-59c68ed7a924",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'id' = '{{newTestRunId1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f5209f9-459a-436e-85de-44c40d2cd686",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(1);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f107327f-6aa6-44ed-a42e-a37e4e3e93f9",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'name' ~ 'Test Run 2'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Creator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a887c3c-04d4-4a81-8515-c7212793e4de",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3723fc9e-2f78-467e-a388-5dde34ce714f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'creator' = '{{userTestFullName}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Criteria Creator value is user Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d37b8ebd-d748-4873-8619-c068620771cb",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cc417444-51cb-4b06-8cf3-a4d0efe19b3a",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'creator' = '{{userTestId}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Environment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02e0a424-88b3-4362-9874-3fc24b28c7f4",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d1e3c461-4cb0-43da-8300-143023cc79a9",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'environment' is 'empty'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dbdf9b75-62f1-4624-a36b-e6059f25f77d",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(3);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c221cc78-f98a-4448-b6d7-b65b5327c1df",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'release' = '{{newReleaseId1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Criteria Release value is combined with pid and name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d6e3c3b5-0a9a-4696-a654-e22c1c58151c",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(3);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"pm.environment.unset(\"queryValue\");",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1985ed04-6d66-46e3-8811-ddfed8bee747",
												"type": "text/javascript",
												"exec": [
													"let releaseInfo = pm.environment.get(\"releaseInfo1\");",
													"",
													"pm.environment.set(\"queryValue\", `${releaseInfo.pid} ${releaseInfo.name}`);"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'release' = '{{queryValue}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Priority",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f907419a-198a-46d4-88d1-69e1d7e72067",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1840696a-361d-41e2-a50e-62a2de5aaa75",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'priority' = 'medium'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Criteria Priority value is priority Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "13cecadf-c5be-4e39-a4b8-ec8e54d6ce67",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "84907d8f-aa1f-4bf5-bd2f-ae9009ab2038",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'priority' = {{fieldIdTestRunPriorityMedium}}\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f433d56-d707-4a26-bec4-76bc872575b0",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "523b3812-dad2-458c-adb4-e45eef0a1df6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Status' = 'Passed'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Criteria Status value is status id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e2a78765-0512-46f1-a959-b6d96cb1e66e",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b2e4da78-216d-455f-8713-9aaba710817b",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'status' = '{{statusPassedId}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Assigned To",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1162ca5-9758-4efa-96c7-61faa4350d23",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c8652f67-f5a9-4a21-bed6-9ad2968d6249",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'assigned to' = '{{userTestFullName}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Criteria Assigned To value is user Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8579cb85-3989-4fe3-9bc3-98223c4b8acd",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ad25ea8c-a7ea-46cb-acf0-2a28fdbbddd7",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'assigned to' = '{{userTestId}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Executed End",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "72357b34-c6c2-4a85-aad8-dfb0a5a84ef4",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7b891485-5003-468b-8a38-0fa19a2dd790",
												"type": "text/javascript",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"dateToCompare\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'executed end' < '{{dateToCompare}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Executed Start",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "81baa954-df1a-43a7-966a-d0e5f2954e6b",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1506b600-bc2e-481d-b000-53917c762d64",
												"type": "text/javascript",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"dateToCompare\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'executed start' < '{{dateToCompare}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Execution Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "62803f19-e87f-4f9d-86fb-ba73463f9440",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "66825c5d-d571-4707-a806-ef1efe10b241",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'execution type' = 'Smoke'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Criteria Execution Type value is type id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4069d430-ce63-4700-ba09-981eb6b106ce",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "81255c1c-ca08-4438-bef0-b94948d033cd",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'execution type' = '{{fieldIdTestRunExecutionTypeSmoke}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Execution Planned End Date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e32beb6b-128b-4987-a62c-9eee61007759",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(0);",
													"    });",
													"",
													"    pm.test(`Response data has ${jsonData.items.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(0);",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "07f86f6e-4d82-4411-9438-70947537162b",
												"type": "text/javascript",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"dateToCompare\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'planned end date' < '{{dateToCompare}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Execution Planned Start Date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "949b8491-944c-40df-aefc-c7382ca59b0e",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bdfad746-d67e-4b36-87c0-afad510b1caf",
												"type": "text/javascript",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"dateToCompare\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'planned start date' < '{{dateToCompare}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Has Association with Requirements",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "900fc270-3410-4cc7-a014-999195c92bce",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6b227960-ec67-4e1d-86eb-594d046fef72",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Has Association with Requirements' = 'YES'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Criteria Has Association with Requirements has value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b1322ffe-c177-4751-b95f-8236a3027016",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(0);",
													"    });",
													"",
													"    pm.test(`Response data has ${jsonData.items.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(0);",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0cf30a4a-c9e9-465c-bfa6-1c62bcfebad2",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Has Association with Requirements' = 'something'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Has Attachments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d07dfb13-680b-4cf7-aacb-97fb248edbae",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(0);",
													"    });",
													"",
													"    pm.test(`Response data has ${jsonData.items.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(0);",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c01cb482-dff5-4e88-bc9b-ccf830c8ca28",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Has Attachments' = 'YES' \",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Criteria Has Attachments has value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d59035b-2d13-480f-9d1c-851201278d2c",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f68d523d-9197-4da1-8ef3-5395f546d6d6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Has Attachments' = 'something'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Has Association with Defects",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b0faa06-3f46-46cf-ad0c-fc0934a3ca52",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bf719c98-cba5-48ac-a1bb-24402e4d46cb",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Has Association with Defects' = 'YES' \",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Criteria Has Association with Defects has value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc32b939-a6fd-4831-9435-b4c16f5e50f1",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(5);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c5e79825-7f0f-4494-a7b5-38fe909992cb",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Has Association with Defects' = 'something' \",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Subscribers",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "752090d5-3733-46d4-b531-369325abfc03",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f3c83abe-b776-4239-9bd4-4752367e206b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'subscribers' = '{{userTestId}}' \",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Criteria Subscribers value is user full name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "be218752-b4ff-4db4-978d-fb76b11c632f",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(0);",
													"    });",
													"",
													"    pm.test(`Response data has ${jsonData.items.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(0);",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c4a2f7de-312b-4b71-b4b3-5194a8087f36",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'subscribers' = '{{userTestFulName}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Target Release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "007326e0-1594-4f52-bddd-59f29b9dbbd9",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(3);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b67e6162-cf84-4453-8c9e-9d3f99e611f3",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'target release' = '{{releaseName1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Target Build",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6474bb3c-94c8-4223-9cde-017bad4e4447",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(0);",
													"    });",
													"",
													"    pm.test(`Response data has ${jsonData.items.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(0);",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4cc8afd2-70b3-43ef-8a52-1ee20a4ed401",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'target build' = '{{newBuildId1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Test Cycle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "caa62317-d9c3-4f00-9ff3-8702dbe82099",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6effd921-e835-45b1-b529-25b20b90bb86",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Test Cycle' = '{{newCycleId1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Criteria Test Cycle value is combined with pid and cycle Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5304eb8d-d85e-49c3-aaa4-e5bfb6584077",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"pm.environment.unset(\"queryValue\");",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a7c43661-a127-4466-a5c8-5c8aa2900b5c",
												"type": "text/javascript",
												"exec": [
													"let cycleInfo = pm.environment.get(\"cycleInfo1\");",
													"",
													"pm.environment.set(\"queryValue\", `${cycleInfo.pid} ${cycleInfo.name}`);"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Test Cycle' = '{{queryValue}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Test Suite",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e776614-91a3-4c1f-ab7c-083756fc6de1",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(1);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "34fe245a-45fc-4bd6-be1a-f77b105b6f8e",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Test Suite' = '{{newTestSuiteId1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Criteria Test Suite value is test suite name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7e6337f-aee6-4a0d-896e-3861b5bc5fbf",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(1);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"pm.environment.unset(\"queryValue\");",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "787ec8cb-7155-460f-9dec-2daece1a4907",
												"type": "text/javascript",
												"exec": [
													"let testSuiteInfo = pm.environment.get(\"testSuiteInfo1\");",
													"",
													"pm.environment.set(\"queryValue\", `${testSuiteInfo.pid} ${testSuiteInfo.name}`);"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Test Suite' = '{{queryValue}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Automation Test Run",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fcab2a92-21b5-4b9d-8ecc-5917d7930f0b",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(1);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ba43ab15-0200-42de-965e-3f8fc07485fc",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Automation Test Run' = 'YES'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Criteria Automation Test Run has value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "29f494cf-e7c8-4b12-b770-d5e81a6057af",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(6);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e0c89f0c-33e6-43f3-a245-0019accf493e",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Automation Test Run' = 'something'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Number of Runs",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c09d50c9-ebd9-4b6d-b688-2929f53d6826",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c6bac870-b6bb-4f65-b643-e22b5e13abdf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Number of Runs' = 1\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Query histories - Test Run - Criteria Number of Runs value is a string",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "72d6b633-b809-40ab-863d-c76a8a37d414",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 400;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property message contains 'For input string'\", () => {",
													"        pm.expect(jsonData.message).to.include(\"For input string\");",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bd64d94b-1391-4ed7-b8e4-bf1e9c665b9b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Number of runs' = 'abcd'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Test Case Assigned To",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c00c28cc-f201-4cf1-9737-0f8fc6ce82d7",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6be685dc-a7ef-4585-b9cb-af8b5e116241",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Test Case Assigned To' = '{{userTestFullName}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Criteria Test Case Assigned To value is user Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a94b0700-ce99-4baf-805c-9ec3e207da5e",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d63c2dcc-6daf-4e39-9307-497ba56fe23e",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Test Case Assigned To' = '{{userTestId}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Test Case Automation",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "356f75b4-28a9-4246-a4e0-74c671959447",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(1);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5e6c4f5b-622d-447f-bb38-5f537347d925",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Test Case Automation' = 'YES'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Query histories - Test Run - Criteria Test Case Automation has value is NOT equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a60c8e0f-69a3-4f39-8e9f-2582abb44fb7",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 400;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property message contains 'is not allowed'\", () => {",
													"        pm.expect(jsonData.message).to.eql(\"Value 'something' is not allowed for field 'Automation'. Please given an allowed value!\");",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e1b1d4fc-be39-47f2-bc19-f6dbdfebe569",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Test Case Automation' = 'something'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Test Case Automation Content",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "41c2bdfb-a3b6-4c0d-93f4-672a8e9f14a8",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(1);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a4227882-b63d-405b-aede-9bf580366d61",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Test Case Automation Content' ~ 'Automation'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Test Case Created Date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f532a4a-f353-497b-875a-08d22394b685",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "49836e01-617a-4366-af43-dcee05d96510",
												"type": "text/javascript",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"dateToCompare\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'test case created date' < '{{dateToCompare}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Test Case Last Modified Date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c647642a-f7a6-4a6e-ae41-bfa54c49d315",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6b3cada3-6b76-49cd-b2b6-02c27000fcab",
												"type": "text/javascript",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"dateToCompare\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'test case last modified date' < '{{dateToCompare}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Test Case Creator",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a64561c-7777-4bf1-9c98-d4c95b7a25c1",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e4686c2-15f4-4b30-8ffe-ad67a13d5f40",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Test Case Creator' = '{{userTestFullName}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Criteria Test Case Creator value is creator Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76249a51-7db8-415c-82e8-9556c1a7a155",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a435b5a2-ab57-4d6d-a099-f5dabc0a4552",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Test Case Creator' = '{{userTestId}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Test Case Description",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b8972efd-6d38-4c29-a0ad-c3152f3174b5",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "358e2f60-9deb-4667-89bb-4a7557bf16ee",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Test Case Description' ~ 'Description'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Test Case Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2563f633-f5d6-4159-9045-15520af312af",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(5);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "14a4df3b-3f0f-42ce-a23f-d7a97c38a39f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Test Case Id' = '{{newTestCaseId1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Test Case Last Modified User",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f90b5b93-ce49-4c90-9dde-c66ff09e70ef",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4c3cb502-7d89-43bb-a13c-7fee396e57dd",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Test Case Last Modified User' = '{{userTestFullName}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Criteria Test Case Last Modified User value is user Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef07c583-f665-45fc-86f6-ae85387c7128",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a0888dbd-c96c-4779-8bd3-7ff4c11d40ef",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Test Case Last Modified User' = '{{userTestId}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Test Case Module",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa4ed50b-e740-49d1-90b3-4d9ddf6e9234",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "555c0903-eadc-4a82-904c-2b70a3ea60ed",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Test Case Module' = '{{newModuleId1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Criteria Test Case Module value is combined with pid and test case name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5d9506d-e22d-427b-8cce-a7cff19b7bb4",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"pm.environment.unset(\"queryValue\");",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ac8e3eee-6143-49eb-b11d-5c093ebbfb23",
												"type": "text/javascript",
												"exec": [
													"let moduleInfo = pm.environment.get(\"moduleInfo1\");",
													"",
													"pm.environment.set(\"queryValue\", `${moduleInfo.pid} ${moduleInfo.name}`);"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Test Case Module' = '{{queryValue}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Test Case Precondition",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2876ee0-791a-43d2-bb69-b5000da86696",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3dcf75f2-8ee2-4a02-8bee-43f41936e06b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Test Case Precondition' ~ 'Precondition'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Test Case Priority",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf0a458b-60dc-4d06-869d-8f1326e3f562",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a820b98e-56e4-43f6-b983-7ed4e3426fc0",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Test Case Priority' = 'high'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Criteria Test Case Priority value is priority Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae476ea1-1b39-471d-91e1-630d93df9e9c",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "aba3a689-27a9-45d4-b026-2f3fe0ec1118",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Test Case Priority' = '{{fieldIdTestCasePriorityHigh}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Test Case Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "20f79d47-71a8-450f-bd78-65bde54e301b",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19f42f75-a18e-4c97-a1a7-322fe94f025b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Test Case Status' = 'In progress'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Criteria Test Case Status value is status Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67a95710-41ef-4704-8d6a-d1d41e766f30",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "73ffb833-86e4-43df-bdaa-db20287a03cf",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Test Case Status' = '{{fieldIdTestCaseStatusInProgress}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Test Case Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "43463f16-8640-43d1-935c-7f1d5fa07751",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a3af79be-f60a-49dd-a7c0-4e8f02b08783",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"oobject_query\": \"'Test Case Type' = 'Performance'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Criteria Test Case Type value is type Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3b1d493-6209-46a7-96c9-0b2ee5bbae28",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "55789b90-824a-49b1-961a-e1a2d3b8cf32",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Test Case Type' = '{{fieldIdTestCaseTypePerformance}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Test Case Version",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9501727f-c6c2-4287-b67c-f6d78b56ab20",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c2702a58-96c9-4f73-9e5e-b0e0e779cc0d",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Test Case Version' = '1.0'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Tester",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ca28aa8-d928-46bf-9b05-cc915abfec13",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ea030409-c628-4771-a6d6-c3c9590781e7",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'tester' = '{{userTestFullName}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Criteria Tester value is tester Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c7cba7ca-ed53-4035-a7c6-31a16735a20c",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "92d772c2-cc23-406f-a09f-91b7821934ac",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'tester' = '{{userTestId}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Created Date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1f308629-0b12-4b70-a1f3-a3fc07d36fb3",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cedb6c43-dde9-44cd-a394-d4f45e5e8e9f",
												"type": "text/javascript",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"dateToCompare\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'created date' < '{{dateToCompare}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Last Modified Date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "94078846-0b78-4376-b351-6a30a21fe767",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "885f4132-5a81-4d71-a269-df17d19ab427",
												"type": "text/javascript",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"dateToCompare\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'last modified date' < '{{dateToCompare}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Success with criteria Last Modified User",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e8c3d60-a9e5-4424-85e3-65e4b78fed63",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7dae9776-6c5a-46ea-9e99-990ef68ee225",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'last modified user' = '{{userTestId}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Test Run - Criteria Last Modified User value is user full name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0c5f1698-d55f-4891-bc6c-1592a2d7f26e",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(7);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value);",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2e3fd6d8-764f-44c2-af67-137d85da7256",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'last modified user' = '{{userTestFullName}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Query histories - Test Run - Invalid test runs id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f511d48f-7d91-4283-8431-3691d10a480c",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 400;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"   pm.test(\"Response data has property message contains: For input string\", () => {",
													"       pm.expect(jsonData.message).to.eql(`For input string: \\\"${pm.environment.get(\"newTestRunId1\")}${pm.environment.get(\"invalidPostfix\")}\\\"`);",
													"   });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8f94de08-6a26-4bae-8a03-050f65929a0c",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"invalidPostfix\", \"abcd\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'id' = '{{newTestRunId1}}{{invalidPostfix}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1d842162-d53b-455c-b242-286c1bfcd38f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "be868d0d-5cd3-4452-9a43-cd357101f67f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Test with defects",
							"item": [
								{
									"name": "200 - Query histories - Defect - Success with criteria Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e463f2f-40d0-434a-bff6-a0ad56660f62",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(1);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"defect\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value.trim());",
													"                }",
													"",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") :",
													"                    pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0c665ac9-67ea-4356-b3d6-b248a976771e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'id' = '{{newDefectId1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Success with criteria Summary",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab3c4b65-6557-44f8-9fa6-ef70405722c1",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"defect\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value.trim());",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f482d292-aa44-4c84-a684-53fc7fe49419",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'summary' ~ 'Summary'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Success with criteria Description",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "03e099ad-0c51-4cff-9f5f-794da5eab775",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"defect\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value.trim());",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cded0738-b21d-474e-a5ad-1cc4665a867c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Description' ~ 'Description'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Success with criteria Environment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "63f4a526-00c1-44ec-a092-a5d1bc722e49",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"defect\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value.trim());",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "72d264d0-cab5-4619-8a67-6cc56ce7622b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'environment' is 'empty'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Success with criteria Module",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b2239a2-854f-4157-8065-3d095da64d67",
												"exec": [
													"setTimeout(function(){",
													"      console.log(\"Sleeping for 3 seconds before next request.\");",
													"}, 3000);",
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(1);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"defect\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value.trim());",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "dee5434a-7772-4e3b-a04b-69cc8aa68c66",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'module' = '{{newModuleId1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Criteria Module value is combined with pid and module Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "686d904e-993a-49d0-b48d-4664817ea728",
												"exec": [
													"setTimeout(function(){",
													"      console.log(\"Sleeping for 3 seconds before next request.\");",
													"}, 3000);",
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(1);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"defect\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"pm.environment.unset(\"queryValue\");",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value.trim());",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "97b01fc0-69f8-49ba-bf20-e03f30858caf",
												"exec": [
													"let moduleInfo = pm.environment.get(\"moduleInfo1\");",
													"",
													"pm.environment.set(\"queryValue\", `${moduleInfo.pid} ${moduleInfo.name}`);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'module' = '{{queryValue}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Success with criteria Priority",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ff31fdc9-47d4-4e28-a0cf-84696d495941",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"defect\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"               pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value.trim());",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "85cae77e-d2eb-4a19-a428-df4d819da932",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'priority' = 'medium'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Success with criteria Type",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5198d3f-2992-4388-ad35-a22100d37d32",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"defect\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value.trim());",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6b3a5612-6b70-4a62-a1ed-df4a1f522a94",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'type' = 'bug'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Success with criteria Reason",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98dd8718-00ec-4196-9d84-611056c60c92",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"defect\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value.trim());",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5b285de4-eedb-4eab-a4ee-287d1fe38f81",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'reason' = 'Additional Info Needed'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Success with criteria Root Cause",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48857f01-34dc-462a-bd01-67d7da55f5b9",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"defect\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value.trim());",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "33bcb43d-0a97-4c03-8fdb-7b036af3cbdb",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'root cause' = 'other'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Success with criteria Severity",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2fba211e-9865-4625-bedf-f65fc3dd336c",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"defect\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value.trim());",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "db70dd2e-c2eb-4eae-9843-bded23547042",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'severity' = 'average'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Success with criteria Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "74052053-2d2d-4cc5-9344-14ad2a33c1e0",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"defect\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value.trim());",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e722fe69-5339-4878-8152-0a0b606467cb",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'status' = 'new'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Success with criteria Subscriber",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "40ec3757-9c6e-41a7-a75f-aad0e41b7b10",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(1);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"defect\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value.trim());",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fdf04215-1fba-46e0-a681-6249c9712daf",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'subscriber' = '{{userTestId}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Criteria Subscriber value is user Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6fe2cdf0-b48c-4ad2-8de2-58473e978458",
												"type": "text/javascript",
												"exec": [
													"// Expected: response information of defect DF-1",
													"",
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(0);",
													"    });",
													"",
													"    pm.test(`Response data has ${jsonData.items.length} item(s)`, () => {",
													"        pm.expect(jsonData.items.length).to.eql(0);",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "56cb3ba4-3adb-45e4-b5eb-7c84168b59b3",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'subscriber' = '{{userTestFullName}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Success with criteria Assigned To",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50aff873-9fcf-4f1a-bafd-cc2c7a8823d7",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(1);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"defect\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value.trim());",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "79d01bb3-bbba-4147-b99b-f5a2be864834",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'assigned to' = '{{userTestFullName}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Criteria Assigned To value is user Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67f292de-a062-4c6c-a9fd-f66ad82fa561",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(1);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"defect\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value.trim());",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c5ef66b3-2a67-44e6-bf04-0aa031efee3e",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'assigned to' = '{{userTestId}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Success with criteria Submitter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "301e199a-828d-4667-abcc-0116eb71684e",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"defect\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value.trim());",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7557f905-10fc-4b2a-9b68-e608cd783563",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'submitter' = '{{userTestFullName}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Criteria Submitter value is user Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "523748a4-a677-491f-af1e-39868508eee2",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"defect\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value.trim());",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0cb76a6f-27a3-4fc9-a1c1-4869130f610b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'submitter' = '{{userTestId}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Success with criteria Last Modified User",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a716676a-f644-40ea-bd19-dd280c5a5b26",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"defect\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value.trim());",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6b3cd8ea-5baf-4058-8a81-aae15e7d7f6f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'last modified user' = '{{userTestFullName}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Criteria Last Modified User value is user Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd3839e4-725e-47f4-9091-22bf0e88e38b",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"defect\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value.trim());",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b48337cd-6fce-4ec6-9d96-0c46cd0da076",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'last modified user' = '{{userTestId}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Success with criteria Submitted Date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "091ad410-ac1c-441a-94df-fc5dad210d55",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"defect\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value.trim());",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0100c53e-923a-4b03-9a22-37819775fe5b",
												"type": "text/javascript",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"dateToCompare\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'submitted date' < '{{dateToCompare}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Success with criteria Closed Date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "121e4004-1623-4a02-9ce1-64a218249299",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(1);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"defect\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value.trim());",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3e0dcd6d-c37d-43aa-9f83-22d4f262ff32",
												"type": "text/javascript",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"dateToCompare\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'closed date' > '{{dateToCompare}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Success with Last Modified Date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8564c69e-7d76-4c90-895e-f47fecf75cb0",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"defect\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value.trim());",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9ee206e1-87b9-4dcd-ac9d-c1e44728a9d0",
												"type": "text/javascript",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"dateToCompare\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'last modified date' < '{{dateToCompare}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Success with criteria Target Date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9e2e30e-6a68-4caf-ac98-4470f673abb8",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(1);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"defect\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value.trim());",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "19e25ea4-951d-4a3a-8673-e5cb5bc09c7f",
												"type": "text/javascript",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"dateToCompare\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'target date' > '{{dateToCompare}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Success with criteria Has Association With Requirements",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d533d39b-3c75-4367-8e2d-e0ff3b6c21d4",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(1);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"defect\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value.trim());",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "845994aa-efc7-4caf-bd7e-f1bbebd71e7f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Has Association with Requirements' = 'YES'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Criteria Has Association With Requirements has value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "658e1da6-07cd-4dd0-9ead-8451055b7afc",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(1);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"defect\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value.trim());",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0aae9810-8dc5-40f2-b47c-3007a4aea34c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Has Association with Requirements' = 'something'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Criteria Has Association with Test Runs has value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "470b7c68-5ab2-4046-904b-3a89d549b788",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(1);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"defect\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value.trim());",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "78311829-275a-4503-ae2b-2ae50d004f40",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Has Association with Test Runs' = 'something'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Success with criteria Has Attachments",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c4629c4-63a0-454b-b4f4-46eb7bb7ef84",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(0);",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "54918587-a114-402b-bd34-b6e039d14c87",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Has Attachments' = 'YES'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Criteria Has Attachments has value not equal YES",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f417ac5b-888c-4c7d-9928-0db4ebd8621b",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"defect\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value.trim());",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "250673d6-a26f-46cd-b6a2-fd3c87bba116",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Has Attachments' = 'something'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Success with criteria Target Release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "00b2eb18-0734-4bb4-a5f9-b9e30daba434",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"defect\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value.trim());",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e77869ca-e7d2-48ff-a39c-8061d897a1d0",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Target Release' = '{{releaseName1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Success with criteria Target Build",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d68860d-9d94-4f63-b9d4-475bcce5d1f9",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(1);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"defect\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value.trim());",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b96979e6-046b-49f5-a1ae-9d14fbb4d73d",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Target Build' = '{{newBuildId1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Query histories - Defect - Criteria Target Build value is build Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "de2c6fe1-0932-4540-83bd-cdc626e50e1a",
												"type": "text/javascript",
												"exec": [
													"// Expected: response information of defect DF-1",
													"",
													"let expectedResponseCode = 400;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"   pm.test(\"Response data has property message contains: Please given an allowed value!\", () => {",
													"       pm.expect(jsonData.message).to.eql(`Value '${pm.environment.get(\"buildName\")}' is not allowed for field 'Target Release/Build'. Please given an allowed value!`);",
													"   });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7624ee08-7839-404e-bbbc-4e4cdeecbe81",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Target Build' = '{{buildName}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Success with criteria Affected Release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dbbc58d1-76d8-46fb-b814-b155a4c40ecd",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"defect\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value.trim());",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e10240df-b232-4c58-9ce0-88c8cc924ca4",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Affected Release' = '{{releaseName1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Success with criteria Affected Build",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "09e3fea3-ed78-4b06-9c71-e2e01cabb659",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(1);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"defect\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value.trim());",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0d530083-fa43-4e35-a95b-cd5d0c27f815",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Affected Build' = '{{newBuildId1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Query histories - Defect - Criteria Affected Build value is build Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f040717-52e8-4ace-bfd1-3546996644cd",
												"type": "text/javascript",
												"exec": [
													"// Expected: response information of defect DF-1",
													"",
													"let expectedResponseCode = 400;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"   pm.test(\"Response data has property message contains: Please given an allowed value!\", () => {",
													"       pm.expect(jsonData.message).to.eql(`Value '${pm.environment.get(\"buildName\")}' is not allowed for field 'Affected Release/Build'. Please given an allowed value!`);",
													"   });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f208df30-d7f3-4b9c-b80b-c593c9bb8fa8",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Affected Build' = '{{buildName}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Success with criteria Fixed Release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "03cf4b31-1993-44b7-a99e-3b52e3056c2f",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(2);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"defect\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value.trim());",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "85b6c413-1643-414f-8f3f-dfd0081beccd",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Fixed Release' = '{{releaseName1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Query histories - Defect - Success with criteria Fixed Build",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc844b92-7185-454d-aae3-b41a3caa90dc",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 200;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has property links\", () => {",
													"        pm.expect(jsonData).to.have.property(\"links\");",
													"    });",
													"",
													"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
													"        pm.expect(jsonData.page).to.eql(1);",
													"    });",
													"",
													"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
													"        pm.expect(jsonData.page_size).to.eql(100);",
													"    });",
													"",
													"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
													"        pm.expect(jsonData.total).to.eql(1);",
													"    });",
													"",
													"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
													"",
													"    let count = 1;",
													"    classifiedResponseItems.forEach((bundle) => {",
													"        let objectHistories = getObjectHistories(\"defect\", bundle.id);",
													"",
													"        bundle.histories.forEach((history, index) => {",
													"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
													"",
													"            pm.test(`Item at ${count} has correct data`, () => {",
													"                pm.expect(history).to.have.property(\"created\");",
													"                pm.expect(history).to.have.property(\"links\");",
													"                pm.expect(history).to.have.property(\"id\");",
													"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
													"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
													"                ",
													"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
													"                    compareChange(history.changes, change);",
													"                });",
													"            });",
													"            count++;",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}",
													"",
													"function getObjectHistories(objType, objId) {",
													"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
													"",
													"    if (objHistoriesList) {",
													"        for (let objHistories of objHistoriesList) {",
													"            if (objHistories.id === objId) {",
													"                return objHistories;",
													"            }",
													"        }",
													"",
													"    }",
													"",
													"    return null;",
													"}",
													"",
													"function classifyResponseHistories(response) {",
													"    /** This list has structure:",
													"     [",
													"       {",
													"         id: objId,",
													"         histories: [",
													"           {",
													"             <item of response>",
													"           }",
													"         ]",
													"       }",
													"       ...",
													"     ]",
													"    */",
													"    let classifiedHistories = [];",
													"    response.forEach((item, index) => {",
													"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
													"        if (currentIndex !== -1) {",
													"            classifiedHistories[currentIndex].histories.push(item);",
													"        } else {",
													"            let object = {",
													"                id: item.linked_object.object_id,",
													"                histories: []",
													"            };",
													"",
													"            object.histories.push(item);",
													"            classifiedHistories.push(object);",
													"        }",
													"    });",
													"",
													"    return classifiedHistories;",
													"}",
													"",
													"function indexOfValueInList(value, list, propertyName) {",
													"    if (!list || !value || !propertyName) {",
													"        return -1;",
													"    }",
													"",
													"    for (let obj of list) {",
													"        if (value === obj[propertyName]) {",
													"            return list.indexOf(obj);",
													"        }",
													"    }",
													"",
													"    return -1;",
													"}",
													"",
													"function compareChange(responseChanges, change) {",
													"    responseChanges.forEach((resChange, index) => {",
													"        if (resChange.field === change.field) {",
													"            pm.test(`Item has changed ${change.field}`, () => {",
													"                switch (change.field) {",
													"                    case \"Assigned To\":",
													"                        pm.expect(change.new_value).to.include(resChange.new_value);",
													"                        break;",
													"                    default:",
													"                        pm.expect(resChange.new_value).to.include(change.new_value.trim());",
													"                }",
													"                ",
													"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
													"                pm.expect(resChange.old_value).to.include(change.old_value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3cc0c0ee-4907-442a-97ea-6696f196f42f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Fixed Build' = '{{newBuildId1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Query histories - Defect - Criteria Fixed Build value is build Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "664aa844-cd36-419e-8eaf-65f177b663ed",
												"type": "text/javascript",
												"exec": [
													"// Expected: response information of defect DF-1",
													"",
													"let expectedResponseCode = 400;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"   pm.test(\"Response data has property message contains: Please given an allowed value!\", () => {",
													"       pm.expect(jsonData.message).to.eql(`Value '${pm.environment.get(\"buildName\")}' is not allowed for field 'Fixed Release/Build'. Please given an allowed value!`);",
													"   });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "898c04c2-2acb-45cf-a358-23a5d7436b51",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'Fixed Build' = '{{buildName}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Query histories - Defect - Invalid defect id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "39159767-cc81-4b14-8e9c-d4e0d8025a89",
												"type": "text/javascript",
												"exec": [
													"let expectedResponseCode = 400;",
													"",
													"if (pm.response.code === expectedResponseCode) {",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"   pm.test(\"Response data has property message contains: For input string\", () => {",
													"       pm.expect(jsonData.message).to.eql(`For input string: \\\"${pm.environment.get(\"newDefectId1\")}${pm.environment.get(\"invalidPostfix\")}\\\"`);",
													"   });",
													"",
													"} else {",
													"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
													"        pm.response.to.have.status(expectedResponseCode);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "126d9fdf-5171-44a2-a462-0f22c76b0425",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"invalidPostfix\", \"abcd\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"object_type\": \"defects\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'id' = '{{newDefectId1}}{{invalidPostfix}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"histories"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "200 - Query histories - Success with page and pageSize",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fabbf1d0-88f3-43ff-b5d6-c0d2db688b02",
										"exec": [
											"let expectedResponseCode = 200;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData).to.have.property(\"links\")",
											"    });",
											"",
											"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(2);",
											"    });",
											"",
											"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(2);",
											"    });",
											"",
											"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(7);",
											"    });",
											"    ",
											"    pm.test(`Response data has ${jsonData.items.length} item(s)`, () => {",
											"        pm.expect(jsonData.items.length).to.eql(2);",
											"    });",
											"",
											"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
											"",
											"    let count = 1;",
											"    classifiedResponseItems.forEach((bundle) => {",
											"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
											"",
											"        bundle.histories.forEach((history, index) => {",
											"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
											"",
											"            pm.test(`Item at ${count} has correct data`, () => {",
											"                pm.expect(history).to.have.property(\"created\");",
											"                pm.expect(history).to.have.property(\"links\");",
											"                pm.expect(history).to.have.property(\"id\");",
											"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
											"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
											"                ",
											"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
											"                    compareChange(history.changes, change);",
											"                });",
											"            });",
											"            count++;",
											"        });",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}",
											"",
											"function getObjectHistories(objType, objId) {",
											"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
											"",
											"    if (objHistoriesList) {",
											"        for (let objHistories of objHistoriesList) {",
											"            if (objHistories.id === objId) {",
											"                return objHistories;",
											"            }",
											"        }",
											"",
											"    }",
											"",
											"    return null;",
											"}",
											"",
											"function classifyResponseHistories(response) {",
											"    /** This list has structure:",
											"     [",
											"       {",
											"         id: objId,",
											"         histories: [",
											"           {",
											"             <item of response>",
											"           }",
											"         ]",
											"       }",
											"       ...",
											"     ]",
											"    */",
											"    let classifiedHistories = [];",
											"    response.forEach((item, index) => {",
											"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
											"        if (currentIndex !== -1) {",
											"            classifiedHistories[currentIndex].histories.push(item);",
											"        } else {",
											"            let object = {",
											"                id: item.linked_object.object_id,",
											"                histories: []",
											"            };",
											"",
											"            object.histories.push(item);",
											"            classifiedHistories.push(object);",
											"        }",
											"    });",
											"",
											"    return classifiedHistories;",
											"}",
											"",
											"function indexOfValueInList(value, list, propertyName) {",
											"    if (!list || !value || !propertyName) {",
											"        return -1;",
											"    }",
											"",
											"    for (let obj of list) {",
											"        if (value === obj[propertyName]) {",
											"            return list.indexOf(obj);",
											"        }",
											"    }",
											"",
											"    return -1;",
											"}",
											"",
											"function compareChange(responseChanges, change) {",
											"    responseChanges.forEach((resChange, index) => {",
											"        if (resChange.field === change.field) {",
											"            pm.test(`Item has changed ${change.field}`, () => {",
											"                switch (change.field) {",
											"                    case \"Assigned To\":",
											"                        pm.expect(change.new_value).to.include(resChange.new_value);",
											"                        break;",
											"                    case \"Weight\":",
											"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
											"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
											"                        break;",
											"                    default:",
											"                        pm.expect(resChange.new_value).to.include(change.new_value);",
											"                }",
											"                ",
											"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
											"                pm.expect(resChange.old_value).to.include(change.old_value);",
											"            });",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "742fd368-2e73-48c0-bf27-cebf8bcc5a1b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"query_object\": \"'id' = '{{newTestRunId1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories?page=2&pageSize=2",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"histories"
									],
									"query": [
										{
											"key": "page",
											"value": "2"
										},
										{
											"key": "pageSize",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query histories - Param Page less than 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df6e352f-4386-465a-9d47-0d053c9b1325",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"   pm.test(\"Response data has message: \" + jsonData.message, () => {",
											"       pm.expect(jsonData.message).to.eql(\"Page size or page index must not be less than 1!\");",
											"   });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "546181ba-3c56-4afd-a10f-ade6bc452f03",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'name' ~ 'Test Run'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories?page=0&pageSize=2",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"histories"
									],
									"query": [
										{
											"key": "page",
											"value": "0"
										},
										{
											"key": "pageSize",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query histories - Param Page larger than 1000",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0eaeb693-628e-4f3b-8344-57d7c91d6858",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 200;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData).to.have.property(\"links\");",
											"    });",
											"",
											"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1200);",
											"    });",
											"",
											"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(2);",
											"    });",
											"",
											"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(7);",
											"    });",
											"",
											"    pm.test(`Response data has ${jsonData.items.length} item(s)`, () => {",
											"        pm.expect(jsonData.items.length).to.eql(0);",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2a25ccac-df67-4359-aa08-b2c9c828714b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'name' ~ 'Test Run'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories?page=1200&pageSize=2",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"histories"
									],
									"query": [
										{
											"key": "page",
											"value": "1200"
										},
										{
											"key": "pageSize",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query histories - Param Page Size less than 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cdf39100-9e5b-4789-a623-dd7a5b477842",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"   pm.test(\"Response data has message: \" + jsonData.message, () => {",
											"       pm.expect(jsonData.message).to.eql(\"Page size or page index must not be less than 1!\");",
											"   });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7c3bb7b4-6202-4d69-b01d-239356c54324",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'name' ~ 'Test Run'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories?page=1&pageSize=0",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"histories"
									],
									"query": [
										{
											"key": "page",
											"value": "1"
										},
										{
											"key": "pageSize",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query histories - Page has value larger than maximum pagination",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9bdaf4f0-db3d-4760-b96c-616b903ec5da",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 200;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData).to.have.property(\"links\");",
											"    });",
											"",
											"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(5);",
											"    });",
											"",
											"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(2);",
											"    });",
											"",
											"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(7);",
											"    });",
											"",
											"    pm.test(`Response data has ${jsonData.items.length} item(s)`, () => {",
											"        pm.expect(jsonData.items.length).to.eql(0);",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8bb6fbcc-e5e9-49ea-ab01-0a9c44b4c796",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'name' ~ 'Test Run'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories?page=5&pageSize=2",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"histories"
									],
									"query": [
										{
											"key": "page",
											"value": "5"
										},
										{
											"key": "pageSize",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query histories - Missing param Page",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4c8d630b-899c-453a-9cdb-adb3df13f319",
										"exec": [
											"let expectedResponseCode = 200;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData).to.have.property(\"links\");",
											"    });",
											"",
											"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1);",
											"    });",
											"",
											"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(2);",
											"    });",
											"",
											"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(7);",
											"    });",
											"    ",
											"    pm.test(`Response data has ${jsonData.items.length} item(s)`, () => {",
											"        pm.expect(jsonData.items.length).to.eql(2);",
											"    });",
											"",
											"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
											"",
											"    let count = 1;",
											"    classifiedResponseItems.forEach((bundle) => {",
											"        let objectHistories = getObjectHistories(\"testRun\", bundle.id);",
											"",
											"        bundle.histories.forEach((history, index) => {",
											"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
											"",
											"            pm.test(`Item at ${count} has correct data`, () => {",
											"                pm.expect(history).to.have.property(\"created\");",
											"                pm.expect(history).to.have.property(\"links\");",
											"                pm.expect(history).to.have.property(\"id\");",
											"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
											"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
											"                ",
											"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
											"                    compareChange(history.changes, change);",
											"                });",
											"            });",
											"            count++;",
											"        });",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}",
											"",
											"function getObjectHistories(objType, objId) {",
											"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
											"",
											"    if (objHistoriesList) {",
											"        for (let objHistories of objHistoriesList) {",
											"            if (objHistories.id === objId) {",
											"                return objHistories;",
											"            }",
											"        }",
											"",
											"    }",
											"",
											"    return null;",
											"}",
											"",
											"function classifyResponseHistories(response) {",
											"    /** This list has structure:",
											"     [",
											"       {",
											"         id: objId,",
											"         histories: [",
											"           {",
											"             <item of response>",
											"           }",
											"         ]",
											"       }",
											"       ...",
											"     ]",
											"    */",
											"    let classifiedHistories = [];",
											"    response.forEach((item, index) => {",
											"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
											"        if (currentIndex !== -1) {",
											"            classifiedHistories[currentIndex].histories.push(item);",
											"        } else {",
											"            let object = {",
											"                id: item.linked_object.object_id,",
											"                histories: []",
											"            };",
											"",
											"            object.histories.push(item);",
											"            classifiedHistories.push(object);",
											"        }",
											"    });",
											"",
											"    return classifiedHistories;",
											"}",
											"",
											"function indexOfValueInList(value, list, propertyName) {",
											"    if (!list || !value || !propertyName) {",
											"        return -1;",
											"    }",
											"",
											"    for (let obj of list) {",
											"        if (value === obj[propertyName]) {",
											"            return list.indexOf(obj);",
											"        }",
											"    }",
											"",
											"    return -1;",
											"}",
											"",
											"function compareChange(responseChanges, change) {",
											"    responseChanges.forEach((resChange, index) => {",
											"        if (resChange.field === change.field) {",
											"            pm.test(`Item has changed ${change.field}`, () => {",
											"                switch (change.field) {",
											"                    case \"Assigned To\":",
											"                        pm.expect(change.new_value).to.include(resChange.new_value);",
											"                        break;",
											"                    case \"Weight\":",
											"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
											"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
											"                        break;",
											"                    default:",
											"                        pm.expect(resChange.new_value).to.include(change.new_value);",
											"                }",
											"                ",
											"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
											"                pm.expect(resChange.old_value).to.include(change.old_value);",
											"            });",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c2f20440-b65f-4559-a8a7-545a15b47ae5",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"test-runs\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'name' ~ 'Test Run'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories?pageSize=2",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"histories"
									],
									"query": [
										{
											"key": "pageSize",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query histories - String value of query clause is mismatch uppercase and lowercase",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d12cd711-5433-4e81-9631-406ef23c167d",
										"exec": [
											"let expectedResponseCode = 200;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData).to.have.property(\"links\");",
											"    });",
											"",
											"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1);",
											"    });",
											"",
											"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(100);",
											"    });",
											"",
											"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(4);",
											"    });",
											"",
											"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
											"",
											"    let count = 1;",
											"    classifiedResponseItems.forEach((bundle) => {",
											"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
											"",
											"        bundle.histories.forEach((history, index) => {",
											"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
											"",
											"            pm.test(`Item at ${count} has correct data`, () => {",
											"                pm.expect(history).to.have.property(\"created\");",
											"                pm.expect(history).to.have.property(\"links\");",
											"                pm.expect(history).to.have.property(\"id\");",
											"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
											"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
											"                ",
											"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
											"                    compareChange(history.changes, change);",
											"                });",
											"            });",
											"            count++;",
											"        });",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}",
											"",
											"function getObjectHistories(objType, objId) {",
											"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
											"",
											"    if (objHistoriesList) {",
											"        for (let objHistories of objHistoriesList) {",
											"            if (objHistories.id === objId) {",
											"                return objHistories;",
											"            }",
											"        }",
											"",
											"    }",
											"",
											"    return null;",
											"}",
											"",
											"function classifyResponseHistories(response) {",
											"    /** This list has structure:",
											"     [",
											"       {",
											"         id: objId,",
											"         histories: [",
											"           {",
											"             <item of response>",
											"           }",
											"         ]",
											"       }",
											"       ...",
											"     ]",
											"    */",
											"    let classifiedHistories = [];",
											"    response.forEach((item, index) => {",
											"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
											"        if (currentIndex !== -1) {",
											"            classifiedHistories[currentIndex].histories.push(item);",
											"        } else {",
											"            let object = {",
											"                id: item.linked_object.object_id,",
											"                histories: []",
											"            };",
											"",
											"            object.histories.push(item);",
											"            classifiedHistories.push(object);",
											"        }",
											"    });",
											"",
											"    return classifiedHistories;",
											"}",
											"",
											"function indexOfValueInList(value, list, propertyName) {",
											"    if (!list || !value || !propertyName) {",
											"        return -1;",
											"    }",
											"",
											"    for (let obj of list) {",
											"        if (value === obj[propertyName]) {",
											"            return list.indexOf(obj);",
											"        }",
											"    }",
											"",
											"    return -1;",
											"}",
											"",
											"function compareChange(responseChanges, change) {",
											"    responseChanges.forEach((resChange, index) => {",
											"        if (resChange.field === change.field) {",
											"            pm.test(`Item has changed ${change.field}`, () => {",
											"                switch (change.field) {",
											"                    case \"Assigned To\":",
											"                        pm.expect(change.new_value).to.include(resChange.new_value);",
											"                        break;",
											"                    case \"Weight\":",
											"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
											"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
											"                        break;",
											"                    default:",
											"                        pm.expect(resChange.new_value).to.include(change.new_value);",
											"                }",
											"                ",
											"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
											"                pm.expect(resChange.old_value).to.include(change.old_value);",
											"            });",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ed98e545-4ad3-4d94-afed-4c5a7293da00",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'name' ~ 'reQuIreMeNT'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"histories"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query histories - Success with fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d67d3697-8cc2-45cf-bf29-6207d61914de",
										"exec": [
											"let expectedResponseCode = 200;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData).to.have.property(\"links\");",
											"    });",
											"",
											"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1);",
											"    });",
											"",
											"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(100);",
											"    });",
											"",
											"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(3);",
											"    });",
											"",
											"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
											"",
											"    let count = 1;",
											"    classifiedResponseItems.forEach((bundle) => {",
											"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
											"",
											"        bundle.histories.forEach((history, index) => {",
											"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
											"",
											"            pm.test(`Item at ${count} has correct data`, () => {",
											"",
											"                pm.expect(history).to.have.property(\"id\");",
											"",
											"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
											"                ",
											"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
											"                    compareChange(history.changes, change);",
											"                });",
											"            });",
											"            count++;",
											"        });",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}",
											"",
											"function getObjectHistories(objType, objId) {",
											"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
											"",
											"    if (objHistoriesList) {",
											"        for (let objHistories of objHistoriesList) {",
											"            if (objHistories.id === objId) {",
											"                return objHistories;",
											"            }",
											"        }",
											"",
											"    }",
											"",
											"    return null;",
											"}",
											"",
											"function classifyResponseHistories(response) {",
											"    /** This list has structure:",
											"     [",
											"       {",
											"         id: objId,",
											"         histories: [",
											"           {",
											"             <item of response>",
											"           }",
											"         ]",
											"       }",
											"       ...",
											"     ]",
											"    */",
											"    let classifiedHistories = [];",
											"    response.forEach((item, index) => {",
											"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
											"        if (currentIndex !== -1) {",
											"            classifiedHistories[currentIndex].histories.push(item);",
											"        } else {",
											"            let object = {",
											"                id: item.linked_object.object_id,",
											"                histories: []",
											"            };",
											"",
											"            object.histories.push(item);",
											"            classifiedHistories.push(object);",
											"        }",
											"    });",
											"",
											"    return classifiedHistories;",
											"}",
											"",
											"function indexOfValueInList(value, list, propertyName) {",
											"    if (!list || !value || !propertyName) {",
											"        return -1;",
											"    }",
											"",
											"    for (let obj of list) {",
											"        if (value === obj[propertyName]) {",
											"            return list.indexOf(obj);",
											"        }",
											"    }",
											"",
											"    return -1;",
											"}",
											"",
											"function compareChange(responseChanges, change) {",
											"    responseChanges.forEach((resChange, index) => {",
											"        if (resChange.field === change.field) {",
											"            pm.test(`Item has changed ${change.field}`, () => {",
											"                switch (change.field) {",
											"                    case \"Assigned To\":",
											"                        pm.expect(change.new_value).to.include(resChange.new_value);",
											"                        break;",
											"                    case \"Weight\":",
											"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
											"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
											"                        break;",
											"                    default:",
											"                        pm.expect(resChange.new_value).to.include(change.new_value);",
											"                }",
											"                ",
											"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
											"                pm.expect(resChange.old_value).to.include(change.old_value);",
											"            });",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "12deeaee-56df-4bf0-b4bc-6cc08ee22a9b",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"id\", \"linked_object\", \"changes\"],\n  \"object_query\": \"'id' = '{{newReqId1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"histories"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query histories - Fields is not an array",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0d677e3f-5f83-4028-8559-00c6b819cf4d",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"   pm.test(\"Response data has property message contains: Cannot deserialize instance of `java.util.HashSet<java.lang.Object>` out of START_OBJECT\", () => {",
											"       pm.expect(jsonData.message).to.include(\"Cannot deserialize\");",
											"   });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2a11559c-10f3-4c10-a508-d86031ac8b92",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": {},\n  \"object_query\": \"'id' = '{{newReqId1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"histories"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query histories - Invalid object type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ee0e6c87-db95-426e-8b78-ee3a1bd7872a",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"   pm.test(\"Response data has property message contains: Unsupported object type\", () => {",
											"       pm.expect(jsonData.message).to.eql(`Unsupported object type requirements${pm.environment.get(\"invalidPostfix\")}`);",
											"   });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ec68a88e-9d65-438d-b227-4e399075a8f1",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"invalidPostfix\", \"abcd\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements{{invalidPostfix}}\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'id' = '{{newReqId1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"histories"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query histories - Missing object type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cdb8a632-230c-403d-a19d-90beded93f44",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"   pm.test(\"Response data has message: \" + jsonData.message, () => {",
											"       pm.expect(jsonData.message).to.eql(\"Unsupported object type null\");",
											"   });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "14aa6c76-fe98-45c5-9647-942de771fdce",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\n  \"fields\": [\"*\"],\n  \"object_query\": \"'id' = '{{newReqId1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"histories"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query histories - Blank object type",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a59bc44f-ab1d-44ba-9dbb-4f5e115e2fd6",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"   pm.test(\"Response data has message: \" + jsonData.message, () => {",
											"       pm.expect(jsonData.message).to.eql(\"Unsupported object type \");",
											"   });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "de97dce3-e067-4f9e-be2f-e253ae996684",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'id' = '{{newReqId1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"histories"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query histories - Missing property fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "76c574e5-1467-41f6-98dc-fc31e9f501f4",
										"exec": [
											"let expectedResponseCode = 200;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData).to.have.property(\"links\");",
											"    });",
											"",
											"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1);",
											"    });",
											"",
											"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(100);",
											"    });",
											"",
											"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(3);",
											"    });",
											"",
											"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
											"",
											"    let count = 1;",
											"    classifiedResponseItems.forEach((bundle) => {",
											"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
											"",
											"        bundle.histories.forEach((history, index) => {",
											"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
											"",
											"            pm.test(`Item at ${count} has correct data`, () => {",
											"                pm.expect(history).to.have.property(\"created\");",
											"                pm.expect(history).to.have.property(\"links\");",
											"                pm.expect(history).to.have.property(\"id\");",
											"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
											"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
											"                ",
											"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
											"                    compareChange(history.changes, change);",
											"                });",
											"            });",
											"            count++;",
											"        });",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}",
											"",
											"function getObjectHistories(objType, objId) {",
											"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
											"",
											"    if (objHistoriesList) {",
											"        for (let objHistories of objHistoriesList) {",
											"            if (objHistories.id === objId) {",
											"                return objHistories;",
											"            }",
											"        }",
											"",
											"    }",
											"",
											"    return null;",
											"}",
											"",
											"function classifyResponseHistories(response) {",
											"    /** This list has structure:",
											"     [",
											"       {",
											"         id: objId,",
											"         histories: [",
											"           {",
											"             <item of response>",
											"           }",
											"         ]",
											"       }",
											"       ...",
											"     ]",
											"    */",
											"    let classifiedHistories = [];",
											"    response.forEach((item, index) => {",
											"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
											"        if (currentIndex !== -1) {",
											"            classifiedHistories[currentIndex].histories.push(item);",
											"        } else {",
											"            let object = {",
											"                id: item.linked_object.object_id,",
											"                histories: []",
											"            };",
											"",
											"            object.histories.push(item);",
											"            classifiedHistories.push(object);",
											"        }",
											"    });",
											"",
											"    return classifiedHistories;",
											"}",
											"",
											"function indexOfValueInList(value, list, propertyName) {",
											"    if (!list || !value || !propertyName) {",
											"        return -1;",
											"    }",
											"",
											"    for (let obj of list) {",
											"        if (value === obj[propertyName]) {",
											"            return list.indexOf(obj);",
											"        }",
											"    }",
											"",
											"    return -1;",
											"}",
											"",
											"function compareChange(responseChanges, change) {",
											"    responseChanges.forEach((resChange, index) => {",
											"        if (resChange.field === change.field) {",
											"            pm.test(`Item has changed ${change.field}`, () => {",
											"                switch (change.field) {",
											"                    case \"Assigned To\":",
											"                        pm.expect(change.new_value).to.include(resChange.new_value);",
											"                        break;",
											"                    case \"Weight\":",
											"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
											"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
											"                        break;",
											"                    default:",
											"                        pm.expect(resChange.new_value).to.include(change.new_value);",
											"                }",
											"                ",
											"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
											"                pm.expect(resChange.old_value).to.include(change.old_value);",
											"            });",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "40a99bfa-033d-4208-bba4-9547935c1d38",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements\",\n\n  \"object_query\": \"'id' = '{{newReqId1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"histories"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query histories - Invalid value in property fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7278ddb-0d27-4cf6-b627-f3d207c0c9cf",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 200;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData).to.have.property(\"links\");",
											"    });",
											"",
											"    pm.test(\"Response data contains property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1);",
											"    });",
											"",
											"    pm.test(\"Response data contains property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(100);",
											"    });",
											"",
											"    pm.test(\"Response data contains property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(3);",
											"    });",
											"",
											"    pm.test(`Response data has ${jsonData.items.length} item(s)`, () => {",
											"        pm.expect(jsonData.items.length).to.eql(3);",
											"    });",
											"",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "29d190eb-d412-4b09-8a28-5bee541f03b3",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"abcd\"],\n  \"object_query\": \"'id' = '{{newReqId1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"histories"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query histories - Missing property query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4f3d21f0-d594-459c-b46d-e556c1a90836",
										"exec": [
											"let expectedResponseCode = 200;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData).to.have.property(\"links\");",
											"    });",
											"",
											"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1);",
											"    });",
											"",
											"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(100);",
											"    });",
											"",
											"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(4);",
											"    });",
											"",
											"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
											"",
											"    let count = 1;",
											"    classifiedResponseItems.forEach((bundle) => {",
											"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
											"",
											"        bundle.histories.forEach((history, index) => {",
											"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
											"",
											"            pm.test(`Item at ${count} has correct data`, () => {",
											"                pm.expect(history).to.have.property(\"created\");",
											"                pm.expect(history).to.have.property(\"links\");",
											"                pm.expect(history).to.have.property(\"id\");",
											"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
											"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
											"                ",
											"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
											"                    compareChange(history.changes, change);",
											"                });",
											"            });",
											"            count++;",
											"        });",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}",
											"",
											"function getObjectHistories(objType, objId) {",
											"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
											"",
											"    if (objHistoriesList) {",
											"        for (let objHistories of objHistoriesList) {",
											"            if (objHistories.id === objId) {",
											"                return objHistories;",
											"            }",
											"        }",
											"",
											"    }",
											"",
											"    return null;",
											"}",
											"",
											"function classifyResponseHistories(response) {",
											"    /** This list has structure:",
											"     [",
											"       {",
											"         id: objId,",
											"         histories: [",
											"           {",
											"             <item of response>",
											"           }",
											"         ]",
											"       }",
											"       ...",
											"     ]",
											"    */",
											"    let classifiedHistories = [];",
											"    response.forEach((item, index) => {",
											"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
											"        if (currentIndex !== -1) {",
											"            classifiedHistories[currentIndex].histories.push(item);",
											"        } else {",
											"            let object = {",
											"                id: item.linked_object.object_id,",
											"                histories: []",
											"            };",
											"",
											"            object.histories.push(item);",
											"            classifiedHistories.push(object);",
											"        }",
											"    });",
											"",
											"    return classifiedHistories;",
											"}",
											"",
											"function indexOfValueInList(value, list, propertyName) {",
											"    if (!list || !value || !propertyName) {",
											"        return -1;",
											"    }",
											"",
											"    for (let obj of list) {",
											"        if (value === obj[propertyName]) {",
											"            return list.indexOf(obj);",
											"        }",
											"    }",
											"",
											"    return -1;",
											"}",
											"",
											"function compareChange(responseChanges, change) {",
											"    responseChanges.forEach((resChange, index) => {",
											"        if (resChange.field === change.field) {",
											"            pm.test(`Item has changed ${change.field}`, () => {",
											"                switch (change.field) {",
											"                    case \"Assigned To\":",
											"                        pm.expect(change.new_value).to.include(resChange.new_value);",
											"                        break;",
											"                    case \"Weight\":",
											"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
											"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
											"                        break;",
											"                    default:",
											"                        pm.expect(resChange.new_value).to.include(change.new_value);",
											"                }",
											"                ",
											"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
											"                pm.expect(resChange.old_value).to.include(change.old_value);",
											"            });",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a7fa7903-4ce8-4189-b3dd-d5aeefc23d31",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"histories"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query histories - Property query has empty value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ea1e7710-3322-4d95-b7fd-fc414329910b",
										"exec": [
											"let expectedResponseCode = 200;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData).to.have.property(\"links\");",
											"    });",
											"",
											"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1);",
											"    });",
											"",
											"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(100);",
											"    });",
											"",
											"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(4);",
											"    });",
											"",
											"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
											"",
											"    let count = 1;",
											"    classifiedResponseItems.forEach((bundle) => {",
											"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
											"",
											"        bundle.histories.forEach((history, index) => {",
											"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
											"",
											"            pm.test(`Item at ${count} has correct data`, () => {",
											"                pm.expect(history).to.have.property(\"created\");",
											"                pm.expect(history).to.have.property(\"links\");",
											"                pm.expect(history).to.have.property(\"id\");",
											"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
											"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
											"                ",
											"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
											"                    compareChange(history.changes, change);",
											"                });",
											"            });",
											"            count++;",
											"        });",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}",
											"",
											"function getObjectHistories(objType, objId) {",
											"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
											"",
											"    if (objHistoriesList) {",
											"        for (let objHistories of objHistoriesList) {",
											"            if (objHistories.id === objId) {",
											"                return objHistories;",
											"            }",
											"        }",
											"",
											"    }",
											"",
											"    return null;",
											"}",
											"",
											"function classifyResponseHistories(response) {",
											"    /** This list has structure:",
											"     [",
											"       {",
											"         id: objId,",
											"         histories: [",
											"           {",
											"             <item of response>",
											"           }",
											"         ]",
											"       }",
											"       ...",
											"     ]",
											"    */",
											"    let classifiedHistories = [];",
											"    response.forEach((item, index) => {",
											"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
											"        if (currentIndex !== -1) {",
											"            classifiedHistories[currentIndex].histories.push(item);",
											"        } else {",
											"            let object = {",
											"                id: item.linked_object.object_id,",
											"                histories: []",
											"            };",
											"",
											"            object.histories.push(item);",
											"            classifiedHistories.push(object);",
											"        }",
											"    });",
											"",
											"    return classifiedHistories;",
											"}",
											"",
											"function indexOfValueInList(value, list, propertyName) {",
											"    if (!list || !value || !propertyName) {",
											"        return -1;",
											"    }",
											"",
											"    for (let obj of list) {",
											"        if (value === obj[propertyName]) {",
											"            return list.indexOf(obj);",
											"        }",
											"    }",
											"",
											"    return -1;",
											"}",
											"",
											"function compareChange(responseChanges, change) {",
											"    responseChanges.forEach((resChange, index) => {",
											"        if (resChange.field === change.field) {",
											"            pm.test(`Item has changed ${change.field}`, () => {",
											"                switch (change.field) {",
											"                    case \"Assigned To\":",
											"                        pm.expect(change.new_value).to.include(resChange.new_value);",
											"                        break;",
											"                    case \"Weight\":",
											"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
											"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
											"                        break;",
											"                    default:",
											"                        pm.expect(resChange.new_value).to.include(change.new_value);",
											"                }",
											"                ",
											"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
											"                pm.expect(resChange.old_value).to.include(change.old_value);",
											"            });",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3d79f3b5-5670-4be5-bf45-4c18c4f19aba",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"histories"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query histories - Object query clause has no criteria",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b4fcb59c-d334-45f4-9c70-5f9d9fb17ad2",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"   pm.test(\"Response data has property message contains: Unsupported operator\", () => {",
											"       pm.expect(jsonData.message).to.eql(`Unsupported operator '${pm.environment.get(\"newReqId1\")}'`);",
											"   });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4efefd9d-edb0-455f-977f-8aa7987b3c1e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \" = '{{newReqId1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"histories"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query histories - Object query clause has no value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2bd71a1-5827-4fa9-90a8-8f351994ea4c",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"   pm.test(\"Response data has property message contains: Bad clause\", () => {",
											"       pm.expect(jsonData.message).to.eql(\"Bad clause: id = \");",
											"   });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9f4d3ef5-feca-40d6-a7fd-d73f0553eef1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'id' = \",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"histories"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query histories - Unsupported criteria",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e85d5ad-bd3a-4852-acce-60aa593d1a9a",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"   pm.test(\"Response data has property message contains: Unsupported clause\", () => {",
											"       pm.expect(jsonData.message).to.eql(\"Unsupported clause: order = 2\");",
											"   });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "42b4a616-f4ec-44c2-926d-1d4f0681f3d5",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'order' = '2'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"histories"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query histories - Not allowed object query clause value",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "442e7318-30a2-45d1-a4af-0ee90be27a7d",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"    pm.test(\"Response data has property message contains 'is now allowed'\", () => {",
											"        pm.expect(jsonData.message).to.eql(\"Value 'abcd' is not allowed for field 'Priority'. Please given an allowed value!\");",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "366b9da6-a449-4957-97f9-e156877bc64b",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'priority' = 'abcd'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"histories"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query histories - Object query with criteria name missing closing single quote",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "44256695-ce64-4e56-a50d-2a6e98d09675",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"   pm.test(\"Response data has property message contains: Bad clause\", () => {",
											"       pm.expect(jsonData.message).to.eql(`Bad clause: id = ${pm.environment.get(\"newReqId1\")}`);",
											"   });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0fbbc505-6108-43fd-860b-49512c043a6c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'id = '{{newReqId1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"histories"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query histories - Object query with criteria name missing opening single quote",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce43f1c8-112e-4b97-9d85-fcc20e0099d4",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"   pm.test(\"Response data has property message contains: Bad clause\", () => {",
											"       pm.expect(jsonData.message).to.eql(`Bad clause: id' = '${pm.environment.get(\"newReqId1\")}'`);",
											"   });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9cb495e1-b49e-44c9-940d-3052df96fa07",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"id' = '{{newReqId1}}'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"histories"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query histories - Invalid date time format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d04bb210-ca6a-4c8e-a98c-45c2d09c9024",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"   pm.test(\"Response data has property message contains: Could not parse date time.\", () => {",
											"       pm.expect(jsonData.message).to.eql(\"Could not parse date time. Please use one of the following format: yyyy-MM-dd'T'HH:mm:ss.SSSZ, yyyy-MM-dd'T'HH:mm:ssZZ\");",
											"   });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "4137f460-41a0-49cf-a43b-e755cbc07dce",
										"type": "text/javascript",
										"exec": [
											"var today = new Date();",
											"pm.environment.set(\"dateToCompare\", today.toISOString());"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'last modified date' < '{{dateToCompare}}abcd'\",\n  \"query\": \"'author' = '{{userTestId}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"histories"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query histories - Body has no property Query",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "00b3cbe2-d6c9-4d0f-9270-0c0dabd14bea",
										"exec": [
											"let expectedResponseCode = 200;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData).to.have.property(\"links\");",
											"    });",
											"",
											"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1);",
											"    });",
											"",
											"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(100);",
											"    });",
											"",
											"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(3);",
											"    });",
											"",
											"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
											"",
											"    let count = 1;",
											"    classifiedResponseItems.forEach((bundle) => {",
											"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
											"",
											"        bundle.histories.forEach((history, index) => {",
											"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
											"",
											"            pm.test(`Item at ${count} has correct data`, () => {",
											"                pm.expect(history).to.have.property(\"created\");",
											"                pm.expect(history).to.have.property(\"links\");",
											"                pm.expect(history).to.have.property(\"id\");",
											"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
											"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
											"                ",
											"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
											"                    compareChange(history.changes, change);",
											"                });",
											"            });",
											"            count++;",
											"        });",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}",
											"",
											"function getObjectHistories(objType, objId) {",
											"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
											"",
											"    if (objHistoriesList) {",
											"        for (let objHistories of objHistoriesList) {",
											"            if (objHistories.id === objId) {",
											"                return objHistories;",
											"            }",
											"        }",
											"",
											"    }",
											"",
											"    return null;",
											"}",
											"",
											"function classifyResponseHistories(response) {",
											"    /** This list has structure:",
											"     [",
											"       {",
											"         id: objId,",
											"         histories: [",
											"           {",
											"             <item of response>",
											"           }",
											"         ]",
											"       }",
											"       ...",
											"     ]",
											"    */",
											"    let classifiedHistories = [];",
											"    response.forEach((item, index) => {",
											"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
											"        if (currentIndex !== -1) {",
											"            classifiedHistories[currentIndex].histories.push(item);",
											"        } else {",
											"            let object = {",
											"                id: item.linked_object.object_id,",
											"                histories: []",
											"            };",
											"",
											"            object.histories.push(item);",
											"            classifiedHistories.push(object);",
											"        }",
											"    });",
											"",
											"    return classifiedHistories;",
											"}",
											"",
											"function indexOfValueInList(value, list, propertyName) {",
											"    if (!list || !value || !propertyName) {",
											"        return -1;",
											"    }",
											"",
											"    for (let obj of list) {",
											"        if (value === obj[propertyName]) {",
											"            return list.indexOf(obj);",
											"        }",
											"    }",
											"",
											"    return -1;",
											"}",
											"",
											"function compareChange(responseChanges, change) {",
											"    responseChanges.forEach((resChange, index) => {",
											"        if (resChange.field === change.field) {",
											"            pm.test(`Item has changed ${change.field}`, () => {",
											"                switch (change.field) {",
											"                    case \"Assigned To\":",
											"                        pm.expect(change.new_value).to.include(resChange.new_value);",
											"                        break;",
											"                    case \"Weight\":",
											"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
											"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
											"                        break;",
											"                    default:",
											"                        pm.expect(resChange.new_value).to.include(change.new_value);",
											"                }",
											"                ",
											"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
											"                pm.expect(resChange.old_value).to.include(change.old_value);",
											"            });",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "95ac0e9f-4f67-410f-8e45-3c6b1bbbe626",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'id' = '{{newReqId1}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"histories"
									]
								}
							},
							"response": []
						},
						{
							"name": "400 - Query histories - Query with criteria author by user Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06eafd48-00d3-42be-b494-3b7cf65476b5",
										"type": "text/javascript",
										"exec": [
											"let expectedResponseCode = 400;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"   pm.test(\"Response data has property message contains: For input string\", () => {",
											"       pm.expect(jsonData.message).to.eql(`For input string: \\\"${pm.environment.get(\"userTestFullName\")}\\\"`);",
											"   });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "767ad10a-baaf-413f-a142-139081c77df6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'id' = '{{newReqId1}}'\",\n  \"query\": \"'author' = '{{userTestFullName}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"histories"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query histories - Success with property Query by criteria created",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2593efc-88a1-4659-a573-96b6933d1522",
										"exec": [
											"let expectedResponseCode = 200;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData).to.have.property(\"links\");",
											"    });",
											"",
											"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1);",
											"    });",
											"",
											"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(100);",
											"    });",
											"",
											"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(3);",
											"    });",
											"",
											"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
											"",
											"    let count = 1;",
											"    classifiedResponseItems.forEach((bundle) => {",
											"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
											"",
											"        bundle.histories.forEach((history, index) => {",
											"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
											"",
											"            pm.test(`Item at ${count} has correct data`, () => {",
											"                pm.expect(history).to.have.property(\"created\");",
											"                pm.expect(history).to.have.property(\"links\");",
											"                pm.expect(history).to.have.property(\"id\");",
											"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
											"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
											"                ",
											"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
											"                    compareChange(history.changes, change);",
											"                });",
											"            });",
											"            count++;",
											"        });",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}",
											"",
											"function getObjectHistories(objType, objId) {",
											"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
											"",
											"    if (objHistoriesList) {",
											"        for (let objHistories of objHistoriesList) {",
											"            if (objHistories.id === objId) {",
											"                return objHistories;",
											"            }",
											"        }",
											"",
											"    }",
											"",
											"    return null;",
											"}",
											"",
											"function classifyResponseHistories(response) {",
											"    /** This list has structure:",
											"     [",
											"       {",
											"         id: objId,",
											"         histories: [",
											"           {",
											"             <item of response>",
											"           }",
											"         ]",
											"       }",
											"       ...",
											"     ]",
											"    */",
											"    let classifiedHistories = [];",
											"    response.forEach((item, index) => {",
											"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
											"        if (currentIndex !== -1) {",
											"            classifiedHistories[currentIndex].histories.push(item);",
											"        } else {",
											"            let object = {",
											"                id: item.linked_object.object_id,",
											"                histories: []",
											"            };",
											"",
											"            object.histories.push(item);",
											"            classifiedHistories.push(object);",
											"        }",
											"    });",
											"",
											"    return classifiedHistories;",
											"}",
											"",
											"function indexOfValueInList(value, list, propertyName) {",
											"    if (!list || !value || !propertyName) {",
											"        return -1;",
											"    }",
											"",
											"    for (let obj of list) {",
											"        if (value === obj[propertyName]) {",
											"            return list.indexOf(obj);",
											"        }",
											"    }",
											"",
											"    return -1;",
											"}",
											"",
											"function compareChange(responseChanges, change) {",
											"    responseChanges.forEach((resChange, index) => {",
											"        if (resChange.field === change.field) {",
											"            pm.test(`Item has changed ${change.field}`, () => {",
											"                switch (change.field) {",
											"                    case \"Assigned To\":",
											"                        pm.expect(change.new_value).to.include(resChange.new_value);",
											"                        break;",
											"                    case \"Weight\":",
											"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
											"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
											"                        break;",
											"                    default:",
											"                        pm.expect(resChange.new_value).to.include(change.new_value);",
											"                }",
											"                ",
											"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
											"                pm.expect(resChange.old_value).to.include(change.old_value);",
											"            });",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e34d7218-d580-4254-bdcf-16e5a0dfad7d",
										"exec": [
											"var today = new Date();",
											"pm.environment.set(\"dateToCompare\", today.toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'id' = '{{newReqId1}}'\",\n  \"query\": \"'created' < '{{dateToCompare}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"histories"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query histories - Success with property Query by criteria created and author by operator AND",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b5e8ea5-81d1-4438-97be-caa9945bd597",
										"exec": [
											"let expectedResponseCode = 200;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData).to.have.property(\"links\");",
											"    });",
											"",
											"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1);",
											"    });",
											"",
											"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(100);",
											"    });",
											"",
											"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(3);",
											"    });",
											"",
											"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
											"",
											"    let count = 1;",
											"    classifiedResponseItems.forEach((bundle) => {",
											"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
											"",
											"        bundle.histories.forEach((history, index) => {",
											"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
											"",
											"            pm.test(`Item at ${count} has correct data`, () => {",
											"                pm.expect(history).to.have.property(\"created\");",
											"                pm.expect(history).to.have.property(\"links\");",
											"                pm.expect(history).to.have.property(\"id\");",
											"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
											"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
											"                ",
											"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
											"                    compareChange(history.changes, change);",
											"                });",
											"            });",
											"            count++;",
											"        });",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}",
											"",
											"function getObjectHistories(objType, objId) {",
											"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
											"",
											"    if (objHistoriesList) {",
											"        for (let objHistories of objHistoriesList) {",
											"            if (objHistories.id === objId) {",
											"                return objHistories;",
											"            }",
											"        }",
											"",
											"    }",
											"",
											"    return null;",
											"}",
											"",
											"function classifyResponseHistories(response) {",
											"    /** This list has structure:",
											"     [",
											"       {",
											"         id: objId,",
											"         histories: [",
											"           {",
											"             <item of response>",
											"           }",
											"         ]",
											"       }",
											"       ...",
											"     ]",
											"    */",
											"    let classifiedHistories = [];",
											"    response.forEach((item, index) => {",
											"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
											"        if (currentIndex !== -1) {",
											"            classifiedHistories[currentIndex].histories.push(item);",
											"        } else {",
											"            let object = {",
											"                id: item.linked_object.object_id,",
											"                histories: []",
											"            };",
											"",
											"            object.histories.push(item);",
											"            classifiedHistories.push(object);",
											"        }",
											"    });",
											"",
											"    return classifiedHistories;",
											"}",
											"",
											"function indexOfValueInList(value, list, propertyName) {",
											"    if (!list || !value || !propertyName) {",
											"        return -1;",
											"    }",
											"",
											"    for (let obj of list) {",
											"        if (value === obj[propertyName]) {",
											"            return list.indexOf(obj);",
											"        }",
											"    }",
											"",
											"    return -1;",
											"}",
											"",
											"function compareChange(responseChanges, change) {",
											"    responseChanges.forEach((resChange, index) => {",
											"        if (resChange.field === change.field) {",
											"            pm.test(`Item has changed ${change.field}`, () => {",
											"                switch (change.field) {",
											"                    case \"Assigned To\":",
											"                        pm.expect(change.new_value).to.include(resChange.new_value);",
											"                        break;",
											"                    case \"Weight\":",
											"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
											"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
											"                        break;",
											"                    default:",
											"                        pm.expect(resChange.new_value).to.include(change.new_value);",
											"                }",
											"                ",
											"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
											"                pm.expect(resChange.old_value).to.include(change.old_value);",
											"            });",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d53fc846-7333-4137-be50-b849b523beaa",
										"exec": [
											"var today = new Date();",
											"pm.environment.set(\"dateToCompare\", today.toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'id' = '{{newReqId1}}'\",\n  \"query\": \"'created' < '{{dateToCompare}}' and 'author' = '{{userTestId}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"histories"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Query histories - Success with property Query by criteria created and author by operator OR",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4bf267b7-0710-4e90-9b61-32153aa5fd57",
										"exec": [
											"let expectedResponseCode = 200;",
											"",
											"if (pm.response.code === expectedResponseCode) {",
											"",
											"    pm.test(\"Response status: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"",
											"    let jsonData = pm.response.json();",
											"",
											"    pm.test(\"Response data has property links\", () => {",
											"        pm.expect(jsonData).to.have.property(\"links\");",
											"    });",
											"",
											"    pm.test(\"Response data has property page: \" + jsonData.page, () => {",
											"        pm.expect(jsonData.page).to.eql(1);",
											"    });",
											"",
											"    pm.test(\"Response data has property page_size: \" + jsonData.page_size, () => {",
											"        pm.expect(jsonData.page_size).to.eql(100);",
											"    });",
											"",
											"    pm.test(\"Response data has property total: \" + jsonData.total, () => {",
											"        pm.expect(jsonData.total).to.eql(3);",
											"    });",
											"",
											"    let classifiedResponseItems = classifyResponseHistories(jsonData.items);",
											"",
											"    let count = 1;",
											"    classifiedResponseItems.forEach((bundle) => {",
											"        let objectHistories = getObjectHistories(\"requirement\", bundle.id);",
											"",
											"        bundle.histories.forEach((history, index) => {",
											"            let objHistoryInfo = objectHistories.histories[bundle.histories.length - index - 1];",
											"",
											"            pm.test(`Item at ${count} has correct data`, () => {",
											"                pm.expect(history).to.have.property(\"created\");",
											"                pm.expect(history).to.have.property(\"links\");",
											"                pm.expect(history).to.have.property(\"id\");",
											"                pm.expect(history.author_id).to.eql(pm.environment.get(\"userTestId\"));",
											"                pm.expect(history.linked_object.object_id).to.eql(objectHistories.id);",
											"                ",
											"                objHistoryInfo.changes.forEach((change, changeIndex) => {",
											"                    compareChange(history.changes, change);",
											"                });",
											"            });",
											"            count++;",
											"        });",
											"    });",
											"",
											"} else {",
											"    pm.test(`Response status: ${pm.response.code} \\n Response body: ${pm.response.text()}`, () => {",
											"        pm.response.to.have.status(expectedResponseCode);",
											"    });",
											"}",
											"",
											"function getObjectHistories(objType, objId) {",
											"    let objHistoriesList = pm.environment.get(`${objType}HistoriesList`);",
											"",
											"    if (objHistoriesList) {",
											"        for (let objHistories of objHistoriesList) {",
											"            if (objHistories.id === objId) {",
											"                return objHistories;",
											"            }",
											"        }",
											"",
											"    }",
											"",
											"    return null;",
											"}",
											"",
											"function classifyResponseHistories(response) {",
											"    /** This list has structure:",
											"     [",
											"       {",
											"         id: objId,",
											"         histories: [",
											"           {",
											"             <item of response>",
											"           }",
											"         ]",
											"       }",
											"       ...",
											"     ]",
											"    */",
											"    let classifiedHistories = [];",
											"    response.forEach((item, index) => {",
											"        let currentIndex = indexOfValueInList(item.linked_object.object_id, classifiedHistories, \"id\");",
											"        if (currentIndex !== -1) {",
											"            classifiedHistories[currentIndex].histories.push(item);",
											"        } else {",
											"            let object = {",
											"                id: item.linked_object.object_id,",
											"                histories: []",
											"            };",
											"",
											"            object.histories.push(item);",
											"            classifiedHistories.push(object);",
											"        }",
											"    });",
											"",
											"    return classifiedHistories;",
											"}",
											"",
											"function indexOfValueInList(value, list, propertyName) {",
											"    if (!list || !value || !propertyName) {",
											"        return -1;",
											"    }",
											"",
											"    for (let obj of list) {",
											"        if (value === obj[propertyName]) {",
											"            return list.indexOf(obj);",
											"        }",
											"    }",
											"",
											"    return -1;",
											"}",
											"",
											"function compareChange(responseChanges, change) {",
											"    responseChanges.forEach((resChange, index) => {",
											"        if (resChange.field === change.field) {",
											"            pm.test(`Item has changed ${change.field}`, () => {",
											"                switch (change.field) {",
											"                    case \"Assigned To\":",
											"                        pm.expect(change.new_value).to.include(resChange.new_value);",
											"                        break;",
											"                    case \"Weight\":",
											"                        // Note: on UI (weight value is 1), in response body data API (weight value is N/A), this was confirmed by Manual QA team.",
											"                        pm.expect(resChange.new_value).to.equal(\"N/A\");",
											"                        break;",
											"                    default:",
											"                        pm.expect(resChange.new_value).to.include(change.new_value);",
											"                }",
											"                ",
											"                change.old_value === \"\" ? pm.expect(resChange.old_value).to.eql(\"\") : ",
											"                pm.expect(resChange.old_value).to.include(change.old_value);",
											"            });",
											"        }",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "439ca3ad-77cd-47c9-b7ba-fda44a98a053",
										"exec": [
											"var today = new Date();",
											"pm.environment.set(\"dateToCompare\", today.toISOString());"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"object_type\": \"requirements\",\n  \"fields\": [\"*\"],\n  \"object_query\": \"'id' = '{{newReqId1}}'\",\n  \"query\": \"'created' < '{{dateToCompare}}' or 'author' = '{{userTestId}}'\"\n}"
								},
								"url": {
									"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/histories",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"api",
										"v3",
										"projects",
										"{{projectId}}",
										"histories"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Cleanup",
					"item": [
						{
							"name": "200 - Cleanup - Delete project",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e5ac3274-da96-48ed-937a-e85302126bf7",
										"exec": [
											"if (pm.response.code === 200) {",
											"    //get response body",
											"    var jsonData = pm.response.json();",
											"    ",
											"    pm.test(\"Response code: \" + pm.response.code, function(){",
											"        pm.response.to.have.status(200);",
											"    });",
											"    ",
											"    pm.test(\"Delete project success without any errors\", function(){",
											"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
											"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
											"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
											"    });",
											"    ",
											"} else {",
											"    //other mark failed",
											"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
											"        pm.response.to.have.status(200);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5a74a834-22a7-42a7-be31-7e3dba26505a",
										"exec": [
											"// generator csrf token\r",
											"var base64object = function(input) {\r",
											" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
											" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
											" return base64;\r",
											"};\r",
											"let uuid = require('uuid');\r",
											"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
											"pm.environment.set(\"csrfToken\", token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "{{qtestUserCookie}}"
									},
									{
										"key": "X-CSRF-Token",
										"value": "{{csrfToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "id",
											"value": "{{projectId}}",
											"type": "text"
										},
										{
											"key": "dojo.preventCache",
											"value": "{{csrfToken}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{qtestUrl}}/admin/proj/delete-project",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"admin",
										"proj",
										"delete-project"
									]
								}
							},
							"response": []
						},
						{
							"name": "200 - Cleanup - Logout",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "592be32e-54c7-45e2-b363-d30f10b56110",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "41dd93d9-d037-4ba9-a88a-4f8e485f0fd6",
										"exec": [
											"function unsetEnvVariables(varList) {",
											"    varList.forEach((item) => {",
											"        pm.environment.unset(item);",
											"    });",
											"}",
											"",
											"if (pm.response.code === 200) {",
											"",
											"    pm.test(\"Response code: \" + pm.response.code, () => {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    let varList = [",
											"        \"qtestUserCookie\", \"tokenType\", \"csrfToken\", \"accessToken\", \"projectStartDate\", \"projectEndDate\", \"projectName\", \"userList\", \"userTestFullName\", \"projectId\", \"userTestId\", \"userId\", \"username1\", \"firstName1\", \"lastName1\", \"email1\", \"startDate\", \"startDate1\", \"startDate2\", \"startDate3\", \"endDate\", \"endDate1\", \"endDate2\", \"endDate3\", \"notExistPostfix\", \"invalidPostfix\", \"dateToCompare\",",
											"        \"newModuleId1\", \"moduleInfo1\", \"newModuleName1\",",
											"        \"newReqId1\", \"newReqId2\", \"reqInfo1\", \"reqInfo2\", \"reqDescription\", \"reqName\", \"requirementHistoriesList\",",
											"        \"releaseName\", \"releaseDescription\", \"releaseNote\", \"newReleaseId1\", \"releaseInfo1\", \"newReleaseId2\", \"releaseInfo2\", \"releaseName1\", \"releaseName2\", \"releaseHistoriesList\",",
											"        \"newBuildId1\", \"buildInfo1\", \"buildDate\", \"buildNote\", \"buildName\",",
											"        \"newCycleId1\", \"cycleInfo1\", \"cycleName\", \"cycleDescription\", \"newCycleName1\",",
											"        \"newTestSuiteId1\", \"testSuiteInfo1\", \"suiteDescription1\", \"suiteName1\", \"newTestSuiteName1\", \"suiteDescription\", \"testSuiteHistoriesList\",",
											"        \"testCaseName1\", \"testCaseName2\", \"testCaseName3\", \"testCaseName4\", \"testCaseDescription1\", \"testCaseDescription2\", \"testCaseDescription3\", \"testCaseDescription4\", \"testCasePrecondition1\", \"testCasePrecondition2\", \"testCasePrecondition3\", \"testCasePrecondition4\", \"testStepDescription1\", \"testStepExpected1\", \"newTestCaseId1\", \"newTestCaseId2\", \"newTestCaseId3\", \"newTestCaseId4\", \"testCaseInfo1\", \"testCaseInfo2\", \"testCaseInfo3\", \"testCaseInfo4\", \"testCaseAutomationContent\", \"testCaseHistoriesList\",",
											"        \"newTestStepId1c1\", \"newTestStepLogId1r1\", \"testStepInfo1c1\", \"testStepLogInfo1r1\",",
											"        \"testRunName\", \"testRunName1\", \"testRunName2\", \"newTestRunId1\", \"newTestRunId2\", \"newTestRunId3\", \"newTestRunId4\", \"newTestRunId5\", \"newTestRunId6\", \"testRunInfo1\", \"testRunInfo2\", \"testRunInfo3\", \"testRunInfo4\", \"testRunInfo5\", \"testRunInfo6\", \"testRunHistoriesList\", \"testRunStatus1\", \"testRunHistoriesList\",",
											"        \"newTestLogId1\", \"testLogInfo1\", \"statusPassedId\", \"statusFailedId\", \"statusUnexecutedId\", \"statusBlockedId\", \"statusIncompleteId\", \"exeEndDate\", \"exeStartDate\",",
											"        \"newDefectId1\", \"newDefectId2\", \"defectInfo1\", \"defectInfo2\", \"defectDescription\", \"defectDescription2\", \"defectClosedDate\", \"defectTargetDate\", \"defectSummary\", \"defectSummary2\", \"defectHistoriesList\"",
											"    ];",
											"",
											"    let listToUnset = pm.environment.get(\"listToUnset\");",
											"    let variables = [...new Set([...varList, ...listToUnset])];",
											"    unsetEnvVariables(variables);",
											"    pm.environment.unset(\"accessToken1\");",
											"    pm.environment.unset(\"tokenType1\");",
											"    ",
											"    pm.environment.unset(\"username1\");",
											"    pm.environment.unset(\"firstName1\");",
											"    pm.environment.unset(\"lastName1\");",
											"    pm.environment.unset(\"email1\");",
											"    pm.environment.unset(\"listToUnset\");",
											"} else {",
											"    //other mark failed",
											"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), () => {",
											"        pm.response.to.have.status(200);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{tokenType}} {{accessToken}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{qtestUrl}}/oauth/revoke",
									"host": [
										"{{qtestUrl}}"
									],
									"path": [
										"oauth",
										"revoke"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "48e5c276-1300-4643-8938-210315dde52e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "48c399fa-8703-438d-9d50-81f9bfd0ec6f",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2f53c4cd-55f7-425a-a0bf-1b772fa7a91f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2a5f0bba-a321-409d-959b-b15428df0bac",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "389bc3e9-cfc5-4c8b-ac80-90740052706f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "a3c68de2-218c-4822-a4b4-006d86cb9e5a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}