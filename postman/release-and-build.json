{
	"info": {
		"_postman_id": "fb762086-0a6c-457a-b982-d3d5804a0653",
		"name": "Release & Build",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Release",
			"item": [
				{
					"name": "Create a release",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a6610f7a-37dd-40e7-acb8-263a69545560",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code + \" -  Login\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf99dee3-2dde-4a07-9698-12176df5e382",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.test(\"Response data contains all properties of project data\", function(){",
													"        pm.expect(pm.response.text()).to.include(\"id\");",
													"        pm.expect(jsonData.name).to.eql(\"qTest API - Postman\");",
													"        pm.expect(jsonData.description).to.eql(\"Description of qTest API - Postman\");",
													"        pm.expect(pm.response.text()).to.include(\"status_id\");",
													"        pm.expect(pm.response.text()).to.include(\"start_date\");",
													"        pm.expect(pm.response.text()).to.include(\"end_date\");",
													"        pm.expect(pm.response.text()).to.include(\"sample\");",
													"        pm.expect(pm.response.text()).to.include(\"defect_tracking_systems\");",
													"        pm.expect(pm.response.text()).to.include(\"x_explorer_access_level\");",
													"        pm.expect(pm.response.text()).to.include(\"date_format\");",
													"        pm.expect(jsonData.automation.toString()).to.eql(\"true\");",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate\", pm.environment.get(\"startDate\"));",
													"    pm.environment.set(\"projectEndDate\", pm.environment.get(\"endDate\"));",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "61f4c4ce-b693-4a57-b51c-1118e48602fb",
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\"\n  ],\n  \"automation\": true\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get release fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8a7f728c-b126-43fd-b5d2-6414d7d02d46",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdRelease\";",
													"    var jsonData = pm.response.json();",
													"",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/\\s/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                const fieldValueId = PREFIX + field.label + item.label.replace(/\\s/g, \"\");",
													"                pm.environment.set(fieldValueId, item.value);",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/releases/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"releases",
												"fields"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Create release - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "54394b1f-e646-4ec2-8155-9e3440098b06",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newReleaseId1\", jsonData.id);",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct release info\", function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"releaseName\"));",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.description).to.eql(pm.environment.get(\"releaseDescription\"));",
													"        pm.expect(jsonData.note).to.eql(pm.environment.get(\"releaseNote\"));",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has release status is 'In Progress'\", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReleaseStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data has release description '\" + field.field_value + \"'\", function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"releaseDescription\"));",
													"                });",
													"                break;",
													"",
													"            case \"Release Note\":",
													"                pm.test(\"Repsonse data has release note '\" + field.field_value + \"'\", function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"releaseNote\"));",
													"                });",
													"                break;",
													"",
													"            case \"Start Date\":",
													"                pm.test(\"Repsonse data has release start date\", function() {",
													"                    tmp = pm.environment.get(\"startDate\").split(\"T\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"End Date\":",
													"                pm.test(\"Repsonse data has release end date\", function() {",
													"                    tmp = pm.environment.get(\"endDate\").split(\"T\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "24a2492d-e123-41a8-8b67-9352032a1549",
												"exec": [
													"pm.environment.set(\"releaseName\", \"Release having full info\");",
													"pm.environment.set(\"startDate\", (new Date()).toISOString());",
													"pm.environment.set(\"endDate\", (new Date()).toISOString());",
													"pm.environment.set(\"releaseDescription\", \"Description of the release\");",
													"pm.environment.set(\"releaseNote\", \"Note of the release\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{releaseName}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"{{releaseDescription}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"{{releaseNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Create release - Success without status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb566bad-e0f5-41d8-aefc-8afe10fd3fb7",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newReleaseId3\", jsonData.id);",
													"",
													"    pm.test(\"Repsonse body has correct release info\", function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"releaseName\"));",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"    });",
													"",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse body has release status is Planned\", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Planned\");",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse body has release description\", function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"releaseDescription\"));",
													"                });",
													"                break;",
													"",
													"            case \"Release Note\":",
													"                pm.test(\"Repsonse body has release note\", function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"releaseNote\"));",
													"                });",
													"                break;",
													"",
													"            case \"Start Date\":",
													"                pm.test(\"Repsonse data has release start date\", function() {",
													"                    tmp = pm.environment.get(\"startDate\").split(\"T\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"End Date\":",
													"                pm.test(\"Repsonse data has release end date\", function() {",
													"                    tmp = pm.environment.get(\"endDate\").split(\"T\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8bbf7cb0-a964-475f-9ea3-3bb64606d07b",
												"exec": [
													"pm.environment.set(\"releaseName\", \"Release missing status\");",
													"pm.environment.set(\"startDate\", (new Date()).toISOString());",
													"pm.environment.set(\"endDate\", (new Date()).toISOString());",
													"pm.environment.set(\"releaseDescription\", \"Description of the release\");",
													"pm.environment.set(\"releaseNote\", \"Note of the release\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{releaseName}}\",\n    \"properties\": [\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"{{releaseDescription}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"{{releaseNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Create release - Success with only name property",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "71140b38-cfc4-4c1d-81e2-20449772c90f",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newReleaseId2\", jsonData.id);",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct release info\", function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"releaseName\"));",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"    });",
													"",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse body has release status is Planned\", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Planned\");",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse body has release description is empty\", function() {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"",
													"            case \"Release Note\":",
													"                pm.test(\"Repsonse body has release note is empty\", function() {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"                ",
													"                case \"Start Date\":",
													"                pm.test(\"Repsonse data has release start date\", function() {",
													"                    pm.expect(pm.response.text()).to.include(\"start_date\");",
													"                });",
													"                break;",
													"",
													"            case \"End Date\":",
													"                pm.test(\"Repsonse data has release end date\", function() {",
													"                    pm.expect(pm.response.text()).to.include(\"end_date\");",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "767d6cc0-e3de-489e-ab95-5e840dbb58a3",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"releaseName\", \"Release having name only\");",
													"pm.environment.set(\"startDate\", (new Date()).toISOString());",
													"pm.environment.set(\"endDate\", (new Date()).toISOString());",
													"pm.environment.set(\"releaseDescription\", \"Description of the release\");",
													"pm.environment.set(\"releaseNote\", \"Note of the release\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{releaseName}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Create release - Invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3812c94e-f636-4ea8-995a-deb721af980e",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 401) {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 401\", function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message value contains 'Invalid access token'\", function() {",
													"        pm.expect(jsonData.error_description).to.include(\"Invalid access token\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c3a67320-2ac7-4b8a-ac2c-7d5eee7e0fd5",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}000"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{releaseName}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"{{releaseDescription}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"{{releaseNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create release - Without name property",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7798b6dc-07ba-4ef7-88eb-f41aa6f920b0",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message value 'name size must be between 1 and 500' or 'name may not be empty'\", function() {",
													"        pm.expect(jsonData.message).to.not.eql(null);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "993711f0-7f13-4f52-9fc6-4e6f7f3a5da4",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"properties\": [\n      {\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"{{releaseDescription}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"{{releaseNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create release - Empty value of name property",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5aef414e-5202-4814-9ed9-4696bd3719df",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"    var jsonData = pm.response.json();",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message value 'name size must be between 1 and 500' or 'name may not be empty'\", function() {",
													"        pm.expect(jsonData.message).to.not.eql(null);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "df7aca67-dc78-44de-89ca-33ecb24d7c79",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"\",\n    \"properties\": [\n      {\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"{{releaseDescription}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"{{releaseNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create release - With name contains more than 500 chars",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac84d6bd-077d-44aa-9468-c83e1fad00a2",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"    var jsonData = pm.response.json();",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message value 'name size must be between 1 and 500' or 'name may not be empty'\", function() {",
													"        pm.expect(jsonData.message).to.not.eql(null);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "50e6bb79-4781-4750-bd5e-35624b2cca08",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI - The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI - The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI- The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI -The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI\",\n    \"properties\": [\n      {\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"{{releaseDescription}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"{{releaseNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create release - Invalid status field id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cc53e20f-68f1-4687-9974-bd9d24aa975a",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message\", function() {",
													"        pm.expect(jsonData.message).to.include(\"not a valid Long value\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c79ccf64-fe2d-41ee-8c23-5b3c3c773989",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Release name is updated\",\n    \"properties\": [\n      {\n            \"field_id\": \"32{{fieldIdReleaseStatus}}\",\n            \"field_value\": \"{{fieldIdReleaseStatusCompleted}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create release - Invalid status value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f232980e-7031-419e-bcd6-cb1d27fb768b",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'does not allowed for field Status'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"does not allowed for field Status\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0cdfd4c7-7192-4a75-8b33-d12407edb2e8",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Release name is updated\",\n    \"properties\": [\n      {\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"234{{fieldIdReleaseStatusCompleted}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create release - Invalid start date format",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dbe098a9-5978-4520-87d7-1f71da928c19",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'Invalid field value for field Start Date'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Invalid field value for field Start Date\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d6ad597b-1a5f-4a5a-bccd-5631348f3042",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Release name is updated\",\n    \"properties\": [\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"2018/05/01T17:32\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create release - With start date greater than end date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "830947a6-9cb7-43f5-917a-6bbe89b83843",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'End date must be after start date'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"End date must be after start date\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b1c41cc3-05e0-4c8b-8e47-93549b21adb4",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"releaseName\", \"Release having full info\");",
													"pm.environment.set(\"releaseDescription\", \"Description of the release\");",
													"pm.environment.set(\"releaseNote\", \"Note of the release\");",
													"",
													"var endDate = new Date();",
													"var startDate = new Date();",
													"startDate.setDate(startDate.getDate() + 14);",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{releaseName}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"{{releaseDescription}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"{{releaseNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create release - With start date less than project start date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "434d8308-5805-4ca4-b46d-50e7417d63a4",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'Start date must be after project's start date'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Start date must be after project's start date\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9506adfe-3ee6-4534-9953-cc17a9db1d83",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"releaseName\", \"Release having full info\");",
													"pm.environment.set(\"releaseDescription\", \"Description of the release\");",
													"pm.environment.set(\"releaseNote\", \"Note of the release\");",
													"",
													"var startDate = new Date(\"2016-09-24T00:00:00+07:00\");",
													"var endDate = new Date();",
													"endDate.setDate(new Date().getDate() + 14);",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{releaseName}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"{{releaseDescription}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"{{releaseNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create release - With end date greater than project end date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fe5751f-cb4e-4098-bbb3-e23f7052e55c",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'End date must be before project's end date'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"End date must be before project's end date\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7bd5f294-9c01-4e8c-8400-f47a3d09071b",
												"exec": [
													"pm.environment.set(\"releaseName\", \"Release having full info\");",
													"pm.environment.set(\"releaseDescription\", \"Description of the release\");",
													"pm.environment.set(\"releaseNote\", \"Note of the release\");",
													"",
													"var startDate = new Date();",
													"var endDate = new Date(pm.environment.get(\"projectEndDate\"));",
													"endDate.setDate(endDate.getDate() + 30);",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{releaseName}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"{{releaseDescription}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"{{releaseNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete release 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f37f461-4858-4d48-8f4f-31d3846a120b",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.environment.unset(\"newReleaseId1\");",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "46c0abb5-cdf3-4cb3-879e-2a81894b2714",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/{{newReleaseId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"{{newReleaseId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete release 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9f2071f4-7a76-4757-9b30-b63fa276385b",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.environment.unset(\"newReleaseId2\");",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "38693219-63b1-45ea-b6d5-b9a19fb43cf8",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/{{newReleaseId2}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"{{newReleaseId2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete release 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd6bd17e-0759-4488-a0eb-a9247ee453c5",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.environment.unset(\"newReleaseId3\");",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b040fab7-47d6-4be6-b0b3-66d577df6494",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/{{newReleaseId3}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"{{newReleaseId3}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e2b516c3-0a75-4ee4-8bb4-354b061952de",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"projectEndDate\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "46a53ff9-ab52-4269-af3f-2f743687fbf5",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "244c7262-cadd-46aa-994f-be748e38128b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2ff6d283-b52a-4cf7-a538-2682110ee536",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"releaseName\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"    pm.environment.unset(\"releaseDescription\");",
													"    pm.environment.unset(\"releaseNote\");",
													"    pm.environment.unset(\"fieldIdReleaseStatus\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusPlanned\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusCompleted\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusClosed\");",
													"    pm.environment.unset(\"fieldIdReleaseStartDate\");",
													"    pm.environment.unset(\"fieldIdReleaseEndDate\");",
													"    pm.environment.unset(\"fieldIdReleaseDescription\");",
													"    pm.environment.unset(\"fieldIdReleaseReleaseNote\");",
													"    pm.environment.unset(\"fieldIdReleaseDescription\");",
													"    pm.environment.unset(\"fieldIdReleaseReleaseNote\");",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"tokenType\");",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "45c749d4-0357-4c20-a804-b22cd07e9e17",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3c29afbc-b091-4034-9bad-07caa47a5f03",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get a release",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login successfully",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4104ac62-05c4-4320-ad6a-5ebdce21c5bd",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code + \" -  Login\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"    ",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f4e9128-9b9e-4536-8e55-17919d943123",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.test(\"Response data contains all properties of project data\", function(){",
													"        pm.expect(pm.response.text()).to.include(\"id\");",
													"        pm.expect(jsonData.name).to.eql(\"qTest API - Postman\");",
													"        pm.expect(jsonData.description).to.eql(\"Description of qTest API - Postman\");",
													"        pm.expect(pm.response.text()).to.include(\"status_id\");",
													"        pm.expect(pm.response.text()).to.include(\"start_date\");",
													"        pm.expect(pm.response.text()).to.include(\"end_date\");",
													"        pm.expect(pm.response.text()).to.include(\"sample\");",
													"        pm.expect(pm.response.text()).to.include(\"defect_tracking_systems\");",
													"        pm.expect(pm.response.text()).to.include(\"x_explorer_access_level\");",
													"        pm.expect(pm.response.text()).to.include(\"date_format\");",
													"        pm.expect(jsonData.automation.toString()).to.eql(\"true\");",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fac4a4a8-a1af-446c-80e4-255a6fdf4ca4",
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\"\n  ],\n  \"automation\": true\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get release fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed3f1661-3cfc-4698-840e-96d3f41fbd3b",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdRelease\";",
													"    var jsonData = pm.response.json();",
													"",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/\\s/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                const fieldValueId = PREFIX + field.label + item.label.replace(/\\s/g, \"\");",
													"                pm.environment.set(fieldValueId, item.value);",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/releases/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"releases",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create new release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5aecca1e-4479-4693-ae64-1f5d3cce9125",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newReleaseId\", jsonData.id);",
													"    pm.environment.set(\"newReleasePid\", jsonData.pid);",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e898daad-f104-4306-aaa9-3cc0b59ee386",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"releaseName\", \"Release 1\");",
													"pm.environment.set(\"startDate\", (new Date()).toISOString());",
													"pm.environment.set(\"endDate\", (new Date()).toISOString());",
													"pm.environment.set(\"releaseDescription\", \"Description of the release\");",
													"pm.environment.set(\"releaseNote\", \"Note of the release\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{releaseName}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"{{releaseDescription}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"{{releaseNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Get release - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab85cc63-da9b-4eba-86fb-76ca797a6b7d",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data contains release id \", function() {",
													"        pm.expect(pm.response.text()).to.include(pm.environment.get(\"newReleaseId\"));",
													"    });",
													"",
													"    pm.test(\"Response data contains release name '\" + jsonData.name + \"'\", function() {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"releaseName\"));",
													"    });",
													"",
													"    pm.test(\"Response data has property release pid\", function() {",
													"        pm.expect(jsonData.pid).to.eql(pm.environment.get(\"newReleasePid\"));",
													"    });",
													"",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has release status is 'In Progress'\", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                });",
													"                break;",
													"",
													"            case \"Description\":",
													"                pm.test(\"Repsonse data has release description '\" + field.field_value + \"'\", function() {",
													"                    pm.expect(field.field_value).to.eql(field.field_value);",
													"                });",
													"                break;",
													"",
													"            case \"Release Note\":",
													"                pm.test(\"Repsonse data has release note '\" + field.field_value + \"'\", function() {",
													"                    pm.expect(field.field_value).to.eql(field.field_value);",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fdb15433-16e2-4575-87b5-19916294800f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/{{newReleaseId}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"{{newReleaseId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Get release - Not exist projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8b47a491-1cda-4c15-aa1a-e7a559512d9d",
												"exec": [
													"const RESPONSE_CODE = 404;",
													"const EXPECTED_MSG = 'Project not found';",
													"const result = pm.response.code === RESPONSE_CODE;",
													"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    const jsonData = pm.response.json();",
													"    pm.test(`Response body has 'message' property value '${EXPECTED_MSG}'`, () => {",
													"        pm.expect(jsonData.message).to.contains(EXPECTED_MSG);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "178848d6-365d-4a48-b246-10bccaa0d4b6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}1111/releases/{{newReleaseId}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}1111",
												"releases",
												"{{newReleaseId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get release - Invalid projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8cd12667-932c-486e-8d09-713ee69a158b",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message 'For input string'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"For input string\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6b9380b9-38b2-4d42-90d6-d73d19ee9c39",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/ae121323232323{{projectId}}223234234324/releases/{{newReleaseId}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"ae121323232323{{projectId}}223234234324",
												"releases",
												"{{newReleaseId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Get release - Not exist releaseId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3e7c011-1fdf-4a41-af03-d35e9968d1be",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message 'Release does not exist!'\", function() {",
													"        pm.expect(jsonData.message).to.eql(\"Release does not exist!\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "284a8b99-88c2-4732-a40c-054057c765b1",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/0",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"0"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get release - Invalid release Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "567e44d3-7ffc-4c3c-ab5a-77c36ca7d03d",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message 'Failed to convert value of type'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Failed to convert value of type\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fecc6fb0-0d60-4b63-9788-4e9f4a64850c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/a{{newReleaseId}}20",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"a{{newReleaseId}}20"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Get release - Invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0bc59a0c-7a5b-4f05-9f02-f2b50b2aae2d",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 401) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 401\", function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has error 'Invalid access token'\", function() {",
													"        pm.expect(jsonData.error_description).to.include(\"Invalid access token\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "be855831-27b3-4865-b5d0-123f783adc5d",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}223"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/{{newReleaseId}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"{{newReleaseId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d758e32-6579-4d32-8f15-6765a9683490",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.environment.unset(\"newReleaseId\");",
													"    pm.environment.unset(\"newReleasePid\");",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e6f17953-8730-413f-8c64-db91bea140c0",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/{{newReleaseId}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"{{newReleaseId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "89fbb21b-9be9-4c2c-9179-6639cb64f36f",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7c44d21e-9181-45f8-a849-1492f2805510",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "de874130-3ab6-4120-b3b3-4095e06c7a94",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "686841ed-d66d-4f40-af73-b4b614af1606",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"releaseName\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"    pm.environment.unset(\"releaseDescription\");",
													"    pm.environment.unset(\"releaseNote\");",
													"    pm.environment.unset(\"fieldIdReleaseStatus\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusPlanned\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusCompleted\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusClosed\");",
													"    pm.environment.unset(\"fieldIdReleaseStartDate\");",
													"    pm.environment.unset(\"fieldIdReleaseEndDate\");",
													"    pm.environment.unset(\"fieldIdReleaseDescription\");",
													"    pm.environment.unset(\"fieldIdReleaseReleaseNote\");",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"tokenType\");",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get multiple releases",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login successfully",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "62026460-a725-42a9-b4e0-0de7e06a7c4b",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code + \" -  Login\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"    ",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"    ",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "703d765b-f5b8-4364-a581-18f7ca72a0cf",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.test(\"Response data contains all properties of project data\", function(){",
													"        pm.expect(pm.response.text()).to.include(\"id\");",
													"        pm.expect(jsonData.name).to.eql(\"qTest API - Postman\");",
													"        pm.expect(jsonData.description).to.eql(\"Description of qTest API - Postman\");",
													"        pm.expect(pm.response.text()).to.include(\"status_id\");",
													"        pm.expect(pm.response.text()).to.include(\"start_date\");",
													"        pm.expect(pm.response.text()).to.include(\"end_date\");",
													"        pm.expect(pm.response.text()).to.include(\"sample\");",
													"        pm.expect(pm.response.text()).to.include(\"defect_tracking_systems\");",
													"        pm.expect(pm.response.text()).to.include(\"x_explorer_access_level\");",
													"        pm.expect(pm.response.text()).to.include(\"date_format\");",
													"        pm.expect(jsonData.automation.toString()).to.eql(\"true\");",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f3329d35-8328-447a-8efb-4a9cc6e6a433",
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\"\n  ],\n  \"automation\": true\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get release fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d1b8749-e179-40d1-bd6c-4e5e762dd3b8",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdRelease\";",
													"    var jsonData = pm.response.json();",
													"",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/\\s/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                const fieldValueId = PREFIX + field.label + item.label.replace(/\\s/g, \"\");",
													"                pm.environment.set(fieldValueId, item.value);",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/releases/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"releases",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create new release 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0c1d4583-5efa-4059-90db-ef8efc7d26b3",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newReleaseId1\", jsonData.id);",
													"    pm.environment.set(\"releaseInfo1\", JSON.stringify(jsonData));",
													"    ",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "955ecdfb-d51a-442d-a0c5-ee7f055595ef",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"releaseName\", \"Release 1\");",
													"pm.environment.set(\"startDate\", (new Date()).toISOString());",
													"pm.environment.set(\"endDate\", (new Date()).toISOString());",
													"pm.environment.set(\"releaseDescription\", \"Description of the release 1\");",
													"pm.environment.set(\"releaseNote\", \"Note of the release 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{releaseName}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"{{releaseDescription}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"{{releaseNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create new release 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a83914a5-bc64-4d0a-8b68-4a652f55ba77",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newReleaseId2\", jsonData.id);",
													"    pm.environment.set(\"releaseInfo2\", JSON.stringify(jsonData));",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "320b0215-423f-4174-8deb-3caefdcf21d8",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"releaseName\", \"Release 2\");",
													"pm.environment.set(\"startDate\", (new Date()).toISOString());",
													"pm.environment.set(\"endDate\", (new Date()).toISOString());",
													"pm.environment.set(\"releaseDescription\", \"Description of the release 2\");",
													"pm.environment.set(\"releaseNote\", \"Note of the release 2\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{releaseName}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"{{releaseDescription}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"{{releaseNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Get multiple releases - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a6faad46-6000-44b8-b3bc-2d5e150e9a74",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    var found = 0;",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has an array > 1\", function() {",
													"        pm.expect(jsonData.length).to.be.above(1);",
													"    });",
													"",
													"    var expectedReleaseInfo;",
													"    jsonData.forEach(function(releaseInfo) {",
													"        if (releaseInfo.name === \"Release 1\" || releaseInfo.name === \"Release 2\") {",
													"            found++;",
													"            if(releaseInfo.name === 'Release 1')",
													"                expectedReleaseInfo = JSON.parse(pm.environment.get(\"releaseInfo1\"));",
													"            else ",
													"                expectedReleaseInfo = JSON.parse(pm.environment.get(\"releaseInfo2\"));",
													"            pm.test(\"Repsonse body has correct info of \" + releaseInfo.name, function() {",
													"                pm.expect(releaseInfo.pid).to.be.eql(expectedReleaseInfo.pid);",
													"                pm.expect(releaseInfo.created_date.split(\"T\")[0]).to.be.eql(expectedReleaseInfo.created_date.split(\"T\")[0]);",
													"                pm.expect(releaseInfo.last_modified_date.split(\"T\")[0]).to.be.eql(expectedReleaseInfo.last_modified_date.split(\"T\")[0]);",
													"                pm.expect(releaseInfo.web_url).to.be.eql(expectedReleaseInfo.web_url);",
													"                pm.expect(releaseInfo.description).to.be.eql(expectedReleaseInfo.description);",
													"                pm.expect(releaseInfo.note).to.be.eql(expectedReleaseInfo.note);",
													"                pm.expect(releaseInfo.start_date.split(\"T\")[0]).to.be.eql(expectedReleaseInfo.start_date.split(\"T\")[0]);",
													"                pm.expect(releaseInfo.end_date.split(\"T\")[0]).to.be.eql(expectedReleaseInfo.end_date.split(\"T\")[0]);",
													"                releaseInfo.properties.forEach(function(properties) {",
													"                    expectedReleaseInfo.properties.forEach(function(expectedProperties) {",
													"                        if (properties.field_id === expectedProperties.field_id) {",
													"                            pm.expect(properties.field_name).to.be.eql(expectedProperties.field_name);",
													"                            pm.expect(properties.field_value).to.be.eql(expectedProperties.field_value);",
													"                            pm.expect(properties.field_value_name).to.be.eql(expectedProperties.field_value_name);",
													"                            return false;",
													"                        }",
													"                    });",
													"                });",
													"            });",
													"        }",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct info of releases\", function() {",
													"        pm.expect(found).to.be.eql(2);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get multiple releases - Not exist projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f0e2ad5-984b-4241-ac4c-2686dd949b7f",
												"exec": [
													"const RESPONSE_CODE = 404;",
													"const EXPECTED_MSG = 'Project not found';",
													"const result = pm.response.code === RESPONSE_CODE;",
													"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    const jsonData = pm.response.json();",
													"    pm.test(`Response body has 'message' property value '${EXPECTED_MSG}'`, () => {",
													"        pm.expect(jsonData.message).to.contains(EXPECTED_MSG);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/0/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"0",
												"releases"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get multiple releases - Invalid projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "acd6e8a8-3002-48d5-b876-dfad80fe82da",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'For input string'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"For input string\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/a2a{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"a2a{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Get multiple releases - Invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78291346-152a-4fca-b254-4995974f391d",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 401) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"",
													"    pm.test(\"Has 'error' in response body - error: \" + jsonData.error, function() {",
													"        pm.expect(pm.response.text()).to.include(\"error\");",
													"    })",
													"",
													"    pm.test(\"Has 'error_description' in response body - error_description: 'Invalid access token'\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"error_description\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} 1111{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete release 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a6174878-ddfe-4285-9a31-25b4447087a6",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.environment.unset(\"newReleaseId1\");",
													"    pm.environment.unset(\"releaseInfo1\");",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3bec0b7a-a89f-4c80-aeb8-ab47891e1ab4",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/{{newReleaseId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"{{newReleaseId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete release 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "299ef637-a890-4a0a-b088-d6e60182e8d9",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.environment.unset(\"newReleaseId2\");",
													"    pm.environment.unset(\"releaseInfo2\");",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "693346b9-546f-4097-b019-6855405fbc6c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/{{newReleaseId2}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"{{newReleaseId2}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a87d698c-4a58-4f27-8840-cedda7fbc3d9",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bfc8fc30-33bc-4078-81bf-6405ba82f8e5",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b6214a03-55e3-4088-95b8-f15ae2419396",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "87338d43-e36e-4569-a37a-ea2141d2138b",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"releaseName\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"    pm.environment.unset(\"releaseDescription\");",
													"    pm.environment.unset(\"releaseNote\");",
													"    pm.environment.unset(\"fieldIdReleaseStatus\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusPlanned\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusCompleted\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusClosed\");",
													"    pm.environment.unset(\"fieldIdReleaseStartDate\");",
													"    pm.environment.unset(\"fieldIdReleaseEndDate\");",
													"    pm.environment.unset(\"fieldIdReleaseDescription\");",
													"    pm.environment.unset(\"fieldIdReleaseReleaseNote\");",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"tokenType\");",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update a release",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login successfully",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "65f75888-3135-4e47-99b1-c9011c618fee",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code + \" -  Login\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"    ",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"    ",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88b1cc0f-4ed5-4a76-b341-6961a21cd4e9",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.test(\"Response data contains all properties of project data\", function(){",
													"        pm.expect(pm.response.text()).to.include(\"id\");",
													"        pm.expect(jsonData.name).to.eql(\"qTest API - Postman\");",
													"        pm.expect(jsonData.description).to.eql(\"Description of qTest API - Postman\");",
													"        pm.expect(pm.response.text()).to.include(\"status_id\");",
													"        pm.expect(pm.response.text()).to.include(\"start_date\");",
													"        pm.expect(pm.response.text()).to.include(\"end_date\");",
													"        pm.expect(pm.response.text()).to.include(\"sample\");",
													"        pm.expect(pm.response.text()).to.include(\"defect_tracking_systems\");",
													"        pm.expect(pm.response.text()).to.include(\"x_explorer_access_level\");",
													"        pm.expect(pm.response.text()).to.include(\"date_format\");",
													"        pm.expect(jsonData.automation.toString()).to.eql(\"true\");",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "23e671e8-476d-4c34-817c-4a73c2800324",
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\"\n  ],\n  \"automation\": true\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get release fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "799987aa-85fd-4c69-9f63-780faad81e9a",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdRelease\";",
													"    var jsonData = pm.response.json();",
													"",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/\\s/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                const fieldValueId = PREFIX + field.label + item.label.replace(/\\s/g, \"\");",
													"                pm.environment.set(fieldValueId, item.value);",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/releases/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"releases",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "39e75a91-6d61-422d-b12d-8746da788fa4",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newReleaseId\", jsonData.id);",
													"    pm.environment.set(\"releaseInfo\", JSON.stringify(jsonData));",
													"    ",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "afc7550c-0ac1-4dc3-8d5d-f3de3821cd54",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"releaseName\", \"Release 1\");",
													"pm.environment.set(\"startDate\", (new Date()).toISOString());",
													"pm.environment.set(\"endDate\", (new Date()).toISOString());",
													"pm.environment.set(\"releaseDescription\", \"Description of the release\");",
													"pm.environment.set(\"releaseNote\", \"Note of the release\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{releaseName}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"{{releaseDescription}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"{{releaseNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Update release - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bdc382a3-5ff3-407a-b471-ae7dfab24125",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    var sourceReleaseInfo = JSON.parse(pm.environment.get('releaseInfo'));",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has release id \" + jsonData.id, function() {",
													"        pm.expect(jsonData.id).to.eql(pm.environment.get(\"newReleaseId\"));",
													"    });",
													"",
													"    pm.test(\"Response data has release name '\" + jsonData.name + \"'\", function() {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"releaseName\"));",
													"    });",
													"",
													"    pm.test(\"Response data has property release pid\", function() {",
													"        pm.expect(jsonData.pid).to.eql(sourceReleaseInfo.pid);",
													"    });",
													"",
													"    pm.test(\"Response data has property order\", function() {",
													"        pm.expect(jsonData.created_date).to.eql(sourceReleaseInfo.created_date);",
													"    });",
													"",
													"    pm.test(\"Response data has property created date\", function() {",
													"        pm.expect(jsonData.order).to.eql(sourceReleaseInfo.order);",
													"    });",
													"",
													"    pm.test(\"Response data has property last modified date\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"last_modified_date\");",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        sourceReleaseInfo.properties.forEach(function(properties) {",
													"            if (field.field_name == properties.field_name) {",
													"                switch (field.field_name) {",
													"                    case \"Status\":",
													"                        pm.test(\"Repsonse data has release status is 'Completed'\", function() {",
													"                            pm.expect(field.field_value_name).to.eql(\"Completed\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReleaseStatusCompleted\").toString());",
													"                            pm.expect(field.field_id).to.eql(properties.field_id);",
													"                        });",
													"                        break;",
													"",
													"                    case \"Description\":",
													"                        pm.test(\"Repsonse data has release description '\" + field.field_value + \"'\", function() {",
													"                            pm.expect(field.field_value).to.eql(\"Description is edited\");",
													"                            pm.expect(field.field_id).to.eql(properties.field_id);",
													"                        });",
													"                        break;",
													"",
													"                    case \"Release Note\":",
													"                        pm.test(\"Repsonse data has release note '\" + field.field_value + \"'\", function() {",
													"                            pm.expect(field.field_value).to.eql(\"Note is edited\");",
													"                            pm.expect(field.field_id).to.eql(properties.field_id);",
													"                        });",
													"                        break;",
													"",
													"                    case \"Start Date\":",
													"                        pm.test(\"Repsonse data has start date to be updated\", function() {",
													"                            tmp = pm.environment.get(\"startDate\").split(\".\");",
													"                            pm.expect(field.field_value).to.include(tmp[0]);",
													"                            pm.expect(field.field_id).to.eql(properties.field_id);",
													"                        });",
													"                        break;",
													"",
													"                    case \"End Date\":",
													"                        pm.test(\"Repsonse data has end date to be updated\", function() {",
													"                            tmp = pm.environment.get(\"endDate\").split(\".\");",
													"                            pm.expect(field.field_value).to.include(tmp[0]);",
													"                            pm.expect(field.field_id).to.eql(properties.field_id);",
													"                        });",
													"                        break;",
													"                }",
													"                return false;",
													"            }",
													"        });",
													"        ",
													"",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "ed054002-a934-439b-af90-b2fa09e6429c",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"releaseName\", \"Release name is updated\");",
													"",
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 14);",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{releaseName}}\",\n    \"properties\": [\n      {\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusCompleted}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"Description is edited\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"Note is edited\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/{{newReleaseId}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"{{newReleaseId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Update release - With closed status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7aa767cf-a35a-4a99-a401-1c3683139f38",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    var sourceReleaseInfo = JSON.parse(pm.environment.get('releaseInfo'));",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has release id \" + jsonData.id, function() {",
													"        pm.expect(jsonData.id).to.eql(pm.environment.get(\"newReleaseId\"));",
													"    });",
													"",
													"    pm.test(\"Response data has release name '\" + jsonData.name + \"'\", function() {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"releaseName\"));",
													"    });",
													"",
													"    pm.test(\"Response data has property release pid\", function() {",
													"        pm.expect(jsonData.pid).to.eql(sourceReleaseInfo.pid);",
													"    });",
													"",
													"    pm.test(\"Response data has property order\", function() {",
													"        pm.expect(jsonData.created_date).to.eql(sourceReleaseInfo.created_date);",
													"    });",
													"",
													"    pm.test(\"Response data has property created date\", function() {",
													"        pm.expect(jsonData.order).to.eql(sourceReleaseInfo.order);",
													"    });",
													"",
													"    pm.test(\"Response data has property last modified date\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"last_modified_date\");",
													"    });",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        sourceReleaseInfo.properties.forEach(function(properties) {",
													"            if (field.field_name == properties.field_name) {",
													"                switch (field.field_name) {",
													"                    case \"Status\":",
													"                        pm.test(\"Repsonse data has release status is 'Closed'\", function() {",
													"                            pm.expect(field.field_value_name).to.eql(\"Closed\");",
													"                            pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdReleaseStatusClosed\").toString());",
													"                            pm.expect(field.field_id).to.eql(properties.field_id);",
													"                        });",
													"                        break;",
													"",
													"                    case \"Description\":",
													"                        pm.test(\"Repsonse data has release description '\" + field.field_value + \"'\", function() {",
													"                            pm.expect(field.field_value).to.eql(\"Description is edited\");",
													"                            pm.expect(field.field_id).to.eql(properties.field_id);",
													"                        });",
													"                        break;",
													"",
													"                    case \"Release Note\":",
													"                        pm.test(\"Repsonse data has release note '\" + field.field_value + \"'\", function() {",
													"                            pm.expect(field.field_value).to.eql(\"Note is edited\");",
													"                            pm.expect(field.field_id).to.eql(properties.field_id);",
													"                        });",
													"                        break;",
													"",
													"                    case \"Start Date\":",
													"                        pm.test(\"Repsonse data has start date to be updated\", function() {",
													"                            tmp = pm.environment.get(\"startDate\").split(\".\");",
													"                            pm.expect(field.field_value).to.include(tmp[0]);",
													"                            pm.expect(field.field_id).to.eql(properties.field_id);",
													"                        });",
													"                        break;",
													"",
													"                    case \"End Date\":",
													"                        pm.test(\"Repsonse data has end date to be updated\", function() {",
													"                            tmp = pm.environment.get(\"endDate\").split(\".\");",
													"                            pm.expect(field.field_value).to.include(tmp[0]);",
													"                            pm.expect(field.field_id).to.eql(properties.field_id);",
													"                        });",
													"                        break;",
													"                }",
													"                return false;",
													"            }",
													"        });",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1c5b790a-ec21-4ebd-87f4-7cf1ab7ec58a",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"releaseName\", \"Release name is updated with Closed status\");",
													"",
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 14);",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{releaseName}}\",\n    \"properties\": [\n      {\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusClosed}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"Description is edited\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"Note is edited\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/{{newReleaseId}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"{{newReleaseId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Update release - Not exist projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "21c39285-0113-426f-a701-9af614603789",
												"exec": [
													"const RESPONSE_CODE = 404;",
													"const EXPECTED_MSG = 'Project not found';",
													"const result = pm.response.code === RESPONSE_CODE;",
													"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    const jsonData = pm.response.json();",
													"    pm.test(`Response body has 'message' property value '${EXPECTED_MSG}'`, () => {",
													"        pm.expect(jsonData.message).to.contains(EXPECTED_MSG);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{releaseName}}\",\n    \"properties\": [\n      {\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusCompleted}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"Description is edited\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"Note is edited\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/0/releases/{{newReleaseId}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"0",
												"releases",
												"{{newReleaseId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update release - Invalid projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "01a212c0-af4c-42cb-bf3b-0c8ab1917081",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'For input string'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"For input string\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{releaseName}}\",\n    \"properties\": [\n      {\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusCompleted}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"Description is edited\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"Note is edited\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/a32{{projectId}}/releases/{{newReleaseId}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"a32{{projectId}}",
												"releases",
												"{{newReleaseId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update release - Missing request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52c28d44-2131-4c41-97e2-9efbc06a520d",
												"exec": [
													"const RESPONSE_CODE = 400;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"const EXPECTED_MSGS = [",
													"    \"Required request body is missing\",",
													"    \"Required request body content is missing\"];",
													"    ",
													"function validateMessage(actualMessage){",
													"    let result = false;",
													"    for(const msg of EXPECTED_MSGS) {",
													"        result = actualMessage.indexOf(msg) > -1;",
													"        if(result){",
													"            console.log(`Actual message is: ${actualMessage}`);",
													"            return result;",
													"        }",
													"    }",
													"    return result;",
													"}",
													"",
													"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"if (result) {",
													"    const jsonData = pm.response.json();",
													"    pm.test(`Response body has 'message' property value in following: '${EXPECTED_MSGS.toString()}'`, () => {",
													"        pm.expect(validateMessage(jsonData.message)).to.eql(true);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "212b7623-14cd-4cae-a656-6b200c31734e",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/{{newReleaseId}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"{{newReleaseId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Update release - Invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98d5ac9e-ec9b-4105-9f4f-8aa5cf30bf1e",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 401) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"",
													"    pm.test(\"Has 'error' in response body - error: \" + jsonData.error, function() {",
													"        pm.expect(pm.response.text()).to.include(\"error\");",
													"    });",
													"",
													"    pm.test(\"Has 'error_description' in response body - error_description: 'Invalid access token'\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"error_description\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} 1111{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/{{newReleaseId}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"{{newReleaseId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Update release - Not exist releaseId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2539b41b-d24c-4030-9ec0-9760fc3ad2c2",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has json property 'message' is 'Release does not exist!'\", function() {",
													"        var jsonData = pm.response.json();",
													"        pm.expect(jsonData.message).to.eql(\"Release does not exist!\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4c0e1742-fb82-4642-8c6c-60ec0fea0ae0",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set('startDate', (new Date()).toISOString());",
													"pm.environment.set('endDate', (new Date()).toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Release name is updated\",\n    \"properties\": [\n      {\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusCompleted}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"Description is edited\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"Note is edited\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/1",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update release - Invalid releaseId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8bba3f3f-a232-42fd-ba13-86b302b247bc",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'Failed to convert value of type'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Failed to convert value of type\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9c8f2f2a-fc5f-409e-9ab6-63399afc16fc",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set('startDate', (new Date()).toISOString());",
													"pm.environment.set('endDate', (new Date()).toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Release name is updated\",\n    \"properties\": [\n      {\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusCompleted}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"Description is edited\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"Note is edited\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/a31",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"a31"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update release - Invalid status value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "246b0c69-772c-435a-ab55-8166d589dcb3",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'does not allowed for field Status'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"does not allowed for field Status\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e2d22c08-2e3e-41f5-b604-711f13c19d33",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Release name is updated\",\n    \"properties\": [\n      {\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"234{{fieldIdReleaseStatusCompleted}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/{{newReleaseId}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"{{newReleaseId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update release - Invalid status field id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4b59580-f75a-4130-b085-acdbe6ef907e",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message\", function() {",
													"        pm.expect(jsonData.message).to.include(\"not a valid Long value\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "00dd8216-e3a0-47c9-944d-6609fcab4326",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Release name is updated\",\n    \"properties\": [\n      {\n            \"field_id\": \"32{{fieldIdReleaseStatus}}\",\n            \"field_value\": \"{{fieldIdReleaseStatusCompleted}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/{{newReleaseId}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"{{newReleaseId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update release - Invalid start date format",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b85002bc-9672-42dc-9307-e928da0a4abd",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'Invalid format'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Invalid format\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "515babd2-c149-486e-b876-453cfb88e2f6",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Release name is updated\",\n    \"properties\": [\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"2018/05/01T17:32\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/{{newReleaseId}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"{{newReleaseId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update release - Start date greater than end date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "99b7ff1d-f02b-4a53-a8ef-616865c5cf69",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'End date must be after start date'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"End date must be after start date\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "88b50ac5-9af6-4c6e-8d97-c965c2785fec",
												"type": "text/javascript",
												"exec": [
													"var endDate = new Date();",
													"var startDate = new Date();",
													"startDate.setDate(startDate.getDate() + 14);",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Release name is updated\",\n    \"properties\": [\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/{{newReleaseId}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"{{newReleaseId}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a804b21d-6f5a-438b-aab8-69f1333c6e3b",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.environment.unset(\"newReleaseId\");",
													"    pm.environment.unset(\"releaseInfo\");",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "223d37de-42a8-48ea-9256-58ad02804350",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/{{newReleaseId}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"{{newReleaseId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d2fb4fda-03f5-4722-9fea-641033e4444a",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e58e9e1f-23bd-40e8-87ce-f9b15aa1382c",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "cb19b09c-66cc-49de-81d3-86bc959fe656",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0bbb7707-57d5-456b-8a7c-01dba9e9bfcd",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"releaseName\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"    pm.environment.unset(\"releaseDescription\");",
													"    pm.environment.unset(\"releaseNote\");",
													"    pm.environment.unset(\"fieldIdReleaseStatus\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusPlanned\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusCompleted\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusClosed\");",
													"    pm.environment.unset(\"fieldIdReleaseStartDate\");",
													"    pm.environment.unset(\"fieldIdReleaseEndDate\");",
													"    pm.environment.unset(\"fieldIdReleaseDescription\");",
													"    pm.environment.unset(\"fieldIdReleaseReleaseNote\");",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"tokenType\");",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete a release",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login successfully",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a752bc17-1f00-4592-9c36-80cd7d73080f",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code + \" -  Login\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0b3ce187-986a-4605-b6ee-13bf8c23e1a5",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.test(\"Response data contains all properties of project data\", function(){",
													"        pm.expect(pm.response.text()).to.include(\"id\");",
													"        pm.expect(jsonData.name).to.eql(\"qTest API - Postman\");",
													"        pm.expect(jsonData.description).to.eql(\"Description of qTest API - Postman\");",
													"        pm.expect(pm.response.text()).to.include(\"status_id\");",
													"        pm.expect(pm.response.text()).to.include(\"start_date\");",
													"        pm.expect(pm.response.text()).to.include(\"end_date\");",
													"        pm.expect(pm.response.text()).to.include(\"sample\");",
													"        pm.expect(pm.response.text()).to.include(\"defect_tracking_systems\");",
													"        pm.expect(pm.response.text()).to.include(\"x_explorer_access_level\");",
													"        pm.expect(pm.response.text()).to.include(\"date_format\");",
													"        pm.expect(jsonData.automation.toString()).to.eql(\"true\");",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d6d3b653-582d-4125-aed3-8b7cf8d24cf4",
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\"\n  ],\n  \"automation\": true\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get release fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "65f3e6d6-f940-4d31-afc0-1f05768d630c",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdRelease\";",
													"    var jsonData = pm.response.json();",
													"",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/\\s/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                const fieldValueId = PREFIX + field.label + item.label.replace(/\\s/g, \"\");",
													"                pm.environment.set(fieldValueId, item.value);",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/releases/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"releases",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa023f42-7c18-4acb-b7c6-4af5f75d1590",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newReleaseId\", jsonData.id);",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "83696fbc-d740-4cca-a2e8-98222498658c",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"releaseName\", \"Release 1\");",
													"pm.environment.set(\"startDate\", (new Date()).toISOString());",
													"pm.environment.set(\"endDate\", (new Date()).toISOString());",
													"pm.environment.set(\"releaseDescription\", \"Description of the release\");",
													"pm.environment.set(\"releaseNote\", \"Note of the release\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{releaseName}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"{{releaseDescription}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"{{releaseNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Delete release - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f2fbc0f4-1dcf-418e-b6c1-7cf69896fdc7",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.environment.unset(\"newReleaseId\");",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6af72fd2-f71e-4d4c-8a1c-840b969b2497",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/{{newReleaseId}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"{{newReleaseId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Delete release - Invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2425b945-de3e-4f10-9a70-867bb343b120",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 401) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"",
													"    pm.test(\"Has 'error' in response body - error: \" + jsonData.error, function() {",
													"        pm.expect(pm.response.text()).to.include(\"error\");",
													"    })",
													"",
													"    pm.test(\"Has 'error_description' in response body - error_description: 'Invalid access token'\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"error_description\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} 1111{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/{{newReleaseId}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"{{newReleaseId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Delete release - Not exist releaseId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ec68788-0bf1-4a57-a70c-0a254a1f132a",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has json property 'message' is 'Release does not exist!'\", function() {",
													"        var jsonData = pm.response.json();",
													"        pm.expect(jsonData.message).to.eql(\"Release does not exist!\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "17c4a688-8cc0-4a19-99fa-d8220591d42b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/1",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Delete release - Invalid releaseId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3eba3387-1065-41e8-bd3b-ec399629c051",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has json property 'message' is 'Failed to convert value of type'\", function() {",
													"        var jsonData = pm.response.json();",
													"        pm.expect(jsonData.message).to.include(\"Failed to convert value of type\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "637adb62-2508-4c42-887f-2bcb0f74825c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/a21",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"a21"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8bf640b5-7440-40bf-ab28-82ed27f430d8",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c38930ef-448e-45b3-ba27-31ecacfd1eca",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9ece049d-7350-48e8-a275-2ed8fd7b096a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "59dd654d-10c7-4eb5-ad02-6ab636e4c96f",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"releaseName\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"    pm.environment.unset(\"releaseDescription\");",
													"    pm.environment.unset(\"releaseNote\");",
													"    pm.environment.unset(\"fieldIdReleaseStatus\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusPlanned\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusCompleted\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusClosed\");",
													"    pm.environment.unset(\"fieldIdReleaseStartDate\");",
													"    pm.environment.unset(\"fieldIdReleaseEndDate\");",
													"    pm.environment.unset(\"fieldIdReleaseDescription\");",
													"    pm.environment.unset(\"fieldIdReleaseReleaseNote\");",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"tokenType\");",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Build",
			"item": [
				{
					"name": "Create a build",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ccd4be1-a7a4-4647-9747-a53f476c0b40",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code + \" -  Login\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"    ",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c18c0da6-f643-453c-8613-4c8af9f15a52",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.test(\"Response data contains all properties of project data\", function(){",
													"        pm.expect(pm.response.text()).to.include(\"id\");",
													"        pm.expect(jsonData.name).to.eql(\"qTest API - Postman\");",
													"        pm.expect(jsonData.description).to.eql(\"Description of qTest API - Postman\");",
													"        pm.expect(pm.response.text()).to.include(\"status_id\");",
													"        pm.expect(pm.response.text()).to.include(\"start_date\");",
													"        pm.expect(pm.response.text()).to.include(\"end_date\");",
													"        pm.expect(pm.response.text()).to.include(\"sample\");",
													"        pm.expect(pm.response.text()).to.include(\"defect_tracking_systems\");",
													"        pm.expect(pm.response.text()).to.include(\"x_explorer_access_level\");",
													"        pm.expect(pm.response.text()).to.include(\"date_format\");",
													"        pm.expect(jsonData.automation.toString()).to.eql(\"true\");",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate\", pm.environment.get(\"startDate\"));",
													"    pm.environment.set(\"projectEndDate\", pm.environment.get(\"endDate\"));",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1046bbf9-c713-480e-b980-029fce7ac4b7",
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\"\n  ],\n  \"automation\": true\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get release fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "10769f1f-5c82-45f5-b27a-11be2e23af5b",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdRelease\";",
													"    var jsonData = pm.response.json();",
													"",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/\\s/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                const fieldValueId = PREFIX + field.label + item.label.replace(/\\s/g, \"\");",
													"                pm.environment.set(fieldValueId, item.value);",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/releases/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"releases",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get build fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c4cf40f-07e6-4bd5-9240-776e08cdf62d",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdBuild\";",
													"    var jsonData = pm.response.json();",
													"",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/\\s/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                const fieldValueId = PREFIX + field.label + item.label.replace(/\\s/g, \"\");",
													"                pm.environment.set(fieldValueId, item.value);",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/builds/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"builds",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create Release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ffd5865-adb3-4bd2-bce7-f152ad65d59e",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newReleaseId1\", jsonData.id);",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct release info\", function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"releaseName\"));",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.description).to.not.eql(null);",
													"        pm.expect(jsonData.note).to.not.eql(null);",
													"    });",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7e9b6910-a1e1-4d47-8a15-e457a32a2af2",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"releaseName\", \"Release 1\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate\", today.toISOString());",
													"today.setDate(today.getDate() + 10);",
													"pm.environment.set(\"endDate\", today.toISOString());",
													"",
													"pm.environment.set(\"releaseDescription\", \"Description of Release 1\");",
													"pm.environment.set(\"releaseNote\", \"Note of Release 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{releaseName}}\",\n    \"properties\": [\n      {\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"{{releaseDescription}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"{{releaseNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Create build - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "579022bc-ff1b-4f7e-ab93-a7c49543f152",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newBuildId1\", jsonData.id);",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Response data has links\", function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id\", function() {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name: \" + jsonData.name, function() {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"buildName\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has order\", function() {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid\", function() {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modify_date\", function() {",
													"        pm.expect(jsonData.last_modify_date).to.not.eql(null);",
													"    });",
													"",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has build status is 'In Progress'\", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdBuildStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Build Date\":",
													"                pm.test(\"Repsonse data has build date property\", function() {",
													"                    tmp = pm.environment.get(\"buildDate\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Build Note\":",
													"                pm.test(\"Repsonse data has build note '\" + field.field_value + \"'\", function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"buildNote\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "fb5e29d7-46c1-4ee9-8db4-e0238b88f890",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"buildName\", \"Build 1\");",
													"",
													"var today = new Date();",
													"today.setDate(today.getDate() + 1);",
													"pm.environment.set(\"buildDate\", today.toISOString());",
													"pm.environment.set(\"buildNote\", \"Note of Build 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{buildName}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdBuildStatus}},\n            \"field_value\": \"{{fieldIdBuildStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ],\n    \"release\": {\n    \t\"id\": \"{{newReleaseId1}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Create build - Success without status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "71765f39-6036-4d32-ab03-f0291887b922",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newBuildId1\", jsonData.id);",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Response data has links\", function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id\", function() {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name: \" + jsonData.name, function() {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"buildName\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has order\", function() {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid\", function() {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modify_date\", function() {",
													"        pm.expect(jsonData.last_modify_date).to.not.eql(null);",
													"    });",
													"",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has build status is 'In Progress'\", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Planned\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdBuildStatusPlanned\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Build Date\":",
													"                pm.test(\"Repsonse data has build date property\", function() {",
													"                    tmp = pm.environment.get(\"buildDate\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Build Note\":",
													"                pm.test(\"Repsonse data has build note '\" + field.field_value + \"'\", function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"buildNote\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "e41c3f3c-7cbf-4a4b-9b67-d6848f60a238",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"buildName\", \"Build missing status\");",
													"",
													"var today = new Date();",
													"today.setDate(today.getDate() + 1);",
													"pm.environment.set(\"buildDate\", today.toISOString());",
													"pm.environment.set(\"buildNote\", \"Note of the build\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{buildName}}\",\n    \"properties\": [\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ],\n    \"release\": {\n    \t\"id\": \"{{newReleaseId1}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Create build - Success with only name property",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8f4c138-eee0-44f9-a4ca-9bcc09e2ef75",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newBuildId1\", jsonData.id);",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Response data has links\", function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id\", function() {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name: \" + jsonData.name, function() {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"buildName\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has order\", function() {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid\", function() {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modify_date\", function() {",
													"        pm.expect(jsonData.last_modify_date).to.not.eql(null);",
													"    });",
													"",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has build status is 'In Progress'\", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Planned\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdBuildStatusPlanned\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Build Date\":",
													"                pm.test(\"Repsonse data has build date property\", function() {",
													"                    tmp = pm.environment.get(\"buildDate\").split(\".\");",
													"                    const buildDate = tmp[0].split(\"T\");",
													"                    pm.expect(field.field_value).to.include(buildDate[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Build Note\":",
													"                pm.test(\"Repsonse data has build note '\" + field.field_value + \"'\", function() {",
													"                    pm.expect(field.field_value).to.eql(\"\");",
													"                });",
													"                break;",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1e0c28c2-eb32-4628-b681-db31cc8f0d40",
												"exec": [
													"pm.environment.set(\"buildName\", \"Build only has name\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"buildDate\", today.toISOString());",
													"pm.environment.set(\"buildNote\", \"Note of the build\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{buildName}}\",\n    \"release\": {\n    \t\"id\": \"{{newReleaseId1}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Create build - Invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4efe28f4-bbdc-4a15-802e-a17a73fe2555",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 401) {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 401\", function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message value contains 'Invalid access token'\", function() {",
													"        pm.expect(jsonData.error_description).to.include(\"Invalid access token\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "df550716-76b3-4a79-94a2-8ff1d47a1d89",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}000"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{buildName}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdBuildStatus}},\n            \"field_value\": \"{{fieldIdBuildStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ],\n    \"release\": {\n    \t\"id\": \"{{newReleaseId1}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create build - Without name property",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d0531ad-dbeb-4c50-b8d7-249950a6291f",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message value 'name may not be empty'\", function() {",
													"        pm.expect(jsonData.message).to.eql(\"name: may not be empty\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0a9aa451-5ae2-4177-8298-defcd10d4b5a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdBuildStatus}},\n            \"field_value\": \"{{fieldIdBuildStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ],\n    \"release\": {\n    \t\"id\": \"{{newReleaseId1}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create build - Empty value of name property",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fe78dc27-ced0-48b0-90a1-476e00120128",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"    var jsonData = pm.response.json();",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message value 'name may not be empty'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"name: may not be empty\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4d5edd4b-120a-4adc-86a2-e86766566996",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdBuildStatus}},\n            \"field_value\": \"{{fieldIdBuildStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ],\n    \"release\": {\n    \t\"id\": \"{{newReleaseId1}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create build - With name contains more than 500 chars",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "70668fb3-c8d6-4ff8-be7d-405807caaab2",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"    var jsonData = pm.response.json();",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message value '\" + jsonData.message + \"'\", function() {",
													"        pm.expect(jsonData.message).to.eql(\"name: size must be between 1 and 500\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "59546599-48d6-4064-8e8a-f13c3d523520",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI - The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI - The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI- The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI -The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdBuildStatus}},\n            \"field_value\": \"{{fieldIdBuildStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ],\n    \"release\": {\n    \t\"id\": \"{{newReleaseId1}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create build - Invalid status field id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c0ff9cae-2945-44e7-b578-0679aec311e7",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message\", function() {",
													"        pm.expect(jsonData.message).to.include(\"not a valid Long value\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2c7a2268-9342-4792-9d22-b44cf2bf3123",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Build name is updated\",\n    \"properties\": [\n      {\n            \"field_id\": \"32{{fieldIdReleaseStatus}}\",\n            \"field_value\": \"{{fieldIdReleaseStatusCompleted}}\"\n        }\n    ],\n    \"release\": {\n    \t\"id\": \"{{newReleaseId1}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create build - Invalid status value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "445dcdd6-11e1-4253-8fdd-83886e73e83d",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'does not allow for field Status'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"is invalid\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "519ed5a2-02ff-407e-a57c-d4362d7be13f",
												"type": "text/javascript",
												"exec": [
													"var today = new Date();",
													"today.setDate(today.getDate() + 1);",
													"pm.environment.set(\"buildDate\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Build name is updated\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdBuildStatus}},\n            \"field_value\": \"234{{fieldIdBuildStatusCompleted}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        }\n    ],\n    \"release\": {\n    \t\"id\": \"{{newReleaseId1}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create build - Invalid start date format",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58feb9eb-85df-40cd-8add-38d1f948f31b",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'Invalid field value for field Build Date'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"is invalid\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1b9be1a0-01fd-4a01-91c4-ca146e4a8fc5",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Release name is updated\",\n    \"properties\": [\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"2018/05/01T17:32\"\n        }\n    ],\n    \"release\": {\n    \t\"id\": \"{{newReleaseId1}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create build - With build date less than release start date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c0d2fb95-7044-48ff-916b-7bc0e669883b",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'Invalid Build Date'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Invalid Build Date\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b108ef22-91e4-45cd-98b0-ed4940998635",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"buildName\", \"Build having full info\");",
													"pm.environment.set(\"buildNote\", \"Note of the build\");",
													"",
													"var today = new Date();",
													"today.setDate(today.getDate() - 10);",
													"pm.environment.set(\"buildDate\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{buildName}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdBuildStatus}},\n            \"field_value\": \"{{fieldIdBuildStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ],\n    \"release\": {\n    \t\"id\": \"{{newReleaseId1}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create build - With build date greater than release end date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c98983e3-0db7-403b-9e0c-265f9bb63a40",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'Invalid Build Date'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Invalid Build Date\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "8c7e856f-1809-444c-bc1e-61148ea259fc",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"buildName\", \"Build having full info\");",
													"pm.environment.set(\"buildNote\", \"Note of the build\");",
													"",
													"var today = new Date();",
													"today.setDate(today.getDate() + 20);",
													"pm.environment.set(\"buildDate\", today.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{buildName}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdBuildStatus}},\n            \"field_value\": \"{{fieldIdBuildStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ],\n    \"release\": {\n    \t\"id\": \"{{newReleaseId1}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create build - Not exist releaseId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "001f8988-965a-4437-80f1-68f4d4b68927",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message 'Release does not exist'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Release does not exist\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "997f0746-db66-434f-b074-e753e91ce96d",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Build name is updated\",\n    \"properties\": [\n      {\n            \"field_id\": \"{{fieldIdReleaseStatus}}\",\n            \"field_value\": \"{{fieldIdReleaseStatusCompleted}}\"\n        }\n    ],\n    \"release\": {\n    \t\"id\": \"0\"\n    }\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create build - Invalid releaseId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5070d03a-9782-4607-914f-70520a89f90c",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message 'Release does not exist'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Release does not exist\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3b60cbd6-61bf-4c43-aab2-6af2c51649d6",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Build name is updated\",\n    \"properties\": [\n      {\n            \"field_id\": \"{{fieldIdReleaseStatus}}\",\n            \"field_value\": \"{{fieldIdReleaseStatusCompleted}}\"\n        }\n    ],\n    \"release\": {\n    \t\"id\": \"1230000\"\n    }\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4b26522-53a1-4895-a083-c1e6433827ae",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.environment.unset(\"newReleaseId1\");",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "425c3e60-46f5-44dc-a7f1-2e33afe8c70d",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/{{newReleaseId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"{{newReleaseId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9bbccdbb-7e80-4a0e-a09d-531db867f991",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"projectEndDate\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "99020081-b901-4632-86b5-3d5e6b04dd80",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "850f5552-487e-4bbf-9048-2f39c983be0e",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cf0baf91-7f74-4d25-9798-9f42a8967815",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"releaseName\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"    pm.environment.unset(\"releaseDescription\");",
													"    pm.environment.unset(\"releaseNote\");",
													"    pm.environment.unset(\"fieldIdReleaseStatus\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusPlanned\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusCompleted\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusClosed\");",
													"    pm.environment.unset(\"fieldIdReleaseStartDate\");",
													"    pm.environment.unset(\"fieldIdReleaseEndDate\");",
													"    pm.environment.unset(\"fieldIdReleaseDescription\");",
													"    pm.environment.unset(\"fieldIdReleaseReleaseNote\");",
													"    ",
													"    pm.environment.unset(\"fieldIdBuildStatus\");",
													"    pm.environment.unset(\"fieldIdBuildStatusPlanned\");",
													"    pm.environment.unset(\"fieldIdBuildStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdBuildStatusCompleted\");",
													"    pm.environment.unset(\"fieldIdBuildStatusClosed\");",
													"    pm.environment.unset(\"fieldIdBuildBuildDate\");",
													"    pm.environment.unset(\"fieldIdBuildBuildNote\");",
													"    pm.environment.unset(\"newReleaseId1\");",
													"    pm.environment.unset(\"newBuildId1\");",
													"    pm.environment.unset(\"buildDate\");",
													"    pm.environment.unset(\"buildNote\");",
													"    pm.environment.unset(\"buildName\");",
													"    pm.environment.unset(\"build1_name\");",
													"    ",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"tokenType\");",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "56b5d41a-d6cd-47a2-8803-bd0bfb195880",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4d2533b3-e7ca-4304-be0c-425bbaee3750",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get a build",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4de4e8f9-4e97-4c63-9ee7-a801b19c0920",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code + \" -  Login\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"    ",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ea12aad2-df16-4fa4-85ec-66ce7d98eee6",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.test(\"Response data contains all properties of project data\", function(){",
													"        pm.expect(pm.response.text()).to.include(\"id\");",
													"        pm.expect(jsonData.name).to.eql(\"qTest API - Postman\");",
													"        pm.expect(jsonData.description).to.eql(\"Description of qTest API - Postman\");",
													"        pm.expect(pm.response.text()).to.include(\"status_id\");",
													"        pm.expect(pm.response.text()).to.include(\"start_date\");",
													"        pm.expect(pm.response.text()).to.include(\"end_date\");",
													"        pm.expect(pm.response.text()).to.include(\"sample\");",
													"        pm.expect(pm.response.text()).to.include(\"defect_tracking_systems\");",
													"        pm.expect(pm.response.text()).to.include(\"x_explorer_access_level\");",
													"        pm.expect(pm.response.text()).to.include(\"date_format\");",
													"        pm.expect(jsonData.automation.toString()).to.eql(\"true\");",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate\", pm.environment.get(\"startDate\"));",
													"    pm.environment.set(\"projectEndDate\", pm.environment.get(\"endDate\"));",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "15629182-29fc-43d6-a6b6-7d87cc5bd538",
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\"\n  ],\n  \"automation\": true\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get release fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1441c4a6-14a5-486d-8372-a5e4423ff860",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdRelease\";",
													"    var jsonData = pm.response.json();",
													"",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/\\s/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                const fieldValueId = PREFIX + field.label + item.label.replace(/\\s/g, \"\");",
													"                pm.environment.set(fieldValueId, item.value);",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/releases/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"releases",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5dd6f723-f378-473f-9e48-f2b8f4864434",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newReleaseId1\", jsonData.id);",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct release info\", function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"releaseName\"));",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.description).to.not.eql(null);",
													"        pm.expect(jsonData.note).to.not.eql(null);",
													"    });",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bd4bcf06-5afa-4b6e-8fb1-0b781ba60465",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"releaseName\", \"Release having full info\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate\", today.toISOString());",
													"today.setDate(today.getDate() + 10);",
													"pm.environment.set(\"endDate\", today.toISOString());",
													"",
													"pm.environment.set(\"releaseDescription\", \"Description of the release\");",
													"pm.environment.set(\"releaseNote\", \"Note of the release\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{releaseName}}\",\n    \"properties\": [\n      {\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"{{releaseDescription}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"{{releaseNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get build fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b4d611e0-023c-4334-b9d5-7348a6cc8487",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdBuild\";",
													"    var jsonData = pm.response.json();",
													"",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/\\s/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                const fieldValueId = PREFIX + field.label + item.label.replace(/\\s/g, \"\");",
													"                pm.environment.set(fieldValueId, item.value);",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/builds/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"builds",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create build",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aafd58b7-f37e-4437-9459-0bdf67ce82e8",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newBuildId1\", jsonData.id);",
													"    pm.environment.set(\"build1_info\", jsonData);",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Response data has links\", function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id\", function() {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name: \" + jsonData.name, function() {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"buildName\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has order\", function() {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid\", function() {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modify_date\", function() {",
													"        pm.expect(jsonData.last_modify_date).to.not.eql(null);",
													"    });",
													"",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has build status is 'In Progress'\", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdBuildStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Build Date\":",
													"                pm.test(\"Repsonse data has build date property\", function() {",
													"                    tmp = pm.environment.get(\"buildDate\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Build Note\":",
													"                pm.test(\"Repsonse data has build note '\" + field.field_value + \"'\", function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"buildNote\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7cfa2802-25cd-4115-ba13-1d02c50edbb2",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"buildName\", \"Build having full info\");",
													"",
													"var today = new Date();",
													"today.setDate(today.getDate() + 1);",
													"pm.environment.set(\"buildDate\", today.toISOString());",
													"pm.environment.set(\"buildNote\", \"Note of the build\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{buildName}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdBuildStatus}},\n            \"field_value\": \"{{fieldIdBuildStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ],\n    \"release\": {\n    \t\"id\": \"{{newReleaseId1}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Get build - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8a0deda3-d458-4fe3-88c6-d8c3f31bf0d1",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    var jsonData = pm.response.json();",
													"    var build1_info = pm.environment.get(\"build1_info\");",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links \", function() {",
													"        pm.expect(jsonData.links).to.eql(build1_info.links);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains id: \" + jsonData.id, function() {",
													"        pm.expect(jsonData.id).to.eql(build1_info.id);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name: \" + jsonData.name, function() {",
													"        pm.expect(jsonData.name).to.eql(build1_info.name);",
													"    });",
													"    ",
													"    pm.test(\"Response data has order\", function() {",
													"        pm.expect(jsonData.order).to.eql(build1_info.order);",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid\", function() {",
													"        pm.expect(jsonData.pid).to.eql(build1_info.pid);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date\", function() {",
													"        pm.expect(jsonData.created_date).to.eql(build1_info.created_date);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modified_date\", function() {",
													"        pm.expect(jsonData.last_modified_date).to.eql(build1_info.last_modified_date);",
													"    });",
													"",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has build status is 'In Progress'\", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdBuildStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Build Date\":",
													"                pm.test(\"Repsonse data has build date property\", function() {",
													"                    tmp = pm.environment.get(\"buildDate\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Build Note\":",
													"                pm.test(\"Repsonse data has build note '\" + field.field_value + \"'\", function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"buildNote\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "544396ba-e00f-4bae-a890-a85c889760c2",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds/{{newBuildId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds",
												"{{newBuildId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Get build - Not exist projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1f0c53bb-0a10-4be2-92c7-48ab2803f30c",
												"exec": [
													"const RESPONSE_CODE = 404;",
													"const EXPECTED_MSG = 'Project not found';",
													"const result = pm.response.code === RESPONSE_CODE;",
													"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    const jsonData = pm.response.json();",
													"    pm.test(`Response body has 'message' property value '${EXPECTED_MSG}'`, () => {",
													"        pm.expect(jsonData.message).to.contains(EXPECTED_MSG);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "107202b1-1d5e-4754-8129-133ae5107fbf",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}1111/builds/{{newBuildId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}1111",
												"builds",
												"{{newBuildId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get buid - Invalid projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c3c4a63-be8b-45a7-baff-97a04b1e203d",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message 'For input string'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"For input string\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "a15a4a6c-0a5d-47c4-b041-fc4676fd6ff4",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/ae121323232323{{projectId}}223234234324/builds/{{newBuildId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"ae121323232323{{projectId}}223234234324",
												"builds",
												"{{newBuildId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Get build - Not exist build Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "93b5db38-714c-42e6-865e-63ccce0e1f47",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message 'Build does not exist'\", function() {",
													"        pm.expect(jsonData.message).to.eql(\"Build does not exist\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "250cb578-f1dd-4c9b-af77-dc8928ef6971",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds/0",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds",
												"0"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get build - Invalid build Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f8a46b60-2674-4f0f-b962-1afd0e38466b",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'Failed to convert value of type'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Failed to convert value of type\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "44cb99e8-23e2-4546-b310-6f14af233f26",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds/a{{newBuildId1}}20",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds",
												"a{{newBuildId1}}20"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Get build - Invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d18fcc4d-e184-4831-9938-ee1de8e79f71",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 401) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 401\", function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has error 'Invalid access token'\", function() {",
													"        pm.expect(jsonData.error_description).to.include(\"Invalid access token\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "cc07baca-733d-47d3-897a-148cda301f65",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}223"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds/{{newBuildId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds",
												"{{newBuildId1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5418383b-615b-4af9-959f-e06d94f747c5",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.environment.unset(\"newReleaseId\");",
													"    pm.environment.unset(\"newReleasePid\");",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "d68d8e31-34c3-4ae0-b10d-ad9d6c7dc835",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/{{newReleaseId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"{{newReleaseId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9702484c-7c2d-46b5-acfc-51bf029670ea",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"projectEndDate\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "561ddf60-b7f5-4393-ba81-235cc4d21520",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1fd72774-bd53-447b-88ac-e2b3f44eb31f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "21927522-7925-4abc-a194-b36ec01906b4",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"releaseName\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"    pm.environment.unset(\"releaseDescription\");",
													"    pm.environment.unset(\"releaseNote\");",
													"    pm.environment.unset(\"fieldIdReleaseStatus\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusPlanned\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusCompleted\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusClosed\");",
													"    pm.environment.unset(\"fieldIdReleaseStartDate\");",
													"    pm.environment.unset(\"fieldIdReleaseEndDate\");",
													"    pm.environment.unset(\"fieldIdReleaseDescription\");",
													"    pm.environment.unset(\"fieldIdReleaseReleaseNote\");",
													"    ",
													"    pm.environment.unset(\"fieldIdBuildStatus\");",
													"    pm.environment.unset(\"fieldIdBuildStatusPlanned\");",
													"    pm.environment.unset(\"fieldIdBuildStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdBuildStatusCompleted\");",
													"    pm.environment.unset(\"fieldIdBuildStatusClosed\");",
													"    pm.environment.unset(\"fieldIdBuildBuildDate\");",
													"    pm.environment.unset(\"fieldIdBuildBuildNote\");",
													"    pm.environment.unset(\"newReleaseId1\");",
													"    pm.environment.unset(\"build1_info\");",
													"    pm.environment.unset(\"buildDate\");",
													"    pm.environment.unset(\"buildNote\");",
													"    pm.environment.unset(\"buildName\");",
													"    pm.environment.unset(\"newBuildId1\");",
													"    pm.environment.unset(\"build1_name\");",
													"    ",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"tokenType\");",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Get multiple builds",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd1f8d0f-4ce7-4907-b524-12f87d22b11a",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code + \" -  Login\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"   //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ad6605f-bed2-4c2c-bebe-dc12910c83ab",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.test(\"Response data contains all properties of project data\", function(){",
													"        pm.expect(pm.response.text()).to.include(\"id\");",
													"        pm.expect(jsonData.name).to.eql(\"qTest API - Postman\");",
													"        pm.expect(jsonData.description).to.eql(\"Description of qTest API - Postman\");",
													"        pm.expect(pm.response.text()).to.include(\"status_id\");",
													"        pm.expect(pm.response.text()).to.include(\"start_date\");",
													"        pm.expect(pm.response.text()).to.include(\"end_date\");",
													"        pm.expect(pm.response.text()).to.include(\"sample\");",
													"        pm.expect(pm.response.text()).to.include(\"defect_tracking_systems\");",
													"        pm.expect(pm.response.text()).to.include(\"x_explorer_access_level\");",
													"        pm.expect(pm.response.text()).to.include(\"date_format\");",
													"        pm.expect(jsonData.automation.toString()).to.eql(\"true\");",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate\", pm.environment.get(\"startDate\"));",
													"    pm.environment.set(\"projectEndDate\", pm.environment.get(\"endDate\"));",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "82710b78-eb7d-4db2-9c4e-e7198b6f7bbf",
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\"\n  ],\n  \"automation\": true\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get release fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7780c2b6-199f-4020-a660-b6761081ea4b",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdRelease\";",
													"    var jsonData = pm.response.json();",
													"",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/\\s/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                const fieldValueId = PREFIX + field.label + item.label.replace(/\\s/g, \"\");",
													"                pm.environment.set(fieldValueId, item.value);",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/releases/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"releases",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eadb5051-642f-443f-bf1a-b33110d931ff",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newReleaseId1\", jsonData.id);",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct release info\", function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"releaseName\"));",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.description).to.not.eql(null);",
													"        pm.expect(jsonData.note).to.not.eql(null);",
													"    });",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "7444aa6c-53be-4510-bf0e-2d57b9c335b6",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"releaseName\", \"Release having full info\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate\", today.toISOString());",
													"today.setDate(today.getDate() + 10);",
													"pm.environment.set(\"endDate\", today.toISOString());",
													"",
													"pm.environment.set(\"releaseDescription\", \"Description of the release\");",
													"pm.environment.set(\"releaseNote\", \"Note of the release\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{releaseName}}\",\n    \"properties\": [\n      {\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"{{releaseDescription}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"{{releaseNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get build fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7de9b6bf-8f49-4b42-96c5-7d6c5333ba77",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdBuild\";",
													"    var jsonData = pm.response.json();",
													"",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/\\s/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                const fieldValueId = PREFIX + field.label + item.label.replace(/\\s/g, \"\");",
													"                pm.environment.set(fieldValueId, item.value);",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/builds/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"builds",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create build 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0b78a66b-936b-4d5b-a073-7a3a420fdf75",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newBuildId1\", jsonData.id);",
													"    pm.environment.set(\"build1_info\", jsonData);",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Response data has links\", function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id\", function() {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name: \" + jsonData.name, function() {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"build1_name\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has order\", function() {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid\", function() {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modify_date\", function() {",
													"        pm.expect(jsonData.last_modify_date).to.not.eql(null);",
													"    });",
													"",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has build status is 'In Progress'\", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdBuildStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Build Date\":",
													"                pm.test(\"Repsonse data has build date property\", function() {",
													"                    tmp = pm.environment.get(\"buildDate\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Build Note\":",
													"                pm.test(\"Repsonse data has build note '\" + field.field_value + \"'\", function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"buildNote\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "aea8fecc-3ff1-4be9-ab2a-996f7cab683a",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"build1_name\", \"Build 1\");",
													"",
													"var today = new Date();",
													"today.setDate(today.getDate() + 1);",
													"pm.environment.set(\"buildDate\", today.toISOString());",
													"pm.environment.set(\"buildNote\", \"Note of the build\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{build1_name}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdBuildStatus}},\n            \"field_value\": \"{{fieldIdBuildStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ],\n    \"release\": {\n    \t\"id\": \"{{newReleaseId1}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create build 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78e2a8b7-6e8e-49d8-a0a6-cc2d4e2f40eb",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newBuildId2\", jsonData.id);",
													"    pm.environment.set(\"build2_info\", jsonData);",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Response data has links\", function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id\", function() {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name: \" + jsonData.name, function() {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"build2_name\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has order\", function() {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid\", function() {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modify_date\", function() {",
													"        pm.expect(jsonData.last_modify_date).to.not.eql(null);",
													"    });",
													"",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has build status is 'In Progress'\", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdBuildStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Build Date\":",
													"                pm.test(\"Repsonse data has build date property\", function() {",
													"                    tmp = pm.environment.get(\"buildDate\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Build Note\":",
													"                pm.test(\"Repsonse data has build note '\" + field.field_value + \"'\", function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"buildNote\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5c982068-488d-45bc-8661-68937caa5a12",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"build2_name\", \"Build 2\");",
													"",
													"var today = new Date();",
													"today.setDate(today.getDate() + 1);",
													"pm.environment.set(\"buildDate\", today.toISOString());",
													"pm.environment.set(\"buildNote\", \"Note of the build\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{build2_name}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdBuildStatus}},\n            \"field_value\": \"{{fieldIdBuildStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ],\n    \"release\": {\n    \t\"id\": \"{{newReleaseId1}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Get multiple builds - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50e42a6b-1c78-4631-a122-58b939510beb",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    var jsonData = pm.response.json();",
													"    var build1_info = pm.environment.get(\"build1_info\");",
													"    var build2_info = pm.environment.get(\"build2_info\");",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    var buildInfo;",
													"    jsonData.forEach(function(buildData) {",
													"        if (buildData.id === build1_info.id) {",
													"            buildInfo = build1_info;",
													"        } else if (buildData.id === build2_info.id) {",
													"            buildInfo = build2_info;",
													"        }",
													"        pm.test(\"Response data contains build info of '\" + buildInfo.name + \"'\", function() {",
													"            pm.expect(buildData.id).to.eql(buildInfo.id);",
													"            pm.expect(buildData.name).to.eql(buildInfo.name);",
													"            pm.expect(buildData.links).to.eql(buildInfo.links);",
													"            pm.expect(buildData.order).to.eql(buildInfo.order);",
													"            pm.expect(buildData.pid).to.eql(buildInfo.pid);",
													"            pm.expect(buildData.created_date).to.eql(buildInfo.created_date);",
													"            pm.expect(buildData.last_modified_date).to.eql(buildInfo.last_modified_date);",
													"        });",
													"",
													"        buildData.properties.forEach(function(field) {",
													"            switch (field.field_name) {",
													"                case \"Status\":",
													"                    pm.test(\"Repsonse data has build status is 'In Progress'\", function() {",
													"                        pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                        pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdBuildStatusInProgress\").toString());",
													"                    });",
													"                    break;",
													"",
													"                case \"Build Date\":",
													"                    pm.test(\"Repsonse data has build date property\", function() {",
													"                        pm.expect(field.field_value).to.not.eql(null);",
													"                    });",
													"                    break;",
													"",
													"                case \"Build Note\":",
													"                    pm.test(\"Repsonse data has build note '\" + field.field_value + \"'\", function() {",
													"                        pm.expect(field.field_value).to.eql(pm.environment.get(\"buildNote\"));",
													"                    });",
													"                    break;",
													"            }",
													"        });",
													"    });",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds?releaseId={{newReleaseId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds"
											],
											"query": [
												{
													"key": "releaseId",
													"value": "{{newReleaseId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get multiple builds - Not exist projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3237199-e432-4cb4-860e-742899b610d2",
												"exec": [
													"const RESPONSE_CODE = 404;",
													"const EXPECTED_MSG = 'Project not found';",
													"const result = pm.response.code === RESPONSE_CODE;",
													"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    const jsonData = pm.response.json();",
													"    pm.test(`Response body has 'message' property value '${EXPECTED_MSG}'`, () => {",
													"        pm.expect(jsonData.message).to.contains(EXPECTED_MSG);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/0/builds?releaseId={{newReleaseId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"0",
												"builds"
											],
											"query": [
												{
													"key": "releaseId",
													"value": "{{newReleaseId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get multiple builds - Invalid projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc62d8f6-e871-4544-a388-885d6b3220bb",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'For input string'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"For input string\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/a2a{{projectId}}/builds?releaseId={{newReleaseId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"a2a{{projectId}}",
												"builds"
											],
											"query": [
												{
													"key": "releaseId",
													"value": "{{newReleaseId1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get multiple builds - Not exist releaseId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f60adbc-0c67-4720-a16f-0da2c0505ba0",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message 'Release does not exist'\", function() {",
													"        pm.expect(jsonData.message).to.eql(\"Release does not exist\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds?releaseId={{newReleaseId1}}1111",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds"
											],
											"query": [
												{
													"key": "releaseId",
													"value": "{{newReleaseId1}}1111"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Get multiple builds - Invalid releaseId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1fbb3121-567f-4707-8619-052a18559c50",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message: 'Failed to convert value of type'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Failed to convert value of type\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds?releaseId=abcd{{newReleaseId1}}1111",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds"
											],
											"query": [
												{
													"key": "releaseId",
													"value": "abcd{{newReleaseId1}}1111"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Get multiple build - Invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a4af01c0-d641-4526-bdb8-d3fccd5e1125",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 401) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"",
													"    pm.test(\"Has 'error' in response body - error: \" + jsonData.error, function() {",
													"        pm.expect(pm.response.text()).to.include(\"error\");",
													"    })",
													"",
													"    pm.test(\"Has 'error_description' in response body - error_description: 'Invalid access token'\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"error_description\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} 1111{{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds?releaseId={{newReleaseId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds"
											],
											"query": [
												{
													"key": "releaseId",
													"value": "{{newReleaseId1}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete release 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f0c5596c-d95d-4d75-9482-536c628f006e",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.environment.unset(\"newReleaseId1\");",
													"    pm.environment.unset(\"releaseInfo1\");",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "b33d6663-6648-4812-bd4f-b315223c172b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/{{newReleaseId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"{{newReleaseId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36b4197e-06d0-4c3d-b9d8-1260c9c32afb",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"projectEndDate\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "938f342a-f751-40c9-9d25-20a504007fbd",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "75a00939-8cb5-40ab-bd31-55e5cd69f29f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b6bbde3e-199f-4bb1-ac34-ba6f284d199a",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"releaseName\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"    pm.environment.unset(\"releaseDescription\");",
													"    pm.environment.unset(\"releaseNote\");",
													"    pm.environment.unset(\"fieldIdReleaseStatus\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusPlanned\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusCompleted\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusClosed\");",
													"    pm.environment.unset(\"fieldIdReleaseStartDate\");",
													"    pm.environment.unset(\"fieldIdReleaseEndDate\");",
													"    pm.environment.unset(\"fieldIdReleaseDescription\");",
													"    pm.environment.unset(\"fieldIdReleaseReleaseNote\");",
													"    ",
													"    pm.environment.unset(\"fieldIdBuildStatus\");",
													"    pm.environment.unset(\"fieldIdBuildStatusPlanned\");",
													"    pm.environment.unset(\"fieldIdBuildStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdBuildStatusCompleted\");",
													"    pm.environment.unset(\"fieldIdBuildStatusClosed\");",
													"    pm.environment.unset(\"fieldIdBuildBuildDate\");",
													"    pm.environment.unset(\"fieldIdBuildBuildNote\");",
													"    pm.environment.unset(\"newReleaseId1\");",
													"    pm.environment.unset(\"buildDate\");",
													"    pm.environment.unset(\"buildNote\");",
													"    pm.environment.unset(\"buildName\");",
													"    pm.environment.unset(\"build1_info\");",
													"    pm.environment.unset(\"build2_info\");",
													"    pm.environment.unset(\"newBuildId1\");",
													"    pm.environment.unset(\"newBuildId2\");",
													"    pm.environment.unset(\"build1_name\");",
													"    pm.environment.unset(\"build2_name\");",
													"    ",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"tokenType\");",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Update a build",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b27f242-9f2e-4fdf-b730-4aa2898a0840",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code + \" -  Login\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"    ",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9feef1a4-244d-48ae-b9dd-0445f708a839",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.test(\"Response data contains all properties of project data\", function(){",
													"        pm.expect(pm.response.text()).to.include(\"id\");",
													"        pm.expect(jsonData.name).to.eql(\"qTest API - Postman\");",
													"        pm.expect(jsonData.description).to.eql(\"Description of qTest API - Postman\");",
													"        pm.expect(pm.response.text()).to.include(\"status_id\");",
													"        pm.expect(pm.response.text()).to.include(\"start_date\");",
													"        pm.expect(pm.response.text()).to.include(\"end_date\");",
													"        pm.expect(pm.response.text()).to.include(\"sample\");",
													"        pm.expect(pm.response.text()).to.include(\"defect_tracking_systems\");",
													"        pm.expect(pm.response.text()).to.include(\"x_explorer_access_level\");",
													"        pm.expect(pm.response.text()).to.include(\"date_format\");",
													"        pm.expect(jsonData.automation.toString()).to.eql(\"true\");",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate\", pm.environment.get(\"startDate\"));",
													"    pm.environment.set(\"projectEndDate\", pm.environment.get(\"endDate\"));",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3290090d-0460-45ca-81f1-6c0c6cb758aa",
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\"\n  ],\n  \"automation\": true\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get release fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "41b98cc3-e5a3-4b54-9ccb-da132722c6a7",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdRelease\";",
													"    var jsonData = pm.response.json();",
													"",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/\\s/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                const fieldValueId = PREFIX + field.label + item.label.replace(/\\s/g, \"\");",
													"                pm.environment.set(fieldValueId, item.value);",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/releases/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"releases",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create release 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d87bdecf-2a20-4b57-a1a3-365d5cf21791",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newReleaseId1\", jsonData.id);",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct release info\", function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"releaseName\"));",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.description).to.not.eql(null);",
													"        pm.expect(jsonData.note).to.not.eql(null);",
													"    });",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0eaf6efd-43d4-4b85-8493-09112eb9e338",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"releaseName\", \"Release 1\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate\", today.toISOString());",
													"today.setDate(today.getDate() + 10);",
													"pm.environment.set(\"endDate\", today.toISOString());",
													"",
													"pm.environment.set(\"releaseDescription\", \"Description of the release\");",
													"pm.environment.set(\"releaseNote\", \"Note of the release\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{releaseName}}\",\n    \"properties\": [\n      {\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"{{releaseDescription}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"{{releaseNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get build fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bd594b20-eaec-4592-bbbd-9974a46d4ad7",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdBuild\";",
													"    var jsonData = pm.response.json();",
													"",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/\\s/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                const fieldValueId = PREFIX + field.label + item.label.replace(/\\s/g, \"\");",
													"                pm.environment.set(fieldValueId, item.value);",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/builds/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"builds",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create build 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b370e78-948b-48c2-b67b-f44f481c8503",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newBuildId1\", jsonData.id);",
													"    pm.environment.set(\"build1_info\", jsonData);",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Repsonse body has correct release info\", function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"build1_name\"));",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.description).to.not.eql(null);",
													"        pm.expect(jsonData.note).to.not.eql(null);",
													"    });",
													"    ",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has build status is 'In Progress'\", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdBuildStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Build Date\":",
													"                pm.test(\"Repsonse data has build date property\", function() {",
													"                    tmp = pm.environment.get(\"buildDate\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Build Note\":",
													"                pm.test(\"Repsonse data has build note '\" + field.field_value + \"'\", function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"buildNote\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f00d7a0e-97d3-4f63-a152-29462d026243",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"build1_name\", \"Build 1\");",
													"",
													"var today = new Date();",
													"today.setDate(today.getDate() + 1);",
													"pm.environment.set(\"buildDate\", today.toISOString());",
													"pm.environment.set(\"buildNote\", \"Note of the build\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{build1_name}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdBuildStatus}},\n            \"field_value\": \"{{fieldIdBuildStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ],\n    \"release\": {\n    \t\"id\": \"{{newReleaseId1}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Update build - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a69deaf-8b8d-43b0-ae7a-c30df14744ec",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    var jsonData = pm.response.json();",
													"    var build1_info = pm.environment.get(\"build1_info\");",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links \", function() {",
													"        pm.expect(jsonData.links).to.eql(build1_info.links);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains id\", function() {",
													"        pm.expect(jsonData.id).to.eql(pm.environment.get(\"newBuildId1\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name: \" + jsonData.name, function() {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"buildName\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data contains order: \" + jsonData.order, function() {",
													"        pm.expect(jsonData.order).to.eql(build1_info.order);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains pid\", function() {",
													"        pm.expect(jsonData.pid).to.eql(build1_info.pid);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains created_date\", function() {",
													"        pm.expect(jsonData.created_date).to.eql(build1_info.created_date);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modified_date\", function() {",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"    });",
													"",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has build status is 'In Progress'\", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdBuildStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Build Date\":",
													"                pm.test(\"Repsonse data has build date property\", function() {",
													"                    tmp = pm.environment.get(\"buildDate\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Build Note\":",
													"                pm.test(\"Repsonse data has build note '\" + field.field_value + \"'\", function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"buildNote\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "95e84db2-5eeb-416f-9c08-79f4cb17bcb9",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"buildName\", \"Build name is updated\");",
													"pm.environment.set(\"buildNote\", \"Build note is updated\");",
													"",
													"var buildDate = new Date();",
													"buildDate.setDate(buildDate.getDate() + 5);",
													"pm.environment.set('buildDate', buildDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{buildName}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdBuildStatus}},\n            \"field_value\": \"{{fieldIdBuildStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds/{{newBuildId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds",
												"{{newBuildId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Update build - Success with closed status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "865e9323-946e-4ca7-9bf4-44df6c992a11",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    var jsonData = pm.response.json();",
													"    var build1_info = pm.environment.get(\"build1_info\");",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Response data has links \", function() {",
													"        pm.expect(jsonData.links).to.eql(build1_info.links);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains id\", function() {",
													"        pm.expect(jsonData.id).to.eql(pm.environment.get(\"newBuildId1\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name: \" + jsonData.name, function() {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"buildName\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data contains order: \" + jsonData.order, function() {",
													"        pm.expect(jsonData.order).to.eql(build1_info.order);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains pid\", function() {",
													"        pm.expect(jsonData.pid).to.eql(build1_info.pid);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains created_date\", function() {",
													"        pm.expect(jsonData.created_date).to.eql(build1_info.created_date);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modified_date\", function() {",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"    });",
													"",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has build status is 'In Progress'\", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"Closed\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdBuildStatusClosed\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Build Date\":",
													"                pm.test(\"Repsonse data has build date property\", function() {",
													"                    tmp = pm.environment.get(\"buildDate\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Build Note\":",
													"                pm.test(\"Repsonse data has build note '\" + field.field_value + \"'\", function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"buildNote\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1815f068-eab8-483d-a5af-29270d09680e",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"buildName\", \"Build name is updated with Closed status\");"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{buildName}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdBuildStatus}},\n            \"field_value\": \"{{fieldIdBuildStatusClosed}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds/{{newBuildId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds",
												"{{newBuildId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Update build - Not exist projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d095e750-f9d3-4b2e-9a28-bf55e707d51f",
												"exec": [
													"const RESPONSE_CODE = 404;",
													"const EXPECTED_MSG = 'Project not found';",
													"const result = pm.response.code === RESPONSE_CODE;",
													"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    const jsonData = pm.response.json();",
													"    pm.test(`Response body has 'message' property value '${EXPECTED_MSG}'`, () => {",
													"        pm.expect(jsonData.message).to.contains(EXPECTED_MSG);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{buildName}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdBuildStatus}},\n            \"field_value\": \"{{fieldIdBuildStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/0/builds/{{newBuildId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"0",
												"builds",
												"{{newBuildId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update build - Invalid projectId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f05a4603-82b3-4705-8481-ff96588aa9bd",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'For input string'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"For input string\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{buildName}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdBuildStatus}},\n            \"field_value\": \"{{fieldIdBuildStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/a32{{projectId}}/builds/{{newBuildId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"a32{{projectId}}",
												"builds",
												"{{newBuildId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update build - Missing request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5b1b3f0d-a868-495d-9993-3009b1dc76c7",
												"exec": [
													"const RESPONSE_CODE = 400;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"const EXPECTED_MSGS = [",
													"    \"Required request body is missing\",",
													"    \"Required request body content is missing\"];",
													"    ",
													"function validateMessage(actualMessage){",
													"    let result = false;",
													"    for(const msg of EXPECTED_MSGS) {",
													"        result = actualMessage.indexOf(msg) > -1;",
													"        if(result){",
													"            console.log(`Actual message is: ${actualMessage}`);",
													"            return result;",
													"        }",
													"    }",
													"    return result;",
													"}",
													"",
													"pm.test(`Status code is ${pm.response.code}${result ? '' : ' and response body is: ' + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"if (result) {",
													"    const jsonData = pm.response.json();",
													"    pm.test(`Response body has 'message' property value in following: '${EXPECTED_MSGS.toString()}'`, () => {",
													"        pm.expect(validateMessage(jsonData.message)).to.eql(true);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6216b85d-a568-4f67-878a-a5f6dc8c9b03",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds/{{newBuildId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds",
												"{{newBuildId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Update build - Invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa179157-9425-48a3-ae8e-ae2e35204837",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 401) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"",
													"    pm.test(\"Has 'error' in response body - error: \" + jsonData.error, function() {",
													"        pm.expect(pm.response.text()).to.include(\"error\");",
													"    });",
													"",
													"    pm.test(\"Has 'error_description' in response body - error_description: 'Invalid access token'\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"error_description\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} 1111{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{buildName}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdBuildStatus}},\n            \"field_value\": \"{{fieldIdBuildStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds/{{newBuildId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds",
												"{{newBuildId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Update build - Not exist buildId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "405012eb-fe83-42cc-88a3-0794bb662315",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has json property 'message' is 'Build does not exist'\", function() {",
													"        var jsonData = pm.response.json();",
													"        pm.expect(jsonData.message).to.eql(\"Build does not exist\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3e06f5c0-a954-45ca-84f3-75bf823c4b07",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{buildName}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdBuildStatus}},\n            \"field_value\": \"{{fieldIdBuildStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds/1",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update build - Invalid releaseId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d2dcc2e-35b8-4570-a8b1-04e5eb5d1098",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'Failed to convert value of type'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Failed to convert value of type\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1c41373c-c3db-4dc1-8736-d3cf94c73528",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{buildName}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdBuildStatus}},\n            \"field_value\": \"{{fieldIdBuildStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds/a31",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds",
												"a31"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update build - Invalid status value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "64de51fa-1e22-43d5-9765-f2d916389267",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'does not allowed for field Status'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"does not allowed for field Status\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f0316b99-66c9-4641-bd49-03ce76bb5776",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{buildName}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdBuildStatus}},\n            \"field_value\": \"123{{fieldIdBuildStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds/{{newBuildId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds",
												"{{newBuildId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update build - Invalid status field id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1517185b-a9d4-461e-8151-798e88e2057a",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message\", function() {",
													"        pm.expect(jsonData.message).to.include(\"not a valid Long value\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2660a15d-3ad5-4e42-b73f-9ebb59a0e0a7",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{buildName}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": \"123{{fieldIdBuildStatus}}\",\n            \"field_value\": \"{{fieldIdBuildStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds/{{newBuildId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds",
												"{{newBuildId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update build - Invalid start date format",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e557ddfa-ca3c-49c8-b583-140df32f4d1f",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'Invalid field value'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Invalid field value\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "0e69f8eb-791b-49c8-8d8a-717057611bb4",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{buildName}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdBuildStatus}},\n            \"field_value\": \"{{fieldIdBuildStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"2018/05/01T17:32\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds/{{newBuildId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds",
												"{{newBuildId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update build - Build Date less than release start date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "37297f7e-cf12-48e8-bd3a-3c75d335b9d9",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'Invalid Build Date'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Invalid Build Date\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "593ebe6a-0316-40ba-a52c-5afae3bef35a",
												"type": "text/javascript",
												"exec": [
													"var today = new Date();",
													"today.setDate(today.getDate() - 10);",
													"pm.environment.set(\"buildDate\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{buildName}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdBuildStatus}},\n            \"field_value\": \"{{fieldIdBuildStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds/{{newBuildId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds",
												"{{newBuildId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Update build - Build Date greater than release end date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c7a3331f-90ca-4133-a573-87ed5eb3f667",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'Invalid Build Date'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"Invalid Build Date\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f1a865e3-de5d-4ed9-8351-2c60a14174cb",
												"type": "text/javascript",
												"exec": [
													"var today = new Date();",
													"today.setDate(today.getDate() + 30);",
													"pm.environment.set(\"buildDate\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{buildName}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdBuildStatus}},\n            \"field_value\": \"{{fieldIdBuildStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds/{{newBuildId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds",
												"{{newBuildId1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a6a1980-181d-41d3-9920-a550839872a9",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.environment.unset(\"newReleaseId1\");",
													"    pm.environment.unset(\"releaseInfo\");",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c872564d-8cd1-4f8a-a95a-4fa652c0a7d6",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/{{newReleaseId1}}?force=true",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"{{newReleaseId1}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2077e74d-0947-42a8-bb6e-f197ab892d8d",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"projectEndDate\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1a723c98-4052-4085-9868-f502937f019d",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e2590131-613d-4e0a-8832-95b86a0b01d6",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "87321ae4-8c28-4bb1-8c2d-729ef34d82b3",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"releaseName\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"    pm.environment.unset(\"releaseDescription\");",
													"    pm.environment.unset(\"releaseNote\");",
													"    pm.environment.unset(\"fieldIdReleaseStatus\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusPlanned\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusCompleted\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusClosed\");",
													"    pm.environment.unset(\"fieldIdReleaseStartDate\");",
													"    pm.environment.unset(\"fieldIdReleaseEndDate\");",
													"    pm.environment.unset(\"fieldIdReleaseDescription\");",
													"    pm.environment.unset(\"fieldIdReleaseReleaseNote\");",
													"    ",
													"    pm.environment.unset(\"fieldIdBuildStatus\");",
													"    pm.environment.unset(\"fieldIdBuildStatusPlanned\");",
													"    pm.environment.unset(\"fieldIdBuildStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdBuildStatusCompleted\");",
													"    pm.environment.unset(\"fieldIdBuildStatusClosed\");",
													"    pm.environment.unset(\"fieldIdBuildBuildDate\");",
													"    pm.environment.unset(\"fieldIdBuildBuildNote\");",
													"    pm.environment.unset(\"newReleaseId1\");",
													"    pm.environment.unset(\"newBuildId1\");",
													"    pm.environment.unset(\"newBuildId2\");",
													"    pm.environment.unset(\"buildDate\");",
													"    pm.environment.unset(\"buildNote\");",
													"    pm.environment.unset(\"buildName\");",
													"    pm.environment.unset(\"build1_info\");",
													"    pm.environment.unset(\"build1_name\");",
													"    ",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"tokenType\");",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Delete a build",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c510eb87-5bd2-4605-aeee-e3fea5d7920b",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code + \" -  Login\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"    ",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c77fad2-a6e9-4911-887a-2dad956dca53",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.test(\"Response data contains all properties of project data\", function(){",
													"        pm.expect(pm.response.text()).to.include(\"id\");",
													"        pm.expect(jsonData.name).to.eql(\"qTest API - Postman\");",
													"        pm.expect(jsonData.description).to.eql(\"Description of qTest API - Postman\");",
													"        pm.expect(pm.response.text()).to.include(\"status_id\");",
													"        pm.expect(pm.response.text()).to.include(\"start_date\");",
													"        pm.expect(pm.response.text()).to.include(\"end_date\");",
													"        pm.expect(pm.response.text()).to.include(\"sample\");",
													"        pm.expect(pm.response.text()).to.include(\"defect_tracking_systems\");",
													"        pm.expect(pm.response.text()).to.include(\"x_explorer_access_level\");",
													"        pm.expect(pm.response.text()).to.include(\"date_format\");",
													"        pm.expect(jsonData.automation.toString()).to.eql(\"true\");",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate\", pm.environment.get(\"startDate\"));",
													"    pm.environment.set(\"projectEndDate\", pm.environment.get(\"endDate\"));",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "61f83da8-0130-4bff-991b-b8580f7b46d2",
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\"\n  ],\n  \"automation\": true\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get release fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "08f90fc0-4da5-4f5b-b86e-52eb49086970",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdRelease\";",
													"    var jsonData = pm.response.json();",
													"",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/\\s/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                const fieldValueId = PREFIX + field.label + item.label.replace(/\\s/g, \"\");",
													"                pm.environment.set(fieldValueId, item.value);",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/releases/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"releases",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d17d0d86-6ca2-444a-9f25-7af000b87a73",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newReleaseId1\", jsonData.id);",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct release info\", function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"releaseName\"));",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.description).to.not.eql(null);",
													"        pm.expect(jsonData.note).to.not.eql(null);",
													"    });",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f17e4baf-9b8e-4393-83ae-1718939aa061",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"releaseName\", \"Release 1\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate\", today.toISOString());",
													"today.setDate(today.getDate() + 10);",
													"pm.environment.set(\"endDate\", today.toISOString());",
													"",
													"pm.environment.set(\"releaseDescription\", \"Description of the release\");",
													"pm.environment.set(\"releaseNote\", \"Note of the release\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{releaseName}}\",\n    \"properties\": [\n      {\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"{{releaseDescription}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"{{releaseNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get build fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d2d91c2b-8608-4e75-b045-63d6b40d1cd2",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdBuild\";",
													"    var jsonData = pm.response.json();",
													"",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/\\s/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                const fieldValueId = PREFIX + field.label + item.label.replace(/\\s/g, \"\");",
													"                pm.environment.set(fieldValueId, item.value);",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/builds/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"builds",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create build 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f6ec8443-41bf-47ef-a9e8-e60829f877e0",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newBuildId1\", jsonData.id);",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Response data has links\", function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id\", function() {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name: \" + jsonData.name, function() {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"buildName\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has order\", function() {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid\", function() {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modify_date\", function() {",
													"        pm.expect(jsonData.last_modify_date).to.not.eql(null);",
													"    });",
													"",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has build status is 'In Progress'\", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdBuildStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Build Date\":",
													"                pm.test(\"Repsonse data has build date property\", function() {",
													"                    tmp = pm.environment.get(\"buildDate\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Build Note\":",
													"                pm.test(\"Repsonse data has build note '\" + field.field_value + \"'\", function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"buildNote\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "4cbe2a93-4bb8-4a3d-95be-0d733d8d28ef",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"buildName\", \"Build 1\");",
													"",
													"var today = new Date();",
													"today.setDate(today.getDate() + 1);",
													"pm.environment.set(\"buildDate\", today.toISOString());",
													"pm.environment.set(\"buildNote\", \"Note of the build\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{buildName}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdBuildStatus}},\n            \"field_value\": \"{{fieldIdBuildStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ],\n    \"release\": {\n    \t\"id\": \"{{newReleaseId1}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create build 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "99b61cb3-4bb2-4f4a-9a76-fbaaac9c4bfc",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newBuildId2\", jsonData.id);",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Response data has links\", function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id\", function() {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name: \" + jsonData.name, function() {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"buildName\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has order\", function() {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid\", function() {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modify_date\", function() {",
													"        pm.expect(jsonData.last_modify_date).to.not.eql(null);",
													"    });",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has build status is 'In Progress'\", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdBuildStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Build Date\":",
													"                pm.test(\"Repsonse data has build date property\", function() {",
													"                    tmp = pm.environment.get(\"buildDate\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Build Note\":",
													"                pm.test(\"Repsonse data has build note '\" + field.field_value + \"'\", function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"buildNote\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c7a015d3-7308-4f21-a930-17fe059b7155",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"buildName\", \"Build 2\");",
													"",
													"var today = new Date();",
													"today.setDate(today.getDate() + 1);",
													"pm.environment.set(\"buildDate\", today.toISOString());",
													"pm.environment.set(\"buildNote\", \"Note of the build\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{buildName}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdBuildStatus}},\n            \"field_value\": \"{{fieldIdBuildStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ],\n    \"release\": {\n    \t\"id\": \"{{newReleaseId1}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Delete build - Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f7f0ac6-70c5-48ef-b084-9979250f3743",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c85eb5c6-058c-466f-a022-99d47f35f54e",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds/{{newBuildId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds",
												"{{newBuildId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Delete build - Get the deleted buildId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e094ae0-9705-4ee4-a1e4-314a3d11a987",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message 'Build does not exist'\", function() {",
													"        pm.expect(jsonData.message).to.eql(\"Build does not exist\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3e2f7c1b-dd2c-4628-873f-d3754f9eccc7",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds/{{newBuildId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds",
												"{{newBuildId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "404 - Delete build - Not exist releaseId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "20734c32-912a-4b6f-ade0-0b8af95d4121",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 404) {",
													"",
													"    pm.test(\"Status code is 404\", function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has json property 'message' is 'Build does not exist'\", function() {",
													"        var jsonData = pm.response.json();",
													"        pm.expect(jsonData.message).to.eql(\"Build does not exist\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(404);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c4e53cf5-f79f-44f9-84c2-06fa8ad3d58e",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds/{{newBuildId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds",
												"{{newBuildId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Delete build - Invalid buildId",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9df127da-4272-4857-8a5c-00cb20852a26",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has json property 'message' is 'Failed to convert value of type'\", function() {",
													"        var jsonData = pm.response.json();",
													"        pm.expect(jsonData.message).to.include(\"Failed to convert value of type\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "bb8182ea-bc24-4032-9314-a051a28dd564",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds/ab{{newBuildId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds",
												"ab{{newBuildId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Delete build - Invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9ea1d758-b39c-445c-99cb-efbe6065e488",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 401) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"",
													"    pm.test(\"Has 'error' in response body - error: \" + jsonData.error, function() {",
													"        pm.expect(pm.response.text()).to.include(\"error\");",
													"    })",
													"",
													"    pm.test(\"Has 'error_description' in response body - error_description: 'Invalid access token'\", function() {",
													"        pm.expect(pm.response.text()).to.include(\"error_description\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(401);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} 1111{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds/{{newBuildId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds",
												"{{newBuildId1}}"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete release",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "443c6a22-2016-4c3c-b3b6-1299d5e51fea",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.environment.unset(\"newReleaseId1\");",
													"    pm.environment.unset(\"releaseInfo\");",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "3ce40887-333d-4d3e-8841-4a66090ff4b6",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/{{newReleaseId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"{{newReleaseId1}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88536f81-6bf8-4fca-973c-65afeb0763f4",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"projectEndDate\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "c0e993c1-cea8-408b-8398-b5363f6024b2",
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "47c64dad-b90f-4064-8f68-d278930b0a0e",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a0fc94ce-5998-4570-a3fd-44557ca77f2d",
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"newReleaseId\");",
													"    pm.environment.unset(\"releaseName\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"    pm.environment.unset(\"releaseDescription\");",
													"    pm.environment.unset(\"releaseNote\");",
													"    pm.environment.unset(\"fieldIdReleaseStatus\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusPlanned\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusCompleted\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusClosed\");",
													"    pm.environment.unset(\"fieldIdReleaseStartDate\");",
													"    pm.environment.unset(\"fieldIdReleaseEndDate\");",
													"    pm.environment.unset(\"fieldIdReleaseDescription\");",
													"    pm.environment.unset(\"fieldIdReleaseReleaseNote\");",
													"    ",
													"    pm.environment.unset(\"fieldIdBuildStatus\");",
													"    pm.environment.unset(\"fieldIdBuildStatusPlanned\");",
													"    pm.environment.unset(\"fieldIdBuildStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdBuildStatusCompleted\");",
													"    pm.environment.unset(\"fieldIdBuildStatusClosed\");",
													"    pm.environment.unset(\"fieldIdBuildBuildDate\");",
													"    pm.environment.unset(\"fieldIdBuildBuildNote\");",
													"    pm.environment.unset(\"newReleaseId1\");",
													"    pm.environment.unset(\"newBuildId1\");",
													"    pm.environment.unset(\"newBuildId2\");",
													"    pm.environment.unset(\"buildDate\");",
													"    pm.environment.unset(\"buildNote\");",
													"    pm.environment.unset(\"buildName\");",
													"    pm.environment.unset(\"build1_name\");",
													"    pm.environment.unset(\"build2_name\");",
													"    ",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"tokenType\");",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "04778362-e318-4085-9963-6749e2789bf8",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "ef0b634f-7b40-462b-b8bd-c9a74178c019",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}