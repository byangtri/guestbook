{
	"info": {
		"_postman_id": "214decb0-2299-450a-ad77-77b3822643d4",
		"name": "QTestManagersmokeTest4",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "SmokeTest4",
			"item": [
				{
					"name": "Create a test cycle",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code + \" -  Login\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"    ",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Get user id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Response data contains data of apiuser1@qas.com\", function() {",
													"        pm.expect(jsonData.items[0].username).to.eql(pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"        pm.expect(pm.response.text()).to.include(\"email\");",
													"        pm.expect(jsonData.items[0].first_name).to.eql(\"API\");",
													"        pm.expect(jsonData.items[0].last_name).to.eql(\"User 1\");",
													"        pm.expect(pm.response.text()).to.include(\"status\");",
													"        pm.expect(pm.response.text()).to.include(\"timezone_offset\");",
													"        pm.expect(pm.response.text()).to.include(\"country_name\");",
													"    });",
													"    ",
													"    pm.environment.set(\"userId\", jsonData.items[0].id);",
													"",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"username1\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"pm.environment.set(\"firstName1\", \"API\");",
													"pm.environment.set(\"lastName1\", \"User 1\");",
													"pm.environment.set(\"email1\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/users/search?username={{username1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"users",
												"search"
											],
											"query": [
												{
													"key": "username",
													"value": "{{username1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 201) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"    pm.test(\"Response data contains all properties of project data\", function(){",
													"        pm.expect(pm.response.text()).to.include(\"id\");",
													"        pm.expect(jsonData.name).to.eql(\"qTest API - Postman\");",
													"        pm.expect(jsonData.description).to.eql(\"Description of qTest API - Postman\");",
													"        pm.expect(pm.response.text()).to.include(\"status_id\");",
													"        pm.expect(pm.response.text()).to.include(\"start_date\");",
													"        pm.expect(pm.response.text()).to.include(\"end_date\");",
													"        pm.expect(pm.response.text()).to.include(\"sample\");",
													"        pm.expect(pm.response.text()).to.include(\"defect_tracking_systems\");",
													"        pm.expect(pm.response.text()).to.include(\"x_explorer_access_level\");",
													"        pm.expect(pm.response.text()).to.include(\"date_format\");",
													"        pm.expect(jsonData.automation.toString()).to.eql(\"true\");",
													"    });",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate\", pm.environment.get(\"startDate\"));",
													"    pm.environment.set(\"projectEndDate\", pm.environment.get(\"endDate\"));",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(201);",
													"    });",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\", \"{{prefixApiUser}}apiuser1@qas.com\"\n  ],\n  \"automation\": true\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get release fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdRelease\";",
													"    var jsonData = pm.response.json();",
													"",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/\\s/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                const fieldValueId = PREFIX + field.label + item.label.replace(/\\s/g, \"\");",
													"                pm.environment.set(fieldValueId, item.value);",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/releases/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"releases",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create Release",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newReleaseId1\", jsonData.id);",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has correct release info\", function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"releaseName\"));",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"        pm.expect(jsonData.last_modified_date).to.not.eql(null);",
													"        pm.expect(jsonData.description).to.not.eql(null);",
													"        pm.expect(jsonData.note).to.not.eql(null);",
													"    });",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"releaseName\", \"Release 1\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate\", today.toISOString());",
													"today.setDate(today.getDate() + 10);",
													"pm.environment.set(\"endDate\", today.toISOString());",
													"",
													"pm.environment.set(\"releaseDescription\", \"Description of the release\");",
													"pm.environment.set(\"releaseNote\", \"Note of the release\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{releaseName}}\",\n    \"properties\": [\n      {\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"{{releaseDescription}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"{{releaseNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get build fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"    const PREFIX = \"fieldIdBuild\";",
													"    var jsonData = pm.response.json();",
													"",
													"    jsonData.forEach(function(field) {",
													"        pm.environment.set(PREFIX + field.label.replace(/\\s/g, \"\"), field.id);",
													"        if (field.allowed_values) {",
													"            field.allowed_values.forEach(function(item) {",
													"                const fieldValueId = PREFIX + field.label + item.label.replace(/\\s/g, \"\");",
													"                pm.environment.set(fieldValueId, item.value);",
													"            });",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/builds/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"builds",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create build",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newBuildId1\", jsonData.id);",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Response data has links\", function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id\", function() {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name: \" + jsonData.name, function() {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"buildName\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has order\", function() {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid\", function() {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modify_date\", function() {",
													"        pm.expect(jsonData.last_modify_date).to.not.eql(null);",
													"    });",
													"",
													"",
													"    var tmp;",
													"    jsonData.properties.forEach(function(field) {",
													"        switch (field.field_name) {",
													"            case \"Status\":",
													"                pm.test(\"Repsonse data has build status is 'In Progress'\", function() {",
													"                    pm.expect(field.field_value_name).to.eql(\"In Progress\");",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"fieldIdBuildStatusInProgress\").toString());",
													"                });",
													"                break;",
													"",
													"            case \"Build Date\":",
													"                pm.test(\"Repsonse data has property build date\", function() {",
													"                    tmp = pm.environment.get(\"buildDate\").split(\".\");",
													"                    pm.expect(field.field_value).to.include(tmp[0]);",
													"                });",
													"                break;",
													"",
													"            case \"Build Note\":",
													"                pm.test(\"Repsonse data has build note '\" + field.field_value + \"'\", function() {",
													"                    pm.expect(field.field_value).to.eql(pm.environment.get(\"buildNote\"));",
													"                });",
													"                break;",
													"        }",
													"    });",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"buildName\", \"Build 1\");",
													"",
													"var today = new Date();",
													"today.setDate(today.getDate() + 1);",
													"pm.environment.set(\"buildDate\", today.toISOString());",
													"pm.environment.set(\"buildNote\", \"Note of the build\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{buildName}}\",\n    \"properties\": [\n    \t{\n            \"field_id\": {{fieldIdBuildStatus}},\n            \"field_value\": \"{{fieldIdBuildStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ],\n    \"release\": {\n    \t\"id\": \"{{newReleaseId1}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Create test cycle - Success with parentType=root",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"cycle1_id\", jsonData.id);",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Response data has links\", function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id\", function() {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name: \" + jsonData.name, function() {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"cycleName\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has order\", function() {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid\", function() {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modify_date\", function() {",
													"        pm.expect(jsonData.last_modify_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains description: \" + jsonData.description, function() {",
													"        pm.expect(jsonData.description).to.eql(pm.environment.get(\"cycleDescription\"));",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"cycleName\", \"Test Cycle 1\");",
													"pm.environment.set(\"cycleDescription\", \"Description of Test Cycle 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{cycleName}}\",\n    \"description\": \"{{cycleDescription}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cycles?parentId=0&parentType=root",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cycles"
											],
											"query": [
												{
													"key": "parentId",
													"value": "0"
												},
												{
													"key": "parentType",
													"value": "root"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create test cycle - Not exist test cycle id",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains message: 'TestCycle does not exist'\", function() {",
													"        pm.expect(jsonData.message).to.include(\"does not exist\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Test Cycle 1\",\n    \"description\": \"Description of Test Cycle 1\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cycles?parentId={{cycle1_id}}1111&parentType=test-cycle",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cycles"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{cycle1_id}}1111"
												},
												{
													"key": "parentType",
													"value": "test-cycle"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create test cycle - Invalid test cycle id",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"    const expectedMessage = 'Failed to convert value of type';",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(`Repsonse body has message property contains '${expectedMessage}'`, function() {",
													"        pm.expect(jsonData.message).to.include(expectedMessage);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Test Cycle 1\",\n    \"description\": \"Description of Test Cycle 1\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cycles?parentId=ab{{newReleaseId1}}1111&parentType=test-cycle",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cycles"
											],
											"query": [
												{
													"key": "parentId",
													"value": "ab{{newReleaseId1}}1111"
												},
												{
													"key": "parentType",
													"value": "test-cycle"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create test cycle - With name contains more than 500 chars",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"    var jsonData = pm.response.json();",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(\"Repsonse body has property message contains 'name size must be between 1 and 500'\", function() {",
													"        pm.expect(jsonData.message).to.eql(\"name size must be between 1 and 500\");",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI - The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI - The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI- The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI -The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI\",\n  \"description\": \"Description for Test Cycle 1\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cycles?parentId={{newReleaseId1}}&parentType=release",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cycles"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newReleaseId1}}"
												},
												{
													"key": "parentType",
													"value": "release"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create test cycle - Invalid target_release_id",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 400) {",
													"",
													"    var jsonData = pm.response.json();",
													"    const expectedMessage = 'not a valid Long value';",
													"    pm.test(\"Status code is 400\", function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"",
													"    pm.test(`Repsonse body has message property contains '${expectedMessage}'`, function() {",
													"        pm.expect(jsonData.message).to.include(expectedMessage);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(400);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"Test Cycle of Release 1\",\n    \"description\": \"Description of Test Cycle 1\",\n    \"target_release_id\": \"abc{{newReleaseId1}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cycles?parentType=release",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cycles"
											],
											"query": [
												{
													"key": "parentType",
													"value": "release"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Create test cycle - Under release and associated with buildId",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"cycle7_id\", jsonData.id);",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Response data has links\", function() {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has id\", function() {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains name: \" + jsonData.name, function() {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"cycleName\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data has order\", function() {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has pid\", function() {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has created_date\", function() {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data has last_modify_date\", function() {",
													"        pm.expect(jsonData.last_modify_date).to.not.eql(null);",
													"    });",
													"    ",
													"    pm.test(\"Response data contains description: \" + jsonData.description, function() {",
													"        pm.expect(jsonData.description).to.eql(pm.environment.get(\"cycleDescription\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data contains value of target_release_id property\", function() {",
													"        pm.expect(jsonData.target_release_id).to.eql(pm.environment.get(\"newReleaseId1\"));",
													"    });",
													"    ",
													"    pm.test(\"Response data contains value of target_build_id property\", function() {",
													"        pm.expect(jsonData.target_build_id).to.eql(pm.environment.get(\"newBuildId1\"));",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"cycleName\", \"Cycle 3 of Build 1\");",
													"pm.environment.set(\"cycleDescription\", \"Description of Cycle 3 of Build 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{cycleName}}\",\n    \"description\": \"{{cycleDescription}}\",\n    \"target_build_id\": \"{{newBuildId1}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cycles?parentType=release&parentId={{newReleaseId1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cycles"
											],
											"query": [
												{
													"key": "parentType",
													"value": "release"
												},
												{
													"key": "parentId",
													"value": "{{newReleaseId1}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete release",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.environment.unset(\"newReleaseId1\");",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases/{{newReleaseId1}}?force=true",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases",
												"{{newReleaseId1}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete test cycle 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cycles/{{cycle1_id}}?force=true",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cycles",
												"{{cycle1_id}}"
											],
											"query": [
												{
													"key": "force",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete test cycle 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cycles/{{cycle4_id}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cycles",
												"{{cycle4_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete test cycle 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Status code is 200\", function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"",
													"} else {",
													"    pm.test(\"Status code: \" + pm.response.code + \"and response body:\" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cycles/{{cycle5_id}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cycles",
												"{{cycle5_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"projectEndDate\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.environment.unset(\"releaseName\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"    pm.environment.unset(\"releaseDescription\");",
													"    pm.environment.unset(\"releaseNote\");",
													"    pm.environment.unset(\"fieldIdReleaseStatus\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusPlanned\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusCompleted\");",
													"    pm.environment.unset(\"fieldIdReleaseStatusClosed\");",
													"    pm.environment.unset(\"fieldIdReleaseStartDate\");",
													"    pm.environment.unset(\"fieldIdReleaseEndDate\");",
													"    pm.environment.unset(\"fieldIdReleaseDescription\");",
													"    pm.environment.unset(\"fieldIdReleaseReleaseNote\");",
													"    ",
													"    pm.environment.unset(\"fieldIdBuildStatus\");",
													"    pm.environment.unset(\"fieldIdBuildStatusPlanned\");",
													"    pm.environment.unset(\"fieldIdBuildStatusInProgress\");",
													"    pm.environment.unset(\"fieldIdBuildStatusCompleted\");",
													"    pm.environment.unset(\"fieldIdBuildStatusClosed\");",
													"    pm.environment.unset(\"fieldIdBuildBuildDate\");",
													"    pm.environment.unset(\"fieldIdBuildBuildNote\");",
													"    pm.environment.unset(\"newReleaseId1\");",
													"    pm.environment.unset(\"newBuildId1\");",
													"    pm.environment.unset(\"buildDate\");",
													"    pm.environment.unset(\"buildNote\");",
													"    pm.environment.unset(\"buildName\");",
													"    ",
													"    pm.environment.unset(\"cycleName\");",
													"    pm.environment.unset(\"cycleDescription\");",
													"    pm.environment.unset(\"cycle1_id\");",
													"    pm.environment.unset(\"cycle2_id\");",
													"    pm.environment.unset(\"cycle3_id\");",
													"    pm.environment.unset(\"cycle4_id\");",
													"    pm.environment.unset(\"cycle5_id\");",
													"    pm.environment.unset(\"cycle6_id\");",
													"    pm.environment.unset(\"cycle7_id\");",
													"    pm.environment.unset(\"cycle8_id\");",
													"    ",
													"    pm.environment.unset(\"siteAdminId\");",
													"    pm.environment.unset(\"userId\");",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"tokenType\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"    ",
													"    pm.environment.unset(\"username1\");",
													"    pm.environment.unset(\"firstName1\");",
													"    pm.environment.unset(\"lastName1\");",
													"    pm.environment.unset(\"email1\");",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "Create a test suite",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Precondition - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    //assert response body",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"",
													"    let CryptoJS = require(\"crypto-js\");",
													"    //Encrypt",
													"    let rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    let base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 201;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 201-Created",
													"pm.test(`Response status should be 201-Created ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.environment.set(\"projectId\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate\", jsonData.start_date);",
													"    pm.environment.set(\"projectEndDate\", jsonData.end_date);",
													"    pm.environment.set(\"projectName\", jsonData.name);",
													"    ",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman - Create a Test Suite\",\n  \"description\": \"Description of qTest API Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\"\n  ],\n  \"automation\": true\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Queries Users by Project Name",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.environment.set(\"userList\", jsonData.items);",
													"    ",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/search/user?projectName={{projectName}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"search",
												"user"
											],
											"query": [
												{
													"key": "projectName",
													"value": "{{projectName}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get release fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"const PREFIX = \"fieldIdRelease\";",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"",
													"    var jsonData = pm.response.json();",
													"    var userList = pm.environment.get(\"userList\");",
													"    pm.environment.set(\"releaseFields\", jsonData);",
													"",
													"    jsonData.forEach((field) => {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"",
													"        if (field.allowed_values) {",
													"            var fieldValueId = \"\";",
													"",
													"            field.allowed_values.forEach((item, index) => {",
													"                fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                pm.environment.set(fieldValueId, item.value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/releases/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"releases",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create Release",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newReleaseId1\", jsonData.id);",
													"    pm.environment.set(\"releaseInfo1\", jsonData);",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"releaseName\", \"Release 1\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate\", today.toISOString());",
													"today.setDate(today.getDate() + 10);",
													"pm.environment.set(\"endDate\", today.toISOString());",
													"",
													"pm.environment.set(\"releaseDescription\", \"Description of the release\");",
													"pm.environment.set(\"releaseNote\", \"Note of the release\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{releaseName}}\",\n    \"properties\": [\n      {\n            \"field_id\": {{fieldIdReleaseStatus}},\n            \"field_value\": \"{{fieldIdReleaseStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseStartDate}},\n            \"field_value\": \"{{startDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseEndDate}},\n            \"field_value\": \"{{endDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseDescription}},\n            \"field_value\": \"{{releaseDescription}}\"\n        },\n        {\n            \"field_id\": {{fieldIdReleaseReleaseNote}},\n            \"field_value\": \"{{releaseNote}}\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/releases",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"releases"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get build fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"const PREFIX = \"fieldIdBuild\";",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    var jsonData = pm.response.json();",
													"    var userList = pm.environment.get(\"userList\");",
													"    pm.environment.set(\"buildFields\", jsonData);",
													"",
													"    jsonData.forEach((field) => {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"",
													"        if (field.allowed_values) {",
													"            var fieldValueId = \"\";",
													"",
													"            field.allowed_values.forEach((item, index) => {",
													"                fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                pm.environment.set(fieldValueId, item.value);",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/builds/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"builds",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create build",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newBuildId1\", jsonData.id);",
													"    pm.environment.set(\"buildInfo1\", jsonData);",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"buildName\", \"Build 1\");",
													"",
													"var today = new Date();",
													"today.setDate(today.getDate() + 1);",
													"pm.environment.set(\"buildDate\", today.toISOString());",
													"pm.environment.set(\"buildNote\", \"Note of the build\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{buildName}}\",\n    \"properties\": [\n      {\n            \"field_id\": {{fieldIdBuildStatus}},\n            \"field_value\": \"{{fieldIdBuildStatusInProgress}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildDate}},\n            \"field_value\": \"{{buildDate}}\"\n        },\n        {\n            \"field_id\": {{fieldIdBuildBuildNote}},\n            \"field_value\": \"{{buildNote}}\"\n        }\n    ],\n    \"release\": {\n      \"id\": \"{{newReleaseId1}}\"\n    }\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/builds",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"builds"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Create a cycle",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"newCycleId1\", jsonData.id);",
													"    pm.environment.set(\"cycleInfo1\", jsonData);",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"cycleName\", \"Cycle 1\");",
													"pm.environment.set(\"cycleDescription\", \"Description of Test Cycle 1\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{cycleName}}\",\n    \"description\": \"{{cycleDescription}}\"\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-cycles?parentId=0&parentType=root",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-cycles"
											],
											"query": [
												{
													"key": "parentId",
													"value": "0"
												},
												{
													"key": "parentType",
													"value": "root"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get test suite fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"const PREFIX = \"fieldIdTestSuite\";",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    var jsonData = pm.response.json();",
													"    var userList = pm.environment.get(\"userList\");",
													"    pm.environment.set(\"testSuiteFields\", jsonData);",
													"",
													"    jsonData.forEach((field) => {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"",
													"        if (field.allowed_values) {",
													"            var fieldValueId = \"\";",
													"",
													"            field.allowed_values.forEach((item, index) => {",
													"",
													"                switch (field.label) {",
													"                    case \"Assigned To\":",
													"                        userList.forEach((user, userIndex) => {",
													"                            // Just save variables of users who have admin permission",
													"                            if (item.label === `${user.first_name} ${user.last_name}`) {",
													"                                if (user.username === pm.environment.get(\"username\")) {",
													"                                    // UserTest: user who directly affects to the test case",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + `UserTest`;",
													"                                    pm.environment.set(\"userTestFullName\", item.label);",
													"                                } else {",
													"                                    // Other users who have admin permission",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                                }",
													"                                pm.environment.set(fieldValueId, item.value);",
													"                            }",
													"                        });",
													"                        break;",
													"                    case \"Target Release/Build\":",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"Target\" + (index + 1).toString();",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                        break;",
													"                    default:",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                        break;",
													"                }",
													"",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/settings/test-suites/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"settings",
												"test-suites",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Get user id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    pm.test(\"Response data contains data of apiuser1@qas.com\", function() {",
													"        pm.expect(jsonData.items[0].username).to.eql(pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"        pm.expect(pm.response.text()).to.include(\"email\");",
													"        pm.expect(jsonData.items[0].first_name).to.eql(\"API\");",
													"        pm.expect(jsonData.items[0].last_name).to.eql(\"User 1\");",
													"        pm.expect(pm.response.text()).to.include(\"status\");",
													"        pm.expect(pm.response.text()).to.include(\"timezone_offset\");",
													"        pm.expect(pm.response.text()).to.include(\"country_name\");",
													"    });",
													"    ",
													"    pm.environment.set(\"userId\", jsonData.items[0].id);",
													"",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(201);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Inititalize Json body for api user 1. To be reused as baseline when verifying in test script",
													"let apiuser1 = {",
													"    \"username\": pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\",",
													"    \"first_name\": \"API\",",
													"    \"last_name\": \"User 1\",",
													"    \"email\": \"{{username}}\",",
													"    \"password\": \"{{password}}\"",
													"};",
													"pm.environment.set(\"assignedUser2\", apiuser1.username);"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/users/search?username={{assignedUser2}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"users",
												"search"
											],
											"query": [
												{
													"key": "username",
													"value": "{{assignedUser2}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Precondition - Create project 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 201;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 201-Created",
													"pm.test(`Response status should be 201-Created ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"",
													"if (result) {",
													"   //get response body",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"projectId2\", jsonData.id);",
													"    pm.environment.set(\"projectStartDate2\", jsonData.start_date);",
													"    pm.environment.set(\"projectEndDate2\", jsonData.end_date);",
													"    pm.environment.set(\"projectName2\", jsonData.name);",
													"    ",
													"    pm.environment.unset(\"startDate2\");",
													"    pm.environment.unset(\"endDate2\");",
													"}",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"let startDate = new Date();",
													"let endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"// Function to add 0 before datetime value if it is less than 10",
													"Number.prototype.padLeft = function(base, chr) {",
													"    var len = (String(base || 10).length - String(this).length) + 1;",
													"    return len > 0 ? new Array(len).join(chr || '0') + this : this;",
													"};",
													"",
													"// Generate dynamic string for ProfileName",
													"let uniqueString = new Date(),",
													"    uniqueStringFormat = [(uniqueString.getMonth() + 1).padLeft(),",
													"        uniqueString.getDate().padLeft(),",
													"        uniqueString.getFullYear(),",
													"    ].join('') + '-' + [uniqueString.getHours().padLeft(),",
													"        uniqueString.getMinutes().padLeft(),",
													"        uniqueString.getSeconds().padLeft(),",
													"        uniqueString.getMilliseconds().padLeft()",
													"    ].join('');",
													"",
													"const projectName = \"qTest API - Postman\";",
													"pm.environment.set(\"projectName2\", `${projectName}${uniqueStringFormat}`);",
													"",
													"pm.environment.set(\"startDate2\", startDate.toISOString());",
													"pm.environment.set(\"endDate2\", endDate.toISOString());",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{projectName2}}\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"start_date\": \"{{startDate2}}\",\n  \"end_date\": \"{{endDate2}}\",\n  \"admins\": [\n     \"{{username}}\",\"{{assignedUser2}}\"\n  ],\n  \"automation\": true\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Queries Users by Project Name 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.environment.set(\"userList2\", jsonData.items);",
													"    ",
													"}"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/search/user?projectName={{projectName2}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"search",
												"user"
											],
											"query": [
												{
													"key": "projectName",
													"value": "{{projectName2}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Get test suite fields 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"const PREFIX = \"fieldIdTestSuite2\";",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    var jsonData = pm.response.json();",
													"    var userList = pm.environment.get(\"userList2\");",
													"    pm.environment.set(\"testSuiteFields2\", jsonData);",
													"",
													"    jsonData.forEach((field) => {",
													"        pm.environment.set(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\"), field.id);",
													"",
													"        if (field.allowed_values) {",
													"            var fieldValueId = \"\";",
													"",
													"            field.allowed_values.forEach((item, index) => {",
													"",
													"                switch (field.label) {",
													"                    case \"Assigned To\":",
													"                        userList.forEach((user, userIndex) => {",
													"                            // Just save variables of users who have admin permission",
													"                            if (item.label === `${user.first_name} ${user.last_name}`) {",
													"                                if (user.username === pm.environment.get(\"username\")) {",
													"                                    // UserTest: user who directly affects to the test case",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + `UserTest`;",
													"                                    pm.environment.set(\"userTestFullName\", item.label);",
													"                                } else {",
													"                                    // Other users who have admin permission",
													"                                    fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                                }",
													"                                pm.environment.set(fieldValueId, item.value);",
													"                            }",
													"                        });",
													"                        break;",
													"                    case \"Target Release/Build\":",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"Target\" + (index + 1).toString();",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                        break;",
													"                    default:",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                        pm.environment.set(fieldValueId, item.value);",
													"                        break;",
													"                }",
													"",
													"            });",
													"        }",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId2}}/settings/test-suites/fields",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId2}}",
												"settings",
												"test-suites",
												"fields"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Precondition - Login - Success with normal user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"pm.test(\"Status code is returned as 200-OK\", () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    let jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken1\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType1\", jsonData.token_type);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{prefixApiUser}}apiuser1@qas.com",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "200 - Create test suite - Success at root",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"const suiteName = pm.environment.get(\"suiteName\");",
													"const assignedUserId = pm.environment.get(\"fieldIdTestSuiteAssignedToUserTest\");",
													"const assignedFullName = pm.environment.get(\"userTestFullName\");",
													"const executionTypeId = pm.environment.get(\"fieldIdTestSuiteExecutionTypeSmoke\");",
													"const executionName = \"Smoke\";",
													"const description = pm.environment.get(\"suiteDescription\");",
													"const plannedStartDate = pm.environment.get(\"startDate\").split(\".\");",
													"const plannedEndDate = pm.environment.get(\"endDate\").split(\".\");",
													"const plannedStartDateFieldId = pm.environment.get(\"fieldIdTestSuitePlannedStartDate\");",
													"const plannedEndDateFieldId = pm.environment.get(\"fieldIdTestSuitePlannedEndDate\");",
													"const targetReleaseBuildFieldId = pm.environment.get(\"fieldIdTestSuiteTargetReleaseBuild\");",
													"const environmentFieldId = pm.environment.get(\"fieldIdTestSuiteEnvironment\");",
													"const assignedToFieldId = pm.environment.get(\"fieldIdTestSuiteAssignedTo\");",
													"const executionTypeFieldId = pm.environment.get(\"fieldIdTestSuiteExecutionType\");",
													"const descriptionFieldId = pm.environment.get(\"fieldIdTestSuiteDescription\");",
													"const expectedResponse = {",
													"    \"name\": suiteName,",
													"    \"properties\": [{",
													"        \"field_id\": plannedStartDateFieldId.toString(),",
													"        \"field_name\": \"Planned Start Date\",",
													"        \"field_value\": plannedStartDate[0],",
													"    }, {",
													"        \"field_id\": plannedEndDateFieldId.toString(),",
													"        \"field_name\": \"Planned End Date\",",
													"        \"field_value\": plannedEndDate[0],",
													"    }, {",
													"        \"field_id\": targetReleaseBuildFieldId,",
													"        \"field_name\": \"Target Release/Build\",",
													"        \"field_value\": \"\"",
													"    }, {",
													"        \"field_id\": environmentFieldId,",
													"        \"field_name\": \"Environment\",",
													"        \"field_value\": \"\"",
													"    }, {",
													"        \"field_id\": assignedToFieldId,",
													"        \"field_name\": \"Assigned To\",",
													"        \"field_value\": `[${assignedUserId}]`,",
													"        \"field_value_name\": `[${assignedFullName}]`",
													"    }, {",
													"        \"field_id\": executionTypeFieldId,",
													"        \"field_name\": \"Execution Type\",",
													"        \"field_value\": executionTypeId,",
													"        \"field_value_name\": executionName",
													"    }, {",
													"        \"field_id\": descriptionFieldId,",
													"        \"field_name\": \"Description\",",
													"        \"field_value\": description",
													"    }]",
													"};",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value",
													"function searchJSONItemFromList(jsonList, expectedKey, expectedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            return jsonList[i];",
													"        }",
													"    }",
													"    return null;",
													"}",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"",
													"    let jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data has links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has id\", () => {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains name\", () => {",
													"        pm.expect(jsonData.name).to.eql(expectedResponse.name);",
													"    });",
													"",
													"    pm.test(\"Response data has order\", () => {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has pid\", () => {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has created_date\", () => {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has last_modify_date\", () => {",
													"        pm.expect(jsonData.last_modify_date).to.not.eql(null);",
													"    });",
													"",
													"    // Verify that number of properties in in JSON response should be the same as expectation",
													"    pm.test(\"Number of properties in in JSON response should be the same as expectation\", () => {",
													"        pm.expect(jsonData.properties.length).to.eql(expectedResponse.properties.length);",
													"    });",
													"",
													"    // Get Planned Start Date property to verify",
													"    const orgPlannedStartDate = searchJSONItemFromList(jsonData.properties, \"field_name\", \"Planned Start Date\");",
													"    const expPlannedStartDate = searchJSONItemFromList(expectedResponse.properties, \"field_name\", \"Planned Start Date\");",
													"    pm.test(\"Repsonse data contains Planned Start Date\", () => {",
													"        pm.expect(orgPlannedStartDate.field_id.toString()).to.include(expPlannedStartDate.field_id);",
													"        pm.expect(orgPlannedStartDate.field_value).to.include(expPlannedStartDate.field_value);",
													"    });",
													"",
													"    // Get Planned End Date property to verify",
													"    const orgPlannedEndDate = searchJSONItemFromList(jsonData.properties, \"field_name\", \"Planned End Date\");",
													"    const expPlannedEndDate = searchJSONItemFromList(expectedResponse.properties, \"field_name\", \"Planned End Date\");",
													"    pm.test(\"Repsonse data contains Planned End Date\", () => {",
													"        pm.expect(orgPlannedEndDate.field_id.toString()).to.include(expPlannedEndDate.field_id);",
													"        pm.expect(orgPlannedEndDate.field_value).to.include(expPlannedEndDate.field_value);",
													"    });",
													"",
													"    // Get Target Release/Build property to verify",
													"    const orgTargetReleaseBuild = searchJSONItemFromList(jsonData.properties, \"field_name\", \"Target Release/Build\");",
													"    const expTargetReleaseBuild = searchJSONItemFromList(expectedResponse.properties, \"field_name\", \"Target Release/Build\");",
													"    pm.test(\"Repsonse data has Target Release/Build property\", () => {",
													"        pm.expect(orgTargetReleaseBuild.field_id).to.eql(expTargetReleaseBuild.field_id);",
													"        pm.expect(orgTargetReleaseBuild.field_value).to.eql(expTargetReleaseBuild.field_value);",
													"    });",
													"",
													"    // Get Environment property to verify",
													"    const orgEnvironment = searchJSONItemFromList(jsonData.properties, \"field_name\", \"Environment\");",
													"    const expEnvironment = searchJSONItemFromList(expectedResponse.properties, \"field_name\", \"Environment\");",
													"    pm.test(\"Repsonse data has Environment property\", () => {",
													"        pm.expect(orgEnvironment.field_id).to.eql(expEnvironment.field_id);",
													"        pm.expect(orgEnvironment.field_value).to.eql(expEnvironment.field_value);",
													"    });",
													"",
													"",
													"    // Get Assigned To property to verify",
													"    const orgAssignedTo = searchJSONItemFromList(jsonData.properties, \"field_name\", \"Assigned To\");",
													"    const expAssignedTo = searchJSONItemFromList(expectedResponse.properties, \"field_name\", \"Assigned To\");",
													"    pm.test(\"Repsonse data has Assigned To property\", () => {",
													"        pm.expect(orgAssignedTo.field_id).to.eql(expAssignedTo.field_id);",
													"        pm.expect(orgAssignedTo.field_value).to.eql(expAssignedTo.field_value);",
													"    });",
													"",
													"    // Get Execution Type property to verify",
													"    const orgExecutionType = searchJSONItemFromList(jsonData.properties, \"field_name\", \"Execution Type\");",
													"    const expExecutionType = searchJSONItemFromList(expectedResponse.properties, \"field_name\", \"Execution Type\");",
													"    pm.test(\"Repsonse data has Execution Type property\", () => {",
													"        pm.expect(orgExecutionType.field_id).to.eql(expExecutionType.field_id);",
													"        pm.expect(orgExecutionType.field_value).to.eql(expExecutionType.field_value.toString());",
													"        pm.expect(orgExecutionType.field_value_name).to.eql(expExecutionType.field_value_name);",
													"    });",
													"",
													"    // Get Description property to verify",
													"    const orgDescription = searchJSONItemFromList(jsonData.properties, \"field_name\", \"Description\");",
													"    const expDescription = searchJSONItemFromList(expectedResponse.properties, \"field_name\", \"Description\");",
													"    pm.test(\"Repsonse data has Description property\", () => {",
													"        pm.expect(orgDescription.field_id).to.eql(expDescription.field_id);",
													"        pm.expect(orgDescription.field_value).to.eql(expDescription.field_value);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"suiteName\", \"Suite Root\");",
													"pm.environment.set(\"suiteDescription\", \"Description of Test Suite 1\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate\", today.toISOString());",
													"today.setDate(today.getDate() + 10);",
													"pm.environment.set(\"endDate\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"{{suiteName}}\",\n\t\"properties\": [\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuitePlannedStartDate}},\n\t\t\t\"field_value\": \"{{startDate}}\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuitePlannedEndDate}},\n\t\t\t\"field_value\": \"{{endDate}}\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuiteAssignedTo}},\n\t\t\t\"field_value\": \"[{{fieldIdTestSuiteAssignedToUserTest}}]\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuiteExecutionType}},\n\t\t\t\"field_value\": \"{{fieldIdTestSuiteExecutionTypeSmoke}}\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuiteDescription}},\n\t\t\t\"field_value\": \"{{suiteDescription}}\"\n\t\t\t\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-suites?parentId=0&parentType=root",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-suites"
											],
											"query": [
												{
													"key": "parentId",
													"value": "0"
												},
												{
													"key": "parentType",
													"value": "root"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create test suite - Not exist field id",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 400;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"const expectedErrorMessage = \"Field 1234 does not exist\";",
													"",
													"// Verify that the returned status should be 400-Bad Request",
													"pm.test(`Response status should be 400-Bad Request ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response data has message: 'Field 1234 does not exist'\", () => {",
													"        pm.expect(jsonData.message).to.eql(expectedErrorMessage);",
													"    });",
													"",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"startDate\", today.toISOString());",
													"today.setDate(today.getDate() + 10);",
													"pm.environment.set(\"endDate\", today.toISOString());",
													"",
													"pm.environment.set(\"notExistPostfix\", \"1234\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Suite 400\",\n\t\"properties\": [\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuitePlannedStartDate}},\n\t\t\t\"field_value\": \"{{startDate}}\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuitePlannedEndDate}},\n\t\t\t\"field_value\": \"{{endDate}}\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuiteAssignedTo}},\n\t\t\t\"field_value\": \"[{{fieldIdTestSuiteAssignedToUserTest}}]\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuiteExecutionType}},\n\t\t\t\"field_value\": \"{{fieldIdTestSuiteExecutionTypeSmoke}}\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuiteDescription}},\n\t\t\t\"field_value\": \"{{suiteDescription}}\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": 1234,\n\t\t\t\"field_value\": \"abcd\"\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-suites",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-suites"
											],
											"query": [
												{
													"key": "parentId",
													"value": "0",
													"disabled": true
												},
												{
													"key": "parentType",
													"value": "root",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Create test suite - Success with parent is test cycle",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"const suiteName = pm.environment.get(\"suiteName\");",
													"const assignedUserId = pm.environment.get(\"fieldIdTestSuiteAssignedToUserTest\");",
													"const assignedFullName = pm.environment.get(\"userTestFullName\");",
													"const executionTypeId = pm.environment.get(\"fieldIdTestSuiteExecutionTypeSmoke\");",
													"const executionName = \"Smoke\";",
													"const description = pm.environment.get(\"suiteDescription\");",
													"const plannedStartDate = pm.environment.get(\"startDate\").split(\".\");",
													"const plannedEndDate = pm.environment.get(\"endDate\").split(\".\");",
													"const plannedStartDateFieldId = pm.environment.get(\"fieldIdTestSuitePlannedStartDate\");",
													"const plannedEndDateFieldId = pm.environment.get(\"fieldIdTestSuitePlannedEndDate\");",
													"const targetReleaseBuildFieldId = pm.environment.get(\"fieldIdTestSuiteTargetReleaseBuild\");",
													"const environmentFieldId = pm.environment.get(\"fieldIdTestSuiteEnvironment\");",
													"const assignedToFieldId = pm.environment.get(\"fieldIdTestSuiteAssignedTo\");",
													"const executionTypeFieldId = pm.environment.get(\"fieldIdTestSuiteExecutionType\");",
													"const descriptionFieldId = pm.environment.get(\"fieldIdTestSuiteDescription\");",
													"const expectedResponse = {",
													"    \"name\": suiteName,",
													"    \"properties\": [{",
													"        \"field_id\": plannedStartDateFieldId.toString(),",
													"        \"field_name\": \"Planned Start Date\",",
													"        \"field_value\": plannedStartDate[0]",
													"    }, {",
													"        \"field_id\": plannedEndDateFieldId.toString(),",
													"        \"field_name\": \"Planned End Date\",",
													"        \"field_value\": plannedEndDate[0]",
													"    }, {",
													"        \"field_id\": targetReleaseBuildFieldId,",
													"        \"field_name\": \"Target Release/Build\",",
													"        \"field_value\": \"\"",
													"    }, {",
													"        \"field_id\": environmentFieldId,",
													"        \"field_name\": \"Environment\",",
													"        \"field_value\": \"\"",
													"    }, {",
													"        \"field_id\": assignedToFieldId,",
													"        \"field_name\": \"Assigned To\",",
													"        \"field_value\": `[${assignedUserId}]`,",
													"        \"field_value_name\": `[${assignedFullName}]`",
													"    }, {",
													"        \"field_id\": executionTypeFieldId,",
													"        \"field_name\": \"Execution Type\",",
													"        \"field_value\": executionTypeId.toString(),",
													"        \"field_value_name\": executionName",
													"    }, {",
													"        \"field_id\": descriptionFieldId,",
													"        \"field_name\": \"Description\",",
													"        \"field_value\": description",
													"    }]",
													"};",
													"",
													"// Implementation function Looking for an json item from json item list by expected key and value",
													"function searchJSONItemFromList(jsonList, expectedKey, expectedValue) {",
													"    for (let i = 0; i < jsonList.length; i++) {",
													"        if (jsonList[i][expectedKey] == expectedValue) {",
													"            return jsonList[i];",
													"        }",
													"    }",
													"    return null;",
													"}",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.environment.set(\"newTestSuiteId1\", jsonData.id);",
													"    pm.environment.set(\"testSuiteInfo1\", jsonData);",
													"",
													"    pm.test(\"Response data has links\", () => {",
													"        pm.expect(jsonData.links).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has id\", () => {",
													"        pm.expect(jsonData.id).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data contains name\", () => {",
													"        pm.expect(jsonData.name).to.eql(expectedResponse.name);",
													"    });",
													"",
													"    pm.test(\"Response data has order\", () => {",
													"        pm.expect(jsonData.order).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has pid\", () => {",
													"        pm.expect(jsonData.pid).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has created_date\", () => {",
													"        pm.expect(jsonData.created_date).to.not.eql(null);",
													"    });",
													"",
													"    pm.test(\"Response data has last_modify_date\", () => {",
													"        pm.expect(jsonData.last_modify_date).to.not.eql(null);",
													"    });",
													"",
													"    // Verify that number of properties in in JSON response should be the same as expectation",
													"    pm.test(\"Number of properties in in JSON response should be the same as expectation\", () => {",
													"        pm.expect(jsonData.properties.length).to.eql(expectedResponse.properties.length);",
													"    });",
													"",
													"    // Get Planned Start Date property to verify",
													"    const orgPlannedStartDate = searchJSONItemFromList(jsonData.properties, \"field_name\", \"Planned Start Date\");",
													"    const expPlannedStartDate = searchJSONItemFromList(expectedResponse.properties, \"field_name\", \"Planned Start Date\");",
													"    pm.test(\"Repsonse data contains Planned Start Date\", () => {",
													"        pm.expect(orgPlannedStartDate.field_id.toString()).to.include(expPlannedStartDate.field_id);",
													"        pm.expect(orgPlannedStartDate.field_value).to.include(expPlannedStartDate.field_value);",
													"    });",
													"",
													"    // Get Planned End Date property to verify",
													"    const orgPlannedEndDate = searchJSONItemFromList(jsonData.properties, \"field_name\", \"Planned End Date\");",
													"    const expPlannedEndDate = searchJSONItemFromList(expectedResponse.properties, \"field_name\", \"Planned End Date\");",
													"    pm.test(\"Repsonse data contains Planned End Date\", () => {",
													"        pm.expect(orgPlannedEndDate.field_id.toString()).to.include(expPlannedEndDate.field_id);",
													"        pm.expect(orgPlannedEndDate.field_value).to.include(expPlannedEndDate.field_value);",
													"    });",
													"",
													"    // Get Target Release/Build property to verify",
													"    const orgTargetReleaseBuild = searchJSONItemFromList(jsonData.properties, \"field_name\", \"Target Release/Build\");",
													"    const expTargetReleaseBuild = searchJSONItemFromList(expectedResponse.properties, \"field_name\", \"Target Release/Build\");",
													"    pm.test(\"Repsonse data has Target Release/Build property\", () => {",
													"        pm.expect(orgTargetReleaseBuild.field_id).to.eql(expTargetReleaseBuild.field_id);",
													"        pm.expect(orgTargetReleaseBuild.field_value).to.eql(expTargetReleaseBuild.field_value);",
													"    });",
													"",
													"    // Get Environment property to verify",
													"    const orgEnvironment = searchJSONItemFromList(jsonData.properties, \"field_name\", \"Environment\");",
													"    const expEnvironment = searchJSONItemFromList(expectedResponse.properties, \"field_name\", \"Environment\");",
													"    pm.test(\"Repsonse data has Environment property\", () => {",
													"        pm.expect(orgEnvironment.field_id).to.eql(expEnvironment.field_id);",
													"        pm.expect(orgEnvironment.field_value).to.eql(expEnvironment.field_value);",
													"    });",
													"",
													"",
													"    // Get Assigned To property to verify",
													"    const orgAssignedTo = searchJSONItemFromList(jsonData.properties, \"field_name\", \"Assigned To\");",
													"    const expAssignedTo = searchJSONItemFromList(expectedResponse.properties, \"field_name\", \"Assigned To\");",
													"    pm.test(\"Repsonse data has Assigned To property\", () => {",
													"        pm.expect(orgAssignedTo.field_id).to.eql(expAssignedTo.field_id);",
													"        pm.expect(orgAssignedTo.field_value).to.eql(expAssignedTo.field_value);",
													"    });",
													"",
													"    // Get Execution Type property to verify",
													"    const orgExecutionType = searchJSONItemFromList(jsonData.properties, \"field_name\", \"Execution Type\");",
													"    const expExecutionType = searchJSONItemFromList(expectedResponse.properties, \"field_name\", \"Execution Type\");",
													"    pm.test(\"Repsonse data has Execution Type property\", () => {",
													"        pm.expect(orgExecutionType.field_id).to.eql(expExecutionType.field_id);",
													"        pm.expect(orgExecutionType.field_value).to.eql(expExecutionType.field_value.toString());",
													"        pm.expect(orgExecutionType.field_value_name).to.eql(expExecutionType.field_value_name);",
													"    });",
													"",
													"    // Get Description property to verify",
													"    const orgDescription = searchJSONItemFromList(jsonData.properties, \"field_name\", \"Description\");",
													"    const expDescription = searchJSONItemFromList(expectedResponse.properties, \"field_name\", \"Description\");",
													"    pm.test(\"Repsonse data has Description property\", () => {",
													"        pm.expect(orgDescription.field_id).to.eql(expDescription.field_id);",
													"        pm.expect(orgDescription.field_value).to.eql(expDescription.field_value);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"suiteName\", \"Suite of Cycle 1\");",
													"pm.environment.set(\"suiteDescription\", \"Description of Test Suite 3\");",
													"",
													"var today = new Date();",
													"pm.environment.set(\"startDate\", today.toISOString());",
													"today.setDate(today.getDate() + 5);",
													"pm.environment.set(\"endDate\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"{{suiteName}}\",\n\t\"properties\": [\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuitePlannedStartDate}},\n\t\t\t\"field_value\": \"{{startDate}}\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuitePlannedEndDate}},\n\t\t\t\"field_value\": \"{{endDate}}\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuiteAssignedTo}},\n\t\t\t\"field_value\": \"[{{fieldIdTestSuiteAssignedToUserTest}}]\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuiteExecutionType}},\n\t\t\t\"field_value\": \"{{fieldIdTestSuiteExecutionTypeSmoke}}\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuiteDescription}},\n\t\t\t\"field_value\": \"{{suiteDescription}}\"\n\t\t\t\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-suites?parentId={{newCycleId1}}&parentType=test-cycle",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-suites"
											],
											"query": [
												{
													"key": "parentId",
													"value": "{{newCycleId1}}"
												},
												{
													"key": "parentType",
													"value": "test-cycle"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Create test suite - Property name has more than 500 characters",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 400;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"const expectedErrorMessage = \"name size must be between 1 and 500\";",
													"",
													"// Verify that the returned status should be 400-Bad Request",
													"pm.test(`Response status should be 400-Bad Request ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Response data contains message: \" + jsonData.message, () => {",
													"        pm.expect(jsonData.message).to.eql(expectedErrorMessage);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"startDate\", today.toISOString());",
													"today.setDate(today.getDate() + 10);",
													"pm.environment.set(\"endDate\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI - The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI - The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI- The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI -The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI The OPTIONS method represents a request for information about the communication options available on the request/response chain identified by the Request-URI\",\n\t\"properties\": [\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuitePlannedStartDate}},\n\t\t\t\"field_value\": \"{{startDate}}\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuitePlannedEndDate}},\n\t\t\t\"field_value\": \"{{endDate}}\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuiteAssignedTo}},\n\t\t\t\"field_value\": \"[{{fieldIdTestSuiteAssignedToUserTest}}]\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuiteExecutionType}},\n\t\t\t\"field_value\": \"{{fieldIdTestSuiteExecutionTypeSmoke}}\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuiteDescription}},\n\t\t\t\"field_value\": \"Description 400\"\n\t\t\t\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-suites?parentId=0&parentType=root",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-suites"
											],
											"query": [
												{
													"key": "parentId",
													"value": "0"
												},
												{
													"key": "parentType",
													"value": "root"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Create test suite - Invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const RESPONSE_CODE = 401;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"const expectedErrorMessage = \"Invalid access token\";",
													"",
													"// Verify that the returned status should be 401-Unauthorized",
													"pm.test(`Response status should be 401-Unauthorized ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Repsonse body has property message value contains 'Invalid access token'\", function() {",
													"        pm.expect(jsonData.error_description).to.include(expectedErrorMessage);",
													"    });",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var today = new Date();",
													"pm.environment.set(\"startDate\", today.toISOString());",
													"today.setDate(today.getDate() + 5);",
													"pm.environment.set(\"endDate\", today.toISOString());"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}000"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"Suite 400\",\n\t\"properties\": [\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuitePlannedStartDate}},\n\t\t\t\"field_value\": \"{{startDate}}\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuitePlannedEndDate}},\n\t\t\t\"field_value\": \"{{endDate}}\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuiteAssignedTo}},\n\t\t\t\"field_value\": \"[{{fieldIdTestSuiteAssignedToUserTest}}]\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuiteExecutionType}},\n\t\t\t\"field_value\": \"{{fieldIdTestSuiteExecutionTypeSmoke}}\"\n\t\t\t\n\t\t},\n\t\t{\n\t\t\t\"field_id\": {{fieldIdTestSuiteDescription}},\n\t\t\t\"field_value\": \"Description 400\"\n\t\t\t\n\t\t}\n\t]\n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects/{{projectId}}/test-suites?parentId=0&parentType=root",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects",
												"{{projectId}}",
												"test-suites"
											],
											"query": [
												{
													"key": "parentId",
													"value": "0"
												},
												{
													"key": "parentType",
													"value": "root"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete project",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"    });",
													"    ",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Logout",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"/*",
													"  Unset all fields of type. Valid Type values are Release, Build, TestSuite",
													"*/",
													"function unsetFieldIdsOfType(type, fieldsArray) {",
													"    const PREFIX = `fieldId${type}`;",
													"    let userList = pm.environment.get(\"userList\");",
													"",
													"    fieldsArray.forEach((field) => {",
													"        let variableName = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\");",
													"        pm.environment.unset(variableName);",
													"",
													"        if (field.allowed_values) {",
													"            let fieldValueId = \"\";",
													"",
													"            field.allowed_values.forEach((item, index) => {",
													"                switch (field.label) {",
													"                    case \"Assigned To\":",
													"                        pm.environment.unset(PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"UserTest\");",
													"",
													"                        userList.forEach((user, userIndex) => {",
													"                            fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                            pm.environment.unset(fieldValueId);",
													"                        });",
													"                        break;",
													"",
													"                    case \"Target Release/Build\":",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + \"Target\" + (index + 1).toString();",
													"                        pm.environment.unset(fieldValueId);",
													"                        break;",
													"",
													"                    default:",
													"                        fieldValueId = PREFIX + field.label.replace(/[\\s\\/-]/g, \"\") + item.label.replace(/[\\s\\/-]/g, \"\");",
													"                        pm.environment.unset(fieldValueId);",
													"                        break;",
													"                }",
													"",
													"            });",
													"        }",
													"    });",
													"",
													"}",
													"",
													"const RESPONSE_CODE = 200;",
													"const result = pm.response.code === RESPONSE_CODE;",
													"",
													"// Verify that the returned status should be 200-OK",
													"pm.test(`Response status should be 200-OK ${result? \"\": \" but the returned is \" + pm.response.code + \" and body is:\\n\" + pm.response.text()}`, () => {",
													"    pm.response.to.have.status(RESPONSE_CODE);",
													"});",
													"",
													"if (result) {",
													"    var releaseFields = pm.environment.get(\"releaseFields\");",
													"    var buildFields = pm.environment.get(\"buildFields\");",
													"    var testSuiteFields = pm.environment.get(\"testSuiteFields\");",
													"",
													"    unsetFieldIdsOfType(\"Release\", releaseFields);",
													"    unsetFieldIdsOfType(\"Build\", buildFields);",
													"    unsetFieldIdsOfType(\"TestSuite\", testSuiteFields);",
													"",
													"    pm.environment.unset(\"releaseFields\");",
													"    pm.environment.unset(\"buildFields\");",
													"    pm.environment.unset(\"testSuiteFields\");",
													"",
													"    var testSuiteFields2 = pm.environment.get(\"testSuiteFields2\");",
													"",
													"    unsetFieldIdsOfType(\"TestSuite2\", testSuiteFields2);",
													"    pm.environment.unset(\"testSuiteFields2\");",
													"",
													"    pm.environment.unset(\"qtestUserCookie\");",
													"    pm.environment.unset(\"tokenType\");",
													"    pm.environment.unset(\"csrfToken\");",
													"    pm.environment.unset(\"accessToken\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"projectEndDate\");",
													"    pm.environment.unset(\"projectStartDate\");",
													"    pm.environment.unset(\"projectId\");",
													"    pm.environment.unset(\"userId\");",
													"",
													"    pm.environment.unset(\"releaseName\");",
													"    pm.environment.unset(\"startDate\");",
													"    pm.environment.unset(\"endDate\");",
													"    pm.environment.unset(\"startDate2\");",
													"    pm.environment.unset(\"endDate2\");",
													"    ",
													"    pm.environment.unset(\"releaseDescription\");",
													"    pm.environment.unset(\"releaseNote\");",
													"",
													"    pm.environment.unset(\"newReleaseId1\");",
													"    pm.environment.unset(\"releaseInfo1\");",
													"",
													"    pm.environment.unset(\"newBuildId1\");",
													"    pm.environment.unset(\"buildInfo1\");",
													"    pm.environment.unset(\"buildDate\");",
													"    pm.environment.unset(\"buildNote\");",
													"    pm.environment.unset(\"buildName\");",
													"",
													"    pm.environment.unset(\"cycleName\");",
													"    pm.environment.unset(\"cycleDescription\");",
													"    pm.environment.unset(\"newCycleId1\");",
													"    pm.environment.unset(\"cycleInfo1\");",
													"",
													"    pm.environment.unset(\"newTestSuiteId1\");",
													"    pm.environment.unset(\"testSuiteInfo1\");",
													"    pm.environment.unset(\"suiteDescription\");",
													"    pm.environment.unset(\"suiteName\");",
													"",
													"    pm.environment.unset(\"notExistPostfix\");",
													"    pm.environment.unset(\"invalidPostfix\");",
													"",
													"    pm.environment.unset(\"userList\");",
													"    pm.environment.unset(\"userTestFullName\");",
													"    pm.environment.unset(\"projectName\");",
													"",
													"    pm.environment.unset(\"apiuser1\");",
													"",
													"    pm.environment.unset(\"assignedUser2\");",
													"    pm.environment.unset(\"projectId2\");",
													"    pm.environment.unset(\"projectName2\");",
													"    pm.environment.unset(\"projectStartDate2\");",
													"    pm.environment.unset(\"projectEndDate2\");",
													"    pm.environment.unset(\"accessToken1\");",
													"    pm.environment.unset(\"tokenType1\");",
													"    pm.environment.unset(\"userList2\");",
													"    pm.environment.unset(\"testSuiteFields2\");",
													"    pm.environment.unset(\"suiteName2\");",
													"    pm.environment.unset(\"suiteDescription2\");",
													"    pm.environment.unset(\"fieldIdTestSuiteAssignedToAPIUser1\");",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Create a project",
					"item": [
						{
							"name": "Precondition",
							"item": [
								{
									"name": "200 - Login success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseCode = 200;",
													"",
													"if (pm.response.code === responseCode) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType\", jsonData.token_type);",
													"",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{username}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Login  with user 2 - Site Admin user has no Create Project permission",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseCode = 200;",
													"",
													"if (pm.response.code === responseCode) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken2\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType2\", jsonData.token_type);",
													"",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie2\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{prefixApiUser}}apiuser2@qas.com",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Login  with user 3 - normal user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseCode = 200;",
													"",
													"if (pm.response.code === responseCode) {",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"    //assert response body",
													"    var jsonData = pm.response.json();",
													"    pm.environment.set(\"accessToken3\", jsonData.access_token);",
													"    pm.environment.set(\"tokenType3\", jsonData.token_type);",
													"",
													"    //Encrypt",
													"    var CryptoJS = require(\"crypto-js\");",
													"    var rawStr = CryptoJS.enc.Utf8.parse(jsonData.access_token);",
													"    var base64 = CryptoJS.enc.Base64.stringify(rawStr);",
													"    pm.environment.set(\"qtestUserCookie3\", \"UserContextToken=\" + base64);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic dGFtdG1uZ3V5ZW46"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "grant_type",
													"value": "password",
													"type": "text"
												},
												{
													"key": "username",
													"value": "{{prefixApiUser}}apiuser3@qas.com",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/token",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Get user id - Systen admin user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseCode = 200;\r",
													"\r",
													"if (pm.response.code === responseCode) {\r",
													"    //get response body\r",
													"    var jsonData = pm.response.json();\r",
													"    //assert status\r",
													"    pm.test(\"Response status: \" + pm.response.code, function() {\r",
													"        pm.response.to.have.status(responseCode);\r",
													"    });\r",
													"    \r",
													"    pm.environment.set(\"userId\", jsonData.items[0].id);\r",
													"\r",
													"} else {\r",
													"    //other mark failed\r",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {\r",
													"        pm.response.to.have.status(responseCode);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/users/search?username={{username}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"users",
												"search"
											],
											"query": [
												{
													"key": "username",
													"value": "{{username}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Get user id of user 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseCode = 200;",
													"",
													"if (pm.response.code === responseCode) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    //assert status",
													"    pm.test(\"Response status: \" + pm.response.code, function() {",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"    pm.test(\"Response data contains data of apiuser1@qas.com\", function() {",
													"        pm.expect(jsonData.items[0].username).to.eql(pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"        pm.expect(pm.response.text()).to.include(\"email\");",
													"        pm.expect(jsonData.items[0].first_name).to.eql(\"API\");",
													"        pm.expect(jsonData.items[0].last_name).to.eql(\"User 1\");",
													"        pm.expect(pm.response.text()).to.include(\"status\");",
													"        pm.expect(pm.response.text()).to.include(\"timezone_offset\");",
													"        pm.expect(pm.response.text()).to.include(\"country_name\");",
													"    });",
													"    ",
													"    pm.environment.set(\"userId1\", jsonData.items[0].id);",
													"",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"username1\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");",
													"pm.environment.set(\"firstName1\", \"API\");",
													"pm.environment.set(\"lastName1\", \"User 1\");",
													"pm.environment.set(\"email1\", pm.environment.get(\"prefixApiUser\")+\"apiuser1@qas.com\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/users/search?username={{username1}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"users",
												"search"
											],
											"query": [
												{
													"key": "username",
													"value": "{{username1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Get user id of user 2 - Site Admin user has no Create Project permission",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseCode = 200;\r",
													"\r",
													"if (pm.response.code === responseCode) {\r",
													"    //get response body\r",
													"    var jsonData = pm.response.json();\r",
													"    //assert status\r",
													"    pm.test(\"Response status: \" + pm.response.code, function() {\r",
													"        pm.response.to.have.status(responseCode);\r",
													"    });\r",
													"    pm.test(\"Response data contains data of apiuser2@qas.com\", function() {\r",
													"        \r",
													"        pm.expect(pm.response.text()).to.include(\"email\");\r",
													"\t\tpm.expect(pm.response.text()).to.include(\"first_name\");\r",
													"\t\tpm.expect(pm.response.text()).to.include(\"last_name\");\r",
													"\t\tpm.expect(pm.response.text()).to.include(\"status\");\r",
													"        pm.expect(pm.response.text()).to.include(\"timezone_offset\");\r",
													"        pm.expect(pm.response.text()).to.include(\"country_name\");\r",
													"\t\tpm.expect(jsonData.items[0].username).to.eql(pm.environment.get(\"prefixApiUser\")+\"apiuser2@qas.com\");\r",
													"        pm.expect(jsonData.items[0].first_name).to.eql(\"API\");\r",
													"        pm.expect(jsonData.items[0].last_name).to.eql(\"User 2\");\r",
													"        \r",
													"    });\r",
													"    \r",
													"    pm.environment.set(\"userId2\", jsonData.items[0].id);\r",
													"\r",
													"} else {\r",
													"    //other mark failed\r",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {\r",
													"        pm.response.to.have.status(responseCode);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"username2\", pm.environment.get(\"prefixApiUser\")+\"apiuser2@qas.com\");",
													"pm.environment.set(\"firstName2\", \"API\");",
													"pm.environment.set(\"lastName2\", \"User 2\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/users/search?username={{username2}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"users",
												"search"
											],
											"query": [
												{
													"key": "username",
													"value": "{{username2}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Get user id of user 3 - normal user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseCode = 200;\r",
													"\r",
													"if (pm.response.code === responseCode) {\r",
													"    //get response body\r",
													"    var jsonData = pm.response.json();\r",
													"    //assert status\r",
													"    pm.test(\"Response status: \" + pm.response.code, function() {\r",
													"        pm.response.to.have.status(responseCode);\r",
													"    });\r",
													"    pm.test(\"Response data contains data of apiuser3@qas.com\", function() {\r",
													"        \r",
													"        pm.expect(pm.response.text()).to.include(\"email\");\r",
													"\t\tpm.expect(pm.response.text()).to.include(\"first_name\");\r",
													"\t\tpm.expect(pm.response.text()).to.include(\"last_name\");\r",
													"\t\tpm.expect(pm.response.text()).to.include(\"status\");\r",
													"        pm.expect(pm.response.text()).to.include(\"timezone_offset\");\r",
													"        pm.expect(pm.response.text()).to.include(\"country_name\");\r",
													"\t\tpm.expect(jsonData.items[0].username).to.eql(pm.environment.get(\"prefixApiUser\")+\"apiuser3@qas.com\");\r",
													"        pm.expect(jsonData.items[0].first_name).to.eql(\"API\");\r",
													"        pm.expect(jsonData.items[0].last_name).to.eql(\"User 3\");\r",
													"        \r",
													"    });\r",
													"    \r",
													"    pm.environment.set(\"userId3\", jsonData.items[0].id);\r",
													"\r",
													"} else {\r",
													"    //other mark failed\r",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {\r",
													"        pm.response.to.have.status(responseCode);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"username3\", pm.environment.get(\"prefixApiUser\")+\"apiuser3@qas.com\");",
													"pm.environment.set(\"firstName3\", \"API\");",
													"pm.environment.set(\"lastName3\", \"User 3\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/users/search?username={{username3}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"users",
												"search"
											],
											"query": [
												{
													"key": "username",
													"value": "{{username3}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Create Custome User Group without Create Project permission",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var statusCode = 200;",
													"//assert status",
													"pm.test(\"Response status: \" + pm.response.code, function() {",
													"    pm.response.to.have.status(statusCode);",
													"});",
													"",
													"if (pm.response.code === statusCode) {",
													"    ",
													"     //get response body",
													"    var jsonData = pm.response.json();",
													"    pm.test(\"Response body returns ID property correctly \", function() {",
													"        pm.expect(jsonData.id).to.greaterThan(0);",
													"    });",
													"    pm.test(\"Name is correct\", function() {",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"customeGroupName\"));",
													"    });",
													"    ",
													"    pm.environment.set(\"idCustomGroup\",jsonData.id);",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(statusCode);",
													"    });",
													"}"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Function to add 0 before datetime value if it is less than 10",
													"Number.prototype.padLeft = function(base, chr) {",
													"   var len = (String(base || 10).length - String(this).length) + 1;",
													"   return len > 0 ? new Array(len).join(chr || '0') + this : this;",
													"};",
													"",
													"// Generate dynamic string for ProfileName",
													"let uniqueString = new Date(),",
													"    uniqueStringFormat = [(uniqueString.getMonth() + 1).padLeft(),",
													"       uniqueString.getDate().padLeft(),",
													"       uniqueString.getFullYear(),",
													"   ].join('') + '-' + [uniqueString.getHours().padLeft(),",
													"       uniqueString.getMinutes().padLeft(),",
													"       uniqueString.getSeconds().padLeft(),",
													"       uniqueString.getMilliseconds().padLeft()",
													"   ].join('');",
													"   ",
													"const customeGroupName = \"qTest API Postman Custome User Group\";",
													"pm.environment.set(\"customeGroupName\", `${customeGroupName}${uniqueStringFormat}`);",
													"pm.environment.set(\"description\", \"This is description\");",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"type": "text",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{customeGroupName}}\"\n    ,\n    \"user_ids\": [\n    \t{{userId2}}\n    ]\n   \n}"
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/groups",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"groups"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Create Site Template",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"",
													"// generator csrf token",
													"var base64object = function(input) {",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);",
													" return base64;",
													"};",
													"let uuid = require('uuid');",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());",
													"pm.environment.set(\"csrfToken\", token);",
													"// Function to add 0 before datetime value if it is less than 10",
													"Number.prototype.padLeft = function(base, chr) {",
													"   var len = (String(base || 10).length - String(this).length) + 1;",
													"   return len > 0 ? new Array(len).join(chr || '0') + this : this;",
													"};",
													"",
													"// Generate dynamic string for ProfileName",
													"let uniqueString = new Date(),",
													"    uniqueStringFormat = [(uniqueString.getMonth() + 1).padLeft(),",
													"       uniqueString.getDate().padLeft(),",
													"       uniqueString.getFullYear(),",
													"   ].join('') + '-' + [uniqueString.getHours().padLeft(),",
													"       uniqueString.getMinutes().padLeft(),",
													"       uniqueString.getSeconds().padLeft(),",
													"       uniqueString.getMilliseconds().padLeft()",
													"   ].join('');",
													"const templateName = \"qTest API Postman Site template \";",
													"pm.environment.set(\"templateName\", `${templateName}${uniqueStringFormat}`);",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseCode = 200;\r",
													"    \r",
													"pm.test(\"Response code: \" + pm.response.code, function(){\r",
													"    pm.response.to.have.status(responseCode);\r",
													"});\r",
													"    \r",
													"if (pm.response.code === responseCode) {\r",
													"   //get response body\r",
													"    var jsonData = pm.response.json();\r",
													"    \r",
													"    pm.test(\"Response data contains templateId \", function(){\r",
													"        pm.expect(pm.response.text()).to.include(\"templateId\");\r",
													"    });\r",
													"    pm.test(\"Response data contains name\", function(){\r",
													"        pm.expect(jsonData.name).to.eql(pm.environment.get(\"templateName\"));\r",
													"    });\r",
													"   \r",
													"    pm.environment.set(\"templateId1\", jsonData.templateId);\r",
													"} else {\r",
													"    //other mark failed\r",
													"     pm.test(\"Response code: \" + responseCode + \"\\n Reponse body: \" + pm.response.text(), function(){\r",
													"        pm.response.to.have.status(responseCode);\r",
													"    });\r",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											},
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}",
												"type": "text"
											},
											{
												"key": "x-csrf-token",
												"value": "{{csrfToken}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/sitetemplate/create-template?templateName={{templateName}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"sitetemplate",
												"create-template"
											],
											"query": [
												{
													"key": "templateName",
													"value": "{{templateName}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Main",
							"item": [
								{
									"name": "201 - Success with All required fields",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													" var responseCode = 201;",
													" const projectName = pm.environment.get(\"projectName1\");",
													" const isSample = false;",
													" const isAutomation = false;",
													" const explorerAccessLevel = 7;",
													" const dateFormat = 'yyyy.MM.dd';",
													" const uuid = \"\";",
													" const defectTrackingSystem = [];",
													" const statusId = 101;",
													" const startDate = pm.environment.get(\"startDate\").split(`T`)[0];",
													" const adminIds = [pm.environment.get(\"userId\")];",
													"",
													"if (pm.response.code === responseCode) {",
													"   //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"    ",
													"    pm.test(\"Response data has project id\", function(){",
													"        pm.expect(jsonData.id > 0).to.be.true;",
													"    });",
													"    pm.test(\"Response data contains project name\", function(){",
													"        pm.expect(jsonData.name).to.eql(projectName);",
													"    });",
													"    pm.test(\"Response data contains status id\" , function(){",
													"        pm.expect(jsonData.status_id).to.eql(statusId);",
													"    });",
													"    pm.test(\"Response data contains start date\" , function(){",
													"        pm.expect(jsonData.start_date).to.include(startDate);",
													"    });",
													"    pm.test(\"Response data contains admin_ids\" , function(){",
													"        pm.expect(jsonData.admin_ids).to.eql(adminIds);",
													"    });",
													"    pm.test(\"Response data contains sample: false\", function(){",
													"        pm.expect(jsonData.sample).to.eql(isSample);",
													"    });",
													"    pm.test(\"Response data contains defect_tracking_systems\" , function(){",
													"        pm.expect(jsonData.defect_tracking_systems).to.eql(defectTrackingSystem);",
													"    });",
													"    pm.test(\"Response data contains x_explorer_access_level\" , function(){",
													"        pm.expect(jsonData.x_explorer_access_level).to.eql(explorerAccessLevel);",
													"    });",
													"    pm.test(\"Response data contains date_format: yyyy.MM.dd\", function(){",
													"        pm.expect(jsonData.date_format).to.eql(dateFormat);",
													"    });",
													"    pm.test(\"Response data contains automation: false\", function(){",
													"        pm.expect(jsonData.automation).to.eql(isAutomation);",
													"    });",
													"    pm.test(\"Response data contains uuid\" , function(){",
													"        pm.expect(jsonData.uuid).to.eql(uuid);",
													"    });",
													"    ",
													"    pm.environment.set(\"projectId1\", jsonData.id);",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var startDate = new Date();",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"",
													"// Function to add 0 before datetime value if it is less than 10",
													"Number.prototype.padLeft = function(base, chr) {",
													"   var len = (String(base || 10).length - String(this).length) + 1;",
													"   return len > 0 ? new Array(len).join(chr || '0') + this : this;",
													"};",
													"",
													"// Generate dynamic string for ProfileName",
													"let uniqueString = new Date(),",
													"    uniqueStringFormat = [(uniqueString.getMonth() + 1).padLeft(),",
													"       uniqueString.getDate().padLeft(),",
													"       uniqueString.getFullYear(),",
													"   ].join('') + '-' + [uniqueString.getHours().padLeft(),",
													"       uniqueString.getMinutes().padLeft(),",
													"       uniqueString.getSeconds().padLeft(),",
													"       uniqueString.getMilliseconds().padLeft()",
													"   ].join('');",
													"const projectName = \"qTest API - Postman - \";",
													"pm.environment.set(\"projectName1\", `${projectName}${uniqueStringFormat}`);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"{{projectName1}}\",\n  \"start_date\": \"{{startDate}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Blank project name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseCode = 400;",
													"const errorMessage = \"Name cannot be empty\";",
													"",
													"if (pm.response.code === responseCode) {",
													"    var jsonData = pm.response.json();",
													"    //assert status",
													"    pm.test(\"Response status code should be 400-Bad Request\", function() {",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"    pm.test(`Response data contains error message: ${errorMessage}`, function() {",
													"        pm.expect(jsonData.message).to.include(errorMessage);",
													"    });",
													"",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var startDate = new Date();",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"\",\n  \"start_date\": \"{{startDate}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Invalid format of End date",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseCode = 400;",
													"const errorMessage = `Invalid format: \\\"${pm.environment.get('endDate')}123\\\"`;",
													"",
													"if (pm.response.code === responseCode) {",
													"    var jsonData = pm.response.json();",
													"    //assert status",
													"    pm.test(\"Response status code should be 400-Bad Request\", function() {",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"    pm.test(`Response data contains error message: ${errorMessage}`, function() {",
													"        pm.expect(jsonData.message).to.include(errorMessage);",
													"    });",
													"",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"end_date\": \"{{endDate}}123\",\n  \"admins\": [\n    \"{{username}}\"\n  ],\n  \"automation\": false,\n  \"template_id\": \"30\",\n  \"uuid\": \"uuid\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "400 - Invalid template_id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseCode = 400;",
													"const errorMessage = `template_id is not valid`;",
													"",
													"if (pm.response.code === responseCode) {",
													"    var jsonData = pm.response.json();",
													"    //assert status",
													"    pm.test(\"Response status code should be 400-Bad Request\", function() {",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"    pm.test(`Response data contains error message: ${errorMessage}`, function() {",
													"        pm.expect(jsonData.message).to.include(errorMessage);",
													"    });",
													"",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var startDate = new Date();",
													"var endDate = new Date();",
													"endDate.setDate(startDate.getDate() + 365);",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													"pm.environment.set('endDate', endDate.toISOString());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\",\n  \"description\": \"Description of qTest API - Postman\",\n  \"end_date\": \"{{endDate}}\",\n  \"admins\": [\n    \"{{username}}\"\n  ],\n  \"automation\": false,\n  \"template_id\": \"\",\n  \"uuid\": \"uuid\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								},
								{
									"name": "401 - Invalid access token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseCode = 401;",
													"const errorType = 'invalid_token';",
													"const errorDescription = `Invalid access token: 11111${pm.environment.get('accessToken')}`;",
													"",
													"if (pm.response.code === responseCode) {",
													"    var jsonData = pm.response.json();",
													"    //assert status",
													"    pm.test(\"Response status code should be 401-Unauthorized\", function() {",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"    pm.test(`Response data contains error type invalid_token`, function() {",
													"        pm.expect(jsonData.error).to.eql(errorType);",
													"    });",
													"    pm.test(`Response data contains error description`, function() {",
													"        pm.expect(jsonData.error_description).to.eql(errorDescription);",
													"    });",
													"} else {",
													"    //other mark failed",
													"    pm.test(\"Response status: \" + pm.response.code + \"\\n Response body: \" + pm.response.text(), function() {",
													"        pm.response.to.have.status(responseCode);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var startDate = new Date();",
													"",
													"pm.environment.set('startDate', startDate.toISOString());",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} 11111{{accessToken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"name\": \"qTest API - Postman\",\n  \"start_date\": \"{{startDate}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/api/v3/projects",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"api",
												"v3",
												"projects"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Cleanup",
							"item": [
								{
									"name": "200 - Cleanup - Delete project 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId1\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId1\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "text/plain",
												"type": "text"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId1}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											],
											"options": {
												"raw": {
													"language": "text"
												}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId2\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId2\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId2}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId3\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId3\");",
													"    pm.environment.unset(\"projectName3\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId3}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId4\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId4\");",
													"    pm.environment.unset(\"projectName4\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId4}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project 5",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId5\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId5\");",
													"    pm.environment.unset(\"projectName5\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId5}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete project 6",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"    var jsonData = pm.response.json();",
													"    ",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    pm.test(\"Delete project success without any errors\", function(){",
													"        pm.expect(jsonData.hasError.toString()).to.eql(\"false\");",
													"        pm.expect(jsonData.result.id).to.eql(pm.environment.get(\"projectId6\"));",
													"        pm.expect(jsonData.result.status).to.eql(\"Archive\");",
													"    });",
													"    pm.environment.unset(\"projectId6\");",
													"    pm.environment.unset(\"projectName6\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId6}}",
													"type": "text"
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/proj/delete-project",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"proj",
												"delete-project"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete Site Field Template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													" ",
													"    pm.environment.unset(\"idCustomeGroup\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": [
												{
													"key": "id",
													"value": "{{projectId5}}",
													"type": "text",
													"disabled": true
												},
												{
													"key": "dojo.preventCache",
													"value": "{{csrfToken}}",
													"type": "text",
													"disabled": true
												}
											]
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/sitetemplate/{{templateId1}}/delete",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"sitetemplate",
												"{{templateId1}}",
												"delete"
											]
										}
									},
									"response": []
								},
								{
									"name": "200 - Cleanup - Delete Custom User Group",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code === 200) {",
													"    //get response body",
													"",
													"    pm.test(\"Response code: \" + pm.response.code, function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													" ",
													"    pm.environment.unset(\"idCustomGroup\");",
													"} else {",
													"    //other mark failed",
													"     pm.test(\"Response code: \" + pm.response.code + \"\\n Reponse body: \" + pm.response.text(), function(){",
													"        pm.response.to.have.status(200);",
													"    });",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// generator csrf token\r",
													"var base64object = function(input) {\r",
													" var inputWords = CryptoJS.enc.Utf8.parse(JSON.stringify(input));\r",
													" var base64 = CryptoJS.enc.Base64.stringify(inputWords);\r",
													" return base64;\r",
													"};\r",
													"let uuid = require('uuid');\r",
													"let token = uuid.v4() + \"QAS\" + base64object(Date.now());\r",
													"pm.environment.set(\"csrfToken\", token);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Cookie",
												"value": "{{qtestUserCookie}}"
											},
											{
												"key": "X-CSRF-Token",
												"value": "{{csrfToken}}"
											}
										],
										"body": {
											"mode": "urlencoded",
											"urlencoded": []
										},
										"url": {
											"raw": "{{qtestUrl}}/admin/user-groups/custom/{{idCustomGroup}}",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"admin",
												"user-groups",
												"custom",
												"{{idCustomGroup}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "201 - Logout success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response code: \" + pm.response.code, function(){",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//clean up environment variables",
													"pm.environment.unset(\"startDate\");",
													"pm.environment.unset(\"endDate\");",
													"pm.environment.unset(\"csrfToken\");",
													"pm.environment.unset(\"qtestUserCookie\");",
													"pm.environment.unset(\"userId\");",
													"pm.environment.unset(\"accessToken\");",
													"pm.environment.unset(\"tokenType\");",
													"pm.environment.unset(\"email1\");",
													"pm.environment.unset(\"firstName1\");",
													"pm.environment.unset(\"lastName1\");",
													"pm.environment.unset(\"username1\");",
													"pm.environment.unset(\"userId1\");",
													"pm.environment.unset(\"projectName1\");",
													"pm.environment.unset(\"customeGroupName\");",
													"pm.environment.unset(\"description\");",
													"pm.environment.unset(\"templateName\");",
													"pm.environment.unset(\"templateId1\");",
													"//clean up environment variables",
													"pm.environment.unset(\"startDate\");",
													"pm.environment.unset(\"endDate\");",
													"pm.environment.unset(\"csrfToken\");",
													"pm.environment.unset(\"qtestUserCookie2\");",
													"pm.environment.unset(\"userId2\");",
													"pm.environment.unset(\"accessToken2\");",
													"pm.environment.unset(\"tokenType2\");",
													"",
													"pm.environment.unset(\"username2\");",
													"pm.environment.unset(\"firstName2\");",
													"pm.environment.unset(\"lastName2\");",
													"pm.environment.unset(\"projectName2\");",
													"pm.environment.unset(\"startDate\");",
													"pm.environment.unset(\"endDate\");",
													"pm.environment.unset(\"csrfToken\");",
													"pm.environment.unset(\"qtestUserCookie3\");",
													"pm.environment.unset(\"userId3\");",
													"pm.environment.unset(\"accessToken3\");",
													"pm.environment.unset(\"tokenType3\");",
													"",
													"pm.environment.unset(\"username3\");",
													"pm.environment.unset(\"firstName3\");",
													"pm.environment.unset(\"lastName3\");",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "{{tokenType}} {{accessToken}}"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{qtestUrl}}/oauth/revoke",
											"host": [
												"{{qtestUrl}}"
											],
											"path": [
												"oauth",
												"revoke"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				}
			]
		}
	]
}